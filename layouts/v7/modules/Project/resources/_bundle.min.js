var Vtiger_Component_QuickCreateModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    inheritAttrs: !1,
    props: {
        module: {required: !0, default: ""},
        record: {type: [String, Object]},
        postQuickCreateSave: {
            type: Function, default: () => {
            }
        },
        showSaveAndContinueBtn: {type: Boolean, default: !0},
        asyncState: {type: Boolean, default: !1},
        recordData: {
            type: Object, default: () => {
            }
        },
        title: {type: String, default: ""},
        moduleApp: {type: String, default: ""}
    },
    data: () => ({formId: "quickCreate", showDiscardOption: !1, displayedOnce: !1, isSaveOperation: !1}),
    computed: {
        modalTitle() {
            var e = this.translate("LBL_QUICK_CREATE", "Settings:LayoutEditor") + " > " + this.translate("SINGLE_" + this.module, this.module);
            return this.title && (e = this.title + " > " + this.translate("SINGLE_" + this.module, this.module)), e
        }, quickCreateComponent() {
            return App.loadComponent("QuickCreateModalContents", this.module, this.asyncState)
        }
    },
    methods: {
        closeModal(e) {
            e && (this.isSaveOperation = !0), this.$refs.quickCreate.hide()
        }, dismissModalConfirmation(e) {
            if (this.showDiscardOption && !this.displayedOnce && !this.isSaveOperation) {
                e.preventDefault();
                this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        message: this.translate("JS_CHANGES_MAY_BE_LOST") + "  " + this.translate("JS_WISH_TO_PROCEED"),
                        onConfirm: e => {
                            this.displayedOnce = !0, this.$refs.quickCreate.hide()
                        }
                    },
                    modalOnModalMode: !1
                })
            }
        }
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "quickCreate",
            attrs: {
                id: formId,
                lazy: !0,
                size: "lg",
                "hide-footer": "",
                title: modalTitle,
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "px-0 pt-0",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            },
            on: {
                hide: function (e) {
                    return dismissModalConfirmation(e)
                }
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c(quickCreateComponent, _b({
            ref: "quickCreateModalContents",
            tag: "component",
            attrs: {
                module: module,
                record: record,
                "record-data": recordData,
                saveAndContinueBtn: showSaveAndContinueBtn,
                "modal-id": formId
            },
            on: {
                "vds::post::quickcreate::save": postQuickCreateSave,
                "vds::close::quick::create::modal": closeModal,
                "vds::enable::discard::confirmation::option": function (e) {
                    showDiscardOption = !0
                }
            }
        }, "component", $attrs, !1))], 1)
    }
});
var Vtiger_Component_StringEdit = App.vtComponent.extend({
    inject: ["$validator"],
    data: () => ({stopWatching: !1}),
    props: {
        field: [Object, Array],
        record: [Object, Array],
        fieldName: String,
        readonly: {type: Boolean, default: !1},
        placeHolder: {type: [String, Object]},
        classAttrs: {type: [String, Object], default: "form-control"},
        isFieldLocked: {type: Boolean, Default: !1},
        errorTextTruncate: {type: Boolean, Default: !0}
    },
    computed: {
        getFieldName() {
            return this.fieldName ? this.fieldName : this.field.name
        }, recordValue: {
            get() {
                return this.record[this.getFieldName]
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }, selectedValue() {
            return this.record[this.getFieldName] ? this.record.getEditViewValue(this.fieldName) : ""
        }
    },
    methods: {
        validateFields() {
            this.$emit("vds::form::validate"), this.stopWatching = !0
        }, handleOnFocus(e) {
            this.stopWatching = !this.recordValue, this.$root.$emit("vds::element::focused", e)
        }, isFieldSpecificReadOnly() {
            return this.$attrs.fieldSpecificProps && this.$attrs.fieldSpecificProps[this.fieldName] && this.$attrs.fieldSpecificProps[this.fieldName].readonly
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            class: classAttrs,
            attrs: {name: field.name, placeholder: placeHolder, disabled: readonly || isFieldLocked, type: "text"},
            domProps: {value: recordValue},
            on: {
                focus: function (e) {
                    return handleOnFocus(e)
                }, focusout: function (e) {
                    return validateFields()
                }, input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !field.isCompositeChild && !field.isCompositeParent && errors.has(field.name),
                expression: "(!field.isCompositeChild && !field.isCompositeParent) && errors.has(field.name)"
            }], staticClass: "text-danger position-absolute", class: errorTextTruncate ? "text-truncate" : ""
        }, [_v(_s(errors.first(field.name)))])])
    },
    watch: {
        recordValue() {
            this.stopWatching || this.$emit("vds::form::validate")
        }
    },
    $_veeValidate: {
        value() {
            return this.recordValue
        }, name() {
            return this.fieldName
        }, alias() {
            return this.field ? this.field.label : this.fieldName
        }
    }
});
var Vtiger_Component_PopupReferenceList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter, Vtiger_Mixin_ModuleModel, Vtiger_Mixins_UnimplementedModulesList],
    components: {"vds-comingsoon-view": App.loadComponent("ComingsoonView")},
    props: {
        module: {type: String},
        multiple: {type: Boolean, default: !1},
        fieldname: {type: String},
        parentModule: {type: String, default: ""},
        extraReferenceParameters: {type: Object},
        extraFields: {default: () => []},
        ignoreLinkedRecords: {type: Boolean, default: !0},
        q: {type: [String]}
    },
    data: () => ({
        selectedRecordModels: {},
        selectedRecords: [],
        namespaceStore: "popup",
        viewType: "List",
        selectedRecordCount: 0,
        allowLinkingClosedRecords: !0,
        filterQuery: {allfilter: !0}
    }),
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }, getHeader() {
            return this.translate(this.module, this.module)
        }, extraReferenceParams() {
            let e = {};
            return e = this.extraReferenceParameters && Object.keys(this.extraReferenceParameters).length ? this.extraReferenceParameters : {
                src_module: this.parentModule,
                src_record: _.isUndefined(this.$id) || !this.ignoreLinkedRecords ? "" : this.$id,
                src_field: _.isUndefined(this.fieldname) ? "" : this.fieldname
            }, this.moduleModel && this.moduleModel.closedStateDetails && !parseInt(this.moduleModel.closedStateDetails.allow_relations) && (e.ignoreclosed = 1, this.allowLinkingClosedRecords = !1), e
        }, getLookUpSearchLabel() {
            let e = this.moduleModel.getReferenceFields(), t = [];
            for (let s in e) {
                let l = e[s];
                t = _.union(t, l.referenceModuleList)
            }
            let s = this.appStore.get("extraListParams", !1);
            if (s && s.lookup_search_params) {
                let e = s.lookup_search_params, o = [];
                for (var l in e) {
                    let s = e[l + "_referenceObject"], i = s.module;
                    "Tasks" == i && (i = "Calendar"), t.includes(i) && o.push(s.label)
                }
                return o.length > 0 ? o.join(" OR ") : ""
            }
            return ""
        }
    },
    created: function () {
        this.init(), this.$options.components["vds-list-view"] = App.loadComponent("ListView", this.$module)
    },
    methods: {
        init() {
            this.$root.$on("vds::popup::hide", () => {
                this.$refs.popupModal && this.$refs.popupModal.hide()
            })
        }, rowSelected(e, t) {
            if (this.multiple) {
                let e = t.getId();
                this.selectedRecords.includes(e) || this.selectedRecords.push(e), t && 1 == this.selectedRecords.length && (this.$root.$emit("vds::popup::hide"), this.$emit("vds::popup:record::selected", this.selectedRecords, t))
            } else this.$root.$emit("vds::popup::hide"), this.$emit("vds::popup:record::selected", t.getId(), t)
        }, selectedAllRecords(e, t) {
            t && (this.selectedRecords = t, this.selectedRecordCount = Object.keys(t).length)
        }, listSelectedRecordModels(e) {
            this.selectedRecordModels = e, this.selectedRecordCount = Object.keys(e).length
        }, recordSelect(e, t) {
            for (let e in this.selectedRecords) {
                let s = this.selectedRecords[e];
                t.includes(parseInt(s)) || this.selectedRecords.splice(e, 1)
            }
        }, emitSelectedRecords() {
            this.$root.$emit("vds::popup::hide"), this.$emit("vds::popup:record::selected", Object.keys(this.selectedRecordModels), Object.values(this.selectedRecordModels))
        }, componentInstance() {
            return App.getDynamicComponentInstance("ListView", this.module)
        }, getDefaultSearchParams: () => [], clearReferenceLookup() {
            let e = this.appStore.get("extraListParams", !1);
            if (e && e.lookup_search_params) {
                let t = e;
                t.lookup_search_params = {}, this.appStore.set({
                    key: "extraListParams",
                    data: t
                }), this.$refs.listView.loadList(), this.$refs.listView.loadCount()
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "popupModal",
            attrs: {
                lazy: !0,
                size: "xl",
                "modal-class": "popupReferenceList",
                title: getHeader,
                "hide-footer": "",
                "header-class": "bgLtGrey px-4",
                "body-class": "refListPopup px-1 pb-0"
            }
        }, [comingSoonModules.includes(module) ? _c("div", [_c("vds-comingsoon-view", {attrs: {"is-subview": !0}})], 1) : _c("div", [allowLinkingClosedRecords ? _e() : _c("div", {staticClass: "py-3 rounded px-2 bg-blue-3 mx-3 mb-2"}, [_c("div", {staticClass: "d-flex"}, [_c("div", [_c("i", {staticClass: "fa fa-info-circle px-2 text-primary"})]), _v(" "), _c("div", {staticClass: "flex-grow-1"}, [_v("\n                            " + _s(translate("LBL_REF_POPUP_MSG", "ClosedState", translate($module, $module), translate($module, $module))) + "\n    \t\t\t\t\t")])])]), _v(" "), _c("div", {staticClass: "d-flex px-4 py-1"}, ["" != getLookUpSearchLabel ? _c("div", [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_POPUP_FILTER_MSG", $module, translate($module, $module), getLookUpSearchLabel)) + "  \n\t\t\t\t\t\t"), _c("a", {
            attrs: {href: "javascript:void(0)"},
            on: {click: clearReferenceLookup}
        }, [_v(" \n\t\t\t\t\t\t\t" + _s(translate("LBL_SHOW_ALL_RESULTS", $module)) + "\n\t\t\t\t\t\t")])]) : _e()]), _v(" "), _c("vds-list-view", _b({
            ref: "listView",
            attrs: {
                q: q,
                isMultiSelectable: multiple,
                module: module,
                isFollowingAllowed: !1,
                manageColumns: !1,
                viewtype: viewType,
                filterQuery: filterQuery,
                mode: "compact",
                "extra-reference-listparams": extraReferenceParams,
                defaultSearchParams: getDefaultSearchParams(),
                extraFields: extraFields,
                "show-empty-state-action": !1,
                "allow-field-actions": !1
            },
            on: {
                vt_list_row_click: rowSelected,
                vt_all_list_record_selected: selectedAllRecords,
                vt_list_record_selected: recordSelect,
                vt_list_selected_record_models: listSelectedRecordModels
            }
        }, "vds-list-view", $attrs, !1)), _v(" "), selectedRecordCount ? _c("div", {staticClass: "d-flex justify-content-end multiSelectPopup"}, [multiple ? _c("button", {
            staticClass: "d-flex btn btn-primary mr-3 align-items-center mb-4",
            on: {click: emitSelectedRecords}
        }, [_c("span", {staticClass: "px-2"}, [_v(_s(translate("LBL_ADD_SELECTED", $module)))]), _v(" "), _c("div", {staticClass: "selectedRecordCount d-flex align-items-center justify-content-center text-primary"}, [_v(_s(selectedRecordCount))])]) : _e()]) : _e()], 1)])
    }
});
var Vtiger_Component_DetailHeaderFields = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_AjaxEditRestrictedModules],
    components: {
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-more-headers": App.loadComponent("DetailMoreHeaderFields"),
        "vds-header-field-edit": App.loadComponent("DetailHeaderFieldEdit")
    },
    props: {
        recordModel: {type: Object},
        onlyHeaderFields: {type: Boolean, default: !1},
        hideLabels: {type: Boolean, default: !1}
    },
    data: () => ({
        HEADER_FIELDS_LIMIT: 5,
        fieldTypeArray: [],
        compositeFields: ["phone", "email"],
        excludeFields: [],
        headerFields: {},
        fieldModel: {},
        fieldName: ""
    }),
    watch: {
        $_detailRecordModel() {
            this.fieldTypeArray = []
        }
    },
    mounted() {
        this.$on("vds::header::field::edit::closed", e => {
            e && (Vue.set(this, "fieldName", ""), Vue.set(this, "fieldModel", {}))
        })
    },
    computed: {
        isDeepDiveEditEnabled() {
            return this.appStore.get("deepdive_save_button_show")
        }, computedRecordModel() {
            return this.recordModel ? this.recordModel : this.$_detailRecordModel
        }, getHeaderFields() {
            let e = this.detailViewHeaderFields;
            for (let d in e) {
                let i = e[d].fieldType;
                "richtext" != i && (this.computedRecordModel.getDisplayValue(d) && this.fieldTypeArray.length < this.HEADER_FIELDS_LIMIT && ("email" == i || "phone" == i ? (this.fieldTypeArray.includes(i) || this.fieldTypeArray.push(i), Vue.set(this.headerFields, d, e[d])) : (this.fieldTypeArray.push(i), Vue.set(this.headerFields, d, e[d]))))
            }
            for (let e in this.compositeFields) if (this.fieldTypeArray.includes(this.compositeFields[e])) {
                var d = this.$_currentModuleModel.getFieldsOfType(this.compositeFields[e]);
                for (let e in d) Vue.set(this.headerFields, e, this.$_currentModuleModel.getField(e))
            }
            return this.headerFields
        }, getMoreHeaderFields() {
            let e = {}, d = this.detailViewHeaderFields;
            for (let i in d) {
                "richtext" != d[i].fieldType && (this.computedRecordModel.getDisplayValue(i) && !Object.keys(this.getHeaderFields).includes(i) && Vue.set(e, i, d[i]))
            }
            return e
        }, detailViewHeaderFields() {
            let e = {}, d = this.$_currentModuleModel, i = d.getHeaderFields();
            if (i && !Object.keys(i).includes("assigned_user_id")) {
                let e = d.getField("assigned_user_id");
                e && e.isLoaded && e.isViewable && (i = Object.assign({assigned_user_id: e}, i))
            }
            let t = d.getSummaryFields();
            e = Object.assign(i, t);
            let l = e.assigned_user_id;
            Vue.delete(e, "assigned_user_id"), l && l.isLoaded && (e = Object.assign({assigned_user_id: l}, e));
            let s = this.$_currentModuleModel.getHeaderProgressionFields();
            "" != s && this.excludeFields.push(s.sourceField, s.targetField);
            let o = this.$_currentModuleModel.getLabelFields();
            this.excludeFields = this.excludeFields.concat(o);
            for (let d of this.excludeFields) delete e[d];
            return e
        }
    },
    methods: {
        setFieldEdit(e) {
            Vue.set(this, "fieldName", e.fieldname)
        }, resetField() {
            Vue.set(this, "fieldName", "")
        }
    },
    watch: {
        fieldModel: {
            handler(e) {
                Vue.set(this, "fieldName", e.fieldname)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "container-fluid"}, [_c("div", {staticClass: "row flex-wrap"}, [_c("div", {staticClass: "col p-0 d-flex align-items-center"}, [_l(getHeaderFields, (function (e) {
            return e.isViewableInDetail && !e.isCompositeParent ? _c("div", {
                staticClass: "d-flex align-items-center mw-220 headerField",
                staticStyle: {"min-width": "0px"}
            }, [$isLoading ? [_c("vds-value-progress")] : [_c("div", {staticClass: "d-flex align-items-center mw-220 text-truncate w-100"}, ["assigned_user_id" == e.fieldname ? _c("vds-field-display", {
                attrs: {
                    "class-name": "d-flex align-items-center headerFields",
                    "is-compact": "true",
                    view: "list",
                    record: computedRecordModel,
                    field: e,
                    modulemodel: $_currentModuleModel,
                    "show-icon": !1,
                    title: e.label
                }
            }) : _c("vds-field-display", {
                attrs: {
                    "class-name": "d-flex align-items-center headerFields",
                    "is-compact": "true",
                    view: "header",
                    record: computedRecordModel,
                    field: e,
                    modulemodel: $_currentModuleModel,
                    "show-icon": !0,
                    title: e.label
                }
            })], 1), _v(" "), _c("span", {
                staticClass: "editIcon mx-2 c-pointer opacity-0", on: {
                    click: function (d) {
                        return setFieldEdit(e)
                    }
                }
            }, [!fieldName && e.editable && computedRecordModel && !computedRecordModel.isClosed && computedRecordModel.isEditable && !isDeepDiveEditEnabled && !computedRecordModel.isRecordLocked && isAjaxEditAllowed ? _c("i", {staticClass: "fa-pencil text-primary"}) : _e()]), _v(" "), fieldName && fieldName == e.name ? _c("span", {
                staticClass: "c-pointer mx-2 text-primary",
                on: {click: resetField}
            }, [_c("i", {staticClass: "fa-times"})]) : _e(), _v(" "), fieldName && fieldName == e.name ? _c("div", [_c("vds-header-field-edit", {
                attrs: {
                    field: e,
                    record: computedRecordModel
                }
            })], 1) : _e()]], 2) : _c("div", [e.isCompositeChild ? _e() : _c("div", {staticClass: "d-flex align-items-center headerField"}, [_c("div", [e.isCompositeChild ? _e() : _c("vds-field-display", {
                attrs: {
                    "class-name": "d-flex align-items-center",
                    record: computedRecordModel,
                    field: e,
                    modulemodel: $_currentModuleModel,
                    view: "header",
                    "show-icon": !0,
                    title: e.label
                }
            })], 1), _v(" "), _c("span", {
                staticClass: "editIcon mx-2 c-pointer opacity-0", on: {
                    click: function (d) {
                        return setFieldEdit(e)
                    }
                }
            }, [e.isCompositeChild || fieldName || !computedRecordModel || computedRecordModel.isClosed || !computedRecordModel.isEditable || isDeepDiveEditEnabled || computedRecordModel.isRecordLocked || !isAjaxEditAllowed ? _e() : _c("i", {staticClass: "fa-pencil text-primary"})]), _v(" "), fieldName && fieldName == e.name ? _c("span", {
                staticClass: "c-pointer mx-2 text-primary",
                on: {click: resetField}
            }, [_c("i", {staticClass: "fa-times"})]) : _e(), _v(" "), !e.isCompositeChild && fieldName && fieldName == e.name ? _c("div", [_c("vds-header-field-edit", {
                attrs: {
                    record: computedRecordModel,
                    field: e
                }
            })], 1) : _e()])])
        })), _v(" "), !Object.keys(getMoreHeaderFields).length || onlyHeaderFields || $isLoading ? _e() : _c("vds-more-headers", {
            attrs: {
                fieldModel: fieldModel,
                moreHeaders: getMoreHeaderFields,
                "record-model": computedRecordModel
            }, on: {
                "update:fieldModel": function (e) {
                    fieldModel = e
                }, "update:field-model": function (e) {
                    fieldModel = e
                }
            }
        }), _v(" "), _c("div", {staticClass: "mx-2"}, [!fieldModel.isCompositeChild && fieldName && fieldName == fieldModel.name ? _c("vds-header-field-edit", {
            attrs: {
                "show-close-icon": !0,
                field: fieldModel
            }
        }) : _e()], 1)], 2)])])
    }
});
Vtiger_Component_ReferenceEdit = Vtiger_Component_StringEdit.extend({
    name: "vds-reference-edit",
    props: {createAllowed: {type: Boolean, default: !0}},
    data: () => ({selectedModule: null, isMultiReference: !1}),
    mounted() {
        let e = this.field.name;
        setTimeout(() => {
            this.$watch(() => ({fieldName: e, fieldValue: this.record[e]}), ({fieldName: e, fieldValue: t}, l) => {
                let r = this.$refs.reference.$refs.select2, i = "", d = [];
                r && (i = this.$refs.reference.$refs.select2.$el), i && jQuery(i).length > 0 && jQuery(i).data("select2") && (d = jQuery(i).select2("data")), r && d && t && t.length > d.length && (r.clear(), r.markSelected(t))
            })
        }, 1e3), this.isMultiModuleReference && this.$watch(() => this.record[this.field.name] ? {
            referenceModule: this.record[this.field.name].module,
            fieldName: this.field.name
        } : {referenceModule: "", fieldName: this.field.name}, () => {
            !_.isUndefined(this.record[this.field.name]) && this.record[this.field.name].module && (this.selectedModule = this.record[this.field.name].module)
        })
    },
    computed: {
        isMultiModuleReference() {
            return this.field.referenceModuleList.length > 1
        }, getDefaultModuleValue() {
            return this.field.referenceModuleList.includes("Project") && "Tasks" == this.$module ? "Project" : this.field.referenceModuleList[0]
        }, referenceModule: {
            get() {
                let e = this.record.get(this.field.name);
                return null != this.selectedModule ? this.selectedModule : !e || _.isUndefined(e) || null === e.module || _.isUndefined(e.module) ? this.getDefaultModuleValue : this.record.get(this.field.name).module
            }, set(e) {
                this.selectedModule = e
            }
        }, referenceRecord: {
            get() {
                let e = this.record[this.getFieldName];
                if (_.isArray(e)) {
                    let t = [];
                    return e.forEach(e => {
                        if (!_.isUndefined(e.deleted) && 1 == parseInt(e.deleted) || !e.label) return;
                        let l = Vtiger_Record_Model.getCleanInstance(e.module, e);
                        l.text = l.id, t.push(l)
                    }), t
                }
                return e ? e.module ? !_.isUndefined(e.deleted) && 1 == parseInt(e.deleted) || !e.label ? Vtiger_Record_Model.getCleanInstance(this.referenceModule, {}) : Vtiger_Record_Model.getCleanInstance(e.module, e) : Vtiger_Record_Model.getCleanInstance(this.referenceModule, {}) : {}
            }, set(e) {
                _.isArray(e) || (e = [e]);
                var t = this.record[this.fieldName];
                t && 0 != t && !_.isUndefined(t) || (Vue.set(this.record, this.fieldName, {}), t = []);
                var l = _.isArray(t) ? [...t] : t;
                let r = e => {
                    if (e && e.id) if (this.isMultiReference) {
                        let t = {id: e.id, label: e.label, module: e.moduleName, record: e, text: e.id};
                        _.isArray(l) || (l = []);
                        let r = !1;
                        l.forEach(t => {
                            r || t.id == e.id && (r = !0)
                        }), r || l.push(t)
                    } else Vue.set(this.record, this.fieldName, {
                        id: e.id,
                        module: e.moduleName,
                        label: e.label,
                        record: e
                    }); else {
                        let e = {module: null, id: "0", label: null};
                        Vue.set(this.record, this.fieldName, e)
                    }
                };
                e.forEach(e => {
                    r(e)
                }), this.isMultiReference && Vue.set(this.record, this.fieldName, l)
            }
        }, extraFields() {
            let e = [];
            if (this.field && this.field.referenceAutoFillInfo) {
                let t = this.field.referenceAutoFillInfo;
                for (let l in t) e.push(t[l].parentfieldname)
            }
            return _.uniq(e)
        }, getLookupSearchFields() {
            let e = this.field._moduleModel, t = {};
            return e && e.lookupSearchFields && e.lookupSearchFields.forEach(e => {
                this.record && this.record[e] && "0" != this.record[e].id && (t[e] = this.record[e].id)
            }), t
        }, ignoreIds: () => []
    },
    watch: {
        referenceModule(e) {
            !_.isUndefined(this.record[this.field.name]) && this.record[this.field.name].module && this.record[this.field.name].module != e && (this.referenceRecord = Vtiger_Record_Model.getCleanInstance(e))
        }
    },
    methods: {
        filterableFields() {
            let e = this.field._moduleModel, t = {};
            if (e) {
                let r = e.popupLookUpSearchFields;
                for (var l in r) {
                    let e = r[l], i = this.record.get(e);
                    e != this.field.name && i && "0" != i.id && (t[e] = i.id, Object.defineProperty(t, e + "_referenceObject", {value: i}))
                }
            }
            let r = this.appStore.get("extraListParams");
            return r = r || {}, r.lookup_search_params = t, this.appStore.set({key: "extraListParams", data: r}), t
        }, unselectRecord(e) {
        }, selectFieldLoaded() {
        }, isCreateAllowed() {
            return this.createAllowed
        }, selectedReferenceRecord(e) {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {
            staticClass: "d-flex align-items-center",
            class: {multiModuleReferenceField: isMultiModuleReference}
        }, [isMultiModuleReference ? _c("span", {staticClass: "col-4 p-0 multiModuleReferenceDropdown"}, [_c("v-select2", {
            attrs: {
                options: field.referenceListOptions,
                emptyOption: !1
            }, model: {
                value: referenceModule, callback: function (e) {
                    referenceModule = e
                }, expression: "referenceModule"
            }
        })], 1) : _e(), _v(" "), _c("vds-reference", {
            ref: "reference",
            attrs: {
                "parent-module": $module,
                module: referenceModule,
                "field-name": getFieldName,
                extraFields: extraFields,
                "lookup-search-fields": getLookupSearchFields,
                ignoreids: ignoreIds,
                "is-multi-reference": isMultiReference,
                "select-multiple": isMultiReference,
                "create-allowed": isCreateAllowed()
            },
            on: {
                "select2-loaded": selectFieldLoaded,
                "vds::referenceModal::show": filterableFields,
                "vds::reference::unselected": unselectRecord,
                "vds::reference::selected": selectedReferenceRecord
            },
            model: {
                value: referenceRecord, callback: function (e) {
                    referenceRecord = e
                }, expression: "referenceRecord"
            }
        })], 1), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    }
});
var Vtiger_Component_BaseDisplay = App.vtComponent.extend({
    name: "BaseDisplay",
    props: {
        record: {type: Object},
        fieldname: {type: String},
        fieldModel: {type: Object},
        view: {type: String},
        isCompact: {type: [Boolean, String]},
        showIcon: {type: Boolean}
    }
});
var Vtiger_Component_StringDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    name: "StringDiplay",
    props: {
        record: {type: Object},
        fieldname: {type: String},
        fieldModel: {type: Object},
        view: {type: String},
        isCompact: {type: [Boolean, String]},
        showIcon: {type: Boolean}
    },
    render: (e, {props: t, parent: a}) => e("span", {
        class: ["fieldDisplayValue text-break", "header" == t.view || "moreHeaderDropDown" == t.view ? "text-truncate d-block" : ""],
        attrs: {"data-name": t.fieldname}
    }, [t.record.getDisplayValue(t.fieldname)])
});
var Vtiger_Component_OwnerEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_UsersUtils],
    props: {
        multiple: {type: Boolean, default: !1},
        value: {type: [String, Array]},
        extraOptions: {type: Object},
        usersOfGroup: {type: Boolean, default: !1},
        columnCondition: {type: Object, default: () => ({})},
        emptyOption: {type: Boolean, default: !1},
        maximumSelectionLength: {type: [Number], default: 0}
    },
    data: () => ({usersAndGroups: {}}),
    computed: {
        recordValue: {
            get() {
                if (this.record) {
                    let e = this.record[this.getFieldName] && this.record[this.getFieldName].id;
                    if (this.multiple || this.field.multiple) {
                        e = [];
                        let s = this.record[this.getFieldName];
                        for (let t in s) {
                            let i = s[t];
                            e.push(i.id)
                        }
                    }
                    return e
                }
                return this.value && this.value.length ? this.value : ""
            }, set(e) {
                if (this.$emit("input", e), this.record) {
                    this.record[this.getFieldName] || Vue.set(this.record, this.getFieldName, {}), "" == e && Vue.set(this.record, this.getFieldName, "");
                    let s = {};
                    for (let e in this.usersAndGroups) {
                        let t = this.usersAndGroups[e];
                        for (let i of t) s[i.value] = {id: i.value, module: e, label: i.label}
                    }
                    if (this.multiple || this.field.multiple) {
                        let t = [];
                        for (let i in e) {
                            let r = e[i];
                            s[r] && t.push(s[r])
                        }
                        Vue.set(this.record, this.getFieldName, t)
                    } else s[e] && Vue.set(this.record, this.getFieldName, s[e])
                }
            }
        }, fieldKey() {
            let e = this.translate("LBL_USERS"), s = this.translate("LBL_GROUPS"), t = this.field.name,
                i = this.usersAndGroups;
            return i[e] && (t += "_" + i[e].length), i[s] && (t += "_" + i[s].length), t
        }
    },
    created() {
        this.initUsersAndGroups()
    },
    methods: {
        selectFieldLoaded() {
            this.$bubble("select-field-loaded", this.getFieldName)
        }, initUsersAndGroups() {
            let e = this.translate("LBL_USERS"), s = this.translate("LBL_GROUPS");
            if (this.field && this.field.picklistValues) {
                let t = JSON.parse(JSON.stringify(this.field.picklistValues));
                t.users && Vue.set(this.usersAndGroups, e, t.users), t.groups && Vue.set(this.usersAndGroups, s, t.groups)
            } else {
                let e = this.appStore.get("users_groups_info");
                _.isUndefined(e) || _.isEmpty(e) ? this.appStore.request("api_get", {
                    url: "records",
                    params: {module: "Users", shared: "1"},
                    key: "users_groups_info"
                }).then(e => {
                    this.usersAndGroups = this.filterUsersAndGroups(e), "reference" == this.field.type.name && this.field.type.relatedModules.includes("Users") && (delete this.usersAndGroups.Groups, delete this.usersAndGroups["Users of Group"])
                }) : (this.usersAndGroups = this.filterUsersAndGroups(e), "reference" == this.field.type.name && this.field.type.relatedModules.includes("Users") && (delete this.usersAndGroups.Groups, delete this.usersAndGroups["Users of Group"]))
            }
            if (this.extraOptions && this.usersAndGroups[e]) {
                let s = this.extraOptions.Users;
                s.length && s.forEach(s => {
                    this.usersAndGroups[e].push(s)
                })
            }
            let t = this.getGroups();
            if (this.usersOfGroup && t) {
                let e = this.translate("LBL_USERS_OF_GROUP");
                this.usersAndGroups[e] = this.getUsersOfGroups(t)
            }
        }, showEmptyOption() {
            return !(!this.field.isCustomField || this.field.isCoownerField) || this.emptyOption
        }, getGroups() {
            let e = this.translate("LBL_GROUPS"), s = [];
            return this.usersAndGroups[e] ? s = this.usersAndGroups[e] : _.isUndefined(this.field.allOwners.groups) || (s = this.field.allOwners.groups), s
        }
    },
    watch: {
        "field.picklistValues": {
            handler() {
                this.initUsersAndGroups()
            }, deep: !0
        }
    },
    render: function anonymous() {
        with (this) return _c("span", [_c("v-select2", {
            key: fieldKey,
            ref: "owner",
            attrs: {
                name: field.name,
                disabled: isFieldLocked || readonly,
                multiple: multiple || field.multiple,
                options: usersAndGroups,
                emptyOption: showEmptyOption(),
                "maximum-selection-length": maximumSelectionLength
            },
            on: {"select2-loaded": selectFieldLoaded},
            model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])], 1)
    }
}), Vtiger_Component_CoownerEdit = Vtiger_Component_OwnerEdit.extend({
    props: {
        multiple: {type: Boolean, default: !0},
        maximumSelectionLength: {type: [Number], default: 3}
    }
});
var Vtiger_Component_PicklistDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, methods: {
        getDisplayValue(e) {
            let {props: t, parent: l} = e, a = t.record.getDisplayValue(t.fieldname);
            if ("approval_status" === t.fieldname && "Auto Approved" === a) return {label: a};
            let n = t.fieldModel.allPicklistValues, o = "";
            return n && a && Object.keys(n).forEach((function (e) {
                n[e] && n[e].value && n[e].value.toString() === a.toString() && (o = n[e])
            })), o && (a = o), null == a ? a = {color: "", label: "", value: ""} : _.isString(a) && (a = {
                color: "",
                label: a,
                value: a
            }), a
        },
        getTextColor: e => e ? (e = e.replace("#", "", e), (299 * parseInt(e.substr(0, 2), 16) + 587 * parseInt(e.substr(2, 2), 16) + 114 * parseInt(e.substr(4, 2), 16)) / 1e3 >= 128 ? "text-dark" : "text-white") : ""
    }, render(e, t) {
        let l, {props: a, parent: n} = t;
        if (a.component) l = a.component; else {
            if (!a.componentName) return e("span", {}, []);
            l = App.getDynamicComponentInstance(a.componentName, a.componentModule)
        }
        let o = l.options.methods, r = o.getDisplayValue.call(n, t);
        var i = n.translate(r.label), s = r.color;
        return e("span", {
            class: ["fieldDisplayValue picklistValue " + o.getTextColor.call(n, s), s ? " badge badge-pill " : ""],
            attrs: {"data-name": a.fieldname, title: i},
            style: {fontSize: s ? ".8125rem" : "", backgroundColor: s}
        }, [i])
    }
}), Vtiger_Component_MetricpicklistDisplay = Vtiger_Component_PicklistDisplay.extend({});
var Vtiger_Component_CurrencyDisplay = Vtiger_Component_BaseDisplay.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    render(e) {
        return e("span", {
            class: ["fieldDisplayValue"],
            attrs: {"data-name": this.fieldname, title: this.currencyDisplayValue}
        }, [this.currencyDisplayValue])
    },
    data: () => ({allCurrencies: {}}),
    computed: {
        currencySymbol() {
            let e = "";
            if (this.record && this.record.currency_id) {
                var r = this.allCurrencies[this.record.currency_id];
                r && (e = r.currency_symbol)
            }
            return e || _.isUndefined(this.$currentUser) || (e = this.$currentUser.currencySymbol), e
        }, currencyDisplayValue() {
            let e = this.record.getDisplayValue(this.fieldname);
            return _.isUndefined(this.$currentUser) || (e = this.getFormattedValue(e)), "Inventory_LineItemRecord_Model" !== this.record.constructor.name && (e = this.appendCurrencySymbol(e, this.currencySymbol)), e
        }
    },
    mounted() {
        this.getCurrencies().then(e => {
            Vue.set(this, "allCurrencies", e)
        })
    }
});
var Vtiger_Component_SensitiveDisplay = Vtiger_Component_BaseDisplay.extend({
    components: {"vds-delete-confirmation": App.loadComponent("SensitiveDataRevealModal", this.$module, !1)},
    mixins: [Vtiger_Mixins_ShowModal],
    data() {
        return {value: this.record.getDisplayValue(this.fieldname), isRevealAllowed: !1}
    },
    computed: {
        isEncrypted() {
            return !this.record.getDisplayValue(this.fieldname) || VTHelper.isEncryptedValue(this.record.getDisplayValue(this.fieldname))
        }
    },
    created() {
        this.setValue(), this._getModuleDescribe(this.$module, !0).then(e => {
            this.isRevealAllowed = e.tools.Decrypt
        })
    },
    watch: {
        isEncrypted() {
            this.setValue()
        }, record() {
            this.setValue()
        }
    },
    methods: {
        setValue() {
            if (this.value = this.record.getDisplayValue(this.fieldname), this.value && this.isEncrypted) {
                let e = this.fieldModel.data;
                this.value = VTHelper.getEncryptedDisplayValue(this.value, e.sensitivedatainfo.first_n_data, e.sensitivedatainfo.last_n_data)
            }
        }, getDecryptedValue() {
            this.isEncrypted && this.appStore.request("api_get", {
                url: "/SensitiveField",
                params: {module: this.$module, mode: "decrypt", record: this.record.id, field: this.fieldname}
            }).then(e => {
                this.record[this.fieldname] = e.value;
                var t = this.record.revealedFields ? this.record.revealedFields : [];
                t.push(this.fieldname), Vue.set(this.record, "revealedFields", t), this.value = e.value, this.$root.$emit("vds-senstive-data-revealed"), this.$root.$emit("bv::hide::modal", "dismissConfirmationPopup")
            })
        }, showRevealModal(e) {
            this.isEncrypted && this.showModal({
                componentName: App.loadComponent("SensitiveDataRevealModal"),
                componentData: {postConfirm: this.getDecryptedValue, moduleName: this.$module}
            }), e.stopPropagation()
        }, getTitle() {
            let e = "";
            return this.isEncrypted && (e = this.translate("LBL_SHOW_VALUE")), e
        }
    },
    render: function anonymous() {
        with (this) return _c("span", [_c("span", {
            staticClass: "fieldDisplayValue text-break mr-1",
            attrs: {"data-name": fieldname}
        }, [_v(" " + _s(value) + " ")]), _v(" "), record.id && value && "moreHeaderDropDown" != view && isRevealAllowed ? _c("span", {
            staticClass: "float-right",
            on: {click: showRevealModal}
        }, [_c("i", {
            staticClass: "fa text-grey-4 c-pointer",
            class: isEncrypted ? "fa-lock" : "fa-lock-open",
            attrs: {title: getTitle()}
        })]) : _e()])
    }
});
var Vtiger_Component_ImageEdit = Vtiger_Component_StringEdit.extend({
    data: () => ({ConfigurationModel: new Configuration}), computed: {
        recordValue: {
            get() {
                let e = this.record[this.field.name];
                return _.isArray(e) ? e[0] : e && _.isString(e) ? e : e ? {name: e.name, url: e.url, size: e.size} : {}
            }, set(e) {
                if (e instanceof File) {
                    let t = new FileReader;
                    t.onload = () => {
                        e.url = t.result, Vue.set(this.record, this.field.name, e)
                    }, t.readAsDataURL(e)
                } else Vue.set(this.record, this.field.name, e)
            }
        }, imageSrc() {
            let e = "";
            return _.isUndefined(this.recordValue) || (e = this.recordValue.url), e
        }, altText() {
            let e = "";
            return _.isUndefined(this.recordValue) || (e = this.recordValue.name), e
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-column"}, [_c("div", {staticClass: "d-flex flex-row"}, [_c("b-file", {
            attrs: {
                name: field.name,
                accept: ".jpeg, .png, .jpg, .pjpeg, .x-png, .gif, .bmp, .vnd.adobe.photoshop, .tiff, .svg+xml, .webp, .x-ms-bmp"
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("i", {
            directives: [{name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: {hover: !0}}],
            staticClass: "fa fa-info-circle align-self-center ml-2",
            attrs: {title: translate("LBL_MAX_UPLOAD_SIZE") + " " + ConfigurationModel.get("IMAGE_MAX_UPLOAD_SIZE") + " " + translate("LBL_MB")}
        })], 1), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first(field.name.toLowerCase())))]), _v(" "), field.isImageField && "" !== imageSrc && imageSrc != undefined && !errors.has(field.name) ? _c("div", [_c("img", {
            staticClass: "pt-2 img-fluid",
            attrs: {name: field.name, src: imageSrc, alt: altText}
        }), _v(" "), _c("div", {staticClass: "w-100 text-right mt-3"}, [_c("div", {
            staticClass: "btn btn-sm btn-outline-danger",
            on: {
                click: function (e) {
                    e.stopPropagation(), recordValue = []
                }
            }
        }, [_v(_s(translate("LBL_DELETE")))])])]) : _e()])
    }
});
var Vtiger_Component_PicklistEdit = Vtiger_Component_StringEdit.extend({
    computed: {
        recordValue: {
            get() {
                return this.record.getEditViewValue(this.fieldName) ? this.record.getEditViewValue(this.fieldName) : this.record[this.fieldName]
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }, getPicklistValues() {
            let e = _.keys(this.field.type.systemPicklistValues), t = this.field.picklistValues;
            for (var i in e) t = _.without(t, _.findWhere(t, {value: e[i]}));
            return t
        }
    }, methods: {
        selectFieldLoaded() {
            this.$bubble("select-field-loaded", this.fieldName)
        }, getClosedStateValues() {
            if (this.field.isClosedStateField) {
                return this.field._moduleModel.closedStateValues
            }
        }
    }, render: function anonymous() {
        with (this) return _c("span", [_c("v-select2", {
            attrs: {
                name: field.name,
                disabled: isFieldLocked || readonly || isFieldSpecificReadOnly(),
                options: getPicklistValues,
                selected: recordValue,
                closedStateValues: getClosedStateValues(),
                emptyOption: field.isEmptyOptionAllowed
            }, on: {"select2-loaded": selectFieldLoaded}, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger", class: errorTextTruncate ? "text-truncate" : ""
        }, [_v(_s(errors.first(field.name)))])], 1)
    }
});
var Vtiger_Component_ListTableMainCheckBox = App.vtComponent.extend({
    props: {currentPageRecords: {type: Array}, compactMode: {type: Boolean}}, computed: {
        selectedRecords: {
            get() {
                return this.appStore.get("list_selectedrecords")
            }, set(e) {
                return this.appStore.set({key: "list_selectedrecords", data: e})
            }
        }, excludedIds: {
            get() {
                return this.appStore.get("list_excludedrecords")
            }, set(e) {
                return this.appStore.set({key: "list_excludedrecords", data: e})
            }
        }, allListRecordsSelected: {
            get() {
                let e = _.intersection(this.currentPageRecords, this.selectedRecords);
                return e.length && e.length == this.currentPageRecords.length && this.selectedRecords.length
            }, set(e) {
                let t = this.currentPageRecords;
                e ? this.modifySelectedRecords(t) : this.modifySelectedRecords(t, !1)
            }
        }, selectAllRecords: {
            get() {
                return this.appStore.get("list_info").selectAllRecords
            }, set(e) {
                this.appStore.get("list_info").selectAllRecords = e
            }
        }
    }, watch: {
        selectAllRecords(e) {
            e ? this.selectedRecords = _.union(this.currentPageRecords, this.selectedRecords) : (this.selectedRecords = [], this.excludedIds = [])
        }, currentPageRecords() {
            if (this.selectAllRecords) {
                let e = _.union(this.currentPageRecords, this.selectedRecords);
                e = _.difference(e, this.excludedIds), this.selectedRecords = e
            }
        }
    }, methods: {
        modifySelectedRecords(e, t = !0) {
            "object" != typeof e && (e = [e]), t ? Vue.set(this, "selectedRecords", _.union(this.selectedRecords, e)) : (Vue.set(this, "selectedRecords", _.difference(this.selectedRecords, e)), Vue.set(this, "excludedIds", _.union(this.excludedIds, e)))
        }, onAllRecordsSelected(e, t = !1) {
            this.$nextTick(() => {
                this.compactMode && e ? jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").addClass("c-none").removeClass("c-pointer") : jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").addClass("c-pointer").removeClass("c-none")
            }), this.$bubble("vt_all_list_record_selected", e, this.selectedRecords), this.$nextTick(() => {
                t ? jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").addClass("selectedRow") : jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").removeClass("selectedRow")
            })
        }
    }, render: function anonymous() {
        with (this) return _c("label", {staticClass: "vt-checkbox-container"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: allListRecordsSelected,
                expression: "allListRecordsSelected"
            }],
            staticClass: "listViewEntriesMainCheckBox",
            attrs: {type: "checkbox"},
            domProps: {checked: Array.isArray(allListRecordsSelected) ? _i(allListRecordsSelected, null) > -1 : allListRecordsSelected},
            on: {
                change: [function (e) {
                    var t = allListRecordsSelected, s = e.target, c = !!s.checked;
                    if (Array.isArray(t)) {
                        var l = _i(t, null);
                        s.checked ? l < 0 && (allListRecordsSelected = t.concat([null])) : l > -1 && (allListRecordsSelected = t.slice(0, l).concat(t.slice(l + 1)))
                    } else allListRecordsSelected = c
                }, function (e) {
                    return onAllRecordsSelected(allListRecordsSelected, e.target.checked)
                }]
            }
        }), _v(" "), _c("span", {
            staticClass: "checkmark roundedCheckmark mt-1",
            class: [allListRecordsSelected || selectedRecords.length ? "opacity-1" : "opacity-0"]
        }, [_v(" ")]), _v(" \n        ")])
    }
});
var Vtiger_Component_Comment = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Record, Vtiger_Mixin_Validators, Vtiger_Mixins_ShowModal],
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "commentContainer"}, [_c("vds-rte", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required : true}"
            }],
            ref: "commentRte",
            attrs: {
                "extra-config": commentEditorConfig,
                "placeholder-text": translate("LBL_POST_YOUR_COMMENT_HERE"),
                focus: focus,
                "cursor-position": cursorPosition,
                name: "commentcontent",
                "data-vv-validate-on": "null"
            },
            on: {
                "vds::rte::blurred": function (t) {
                    return hideEditor("true")
                }
            },
            model: {
                value: content, callback: function (t) {
                    content = t
                }, expression: "content"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("commentcontent"),
                expression: "errors.has('commentcontent')"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_LBL_COMMENT_VALUE_CANT_BE_EMPTY")))]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: 0 == isUserMentioned,
                expression: "isUserMentioned == false"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_MENTION_ATLEAST_ONE_USER")))])], 1), _v(" "), _c("div", {
            staticClass: "d-flex align-items-center justify-content-between px-2 commentBottomBar",
            on: {
                click: function (t) {
                    return hideEditor("false")
                }
            }
        }, [_c("div", {staticClass: "d-flex justify-content-start"}, [_c("b-dropdown", {
            attrs: {
                size: "md",
                variant: "link",
                "toggle-class": "text-decoration-none text-dark"
            }
        }, [_c("template", {slot: "button-content"}, [_c("i", {staticClass: "fa fa-upload mr-1"}), _v(_s(translate("LBL_ATTACH_FILES")))]), _v(" "), _c("b-dropdown-item-button", [_c("label", {
            staticClass: "mb-0 c-pointer",
            attrs: {for: "uploadFromComputer"}
        }, [_v(_s(translate("LBL_FROM_COMPUTER", "Documents")))]), _v(" "), _c("b-file", {
            staticClass: "fileElement",
            staticStyle: {display: "none"},
            attrs: {id: "uploadFromComputer", size: "sm", multiple: !0, plain: ""},
            model: {
                value: uploadedFiles, callback: function (t) {
                    uploadedFiles = t
                }, expression: "uploadedFiles"
            }
        })], 1), _v(" "), _c("b-dropdown-item-button", {on: {click: uploadFileFromDocuments}}, [_v("\n\t\t\t\t\t\t\t" + _s(translate("LBL_FROM_CRM", "Documents")) + "\n\t\t\t\t\t\t")])], 2), _v(" "), _c("span", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover",
                modifiers: {hover: !0}
            }],
            staticClass: "fa fa-info-circle mt-2",
            attrs: {title: translate("LBL_MAX_UPLOAD_SIZE") + " " + maxUploadSize + " " + translate("LBL_MB")}
        })], 1), _v(" "), _c("div", {staticClass: "d-flex justify-content-end align-items-center"}, [!postingComment && savingDraft ? _c("div", {staticClass: "p-2 mr-3 text-grey-2"}, [_c("u", [_v(_s(savingDraft ? translate("JS_SAVING_PLEASE_WAIT") : "") + " ")])]) : _e(), _v(" "), postingComment || savingDraft || !draftSaved ? _e() : _c("div", {staticClass: "p-2 mr-3 text-grey-2"}, [_c("u", [_v(_s(draftSaved ? translate("LBL_COMMENT_SAVED", "ModComments") : "") + " ")])]), _v(" "), hasCancel ? _c("button", {
            staticClass: "btn btn-secondary rounded my-2 mx-1",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    clear(), $emit("vds::enable::commentInput"), $root.$emit("vds::comment::clear::action")
                }
            }
        }, [_v(_s(translate(cancelBtnTitle, $module)))]) : _e(), _v(" "), isPrivateModule ? _c("b-dropdown", {
            staticClass: "my-2 mx-1",
            attrs: {
                variant: "primary",
                disabled: postingComment || savingDraft,
                split: "",
                size: "md",
                text: translate(okBtnTitle, $module)
            },
            on: {
                click: function (t) {
                    return validateAndSave(!0)
                }
            }
        }, [_c("b-dropdown-item", {
            on: {
                click: function (t) {
                    return validateAndSave(!1)
                }
            }
        }, [_v("\n                            " + _s(translate("LBL_POST_PUBLISH", $module)) + "\n                        ")])], 1) : _c("button", {
            staticClass: "btn btn btn-primary rounded my-2 mx-1",
            attrs: {disabled: postingComment || savingDraft, type: "button"},
            on: {
                click: function (t) {
                    return validateAndSave(!0)
                }
            }
        }, [_v("\n                        " + _s(translate(okBtnTitle, $module)) + "\n                    ")])], 1)]), _v(" "), files.length ? _c("div", {staticClass: "row mx-0 mt-1"}, _l(files, (function (t, e) {
            return _c("span", {staticClass: "mr-4 my-1 p-2 rounded bg-grey-hue-4"}, [_v("\n                    " + _s(t.name) + "\n                    "), _c("i", {
                staticClass: "fa fa-times-circle fa-w-16 ml-2 c-pointer",
                on: {
                    click: function (t) {
                        return removeFile(e)
                    }
                }
            })])
        })), 0) : _e()])
    },
    props: {
        currentModule: {type: [String]},
        relatedTo: {type: [String, Number]},
        relatedModule: {type: String},
        comment: {type: [Object, Array], default: () => ({})},
        parentComment: {type: [Object, Array], default: () => ({})},
        mode: {type: String, default: ""},
        okBtnTitle: {type: [String], default: "LBL_POST"},
        cancelBtnTitle: {type: [String], default: "LBL_CLEAR"},
        focus: {type: Boolean, default: !1},
        hasCancel: {type: Boolean, default: !1},
        validateMentionUser: {type: [Boolean], default: !1},
        editorHeight: {type: [Number], default: 100},
        initialCursorPosition: {type: [String], default: "end"}
    },
    data() {
        return {
            content: "",
            files: [],
            recordModel: Vtiger_Record_Model.getCleanInstance(this.currentModule, this.comment),
            uploadedFiles: [],
            limit: 6,
            usersAndGroups: [],
            existingFileIds: [],
            cursorPosition: this.initialCursorPosition,
            documentIds: [],
            maxUploadSize: "",
            isUserMentioned: !0,
            postingComment: !1,
            savingDraft: !1,
            draftSaved: !1
        }
    },
    computed: {
        $_moduleModel_Name: () => "ModComments", isPrivateModule() {
            let t = !1, e = this.$_currentModuleModel.get("privatecommentmodules");
            return this.relatedModule && e && (t = !!e.includes(this.relatedModule)), t
        }, commentEditorConfig() {
            return {
                mentions: [{
                    feed: (t, e) => {
                        let i = t.query;
                        e(this.usersAndGroups.filter(t => t.fullName.toLowerCase().includes(i.toLowerCase())))
                    },
                    itemTemplate: '<li data-id={id}><bold class="text-dark mr-2">{fullName}</bold></li>',
                    outputTemplate: '<span class="mention" data-id="{type}:{id}">{name}</span><span>&nbsp;</span>',
                    minChars: 0
                }],
                extraAllowedContent: {"span strong": {attributes: "data-*", classes: "*"}},
                extraPlugins: "mentions,image2,emoji",
                height: this.editorHeight
            }
        }
    },
    watch: {
        comment() {
            this.setContent()
        }, uploadedFiles() {
            if (0 == this.uploadedFiles.length) return;
            ConfigurationModel = new Configuration;
            let t = ConfigurationModel.get("UPLOAD_LIMIT");
            for (var e in this.uploadedFiles) {
                for (var i in this.files) this.uploadedFiles[e] && this.files[i].name == this.uploadedFiles[e].name && (this.showErrorNotification(this.translate("JS_THIS_FILE_HAS_ALREADY_BEEN_SELECTED")), this.uploadedFiles.splice(e, 1));
                this.uploadedFiles[e] && this.uploadedFiles[e].size > 1024 * t * 1024 && (this.showErrorNotification(this.translate("JS_MAX_FILE_UPLOAD_EXCEEDS", "Vtiger") + " 25MB"), this.uploadedFiles.splice(e, 1))
            }
            if (this.uploadedFiles.length + this.files.length > this.limit) this.showErrorNotification(this.translate("JS_MAX_FILE_SELECT_LIMIT_EXCEEDS", "Vtiger", this.limit)); else {
                for (var i in this.uploadedFiles) this.files.push(this.uploadedFiles[i]);
                this.uploadedFiles = []
            }
        }
    },
    created() {
        this.init();
        var t = new Configuration;
        this.maxUploadSize = t.get("DOCUMENT_MAX_UPLOAD_SIZE"), setTimeout(() => {
            this.registerWatchForDraft()
        }, 500)
    },
    methods: {
        saveDraft() {
            let t = {isDraft: !0, status: "edit" == this.mode ? "3" : "reply" == this.mode ? "4" : "2"};
            if (this.comment.id && [2, 3, 4].includes(parseInt(this.comment.status))) t.id = this.comment.id; else if (!this.content) {
                if (!this.comment.id) return;
                this.deleteComment()
            }
            this.save(t)
        }, uploadFileFromDocuments() {
            this.showModal({
                componentName: "PopupReferenceList",
                componentData: {
                    module: "Documents",
                    q: '[[["filename","isnotempty",""],["filelocationtype","e","I"],["filesize","n","0"]]]'
                }
            }), this.$off("vds::popup:record::selected"), this.$on("vds::popup:record::selected", this.setDocuments)
        }, setDocuments(t, e) {
            for (var i in this.documentIds.push(t), this.files) if (this.files[i].name == e.filename) return void this.showErrorNotification(this.translate("JS_THIS_FILE_HAS_ALREADY_BEEN_SELECTED"));
            var s = new File([], e.filename, {size: e.filesize, type: e.extension});
            s.fileid = t, this.uploadedFiles = [], this.uploadedFiles.push(s)
        }, init() {
            this.getUsersAndGroups(), this.concatExistingAttachments(), this.setContent()
        }, concatExistingAttachments() {
            if ("reply" !== this.mode) {
                var t = this.comment.attachments;
                for (var e in t) {
                    var i = new File([], t[e].attachment, {size: t[e].size, type: t[e].type, fileid: t[e].fileid});
                    this.uploadedFiles.push(i), t[e].docid ? this.existingFileIds.push(t[e].docid) : this.existingFileIds.push(t[e].fileid)
                }
            }
        }, getUsersAndGroups() {
            this.$store.dispatch("getUserAndGroups", {
                cb: t => {
                    let e = [];
                    for (let i in t.Users) {
                        let s = i.split(":");
                        if (this.$currentUser.id != s[1]) {
                            let n = {};
                            n.id = s[1], n.type = s[0], n.fullName = t.Users[i].replace(/\s/g, ""), n.name = t.Users[i].replace(/\s/g, ""), n.imagetag = "", e.push(n)
                        }
                    }
                    for (let i in t.Groups) {
                        let s = {}, n = i.split(":");
                        s.id = n[1], s.type = n[0], s.fullName = t.Groups[i].replace(/\s/g, ""), s.name = t.Groups[i].replace(/\s/g, ""), s.imagetag = '<i class="fas fa-solar-panel mr-2"></i>', e.push(s)
                    }
                    e.push({id: "all", fullName: "All", name: "All"}), this.usersAndGroups = e
                }
            })
        }, customItemRenderer(t) {
            let e = document.createElement("span");
            return e.classList.add("d-flex", "flex-grow-1"), e.textContent = t.fullName + " ", e
        }, isDraftComment() {
            return [2, 3, 4].includes(parseInt(this.comment.status))
        }, setContent() {
            this.content = this.comment.commentcontent, "reply" != this.mode || this.isDraftComment() || (this.content = this.parentComment.reply_message, this.cursorPosition = "after"), _.isUndefined(this.content) && (this.content = "")
        }, removeFile(t) {
            var e = this.comment.attachments;
            for (var i in e) if (this.files[t].name == e[i].attachment) {
                var s = this.existingFileIds.indexOf(e[i].fileid);
                this.existingFileIds.splice(s, 1)
            }
            var n = this.files[t] && this.files[t].fileid ? this.files[t].fileid : "";
            n && this.documentIds.includes(n) && this.documentIds.splice(this.documentIds.indexOf(n), 1), this.files.splice(t, 1)
        }, validateAndSave(t) {
            if (this.validateMentionUser && (!this.content || this.content && !this.content.match(/@\S/))) return this.isUserMentioned = !1, !1;
            Vue.set(this.recordModel, "is_private", t ? 1 : 0), this.$validator.validate().then(t => {
                t && this.save()
            })
        }, save(t = {}) {
            this.interval && clearTimeout(this.interval);
            var {isDraft: e = !1} = t;
            e || (this.postingComment = !0);
            let i, s = this.$_currentModuleModel;
            if (this.content || !e) {
                if (this.recordModel.commentcontent = this.content, this.recordModel.related_to = this.relatedTo, this.recordModel._files = this.files, this.recordModel.attachmentsIds = this.existingFileIds.join(","), this.recordModel.documentids = this.documentIds, this.comment.id && "edit" != this.mode && delete this.recordModel.mode, "reply" == this.mode && (this.recordModel.userid = this.$currentUser.id, Vue.delete(this.recordModel, "related_to")), "reply" != this.mode && "edit" != this.mode || (this.recordModel.parent_comments = this.parentComment.id), this.comment.id && (Vue.set(this.recordModel, "id", this.comment.id), "reply" != this.mode || [2, 3, 4].includes(parseInt(this.comment.status)) || delete this.recordModel.id, e || (this.recordModel.status = 0)), this.comment.id && ![2, 3, 4].includes(parseInt(this.comment.status)) && e && delete this.recordModel.id, "edit" == this.mode && (this.recordModel.mode = "edit", !e && this.isDraftComment() && (this.recordModel.id = this.comment.parent_comments.id, delete this.recordModel.parent_comments)), _.isEmpty(t)) i = this.recordModel; else {
                    i = Vtiger_Record_Model.getCleanInstance(this.currentModule, JSON.parse(JSON.stringify(this.recordModel)));
                    for (let e in t) i[e] = t[e]
                }
                this.$emit("vds::draft::updated", this.content), this.savingDraft = !0, this.saveRecord(i, s).then(t => {
                    if (this.savingDraft = !1, t && !e) {
                        this.postingComment = !1, this.showSuccessNotification(this.translate("JS_COMMENT_POSTED_SUCCESSFULLY")), this.$emit("vds::postcomment::save"), this.$root.$emit("vds::comment::post::action"), this.files = [], this.deRegisterContentWatcher(), this.$nextTick(() => {
                            this.registerWatchForDraft()
                        }), this.comment.commentcontent = "", this.content = "", this.comment.id && [2, 3, 4].includes(parseInt(this.comment.status)) && this.$bubble("vds::clear::draft");
                        let e = this.appStore.get(this.relatedTo + "_stickynotes");
                        if (e && Object.keys(e).length > 0) {
                            (e.id ? e.id : e.modcommentsid) == t.id && this.appStore.set({
                                key: this.relatedTo + "_stickynotes",
                                data: t
                            })
                        }
                    } else t && e && (t.id && (this.draftSaved = e), this.comment.id = t.id, this.comment.status = t.status, this.comment.parent_comments = t.parent_comments, this.recordModel.id = t.id)
                })
            }
        }, hideEditor(t) {
            "" != this.content || t || this.$emit("vds::enable::commentInput")
        }, registerWatchForDraft() {
            this.contentWatcher = this.$watch("content", () => {
                this.interval || (this.interval = setTimeout(() => {
                    clearTimeout(this.interval), this.saveDraft(), this.interval = !1
                }, 5e3))
            })
        }, deRegisterContentWatcher() {
            this.contentWatcher && this.contentWatcher()
        }, clear() {
            this.content = "", this.comment.id && [2, 3, 4].includes(parseInt(this.comment.status)) && this.deleteComment()
        }, deleteComment() {
            this.deleteRecord(this.comment.id, "ModComments").then(() => {
                this.$bubble("vds::clear::draft")
            })
        }
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_RowAction = App.vtComponent.extend({
    functional: !0,
    mixins: [Vtiger_Mixin_ModulePermissions],
    props: {record: {type: [String, Number, Object], required: !0}, module: {required: !0}, viewtype: {type: [String]}},
    methods: {
        isCallingAllowed(e) {
            var {props: o, parent: r} = e;
            let l = VTHelper.getCallingAllowedModules();
            if (_.contains(l, o.module)) {
                return !AppStorage.get("phonecalls_deprecated")
            }
            return !1
        }
    },
    render(e, o) {
        var {props: r, parent: l} = o, i = r.component;
        let s = i.options.methods;
        var t = i.options.computed, n = s.isCallingAllowed.call(l, o), a = e(!1);
        n && (a = e("li", {
            class: "list-inline-item c-pointer px-2 m-0",
            attrs: {title: l.translate("phone")},
            directives: [{
                name: "showModal",
                value: {record: r.record, modulename: r.module, module: "PhoneCalls"},
                expression: "{'record':props.record,'modulename':props.module, 'module':'PhoneCalls'}",
                modifiers: {VtigerBuiltinPhoneCallsController: !0}
            }]
        }, [e("i", {class: "fas fa-phone-alt"}, [])]));
        var d = e(!1);
        t.isSendEmailAllowed() && (d = e("li", {
            class: "list-inline-item c-pointer px-2 m-0 email",
            attrs: {title: l.translate("email")},
            directives: [{
                name: "showModal",
                value: {record: r.record, modulename: r.module, viewtype: r.viewtype},
                expression: "{'record':props.record,'modulename':props.module, 'viewtype':props.viewtype}",
                modifiers: {ListViewComposeEmail: !0}
            }]
        }, [e("i", {class: "fas fa-envelope"}, [])]));
        e(!1);
        let p = [a, d, e("li", {
            class: "list-inline-item c-pointer px-2 m-0",
            attrs: {title: l.translate("LBL_SEND_SMS")},
            directives: [{
                name: "showModal",
                value: {record: r.record, modulename: r.module},
                expression: "{'record':props.record,'modulename':props.module}",
                modifiers: {ListViewSendSMS: !0}
            }]
        }, [e("i", {class: "fas fa-sms"}, [])])], m = l.widgets;
        for (let o in m) p.push(e(m[o], {props: {record: r.record, module: r.module}}));
        return e("ul", {class: "list-inline mb-0"}, p)
    }
});
var Vtiger_Component_ListTable = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Module, Vtiger_Mixin_DateUtils],
    render: function anonymous() {
        with (this) return _c("div", {attrs: {id: tableIdentifier}}, [records.length ? _c("table", {
            directives: [{
                name: "resize-table",
                rawName: "v-resize-table.floatThead",
                value: {resize: resize, hiddenColumnIndex: hiddenResizeColumnIndex},
                expression: "{'resize':resize,'hiddenColumnIndex':hiddenResizeColumnIndex}",
                modifiers: {floatThead: !0}
            }],
            ref: "listViewTable",
            staticClass: "table fixed_header w-100",
            staticStyle: {"margin-bottom": "0px"},
            attrs: {id: "listview-table"}
        }, [_c("thead", {staticClass: "bg-light"}, [_c("tr", {staticClass: "text-dark"}, [ismultiselectable ? _c("th", {
            staticClass: "listTableHeader tableActionColumn l-0 px-0",
            attrs: {scope: "col"}
        }, [ismultiselectable && records.length ? _c("vds-listTableMainCheckBox", {
            attrs: {
                currentPageRecords: getCurrentPageRecords,
                compactMode: compactMode
            }
        }) : _e()], 1) : _e(), _v(" "), isFollowingAllowed || manageColumns || showSecondaryActionsOnly ? _c("th", {staticClass: "listTableHeader followRecord px-0 w-auto"}, [manageColumns ? _c("span", {
            staticClass: "fa fa-ellipsis-v p-2 pl-3 c-pointer",
            attrs: {id: "mangeColumnTrigger", title: translate("LBL_MANAGE_COLUMNS")},
            on: {click: showMangeColumn}
        }) : _e()]) : _e(), _v(" "), _l(orderedListHeaders, (function ({name: e, label: t}, s) {
            return _c("th", {
                staticClass: "listTableHeader",
                class: [sortable ? "c-pointer" : ""],
                staticStyle: {"min-width": "160px"},
                attrs: {scope: "col"},
                on: {
                    click: function (t) {
                        return onSortApplied(e)
                    }
                }
            }, [_c("div", [_c("span", [e.indexOf(".") > -1 ? _c("i", {class: getReferenceModuleIcon(e)}) : _e(), _v(" "), $isLoading ? _c("span", [_c("vds-value-progress")], 1) : _c("span", {
                staticClass: "text-truncate d-inline-block align-middle",
                style: {width: resize ? "80%" : "100%"},
                attrs: {title: translate(t, $module)}
            }, [_v("\n                                            " + _s(translate(t, $module)) + "\n                                        ")])]), _v(" "), sortable && checkFieldSortingAllowed(e) ? _c("span", {staticClass: "c-pointer"}, [listParams.sortfield != e ? _c("span", {
                staticClass: "sortorder sortIcon opacity-0",
                attrs: {"data-value": "asc"}
            }, [_c("i", {staticClass: "fa fa-sort"})]) : _e(), _v(" "), listParams.sortfield == e && showDescOrder(e) ? _c("span", {
                key: "descendingOrder",
                staticClass: "sortorder",
                attrs: {"data-value": "desc"}
            }, [_c("i", {staticClass: "fa fa-caret-down"})]) : _e(), _v(" "), listParams.sortfield == e && showAscOrder(e) ? _c("span", {
                key: "ascendingOrder",
                staticClass: "sortorder",
                attrs: {"data-value": "asc"}
            }, [_c("i", {staticClass: "fa fa-caret-up"})]) : _e()]) : _e()])])
        })), _v(" "), !compactMode && showActionsColumn || showCompactActions ? _c("th", {
            staticClass: "tableLastAction",
            attrs: {scope: "col"}
        }) : _e()], 2)]), _v(" "), _c("tbody", [_l(records, (function (e, t) {
            return [_c("tr", {
                staticClass: "height-56px c-pointer",
                attrs: {"data-id": e.getId(), id: $module + "_listview_row_" + (t + 1)},
                on: {
                    click: function (t) {
                        return onClickOfListRow(t, e)
                    }
                }
            }, [ismultiselectable ? _c("td", {staticClass: "tableActionColumn px-0 align-top"}, [_c("div", [ismultiselectable && displayListCheckbox(e) ? _c("vds-listTableCheckBox", {
                attrs: {
                    row: e,
                    currentPageRecords: getCurrentPageRecords,
                    compactMode: compactMode
                }, on: {
                    click: function (e) {
                        e.stopPropagation()
                    }
                }
            }) : _e()], 1)]) : _e(), _v(" "), isFollowingAllowed || manageColumns || showSecondaryActionsOnly ? _c("td", {staticClass: "listViewlastActionColoumn pr-0 shadow-none"}, [isFollowingAllowed || showSecondaryActionsOnly ? _c("div", {staticClass: "mt-2 d-inline-flex"}, [_c("vds-list-row-secondary-actions", {
                key: e.id,
                attrs: {row: e, "compact-mode": compactMode, currentFilterDetails: currentFilterDetails}
            }), _v(" "), !showSecondaryActionsOnly && showQuickActions ? _c("span", {
                directives: [{
                    name: "visible",
                    rawName: "v-visible",
                    value: !compactMode,
                    expression: "!compactMode"
                }],
                staticClass: "pull-left pl-1 recordStarAction",
                class: [isRecordFollowed(e) ? "opacity-1" : "opacity-0"],
                on: {
                    click: function (e) {
                        e.stopPropagation()
                    }
                }
            }, [_c("vds-record-star", {
                attrs: {status: e.starred, "record-id": e.getId()},
                on: {
                    "update:status": function (t) {
                        return $set(e, "starred", t)
                    }
                }
            })], 1) : _e(), _v(" "), e.icon ? _c("vds-file-icon", {
                staticClass: "pl-2",
                attrs: {icon: recordIcon(e), "custom-class": "h5 mb-0"}
            }) : _e()], 1) : _e()]) : _e(), _v(" "), _l(orderedListHeaders, (function ({label: t, name: s, model: i}, l) {
                return _c("td", {staticClass: "align-middle"}, [s != editableField ? _c("div", {class: [$_currentModuleModel && $_currentModuleModel.getField(s) && "picklist" == $_currentModuleModel.getField(s).type.name ? "listviewPickListDisplay" : "textOverflowEllipsis"]}, [0 == e.get("_" + s + "_viewable") ? [_c("i", {
                    staticClass: "fas fa-ban",
                    attrs: {title: translate("LBL_HIDDEN_BECAUSE_OF_DEPENDENCY")}
                })] : [_c("vds-field-display", {
                    attrs: {
                        className: "mw-8-rem",
                        isCompact: compactMode,
                        field: i,
                        record: getTransformedRow(e),
                        modulemodel: $_currentModuleModel,
                        parentModule: parentModule,
                        view: "list",
                        "check-viewable": !1,
                        title: getListDataTitle(e, s),
                        "allow-field-actions": allowFieldActions
                    }
                })]], 2) : $isLoading ? _e() : [_c(editableFieldComponent, {
                    tag: "component",
                    attrs: {record: e, field: s, modulemodel: $_currentModuleModel}
                })]], 2)
            })), _v(" "), _c("td", {staticClass: "listViewlastActionColumn position-sticky opacity-0"}, [showQuickActions && (!compactMode && showActionsColumn || showCompactActions) ? _c("div", {staticClass: "mt-2"}, [_c("vds-row-action", {
                key: e.id,
                attrs: {viewtype: viewtype, record: e, module: $module},
                on: {
                    "vds::row::clicked": function (e) {
                        return rowActionClicked(t)
                    }
                }
            })], 1) : _e()])], 2), _v(" "), t == rowActionIndex ? _c("tr", [_c("vds-list-table-additional-row", {
                attrs: {
                    record: e,
                    "list-headers": orderedListHeaders
                }
            })], 1) : _e()]
        }))], 2), _v(" "), _c("vds-list-table-footer", {
            attrs: {filterFields: listheaders},
            on: {"vds::add::new::task": callBackForListFooterEvent}
        })], 1) : _e(), _v(" "), records.length || otherListRecords.length ? _e() : _c("div", {
            staticClass: "d-flex justify-content-center align-items-center",
            style: {height: getListViewHeight() + "px"}
        }, [_c("vds-empty-state-card", {
            attrs: {
                addActionAllowed: addActionAllowed,
                illustrationName: illustrationName,
                showAddButton: showEmptyStateAction,
                emptyLabel: translate("LBL_NO_RECORDS_FOUND"),
                "selected-filter": listParams.filterid
            }
        })], 1)])
    },
    props: {
        compactMode: {default: !1},
        showActionsColumn: {type: Boolean, default: !0},
        showCompactActions: {type: Boolean, default: !1},
        listheaders: {},
        records: {},
        ismultiselectable: {default: !1},
        resize: {default: !0},
        sortable: {default: !0},
        excludedIdProps: {default: () => []},
        listParams: {default: () => ({sortfield: ""})},
        module: {default: this.$module},
        editableField: "",
        editableFieldComponent: "",
        isFollowingAllowed: {type: Boolean},
        manageColumns: {type: Boolean},
        hiddenResizeColumnIndex: {type: [Array], default: () => []},
        viewtype: {type: [String]},
        showEmptyStateAction: {type: Boolean, default: !0},
        allowFieldActions: {type: Boolean, default: !0},
        currentFilterDetails: {type: Object, default: () => ({})},
        illustrationName: {default: !1},
        parentModule: {type: [String], default: ""},
        addActionAllowed: {type: Boolean, default: !0}
    },
    data: () => ({
        showByIndex: null,
        showQuickActions: !0,
        expandedColumnFieldNames: [],
        otherListRecords: [],
        secondaryActionAllowed: !1,
        cachedReferenceFields: {},
        disableRowClick: !1,
        showSecondaryActionsOnly: !1,
        rowActionIndex: -2,
        orderedListHeaders: [],
        tableIdentifier: "list_table_" + (new Date).getTime(),
        widgets: []
    }),
    components: {
        "vds-row-action": App.loadComponent("RowAction"),
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-list-table-footer": App.loadComponent("ListTableFooter"),
        "vds-list-row-secondary-actions": App.loadComponent("ListRowSecondaryActions"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard"),
        "vds-list-table-additional-row": App.loadComponent("ListTableAdditionalRow"),
        "vds-listTableMainCheckBox": App.loadComponent("ListTableMainCheckBox"),
        "vds-listTableCheckBox": App.loadComponent("ListTableCheckBox")
    },
    created() {
        this.injectUnwatch = this.$root.vtInjector.listen("vds::list::rowactions::basic::subscriptions", e => {
            for (var t in _.isArray(e) || (e = [e]), e) this.widgets.push(e[t])
        }, {module: this.$module})
    },
    beforeDestroy() {
        this.injectUnwatch && this.injectUnwatch()
    },
    computed: {
        getCurrentPageRecords() {
            let e = this.records, t = [];
            if (void 0 === e) return t;
            for (let s of e) t.push(s.getId());
            return t
        }, orderedListHeaders1() {
        }
    },
    mounted: function () {
        this.setViewScroll(), this.setListTableFloatingScroll()
    },
    methods: {
        setListTableFloatingScroll(e = !1) {
            let t = jQuery("#" + this.tableIdentifier).parents(".listTableContainer");
            "function" == typeof jQuery.fn.floatingScroll && t.length && (e ? t.floatingScroll("update") : t.floatingScroll())
        },
        rowActionClicked(e) {
        },
        getListDataTitle(e, t) {
            let s = this.getTransformedField(t);
            var i = this.getTransformedRow(e).getDisplayValue(s);
            if (_.isString(s) && (s = this.$_currentModuleModel.getField(t)), s) if (s.isSensitiveField) {
                let e = s.data;
                i = VTHelper.getEncryptedDisplayValue(i, e.sensitivedatainfo.first_n_data, e.sensitivedatainfo.last_n_data)
            } else switch (s.fieldType) {
                case"datetime":
                    i = this.getDisplayDateTime(i);
                    break;
                case"time":
                    i = this.convertTimeToUserFormat(i);
                    break;
                case"date":
                    i = this.convertDateToUserFormat(i);
                    break;
                case"double":
                    i = VTHelper.formatCurrencyToUserFormat(i, this.$currentUser);
                    break;
                case"boolean":
                case"currency":
                case"currencyList":
                    i = ""
            }
            return i
        },
        checkFieldSortingAllowed: e => !0,
        showAscOrder(e) {
            return this.listParams.sortfield == e && "asc" == this.listParams.sortorder
        },
        showDescOrder(e) {
            return this.listParams.sortfield == e && "desc" == this.listParams.sortorder
        },
        onSortApplied(e) {
            this.sortable && this.checkFieldSortingAllowed(e) && this.$emit("vt_list_field_sort", e)
        },
        onClickOfListRow(e, t) {
            jQuery(e.currentTarget).hasClass("c-none") || this.disableRowClick && this.compactMode || this.$emit("vt_list_row_click", e, t)
        },
        getListViewHeight: function () {
            var e = document.getElementById("topbar") ? document.getElementById("topbar").clientHeight : 0,
                t = document.getElementById("moduleHeader") ? document.getElementById("moduleHeader").clientHeight : 0,
                s = document.getElementById("viewHeader") ? document.getElementById("viewHeader").clientHeight : 0;
            return window.innerHeight - (e + t + s) - 100
        },
        isCompositeField(e) {
            var t = this.$_currentModuleModel.getField(e);
            return !!t && t.isCompositeParent
        },
        setViewScroll: function () {
            var e = this.getListViewHeight();
            jQuery(this.$refs.listViewTable);
            jQuery(this.$el).closest("div.listTableContainer").css({
                position: "relative",
                "max-height": e,
                width: "100%",
                overflow: "auto"
            }), this.registerFloatThead()
        },
        callBackForListFooterEvent(e) {
            this.records.length || this.otherListRecords.push(e)
        },
        registerFloatThead() {
            jQuery(this.$refs.listViewTable).floatThead({
                scrollContainer: function (e) {
                    return e.closest(".table-container")
                }, autoReflow: !0
            })
        },
        isRecordFollowed: e => !(!e.starred || "0" == e.starred),
        displayListCheckbox: e => !0,
        getTransformedRow(e) {
            for (let t in this.orderedListHeaders) {
                let {name: s, ...i} = this.orderedListHeaders[t];
                if (s.indexOf(".") > -1) {
                    let t = s.split(".");
                    2 === t.length && e[t[0]] && e[t[0]][t[1]] ? e[s] = e[t[0]][t[1]] : 3 === t.length && e[t[0]] && e[t[0]][t[2]] && (e[s] = e[t[0]][t[2]])
                }
            }
            return e
        },
        getTransformedField(e) {
            if (e.indexOf(".") < 0) return e;
            if (this.cachedReferenceFields[e]) return this.cachedReferenceFields[e];
            {
                let t = e.split("."), s = 3 === _.size(t) ? t[2] : t[1], i = this.$_currentModuleModel.getField(t[0]);
                if (i && "reference" === i.type.name) {
                    let l = i.referenceModuleList, o = _.size(l) > 1 ? t[1] : l[0];
                    this._getModuleDescribe(o).then(t => {
                        let i = t.getField(s);
                        if (i) {
                            let t = jQuery.extend(!0, {}, i);
                            t.fieldname = e;
                            let s = new Vtiger_Field_Model(t);
                            return this.cachedReferenceFields[e] = s, s
                        }
                    })
                }
            }
        },
        getReferenceModuleIcon(e) {
            let t = e.split("."), s = this.$_currentModuleModel.getField(t[0]);
            if (s && "reference" === s.type.name) {
                let e = s.referenceModuleList;
                return _.size(e) > 1 ? this.getModuleIconClass(t[1]) : this.getModuleIconClass(e[0])
            }
        },
        mangeColumnPopperHandler(e) {
            let t = jQuery(this.$el).find("#mangeColumnTrigger");
            jQuery(".vds-bodycontents");
            var s = {
                getBoundingClientRect: function () {
                    return t.get(0).getBoundingClientRect()
                }, clientWidth: 5, clientHeight: 10
            };
            e.createPopper = function () {
                this.removePopper();
                let e = jQuery("#mangeColumnTrigger"), t = jQuery(".vds-bodycontents"),
                    i = e.offset().top - t.offset().top + e.height() + 10, l = e.offset().left + 16;
                jQuery(this.$refs.menu).css({
                    "margin-top": i + "px",
                    "margin-left": l + "px"
                }), this._popper = new Popper(s, this.$refs.menu, this.getPopperConfig())
            }
        },
        showMangeColumn() {
            let e = this.$parent.$refs.manageColumn;
            this.mangeColumnPopperHandler(e), jQuery(e.$el).closest(".manageColumnDropdownHolder").removeClass("d-none").find("button.dropdown-toggle").addClass("d-none"), e.visible = !e.visible, e.$once("hide", () => {
                jQuery(e.$el).closest(".manageColumnDropdownHolder").addClass("d-none").find("button.dropdown-toggle").removeClass("d-none")
            })
        },
        recordIcon: e => e.icon ? e.icon.slice(0, -2) : ""
    },
    watch: {
        records(e) {
            var t = jQuery(this.$refs.listViewTable);
            e.length <= 0 ? t.floatThead("destroy") : this.registerFloatThead(), this.$once("hook:updated", () => {
                setTimeout(() => {
                    this.setListTableFloatingScroll(!0)
                }, 100)
            })
        }, listheaders: {
            handler() {
                let e = [];
                if (_.isArray(this.listheaders)) if (this.listheaders.length > 0) for (var t in this.listheaders) {
                    let a = this.listheaders[t];
                    if (a) {
                        var {name: s, label: i, model: l} = a;
                        if (l) e.push(a); else {
                            if (s.indexOf(".") < 0) {
                                let e = this.$_currentModuleModel.getField(s);
                                a.model = e || s
                            } else if (this.cachedReferenceFields[s]) a.model = this.cachedReferenceFields[s]; else {
                                var o = (e, t, s) => {
                                    let i = e.split("."), l = 3 === _.size(i) ? i[2] : i[1], o = t.getField(i[0]);
                                    if (o && "reference" === o.type.name) {
                                        let t = o.referenceModuleList, a = _.size(t) > 1 ? i[1] : t[0];
                                        this._getModuleDescribe(a).then(t => {
                                            let i = t.getField(l);
                                            if (i) {
                                                let t = jQuery.extend(!0, {}, i);
                                                t.fieldname = e;
                                                let l = new Vtiger_Field_Model(t);
                                                this.cachedReferenceFields[e] = l, Vue.set(this.orderedListHeaders[s], "model", l)
                                            }
                                        })
                                    }
                                };
                                if (this.$_currentModuleModel._loaded) o(s, this.$_currentModuleModel, t); else {
                                    ((e, t) => {
                                        let s = this.$watch("$_currentModuleModel._loaded", i => {
                                            i && (o(e, this.$_currentModuleModel, t), s())
                                        })
                                    })(s, t)
                                }
                            }
                            e.push(a)
                        }
                    } else e.push({name: "", label: ""})
                } else {
                    let t = 8;
                    for (var a = 0; a < t; a++) e.push({name: "", label: ""})
                } else for (let t in this.listheaders) e.push({name: t, label: this.listheaders[t]});
                this.orderedListHeaders = e
            }, immediate: !0
        }
    }
});
var Vtiger_Component_ListView = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter, Vtiger_Mixin_Record, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ListUtils],
    components: {
        "vds-list-filter": App.loadComponent("vds-list-filter"),
        "vds-quick-filter-button": App.loadComponent("QuickFilterButton"),
        "vds-calendar-view-header": App.loadComponent("CalendarViewHeader"),
        "vds-calendar-view-main": App.loadComponent("CalendarViewMain"),
        "vds-list-actions": App.loadComponent("vds-list-actions"),
        "vds-list-table": App.loadComponent("ListTable"),
        "vds-kanban": App.loadComponent("Kanban"),
        "vds-folder-view": App.loadComponent("FolderView"),
        "vds-row-action": App.loadComponent("RowAction"),
        "vds-list-view-footer": App.loadComponent("ListViewFooter"),
        "vds-list-header": App.loadComponent("ListHeader"),
        "vds-grid-view": App.loadComponent("GridView"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard"),
        "vds-list-view-top-widget": App.loadComponent("ListViewTopWidget"),
        "vds-list-loading-table": App.loadComponent("ListLoadingTable"),
        "vds-list-searchandaction": App.loadComponent("SearchAndActions"),
        "vds-pagination": App.loadComponent("Pagination"),
        "vds-list-search-results": App.loadComponent("ListSearchResults"),
        "vds-list-limit-alert": App.loadComponent("ListLimitAlert")
    },
    provide: function () {
        return {
            getCurrentModule: this.getCurrentModule,
            reLoadListRecords: this.reloadList,
            getSelectedRecords: this.getSelectedRecords,
            getListParams: this.getListParams,
            getCount: this.loadCount,
            massEdit: this.massEdit,
            postMassDelete: this.postMassDelete,
            getSelectAllRecordParams: this.getSelectAllRecordParams
        }
    },
    props: {
        module: {default: App.module()},
        mode: {default: "List"},
        viewtype: {default: "List"},
        isMultiSelectable: {default: !0},
        page: {default: 1},
        filterid: {type: [String, Number], default: ""},
        sortfield: {default: ""},
        sortorder: {default: ""},
        text: {default: ""},
        q: {default: "[]"},
        tagid: {default: ""},
        tag_params: {default: "[]"},
        urlParams: {default: () => []},
        isFollowingAllowed: {default: !0},
        manageColumns: {default: !0},
        extraFields: {default: () => []},
        defaultSearchParams: {default: () => []},
        extraReferenceListparams: {
            type: [Object], default: () => {
            }
        },
        showEmptyStateAction: {type: Boolean, default: !0},
        allowFieldActions: {type: Boolean, default: !0},
        groupby: {type: [String], default: ""},
        hideSearch: {type: [Boolean], default: !1},
        parentModule: {type: [String], default: ""},
        filterQuery: {type: [Object, Boolean], default: !1}
    },
    data() {
        return {
            list: [],
            filterHeaders: {h1: "", h2: "", h3: "", h4: "", h5: "", h6: "", h7: ""},
            currentModule: "",
            resetEnvironment: {},
            listParams: {
                sortfield: this.sortfield,
                sortorder: this.sortorder,
                page: this.page,
                filterid: this.filterid,
                q: new SearchParams(JSON.parse(this.q)),
                tagid: this.tagid,
                tag_params: new SearchParams(JSON.parse(this.tag_params)),
                text: this.text,
                viewtype: this.viewtype,
                groupby: this.groupby
            },
            listViewMode: this.viewtype,
            kanbanGroupByField: "",
            forceReloadList: !1,
            customViewSupport: !0,
            filterSupport: !0,
            currentFilterDetails: {},
            loading: !1,
            listViewHeight: window.innerHeight - 104,
            storingFromCache: !1,
            nextPageExist: !1,
            illustrationName: !1,
            filterSupported: !0,
            formatedFilterHeaders: [],
            parentModuleModel: "",
            addActionAllowed: !0,
            moduleEditionLimitData: {},
            editionLimitMessage: "",
            showTable: !1
        }
    },
    computed: {
        selectedrecord: {
            get() {
                return this.appStore.get("list_selectedrecords")
            }, set(t) {
                return this.appStore.set({key: "list_selectedrecords", data: t})
            }
        }, excludedIds: {
            get() {
                return this.appStore.get("list_excludedrecords")
            }, set(t) {
                return this.appStore.set({key: "list_excludedrecords", data: t})
            }
        }, isCompact() {
            return "compact" === this.mode
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, allowManageColumns() {
            if (!this.manageColumns) return this.manageColumns;
            var t = !1, e = this.currentFilterDetails.data;
            return e && this.$currentUser && ("All" != e.viewname || this.$currentUser.isAdmin ? (this.$currentUser.isAdmin || 0 == e.status || this.$currentUser.id == e.userid) && (t = !0) : t = !1), t
        }, recordsLength() {
            return this.list.length
        }
    },
    watch: {
        filterHeaders() {
            let t = [];
            for (var e in this.filterHeaders) {
                let i, a, l = this.filterHeaders[e];
                isNaN(e) ? (i = e, a = l) : ({name: i, label: a} = l);
                let r = {name: i, label: a}, o = this.masterModuleModel.getField(r.name);
                var s = this.masterModuleModel.getMetricFieldFilterableFields();
                s && Object.keys(s).includes(l.name) && (o = s[l.name]), o && (r.model = o), t.push(r)
            }
            return this.formatedFilterHeaders = t, this.formatedFilterHeaders
        }, listParams: {
            handler() {
                if (this.appStore.get(this.module + "list_noload")) return;
                let t = AppStorage.get(this.listParamsKey);
                !this.isCompact && t && t.filterid !== this.listParams.filterid && (this.listParams.page = 1, this.appStore.set({
                    key: this.module + "list_noload",
                    data: !0
                })), this.$nextTick(() => {
                    this.appStore.set({key: this.module + "list_noload", data: !1})
                }), this.isCompact || AppStorage.set(this.listParamsKey, this.listParams), this.loadList()
            }, deep: !0
        }, "listParams.q": {
            handler(t, e) {
                this.storingFromCache || this.filterChange()
            }, deep: !0
        }, "listParams.text"() {
            this.filterChange()
        }, listRecords: function (t, e) {
            let s = [], i = this.getCurrentModule();
            for (var a of t) s.push(BaseModel.getModuleSpecificModel(i, "Record", a));
            this.list = s, this.showTable = !0
        }, "listParams.filterid"(t, e) {
            e && (this.appStore.set({
                key: this.$module + "list_noload",
                data: !0
            }), this.listParams = Object.assign({}, this.listParams, {
                sortfield: "",
                sortorder: "",
                text: ""
            }), this.$nextTick(() => {
                this.appStore.set({key: this.$module + "list_noload", data: !1})
            }), this.appStore.set({key: "List_Filter_Change", data: t}), this.appStore.set({
                key: "listParams",
                data: this.listParams
            }), this.loadFilterDetails())
        }, listViewMode(t) {
            Vue.set(this.listParams, "viewtype", t)
        }, "$store.state.load_follow_list"(t) {
            t && (this.loadFollowList(), this.appStore.set({key: "load_follow_list", data: !1}))
        }
    },
    created: function () {
        this.appStore.set({key: "list_selectedrecords", data: []}), this.appStore.set({
            key: "list_info",
            data: {selectAllRecords: !1}
        });
        if (this.appStore.set({
            key: "list_pageparams",
            data: {pagelimit: 10}
        }), this.appStore.set({key: "list_searchresult", data: []}), !this.illustrationName) switch (this.$module) {
            case"Invoice":
            case"Quotes":
                this.illustrationName = "QuoteOrInvoice_listview_illustration.svg";
                break;
            default:
                this.illustrationName = this.$module + "_listview_illustration.svg"
        }
        this.isCompact || this.restoreStorageListParams(), this.preSetListData(), this.getMaxEntriesInList()
    },
    beforeDestroy() {
        this.appStore.set({key: "list_selectedrecords", data: []}), this.appStore.set({
            key: "list_info",
            data: {selectAllRecords: !1}
        });
        this.appStore.set({key: "list_pageparams", data: {pagelimit: 10}}), this.appStore.set({
            key: "list_searchresult",
            data: []
        })
    },
    mounted: function () {
        this.init(), this.$on("vds::list::reload", this.reloadList), this.$on("vds::list::record::update", this.postDetailPreviewCloseActions), this.$root.$off("vds::list::reloadHeaderFields"), this.$root.$on("vds::list::reloadHeaderFields", () => {
            let t = "list_filter_details";
            this.currentModule && this.listParams.filterid && (t = t + "_" + this.currentModule + "_" + this.listParams.filterid), this.appStore.delete(t, !1), this.loadFilterDetails(), this.listParams.q.data.length ? this.$refs.searchResults.clearSearch() : this.reloadList()
        }), this.$root.$on("vds::list::filter::change", () => {
            this.$refs.searchResults.clearSearch()
        }), this.parentModule && this._getModuleDescribe(this.parentModule).then(t => {
            t.isLoaded && (this.parentModuleModel = t)
        })
    },
    methods: {
        getListViewAccessApproval: () => !0, init() {
            this.currentModule = this.module, this.appStore.set({
                key: this.currentModule + "list_noload",
                data: !0
            }), this.getFilterId().then(() => {
                this.appStore.set({key: this.currentModule + "list_noload", data: !1}), this.loadList()
            }), this.preSetListData(), this.isCompact || AppStorage.set(this.listParamsKey, this.listParams), this.appStore.set({
                key: "listParams",
                data: this.listParams
            }), this.listenEvents(), _.defer(() => {
                this.getListViewHeight()
            })
        }, preSetListData() {
            let t = [];
            for (var e = 0; e < 10;) t.push(new Vtiger_Record_Model({loaded: !1})), e++;
            this.list = t
        }, loadFollowList() {
            let t = this.currentFilterDetails;
            if (!_.isEmpty(t)) {
                let e = t.conditions;
                for (let t in e) for (let s in e[t].columns) if ("starred" == e[t].columns[s].columnname) {
                    this.loadList();
                    break
                }
            }
        }, getCurrentModule() {
            return this.currentModule
        }, getFilterId() {
            return new Promise((t, e) => {
                "" == this.listParams.filterid ? this.filterQuery ? this.getQueriedFilterDetails(this.$module, this.filterQuery).then(e => {
                    this.postFilterRetrieveActions(e), t()
                }) : this.loadDefaultFilterDetails().then(() => t()) : (t(), this.loadFilterDetails())
            })
        }, loadDefaultFilterDetails: function () {
            return new Promise((t, e) => {
                this.getDefaultFilterDetails(this.$module).then(e => {
                    this.postFilterRetrieveActions(e), t()
                })
            })
        }, loadFilterDetails: function () {
            this.getFilterDetails({module: this.currentModule, id: this.listParams.filterid}).then(t => {
                this.postFilterRetrieveActions(t)
            }, t => {
                t.message && "Filter not found" == t.message && this.getDefaultFilterDetails(this.$module).then(t => {
                    this.postFilterRetrieveActions(t)
                })
            })
        }, postFilterRetrieveActions(t) {
            let e = "list_filter_details";
            e = e + "_" + this.$module + "_" + t.id, this.appStore.set({
                key: e,
                data: t,
                nonamespace: !0
            }), this.listParams.filterid != t.id && (this.listParams.filterid = t.id), Vue.set(this, "currentFilterDetails", t), this.resolveFilterFields(t)
        }, getSelectedFilterId() {
            return void 0 !== this.$refs.filterComponent ? this.$refs.filterComponent.selectedFilterId : ""
        }, getListParams() {
            return this.listParams
        }, loadList(t = {}) {
            if (t && t.massAction) return void this.updatePageOnMassAction();
            let e = this.getListRequestParams();
            _.isEmpty(this.extraReferenceListparams) || (e = Object.assign({}, e, this.extraReferenceListparams)), e.extrafields = _.union(this.getDefaultListViewFields(), this.extraFields), _.has(e, "groupby") && delete e.groupby;
            var s = {url: "records", params: e, key: "list_records"};
            let i = "api_get";
            "List" != this.listViewMode && "Folder" != this.listViewMode && "Card" != this.listViewMode || this.isCompact || !e.filterid || (i = "api_pjax"), "List" != this.listViewMode && "Folder" != this.listViewMode && "Card" != this.listViewMode || (this.loading = !0, NProgress.start(), this.appStore.request(i, s).then(t => {
                t && t[0] && (_.isUndefined(t[0].nextPageExists) ? this.$refs.pagination.pageparams.totalcount || this.loadCount() : this.nextPageExist = t[0].nextPageExists);
                let e = this.getCurrentModule();
                this.list = t.map(t => Vtiger_Record_Model.getCleanInstance(e, t)), this.loading = !1, this.showTable = !0, NProgress.done(), NProgress.remove(), this.$nextTick(() => {
                    jQuery("#listview-table").find("tr").removeClass("selectedRow")
                })
            }))
        }, loadCount() {
            return new Promise((t, e) => {
                let s = this.getListRequestParams();
                _.isEmpty(this.extraReferenceListparams) || (s = Object.assign({}, s, this.extraReferenceListparams)), this.appStore.request("api_get", {
                    url: "records/count",
                    params: s,
                    key: "list_count"
                }).then(e => {
                    Vue.set(this.$refs.pagination.pageparams, "totalcount", e.count), t()
                })
            })
        }, filterChange: function (t = !0) {
            this.$refs.listSearchAndAction && (this.$refs.listSearchAndAction.selectAllRecords = !1, this.$refs.listSearchAndAction.onAllPageRecordsSelected = !1), this.selectedrecord = [], this.excludedIds = [], t ? (this.listParams.page = 1, this.$set(this.listParams, "page", 1)) : (this.preSetListData(), this.loadList()), this.listParams.q.length > 0 && (this.listParams.q = new SearchParams), this.$set(this.resetEnvironment, "filterChanged", !0), this.$nextTick(() => this.$set(this.resetEnvironment, "filterChanged", !1)), t && this.$refs.pagination && this.$set(this.$refs.pagination.pageparams, "totalcount", 0)
        }, applySort(t) {
            this.listParams.sortfield == t && "asc" == this.listParams.sortorder ? this.listParams.sortorder = "desc" : this.listParams.sortorder = "asc", this.listParams.sortfield = t, this.appStore.set({
                key: "listParams",
                data: this.listParams
            })
        }, setSelectedRecords(t, e, s) {
            this.selectedrecord = [e]
        }, onSelectAllRecords(t, e) {
            t ? this.$refs.listSearchAndAction.onAllPageRecordsSelected = t : (this.$refs.listSearchAndAction.onAllPageRecordsSelected = !1, this.selectedrecord = [], this.$refs.listSearchAndAction.selectAllRecords = !1)
        }, getAllRecordIds() {
            return new Promise((t, e) => {
                let s = this.getListRequestParams();
                s.id = s.filterid, s.excluded_ids = this.excludedIds, s.selected_ids = "all", this.appStore.request("api_get", {
                    url: "ui/modules/filter/records",
                    params: s,
                    key: "list_all_recordids"
                }).then((function (e) {
                    t(e)
                }))
            })
        }, getSelectAllRecordParams() {
            if (this.$refs.listSearchAndAction.selectAllRecords) {
                let t = this.getListRequestParams();
                return t.excluded_ids = this.excludedIds, t.selected_ids = "all", t
            }
            return {}
        }, async getSelectedRecords() {
            let t = [];
            return t = this.$refs.listSearchAndAction.selectAllRecords ? await this.getAllRecordIds() : this.selectedrecord, t
        }, getListViewHeight: function () {
            var t = document.getElementById("trialmessage") ? document.getElementById("trialmessage").offsetHeight : 0,
                e = document.getElementById("cloudalert") ? document.getElementById("cloudalert").offsetHeight : 0,
                s = document.getElementById("topbar") ? document.getElementById("topbar").offsetHeight : 0,
                i = document.getElementsByClassName("vds-bodyfixedheader") && document.getElementsByClassName("vds-bodyfixedheader")[0] ? document.getElementsByClassName("vds-bodyfixedheader")[0].offsetHeight : 0,
                a = document.getElementById("viewHeader") ? document.getElementById("viewHeader").offsetHeight : 0,
                l = window.innerHeight - (t + e + s + i + a);
            this.listViewHeight = l
        }, reloadList(t = {}) {
            this.loadList(), t.reloadCount && this.loadCount(), "Kanban" != this.listViewMode && "Calendar" != this.listViewMode || (this.forceReloadList = !0, this.$root.$emit("vds::list::force::reload"))
        }, listenEvents() {
            this.$root.$on("vds::list::force::reloaded", t => {
                this.forceReloadList = t
            })
        }, restoreStorageListParams() {
            let t = this.urlParams, e = AppStorage.get(this.listParamsKey), s = Object.keys(t),
                i = e ? Object.keys(e) : [], a = _.intersection(s, i);
            if (a = _.difference(a, ["module", "app"]), a.length <= 1 && _.isObject(e)) {
                this.storingFromCache = !0;
                var l = jQuery.extend(!0, {}, t);
                delete l.module, this.listParams = jQuery.extend(!0, {}, e, l), _.isEmpty(this.listParams.viewtype) || (this.listViewMode = this.listParams.viewtype), this.listParams.q && (this.listParams.q = new SearchParams(this.listParams.q.data)), this.listParams.tag_params && (this.listParams.tag_params = new SearchParams(this.listParams.tag_params.data)), this.$nextTick(() => {
                    this.storingFromCache = !1
                })
            }
        }, getDefaultListViewFields() {
            let t = ["starred"];
            return this.masterModuleModel._isInventoryModule() && t.push("currency_id"), t
        }, postMassDelete() {
            this.loadList({massAction: !0})
        }, massEdit() {
            if (1 == this.selectedrecord.length) {
                var t = this.getRecordDetailViewUrl(this.selectedrecord[0], this.getCurrentModule()) + "&viewtype=deepdive";
                return t += "&returnUrl=" + encodeURIComponent(url("query")), void this.redirectUrl(t)
            }
            this.getSelectedRecords().then(t => {
                t.length > 500 ? this.showErrorNotification(this.translate("JS_MASS_EDIT_LIMIT")) : this.showModal({
                    componentName: "ListMassEditFields",
                    componentData: {recordIds: t, reloadList: this.loadList}
                })
            })
        }, updatePageOnMassAction() {
            this.loadCount().then(() => {
                let t = Math.ceil(this.$refs.pagination.pageparams.totalcount / this.$refs.pagination.pageparams.pagelimit);
                this.listParams.page > t && t > 0 && (this.listParams.page = t), this.loadList()
            })
        }, resetSelectedRecords() {
            this.isCompact || this.$refs.listSearchAndAction.selectAllRecords || (this.selectedrecord = [], this.excludedIds = [])
        }, postDetailPreviewCloseActions(t, e) {
            let s = this.currentFilterDetails;
            if (this.filterConditionsFields || (this.filterConditionsFields = {}), !this.filterConditionsFields[s.id]) {
                this.filterConditionsFields[s.id] = {conditionFields: []};
                let t = [];
                for (var i in s.conditions) for (var a in s.conditions[i]) {
                    let e = s.conditions[i][a];
                    for (var l in e) e[l].columnname && t.push(e[l].columnname)
                }
                this.filterConditionsFields[s.id].conditionFields = t
            }
            let r = this.filterConditionsFields[s.id].conditionFields;
            if (_.intersection(e, r).length > 0) this.loadList(); else if (_.includes(e, this.listParams.sortfield)) this.loadList(); else {
                let s = [];
                for (var i in this.listParams.q.data) for (var l in this.listParams.q.data[i]) s.push(this.listParams.q.data[i][l][0]);
                _.intersection(e, s).length > 0 ? this.loadList() : this.updateRecord(t)
            }
        }, updateRecord(t) {
            let e = _.findLastIndex(this.list, {id: parseInt(t.id)}),
                s = Vtiger_Record_Model.getCleanInstance(this.$module, t);
            Vue.set(this.list, e, s)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "vds-body"}, [isCompact ? _e() : _c("div", {
            staticClass: "vds-bodyfixedheader container-fluid py-2 px-0",
            class: {"bg-grey-hue-8": "Card" != listViewMode}
        }, [_c("div", {
            staticClass: "d-flex align-items-center",
            style: {padding: "List" === listViewMode || "Card" === listViewMode ? "0 80px" : "0 24px"}
        }, [filterSupported && getListViewAccessApproval() ? _c("div", {staticClass: "col-3 justify-content-start pl-0"}, [customViewSupport || "RecycleBin" == urlParams.module ? _c("div", {staticClass: "d-flex w-100 justify-content-start"}, [_c("vds-list-filter", {
            ref: "filterComponent",
            attrs: {
                "current-filter-details": currentFilterDetails,
                "module-prop": currentModule,
                "selected-filter-prop": listParams.filterid,
                "selected-tag-prop": listParams.tagid,
                viewtype: listViewMode
            },
            on: {
                "update:selectedFilterProp": function (t) {
                    return $set(listParams, "filterid", t)
                }, "update:selected-filter-prop": function (t) {
                    return $set(listParams, "filterid", t)
                }, "update:selectedTagProp": function (t) {
                    return $set(listParams, "tagid", t)
                }, "update:selected-tag-prop": function (t) {
                    return $set(listParams, "tagid", t)
                }, filterchange: filterChange, "vds::resolve::filterfields": resolveFilterFields
            }
        })], 1) : _e()]) : _e(), _v(" "), _c("div", {staticClass: "flex-grow-1 justify-content-start pl-0"}, ["Calendar" == listViewMode ? _c("vds-calendar-view-header") : _e()], 1), _v(" "), _c("div", {staticClass: "col-auto px-0"}, [_c("vds-list-actions", {
            attrs: {
                filterSupport: filterSupport,
                currentListMode: listViewMode,
                "group-by-field": kanbanGroupByField,
                "selected-filter": listParams.filterid,
                "add-action-allowed": addActionAllowed
            }, on: {
                "update:currentListMode": function (t) {
                    listViewMode = t
                }, "update:current-list-mode": function (t) {
                    listViewMode = t
                }, "update:groupByField": function (t) {
                    kanbanGroupByField = t
                }, "update:group-by-field": function (t) {
                    kanbanGroupByField = t
                }
            }
        })], 1)])]), _v(" "), ("List" == listViewMode || "Folder" == listViewMode || "Card" == listViewMode || isCompact) && getListViewAccessApproval() ? _c("div", {
            staticClass: "vds-bodycontents listBody",
            class: {"bg-grey-hue-7": "Card" == listViewMode},
            staticStyle: {"padding-left": "50px", "padding-right": "80px"}
        }, [_c("vds-list-limit-alert", {
            attrs: {
                "add-action-allowed": addActionAllowed,
                isCompact: isCompact,
                isMultiSelectable: isMultiSelectable,
                alertMessage: editionLimitMessage
            }
        }), _v(" "), _c("vds-list-view-top-widget"), _v(" "), loading || list.length || listParams.text.length || listParams.q.data.length ? _c("div", [_c("div", {
            staticClass: "container-fluid listViewActions d-flex align-items-center justify-content-between pr-0",
            style: {"padding-left": isMultiSelectable ? "30px" : "0px"}
        }, [_c("vds-list-searchandaction", {
            ref: "listSearchAndAction",
            attrs: {
                isCompact: isCompact,
                formatedFilterHeaders: formatedFilterHeaders,
                listParams: listParams,
                currentModule: currentModule,
                defaultSearchParams: defaultSearchParams,
                hideSearch: hideSearch,
                list: list,
                masterModuleModel: masterModuleModel,
                parentModuleModel: parentModuleModel,
                getSelectedRecords: getSelectedRecords,
                loadList: loadList,
                getListParams: getListParams,
                getSelectAllRecordParams: getSelectAllRecordParams,
                "next-page-exist": nextPageExist,
                recordsLength: recordsLength
            }
        }), _v(" "), _c("div", {staticClass: "col-4 pr-0 d-flex justify-content-end align-items-center"}, [_c("vds-pagination", {
            ref: "pagination",
            attrs: {
                "current-page": listParams.page,
                "next-page-exist": nextPageExist,
                "current-page-count": recordsLength
            },
            on: {
                "update:currentPage": function (t) {
                    return $set(listParams, "page", t)
                }, "update:current-page": function (t) {
                    return $set(listParams, "page", t)
                }, "vds::load::listview::count": function (t) {
                    return loadCount()
                }, "vds::reset::selected::records": function (t) {
                    return resetSelectedRecords()
                }
            }
        })], 1)], 1), _v(" "), _c("vds-list-search-results", {
            ref: "searchResults",
            attrs: {getListParams: getListParams, ismultiselectable: isMultiSelectable}
        }), _v(" "), "Folder" == listViewMode ? [_c("div", {staticClass: "pl-4"}, [_c("vds-grid-view", {
            attrs: {
                "list-params": listParams,
                "force-reload": forceReloadList,
                "view-height": listViewHeight,
                records: list
            }, on: {
                "update:forceReload": function (t) {
                    forceReloadList = t
                }, "update:force-reload": function (t) {
                    forceReloadList = t
                }
            }
        })], 1)] : "Card" == listViewMode ? [_c("div", {staticClass: "pl-4"}, [_c("vds-card-view", {
            attrs: {
                "list-params": listParams,
                "force-reload": forceReloadList,
                "view-height": listViewHeight,
                records: list,
                loading: loading
            }, on: {
                "update:forceReload": function (t) {
                    forceReloadList = t
                }, "update:force-reload": function (t) {
                    forceReloadList = t
                }, vt_list_row_click: listRowClick
            }
        })], 1)] : [loading ? _c("div", {
            staticClass: "table-container listTableContainer empty",
            class: {multiSelectList: isMultiSelectable}
        }, [_c("vds-list-loading-table", {attrs: {list: list}})], 1) : _e(), _v(" "), showTable ? _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !loading,
                expression: "!loading"
            }], staticClass: "justify-content-md-center listViewBlock pb-4", class: {multiSelectList: isMultiSelectable}
        }, [_c("div", {
            staticClass: "position-relative",
            class: {listViewFrame: list.length}
        }, [_c("div", {staticClass: "container-fluid listViewTableContainer position-relative"}, [_c("div", {staticClass: "table-container listTableContainer"}, [_c("vds-list-table", _g({
            ref: "listTable",
            attrs: {
                viewtype: viewtype,
                compactMode: isCompact,
                showActionsColumn: showActionsColumn,
                listheaders: formatedFilterHeaders,
                records: list,
                ismultiselectable: isMultiSelectable,
                "list-params": listParams,
                "is-following-allowed": isFollowingAllowed,
                "manage-columns": allowManageColumns,
                "hidden-resize-column-index": [0, 1],
                loading: loading,
                "show-empty-state-action": showEmptyStateAction,
                "allow-field-actions": allowFieldActions,
                "current-filter-details": currentFilterDetails,
                illustrationName: illustrationName,
                parentModule: parentModule,
                "add-action-allowed": addActionAllowed
            },
            on: {
                vt_list_row_click: listRowClick,
                vt_all_list_record_selected: onSelectAllRecords,
                vt_list_field_sort: applySort
            }
        }, $listeners))], 1)])]), _v(" "), list.length ? _c("div", {staticClass: "d-flex"}, [_c("div", {staticClass: "mr-auto mx-5"}, [_c("vds-list-view-footer", {attrs: {"compact-mode": isCompact}})], 1)]) : _e()]) : _e()]], 2) : _c("div", [_c("vds-empty-state-card", {
            style: {height: listViewHeight + "px"},
            attrs: {
                "add-action-allowed": addActionAllowed,
                illustrationName: illustrationName,
                "show-add-button": showEmptyStateAction,
                "selected-filter": listParams.filterid
            }
        })], 1), _v(" "), _c("div", {staticClass: "d-none manageColumnDropdownHolder"}, [manageColumns ? _c("b-dropdown", {
            ref: "manageColumn",
            staticStyle: {"margin-left": "30px", "margin-top": "12px"},
            attrs: {
                offset: "30",
                variant: "default",
                boundary: "window",
                title: translate("LBL_MANAGE_COLUMNS"),
                size: "sm",
                "no-caret": ""
            }
        }, [_c("template", {slot: "button-content"}, [_c("span", {staticClass: "fa fa-ellipsis-v"})]), _v(" "), _c("b-dropdown-item-button", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.ConfigListColumnsModal",
                value: {filterId: listParams.filterid},
                expression: "{filterId:listParams.filterid}",
                modifiers: {ConfigListColumnsModal: !0}
            }], staticClass: "px-2"
        }, [_v(_s(translate("LBL_EDIT_COLUMN")))])], 2) : _e()], 1)], 1) : "Kanban" == listViewMode ? [_c("vds-kanban", {
            staticClass: "vds-bodycontents",
            attrs: {
                "list-params": listParams,
                "force-reload": forceReloadList,
                "group-by-field": kanbanGroupByField,
                "view-height": listViewHeight
            },
            on: {
                "update:forceReload": function (t) {
                    forceReloadList = t
                }, "update:force-reload": function (t) {
                    forceReloadList = t
                }
            }
        })] : "Calendar" == listViewMode ? [_c("vds-calendar-view-main", {
            staticClass: "vds-bodycontents",
            attrs: {
                filterid: listParams.filterid,
                "list-search-params": listParams.q,
                "view-height": listViewHeight,
                formatedFilterHeaders: formatedFilterHeaders,
                masterModuleModel: masterModuleModel
            }
        })] : "AgentPortal" == listViewMode ? [_c("vds-agent-portal", {
            staticClass: "vds-bodycontents",
            attrs: {"view-height": listViewHeight}
        })] : _e()], 2)
    },
    $_onBoard: {steps: {onboard_start_email_sequence: ["onboard_start_email_sequence_step_1"]}}
});
var Vtiger_Component_EngagementsActivity = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Emotions, App.loadMixin("Record", "Emotions"), Vtiger_Mixin_Module, Vtiger_Mixin_UsersUtils, Vtiger_Mixin_DateUtils, Vtiger_Mixin_ShowPreview],
    components: {
        "vds-display-emotion-emojis": App.loadComponent("EmotionEmojis"),
        "vds-field-display": App.loadComponent("FieldDisplay")
    },
    props: {
        data: Object,
        parentRecord: {type: Object},
        userImageInfo: {type: Object},
        relatedModuleModels: {type: Object},
        selectedActivityId: {type: [Number, String]},
        restrictActions: {type: [Boolean]}
    },
    data: () => ({
        showEmotionIcon: !1,
        displayInlineEmotions: !1,
        supportedEmotionsType: ["Call", "Meeting", "Onsite meeting", "Mobile Call", "PhoneCalls", "Emails"],
        selectedEmotion: "",
        userActions: ["SENT", "Recieved", "Shares"],
        customerActions: ["Downloads", "Opens", "Open", "Click", "Reshares", "Replies", "Clicks", "Login", "Logout"],
        moduleStatusLabel: {
            Cases: "Status",
            Events: "Status",
            PhoneCalls: "Call Status",
            Emails: "Status",
            SMSNotifier: "Status"
        }
    }),
    computed: {
        activityIcon() {
            switch (this.data.type) {
                case"Emails":
                    return "fa fa-envelope";
                case"EmailCampaigns":
                    return "fa-emailcampaigns";
                case"Cases":
                    return "fa-cases";
                case"PhoneCalls":
                    return "fa-phonecalls";
                case"Chat":
                    return "fa-olark";
                case"CustomerPortal":
                    return "fa-portal";
                case"Documents":
                    return "fa-documents";
                case"Call":
                case"Mobile Call":
                    return "fa-phone-alt";
                case"Group Event":
                    return "fa-calendar";
                case"Onsite meeting":
                case"Onsite Service":
                case"Meeting":
                    return "fa-users-class";
                default:
                    return this.data.record && "Events" === this.data.record.module ? "fa-calendar" : "fa-handshake-alt"
            }
        }, detailUrl() {
            let t = "view/detail?id=" + this.data.record.id + "&module=" + this.data.record.module;
            return "PhoneCalls" == this.data.record.module && (t += "&viewtype=deepdive"), t
        }, preparedMessage() {
            var t = {
                "Documents:Downloads": "Downloaded",
                "Documents:Opens": "Opened",
                "Documents:Reshares": "Reshared",
                "Documents:Shares": "Shared",
                "EmailCampaigns:Open": "Opened",
                "EmailCampaigns:Click": "Clicked",
                "Emails:Clicks": "Clicked",
                "Emails:Opens": "Opened",
                "Emails:Received": "RECEIVED",
                "Emails:Replies": "Replied to",
                "Emails:SENT": "SENT"
            };
            let e = "";
            return this.isPersonAction && (e = "CustomerPortal" === this.data.type && "Login" === this.data.status ? this.translate("LOGGED_IN_CUSTOMER_PORTAL") : "CustomerPortal" === this.data.type && "Logout" === this.data.status ? this.translate("LOGGED_OUT_CUSTOMER_PORTAL") : t[this.data.type + ":" + this.data.status] ? this.translate(t[this.data.type + ":" + this.data.status]) : this.translate(this.data.status)), e
        }, updateActionMessage() {
            let t = this.translate("LBL_UPDATED"), e = this.data.record;
            var a = {Bounce: "Bounced", Spam: "was marked as spam"};
            return e && "EmailCampaigns" === e.module && a[this.data.status] && (t = this.translate(a[this.data.status])), t
        }, prependMesssage() {
            return "Emails" === this.data.type || "Documents" === this.data.type || "EmailCampaigns" === this.data.type && ("Open" === this.data.status || "Click" === this.data.status)
        }, isPersonAction() {
            return this.customerActions.includes(this.data.status) || this.userActions.includes(this.data.status)
        }, isCustomerAction() {
            return this.customerActions.includes(this.data.status)
        }, customerLabel() {
            let t = this.parentRecord.label;
            return this.data.parent_id && this.data.parent_id.label && (t = this.data.parent_id.label), t
        }, userDetailViewUrl() {
            return this.getUserDetailUrl(this.data.userid.id)
        }, isAdmin() {
            return !(!this.$currentUser || "on" !== this.$currentUser.is_admin)
        }, isUserDetailLinkAllowed() {
            return this.isAdmin || this.data.userid.id == this.$currentUser.id
        }, showModuleStatusUpdate() {
            let t = !1, e = this.data.record;
            return e && this.moduleStatusLabel[e.module] && (t = !0), t
        }, isEmotionSupportedInView() {
            return this.supportedEmotionsType.indexOf(this.data.type) >= 0
        }, relatedModuleStatusField() {
            let t = this.data.record ? this.data.record.module : "", e = !1;
            if (moduleStatusFields = {
                Cases: "casestatus",
                Events: "eventstatus"
            }, moduleStatusFields[t] && this.relatedModuleModels[t]) {
                e = this.relatedModuleModels[t].getField(moduleStatusFields[t])
            }
            return e
        }
    },
    methods: {
        getRecordModel(t, e) {
            var a = {};
            let s = t.moduleModel;
            a[t.name] = e;
            var i = BaseModel.getModuleSpecificModel(s.name, "Record", a);
            return this.transformRecordToUserFormat(i, s)
        },
        getColor: t => VTHelper.getColorCode(t),
        getAttachmentIcon: t => t ? VTHelper.getFileIconByFileName(t) : "fa-file"
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex flex-row p-3 position-relative",
            attrs: {name: data.type},
            on: {
                mouseover: function (t) {
                    showEmotionIcon = !0
                }, mouseout: function (t) {
                    showEmotionIcon = !1
                }
            }
        }, [_c("span", {staticClass: "p-0 mr-3 position-relative"}, [isCustomerAction ? _c("i", {
            staticClass: "activityIconContainer icon-container-sm d-flex align-items-center justify-content-center text-dark",
            class: getModuleIconClass($module)
        }) : [userImageInfo && userImageInfo[data.userid.id] && userImageInfo[data.userid.id].image ? _c("img", {
            staticClass: "user-image-sm border-grey-6",
            attrs: {
                alt: userImageInfo[data.userid.id].fullname,
                src: userImageInfo[data.userid.id].image.url,
                title: data.userid.label
            }
        }) : _c("span", {
            staticClass: "circle-icon border-grey-6 text-capitalize text-white icon-container-sm d-flex align-items-center justify-content-center",
            style: {background: getColor(data.userid.label)}
        }, [_v(_s(data.userid.label.substring(0, 2)))])], _v(" "), _c("span", {
            staticClass: "text-primary relatedModuleIcon",
            class: activityIcon
        })], 2), _v(" "), _c("div", [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "d-flex-inline lh-20"}, [isPersonAction ? _c("div", {staticClass: "d-inline"}, [isCustomerAction ? _c("span", [_c("strong", [_c("span", [_v(_s(customerLabel))])])]) : [_c("strong", [isUserDetailLinkAllowed ? _c("a", {
            staticClass: "text-dark",
            attrs: {href: userDetailViewUrl, target: "_blank"}
        }, [_v(_s(data.userid.label))]) : _c("span", [_v(_s(data.userid.label))])])]], 2) : _e(), _v(" "), _c("div", {staticClass: "d-inline"}, [isPersonAction ? _c("span", {staticClass: "text-lowercase"}, [_v(_s(preparedMessage))]) : _e(), _v(" "), "CustomerPortal" !== data.type ? _c("span", [data.record && "Events" === data.record.module ? _c("span", [_v(_s(translate(data.type, "Events")) + " ")]) : "Chat" === data.type ? _c("span", [_v(_s(translate(data.type)) + " ")]) : _c("span", [_v(_s(translate("SINGLE_" + data.type, data.type)) + " ")]), _v(" "), data.record && "Emails" === data.record.module ? _c("a", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.EmailPreview",
                value: {recordid: data.record.id},
                expression: "{recordid : data.record.id}",
                modifiers: {EmailPreview: !0}
            }], staticClass: "word-break-all", attrs: {tabindex: ""}
        }, [_v(_s(data.record.label))]) : _c("a", {
            attrs: {href: detailUrl, target: "_blank"},
            on: {
                click: function (t) {
                    return t.preventDefault(), openRecord(data.record.id, data.record.module)
                }
            }
        }, [_v(_s(data.record.label))])]) : _e(), _v(" "), isPersonAction ? _e() : [_c("span", [_v(_s(translate("Assigned To")) + " \n\t\t\t\t\t\t\t\t"), _c("span", [_c("strong", [isUserDetailLinkAllowed ? _c("a", {
            staticClass: "text-dark",
            attrs: {href: userDetailViewUrl, target: "_blank"}
        }, [_v(_s(data.userid.label))]) : _c("span", [_v(_s(data.userid.label))])])]), _v(" "), _c("span", {staticClass: "text-lowercase"}, [_v(_s(updateActionMessage))])])], _v(" "), _c("small", {staticClass: "mx-3 text-muted"}, [_c("vds-date-diff-string", {attrs: {utcTime: data.happened_on}})], 1)], 2)])]), _v(" "), !isPersonAction && showModuleStatusUpdate ? _c("div", {staticClass: "d-flex align-items-center"}, [_c("span", {staticClass: "mx-1"}, [_v("'" + _s(translate(moduleStatusLabel[data.record.module])) + "'")]), _v(" "), _c("span", {staticClass: "mr-1"}, [_v(_s(translate("LBL_CHANGED")))]), _v(" "), _c("span", {staticClass: "text-dark mr-1"}, [_v(_s(translate("LBL_TO").toLowerCase()))]), _v(" "), relatedModuleStatusField ? [_c("vds-field-display", {
            attrs: {
                field: relatedModuleStatusField,
                record: getRecordModel(relatedModuleStatusField, data.status),
                modulemodel: relatedModuleStatusField.moduleModel,
                view: "list"
            }
        })] : _c("span", [_v(_s(data.status))])], 2) : _e()]), _v(" "), isEmotionSupportedInView ? _c("div", [_c("span", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: showEmotionIcon && isEmotionSupportedInView && data.emotion,
                expression: "showEmotionIcon && isEmotionSupportedInView && data.emotion"
            }], attrs: {title: data.emotion}
        }, [_c("img", {staticClass: "mediumEmoji c-pointer", attrs: {src: getEmotionIcon(data.emotion)}})])]) : _e()])
    }
});
var Vtiger_Component_DetailRelatedList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, Vtiger_Mixins_UnimplementedModulesList],
    components: {
        "vds-related-list-header": App.loadComponent("DetailRelatedListHeader"),
        "vds-select-related-record-actions": App.loadComponent("SelectRelatedRecordActions"),
        "vds-empty-related-record": App.loadComponent("EmptyRelatedRecord"),
        "vds-comingsoon-view": App.loadComponent("ComingsoonView")
    },
    props: {relation: {default: () => BaseModel.getModuleSpecificModel(this.$module, "Relation", {})}},
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "relatedRecordsContainer overflow-auto",
            attrs: {id: "relation.id"}
        }, [_c("vds-related-list-header", {attrs: {relation: relation}}, [_t("header-title", null, {slot: "title"}), _v(" "), _c("template", {slot: "action"}, [isRelatedListActionPermitted() ? _c("vds-select-related-record-actions", {
            attrs: {
                showAllRecords: showAllRecords,
                "select-multiple": !0,
                relation: relation
            }, on: {
                "update:showAllRecords": function (e) {
                    showAllRecords = e
                }, "update:show-all-records": function (e) {
                    showAllRecords = e
                }, "vds::popup:record::selected": link
            }
        }) : _e()], 1)], 2), _v(" "), comingSoonModules.includes(relation.relatedModuleName) ? [_c("vds-comingsoon-view", {attrs: {"is-subview": !0}})] : [_c("div", {
            staticClass: "widget-list",
            attrs: {role: "tablist"}
        }, [_l(relatedRecords, (function (e, t) {
            return [e._isEmpty ? [_c("vds-empty-related-record")] : [_c(relatedComponent, {
                key: e.getId(),
                tag: "component",
                attrs: {
                    module: relation.relatedModule,
                    record: e,
                    index: t,
                    parentModuleModel: $_currentModuleModel,
                    relation: relation,
                    expanded: !t
                },
                on: {"vds::related:record::action": handleAction}
            })]]
        }))], 2), _v(" "), !loading && pageExists ? _c("div", {
            staticClass: "moreRecordsLink text-center text-primary c-pointer mt-2",
            on: {click: getRelatedRecords}
        }, [_v(_s(translate("LBL_SHOW_MORE")))]) : _e(), _v(" "), relatedRecords.length ? _e() : _c("div", {staticClass: "h-100 d-flex justify-content-center align-items-center"}, [_c("div", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])])]], 2)
    },
    data: () => ({
        relatedRecords: [],
        relatedComponent: {template: "<span></span>"},
        pageNum: 0,
        pageExists: !0,
        emptyRecords: [],
        count: 0,
        loading: !0,
        showAllRecords: !1
    }),
    watch: {
        relation(e, t) {
            e.id !== t.id && this.refreshWidgets()
        }, showAllRecords: {
            handler(e, t) {
                this.pageNum = 0, this.pageExists = !0, this.getRelatedRecords()
            }
        }
    },
    created() {
        this.setEmptyRecords(), this.getRelatedRecords(), this.$root.$on("vds::load::records", this.getRelatedRecords)
    },
    methods: {
        getRelatedListParams() {
            return {
                module: this.$module,
                id: this.$_detailRecordModel.getId(),
                relationid: this.relation.relation_id,
                page: this.pageNum
            }
        }, getRelatedRecords() {
            if (this.comingSoonModules.includes(this.relation.relatedModuleName)) return !1;
            if (this.pageNum = this.pageNum + 1, void 0 !== this.relation.relation_id) {
                if ("__PS_RELATION_ID" == this.relation.relation_id) return !0;
                this.getExtraFields(this.relation.relatedModule).then(e => {
                    if (this.pageExists) {
                        let t = this.getRelatedListParams();
                        t.extraFields = e, this.relatedRecords = this.relatedRecords.concat(this.emptyRecords), this.loading = !0, this.appStore.request("api_get", {
                            url: "records/relationrecords",
                            params: t,
                            key: "related_records_data"
                        }).then(e => {
                            if (this.relatedRecords.splice(-this.emptyRecords.length, this.relatedRecords.length), _.isArray(e) && e.length) {
                                if (this.getRelatedRecordComponent(), responseRecords = e.map(e => Vtiger_Record_Model.getCleanInstance(this.relation.relatedModule, e)), this.pageNum > 1) for (let e in responseRecords) this.relatedRecords.push(responseRecords[e]); else this.relatedRecords = responseRecords;
                                _.isUndefined(e[0].nextPageExists) ? this.checkNextPageExists() : this.pageExists = e[0].nextPageExists
                            } else this.pageExists = !1
                        }).finally(() => this.loading = !1)
                    }
                })
            }
        }, checkNextPageExists() {
            if (1 == this.pageNum) {
                let e = this.getRelatedListParams();
                e.relatedModuleName = this.relation.relatedModuleName, this.appStore.request("api_get", {
                    url: "records/relationrecords/count",
                    params: e,
                    key: "related_records_count"
                }).then(e => {
                    this.count = parseInt(e[this.relation.relation_id]), this.relatedRecords.length == this.count && (this.pageExists = !1)
                })
            } else this.relatedRecords.length == this.count && (this.pageExists = !1)
        }, refreshWidgets() {
            this.pageNum = 0, this.pageExists = !0, this.relatedRecords = [], this.getRelatedRecords()
        }, getExtraFields(e) {
            return new Promise((t, i) => {
                this.getRelatedRecordComponent().then(i => {
                    var s = [];
                    if (i) {
                        let e = i.options.data().defaultHeaderFields;
                        e.length > 0 && (s = _.union(s, e))
                    }
                    var o = ["email", "phone"];
                    e ? this._getModuleDescribe(e).then(e => {
                        var i = e;
                        (s = i ? _.union(s, Object.keys(i.getFieldsOfType(o))) : s).push("primary_phone_field", "primary_email_field"), t(s)
                    }) : t(s)
                })
            })
        }, unlink(e) {
            "" != e.getId() && this.appStore.request("api_delete", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.relation.relatedModule,
                    related_record_id: e.getId()
                }
            }).then(t => {
                if (t) {
                    let t = this.relatedRecords.findIndex(t => t.getId() == e.getId());
                    this.relatedRecords.splice(t, 1), this.$root.$emit("vds::post::unlink::action", {
                        source_record: this.$_detailRecordModel,
                        related_record: e
                    })
                }
            }, e => {
                e.message && this.showErrorNotification({message: e.message})
            })
        }, link(e) {
            var t = e.map((function (e) {
                return _.isObject(e) ? e.getId() : e
            }));
            t && 0 == t.length || this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.relation.relatedModule,
                    related_record_id: t
                }
            }).then(e => {
                "true" == e && this.refreshWidgets()
            })
        }, getRelatedRecordComponent() {
            return new Promise((e, t) => {
                let i = `Detail${this.$module}${this.relation.relatedModule}RelatedRecord`,
                    s = `Detail${this.relation.relatedModule}RelatedRecord`, o = App.getDynamicComponentInstance(i);
                if (o) return this.relatedComponent = o, void e(this.relatedComponent);
                {
                    let t = () => {
                        let t = App.getDynamicComponentInstance(s, this.$module);
                        t ? (this.relatedComponent = t, e(this.relatedComponent)) : (this.relatedComponent = App.getDynamicComponentInstance("DetailRelatedRecord", this.$module), e(this.relatedComponent))
                    };
                    new Promise(App.loadComponent(s, this.relation.relatedModule)).then(i => {
                        i ? (this.relatedComponent = i, e(this.relatedComponent)) : t()
                    }).catch(() => {
                        t()
                    })
                }
            })
        }, handleAction(e) {
            switch (e.name) {
                case"unlink":
                    this.unlink(e.data)
            }
        }, isRelatedListActionPermitted() {
            if (this.comingSoonModules.includes(this.relation.relatedModuleName)) return !1;
            let e = this.relation && (this.relation.isSelectPermitted || this.relation.isCreatePermitted);
            return !(this.$_detailRecordModel && this.$_detailRecordModel.isClosed && this.$_currentModuleModel && this.$_currentModuleModel.closedStateDetails && this.$_currentModuleModel.closedStateDetails.allow_relations && !parseInt(this.$_currentModuleModel.closedStateDetails.allow_relations)) && ((!this.$_currentModuleModel.isPSLineItemsEnabled || !["Products", "Services"].includes(this.relation.relatedModuleName)) && e)
        }, setEmptyRecords() {
            let e = [];
            for (var t = 0; t < 3; t++) e.push(Vtiger_Record_Model.getCleanInstance(this.$module, {
                _loaded: !1,
                _isEmpty: !0
            }));
            this.emptyRecords = e
        }
    }
});
var Vtiger_Component_DetailRelatedRecord = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, App.loadMixin("Record"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_Emotions, App.loadMixin("Field"), Vtiger_Mixin_ModulePermissions, Vtiger_Mixin_DependentFields, Vtiger_Mixin_ShowDependentFieldsModal],
    components: {
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-sticky-notes-place-holder": App.loadComponent("StickyNotesPlaceHolder", App.module(), !1)
    },
    props: {
        record: {type: Object},
        module: {type: String},
        parentModuleModel: {type: Object},
        relation: {type: Object},
        fromOneView: {default: !1},
        actionsAllowed: {type: Boolean, default: !1},
        index: {type: Number},
        expanded: {type: Boolean, default: !1}
    },
    data() {
        return {
            optionsVisible: !1,
            imageDetails: [],
            headerLimit: 2,
            activeRelatedView: {},
            defaultHeaderFields: [],
            customRelationFields: [],
            editableHeaders: [],
            showDetailViewLink: !0,
            recordModel: this.record,
            fieldEdit: {},
            clonedRecord: {},
            targetFields: {}
        }
    },
    mounted() {
        this.init(), this.clonedRecord = jQuery.extend(!0, {}, this.recordModel)
    },
    computed: {
        relatedViews() {
            return [{
                name: "keyFields",
                icon: "keyfield",
                header: this.translate("LBL_KEY_FIELDS"),
                component: App.getDynamicComponentInstance("RecordKeyFields")
            }]
        }, moduleModel() {
            return this.$_currentModuleModel
        }, headerFields() {
            let e = this.moduleModel.getHeaderFields(), t = [];
            for (let i in e) {
                let s = e[i];
                s.isViewableInDetail && this.record.fieldHasValue(i) && t.push(s)
            }
            return t
        }, widgetHeaderFields() {
            let e = [], t = this.headerLimit, i = this.headerFields;
            if (this.customRelationFields.length && (e = this.getCustomRelationFields()), this.defaultHeaderFields.length && this.moduleModel.isLoaded) {
                let t = Object.values(this.moduleModel.fields).filter(e => this.defaultHeaderFields.includes(e.name));
                e = e.concat(t)
            }
            if (e.length < t) {
                let s = t - e.length, l = _.take(_.difference(i, e), s);
                e = e.concat(l)
            }
            let s = [];
            e.forEach(e => {
                e.isCompositeParent ? s.push(e.name) : e.isCompositeChild && s.push(e.getParentFieldForCompositeType(e.type.name))
            });
            for (let t of s) {
                let i = this.moduleModel.getField(t), s = [i];
                s = s.concat(Object.values(i.getCompositeChilds()));
                let l = _.difference(s, e);
                e = e.concat(l)
            }
            return e
        }, labelFields() {
            return this.moduleModel.getLabelFields()
        }, recordActions() {
            let e = [];
            return this.relation && ["1:N", "N:N"].includes(this.relation.relationtype) && e.push({
                name: "unlink",
                label: this.translate("LBL_UNLINK"),
                icon: "times",
                handler: this.unlinkRecord
            }), e
        }, recordLabel() {
            if (this.record.recordLabel) return this.record.recordLabel;
            {
                let e = "";
                for (let t of this.labelFields) e += " " + this.record.getDisplayValue(t);
                return e.trim()
            }
        }
    },
    methods: {
        init() {
            Vue.set(this, "activeRelatedView", _.first(this.relatedViews)), this.$root.$emit("vds::display::stickynote"), this.getImageInfo()
        }, openDetailView(e) {
            if ("Calendar" == this.module && e) {
                let t = "";
                t = "Task" != e.activitytype ? "Events" : "Tasks", this.redirectUrl("view/detail?id=" + e.getId() + "&module=" + t, !1, "_blank")
            } else "Emails" == this.module ? this.showModal({
                componentName: "EmailPreview",
                componentData: {recordid: this.record.id, module: this.module},
                modalOnModalMode: !1
            }) : this.redirectUrl("view/detail?id=" + e.getId() + "&module=" + this.module, !1, "_blank")
        }, editRecord() {
            this.redirectUrl("view/detail?id=" + this.record.getId() + "&module=" + this.module + "&viewtype=deepdive", !1, "_blank")
        }, unlinkRecord() {
            this.$emit("vds::related:record::action", {name: "unlink", data: this.record})
        }, composeEmail() {
            this.showModal({
                componentName: "ListViewComposeEmail",
                componentData: {record: this.record, modulename: this.$module}
            })
        }, getRelatedListRecordTypeIcon(e) {
            switch (e) {
                case"pdf":
                    return "fa fa-file-pdf";
                default:
                    return ""
            }
        }, showOptions() {
            this.optionsVisible = !0
        }, hideOptions() {
            this.optionsVisible = !1
        }, getImageInfo() {
            this.record && this.record.id && (this.record.imageDetails ? this.imageDetails = this.record.imageDetails : this.getRecordImage(this.record.id, this.$module).then(e => {
                _.isUndefined(e) || (this.imageDetails = e)
            }))
        }, getRelatedActionsComponent() {
            if (!_.isUndefined(this.relation)) {
                let e = `Detail${this.relation.relatedModule}RelatedRecordActions`;
                return App.getDynamicComponentInstance(e, this.relation.relatedModule) || App.getDynamicComponentInstance(e, this.$module) || App.getDynamicComponentInstance("DetailRelatedRecordActions", this.$module)
            }
        }, updateValue(e, t) {
            if (_.isUndefined(this.fieldEdit[e]) || 0 == this.fieldEdit[e]) {
                if (this.record.isClosed) return this.showErrorNotification(this.translate("LBL_RECORD_CLOSED", this.module, this.module)), "";
                if (Vue.set(this.fieldEdit, e, !0), this.customRelationFields.includes(e)) this.updateCustomRelationValue(e, t), Vue.set(this.fieldEdit, e, !1); else {
                    this.moduleModel.dependentTriggererFields.includes(e) ? (this.registerEvents(), this.handleDependentFields(this.moduleModel.getField(e)), Vue.set(this.recordModel, e, t.value)) : (Vue.set(this.recordModel, e, t.value), this.save(e))
                }
            }
        }, save(e) {
            let t = this.prepareRecordToSave();
            this.saveRecord(t, this.moduleModel).then(t => {
                Vue.set(this.fieldEdit, e, !1), this.triggerModuleSpecificEvents()
            }, t => {
                Vue.set(this.fieldEdit, e, !1), Vue.set(this.recordModel, e, this.clonedRecord[e]), this.showErrorNotification(t.message)
            })
        }, prepareRecordToSave() {
            let e = Vtiger_Record_Model.getCleanInstance(this.$module);
            if (e.id = this.recordModel.id, _.size(this.targetFieldList) > 0) for (let t in this.targetFieldList) e.set(t, this.recordModel[t]);
            for (let t in this.fieldEdit) this.fieldEdit[t] && e.set(t, this.recordModel[t]);
            let t = ["assigned_user_id"];
            for (var i in t) if (!e.get(s)) {
                var s = t[i];
                e.set(s, this.recordModel[s])
            }
            return e
        }, registerEvents() {
            this.$root.$off("vds::dependentfields::save::record"), this.$root.$on("vds::dependentfields::save::record", (e, t) => {
                this.targetFieldList = t, this.save(e)
            }), this.$root.$off("vds::cancel::dependentfields::modal"), this.$root.$on("vds::cancel::dependentfields::modal", (e, t) => {
                this.fieldEdit[e] = !1, Vue.set(this.recordModel, e, this.clonedRecord[e])
            })
        }, getCustomRelationFields() {
        }, updateCustomRelationValue(e, t) {
        }, isActionAllowed(e) {
            var t = !0;
            return !_.isUndefined(e.deprecated) && e.deprecated && (t = !1), t
        }, getValue(e) {
            return this.recordModel.getDisplayValue(e)
        }, triggerModuleSpecificEvents() {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "border bg-white",
            attrs: {role: "tab"},
            on: {
                mouseover: function (e) {
                    return showOptions()
                }, mouseout: function (e) {
                    return hideOptions()
                }
            }
        }, [_c("div", {
            directives: [{
                name: "b-toggle",
                rawName: "v-b-toggle",
                value: "relatedId_" + record.id,
                expression: "'relatedId_' + record.id"
            }], staticClass: "d-flex py-2 mw-col-12 c-pointer align-items-center bg-grey-hue-9"
        }, [_c("div", {staticClass: "col-2 widget-image"}, [imageDetails.length ? [_c("img", {
            staticClass: "circle-icon p-0 circle-icon-lg mt-2",
            attrs: {src: imageDetails[0].url, alt: imageDetails[0].name}
        })] : [_c("div", {
            staticClass: "text-capitalize text-white bg-primary circle-icon circle-icon-widget border-grey-6 p-0",
            attrs: {"aria-hidden": "true", title: recordLabel}
        }, [_c("div", {staticClass: "h4 mt-2"}, [_c("i", {class: getModuleIconClass(module)})])])], _v(" "), record && record.lastEmotion ? _c("div", {
            staticClass: "widget-image-badge",
            attrs: {title: record.lastEmotion}
        }, [_c("img", {attrs: {src: getEmotionIcon(record.lastEmotion)}})]) : _e()], 2), _v(" "), _c("div", {staticClass: "col-10 pl-0"}, [_c("h6", {staticClass: "d-flex align-items-center mb-0"}, [_c("strong", {
            staticClass: "text-truncate",
            attrs: {title: recordLabel}
        }, [_v(_s(recordLabel))]), _v(" "), showDetailViewLink ? _c("button", {
            staticClass: "btn p-1 bg-grey-hue-9 shadow-none",
            on: {
                click: function (e) {
                    return openDetailView(record)
                }
            }
        }, [_c("span", {
            staticClass: "fa fa-external-link-alt text-muted",
            attrs: {title: translate("LBL_DEEP_DIVE")}
        })]) : _e(), _v(" "), _c("span", {staticClass: "flex-grow-1"}), _v(" "), _c("b-dropdown", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: recordActions.length && optionsVisible,
                expression: "recordActions.length && optionsVisible"
            }], attrs: {"no-caret": !0, "toggle-class": "bg-grey-hue-9 border-0", title: translate("LBL_MORE")}
        }, [_c("i", {
            staticClass: "fa-ellipsis-v",
            attrs: {slot: "button-content"},
            slot: "button-content"
        }), _v(" "), _l(recordActions, (function (e) {
            return isActionAllowed(e) ? _c("b-dropdown-item", {
                key: e.name,
                staticClass: "my-1",
                attrs: {title: translate("LBL_" + e.name.toUpperCase()), disabled: e.disabled},
                on: {
                    click: function (t) {
                        return t.stopPropagation(), e.handler(t)
                    }
                }
            }, [_c("i", {
                staticClass: "text-grey-4 align-middle mr-2",
                class: "fa-" + e.icon
            }), _v(" "), _c("span", {staticClass: "text-dark-0"}, [_v(_s(e.label))])]) : _e()
        }))], 2)], 1), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_l(widgetHeaderFields, (function (e, t) {
            return [e.isViewableInDetail ? _c("div", {
                key: e.name,
                staticClass: "d-flex align-items-center mr-2",
                class: [editableHeaders.includes(e.name) || e.isCompositeParent ? "" : "text-truncate", headerLimit > 2 ? "mw-col-6" : "mw-col-8"]
            }, [_c("span", {
                staticClass: "mr-1 text-grey-2",
                class: getFieldIcon(e, record),
                attrs: {title: e.label}
            }), _v(" "), editableHeaders.includes(e.name) ? _c("span", {
                key: e.name,
                attrs: {title: e.label}
            }, [_c("b-dropdown", {
                staticClass: "mw-col-10 p-0 detailRelatedFieldDropdown",
                attrs: {
                    title: translate(e.label),
                    "toggle-class": "bgLtGrey border-0 p-0 text-truncate",
                    boundary: "window",
                    lazy: "true"
                }
            }, [_c("template", {slot: "button-content"}, [getValue(e.name) ? _c("vds-field-display", {
                key: e.name,
                attrs: {
                    title: e.label,
                    record: recordModel,
                    field: e,
                    modulemodel: parentModuleModel,
                    className: "d-inline"
                }
            }) : _c("span", [_v(_s(translate(e.emptyLabel)))])], 1), _v(" "), _l(e.picklistValues, (function (t) {
                return _c("b-dropdown-item", {
                    key: t.value, on: {
                        click: function (i) {
                            return i.stopPropagation(), updateValue(e.name, t)
                        }
                    }
                }, [_c("div", {staticClass: "d-flex justify-content-between"}, [_c("div", [_v(_s(t.label))]), _v(" "), moduleModel.isLoaded && moduleModel.closedStateValues.includes(t.value) ? _c("i", {staticClass: "fa fa-ban"}) : _e()])])
            }))], 2)], 1) : _c("vds-field-display", {
                key: e.name,
                class: {"mw-col-10 p-0": e.isCompositeParent},
                attrs: {
                    title: e.label,
                    record: recordModel,
                    field: e,
                    modulemodel: $_currentModuleModel,
                    view: e.isCompositeParent ? "header" : ""
                }
            })], 1) : _e()]
        }))], 2)])]), _v(" "), _c("b-collapse", {
            staticClass: "bg-white m-1",
            class: {"py-2 px-3": activeRelatedView.header},
            attrs: {
                id: "relatedId_" + record.id,
                visible: expanded,
                accordion: "relatedRecord-" + $module + "-accordion",
                role: "tabpanel"
            }
        }, [_c("div", {staticClass: "d-flex justify-content-between align-items-center mb-2"}, [_c("h5", {staticClass: "text-muted font-weight-bold mb-0"}, [_v(_s(activeRelatedView.header))]), _v(" "), relatedViews.length > 1 ? _c("div", {staticClass: "btn-group"}, _l(relatedViews, (function (e) {
            return _c("button", {
                staticClass: "btn c-pointer shadow-none",
                class: activeRelatedView.name == e.name ? "btn-primary" : "btn-secondary",
                attrs: {title: e.header},
                on: {
                    click: function (t) {
                        activeRelatedView = e
                    }
                }
            }, [_c("span", {staticClass: "h5 align-middle", class: "fa-" + e.icon})])
        })), 0) : _e()]), _v(" "), _c("keep-alive", [_c(activeRelatedView.component, {
            tag: "component",
            attrs: {record: record, relation: relation, "widget-headers": widgetHeaderFields}
        })], 1)], 1)], 1)
    }
});
var Vtiger_Component_DetailEventsRelatedList = Vtiger_Component_DetailRelatedList.extend({
    computed: {
        calendarRelation() {
            return Vtiger_Relation_Model.getCleanInstance("Events", $.extend(!0, {}, this.relation.calendarRelation, {relatedModuleName: "Events"}))
        }
    }, created() {
        this.getCalendarModuleModel()
    }, methods: {
        getRelatedListParams() {
            let e = new SearchParams;
            return e.pushAll("activitytype", "n", "Task"), {
                module: this.$module,
                id: this.$_detailRecordModel.getId(),
                relationid: this.calendarRelation.relation_id,
                page: this.pageNum,
                q: JSON.stringify(e.data)
            }
        }, link(e) {
            var t = e.map((function (e) {
                return _.isObject(e) ? e.getId() : e
            }));
            t && 0 == t.length || this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.calendarRelation.relation_id,
                    related_module: this.calendarRelation.relatedModule,
                    related_record_id: t
                }
            }).then(e => {
                "true" == e && this.refreshWidgets()
            })
        }, unlink(e) {
            "" != e.getId() && this.appStore.request("api_delete", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.calendarRelation.relation_id,
                    related_module: this.relation.relatedModule,
                    related_record_id: e.getId()
                }
            }).then(t => {
                if (t) {
                    let t = this.relatedRecords.findIndex(t => t.getId() == e.getId());
                    this.relatedRecords.splice(t, 1)
                }
            })
        }, isRelatedListActionPermitted() {
            if (this.$_detailRecordModel && this.$_detailRecordModel.isClosed && this.$_currentModuleModel && this.$_currentModuleModel.closedStateDetails && this.$_currentModuleModel.closedStateDetails.allow_relations && !parseInt(this.$_currentModuleModel.closedStateDetails.allow_relations)) return !1;
            let e = this.calendarRelation;
            return e && (e.isSelectPermitted || e.isCreatePermitted)
        }, getCalendarModuleModel() {
            this._getModuleDescribe("Calendar").then(e => {
                this.calendarRelation.relatedModuleModel = e
            })
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "relatedRecordsContainer"}, [_c("vds-related-list-header", {attrs: {relation: relation}}, [_t("header-title", null, {slot: "title"}), _v(" "), _c("template", {slot: "action"}, [isRelatedListActionPermitted() ? _c("vds-select-related-record-actions", {
            attrs: {
                showAllRecords: showAllRecords,
                "select-multiple": !0,
                relation: calendarRelation
            }, on: {
                "update:showAllRecords": function (e) {
                    showAllRecords = e
                }, "update:show-all-records": function (e) {
                    showAllRecords = e
                }, "vds::popup:record::selected": link
            }
        }) : _e()], 1)], 2), _v(" "), _c("div", {
            staticClass: "widget-list",
            attrs: {role: "tablist"}
        }, [_l(relatedRecords, (function (e, t) {
            return [e._isEmpty ? [_c("vds-empty-related-record")] : [_c(relatedComponent, {
                key: e.getId(),
                tag: "component",
                attrs: {
                    module: relation.relatedModule,
                    record: e,
                    index: t,
                    parentModuleModel: $_currentModuleModel,
                    relation: calendarRelation
                },
                on: {"vds::related:record::action": handleAction}
            })]]
        }))], 2), _v(" "), relatedRecords.length ? _e() : _c("div", {staticClass: "h-100 d-flex justify-content-center align-items-center"}, [_c("div", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])])], 1)
    }
});
var Vtiger_Component_DetailInventoryRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({});
var Vtiger_Component_DetailRecentActivities = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_UsersUtils, Vtiger_Mixin_Module, Vtiger_Mixin_Reaction, Vtiger_Mixin_ModuleCollection, Vtiger_Mixin_EnagementsThreadColorCodes, Vtiger_Mixin_EmailActionsData, Vtiger_Mixin_ModulePermissions, Vtiger_Mixin_DraftComment, Vtiger_Mixin_RelationUtils],
    components: {
        "vds-comment": App.loadComponent("Comment"),
        "vds-engagements-activity": App.loadComponent("EngagementsActivity"),
        "vds-engagements-email-activity": App.loadComponent("EngagementsEmailActivity"),
        "vds-modcomments-activity": App.loadComponent("ModCommentsActivity"),
        "vds-tasks-activity": App.loadComponent("TasksActivity"),
        "vds-modtracker-activity": App.loadComponent("ModTrackerActivity"),
        "vds-empty-activity": App.loadComponent("EmptyActivity"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard"),
        "vds-recent-activities-additonal-actions": App.loadComponent("DetailRecentActivitiesAdditionalActions"),
        "vds-reply-case-interaction-email": App.loadComponent("ReplyCaseInteractionEmail"),
        "vds-case-interaction-activity": App.loadComponent("CaseInteractionActivity"),
        "vds-whatsapp-activity": App.loadComponent("CompletedActivity", "Whatsapp")
    },
    props: {recordId: [String, Number], activity: String, selectedActivityId: [Number, String]},
    data() {
        return {
            showCommentInput: !0,
            nextPageExists: !0,
            recentActivities: [],
            page: 1,
            filterOptions: {
                ModComments: this.translate("LBL_INTERNAL", "Documents") + " " + this.translate("LBL_COMMENTS"),
                touchpoints: {
                    label: this.translate("LBL_CUSTOMER_TOUCHPOINTS"),
                    children: {
                        Emails: this.translate("Emails", "Emails"),
                        PhoneCalls: this.translate("PhoneCalls", "PhoneCalls"),
                        EmailCampaigns: this.translate("EmailCampaigns", "EmailCampaigns"),
                        Cases: this.translate("Cases", "Cases"),
                        Chat: this.translate("Chat"),
                        CustomerPortal: this.translate("CustomerPortal", "Settings:CustomerPortal"),
                        Documents: this.translate("Documents", "Documents"),
                        SMSNotifier: this.translate("SMSNotifier", "SMSNotifier"),
                        Whatsapp: this.translate("single_Whatsapp", "Whatsapp")
                    }
                },
                ModTracker: this.translate("LBL_UPDATES")
            },
            selectedFilters: {},
            initializeFilter: !1,
            defaultFilters: {},
            filterOptionChecks: [],
            touchpointModules: ["Accounts", "Contacts", "Leads", "Potentials", "Cases"],
            dataRequested: !1,
            emptyActivities: [],
            threadids: [],
            messageids: [],
            loading: !1,
            rollUpSetting: [],
            reactionsEnabled: !1,
            relatedModuleModels: {},
            emailRecord: {},
            emailAction: !1,
            threadId: "",
            showComposeEmail: !1,
            restrictActions: !1
        }
    },
    computed: {
        userImageInfo() {
            return this.appStore.get("users_details")
        }, isTouchpointModule() {
            return this.touchpointModules.includes(this.$module)
        }
    },
    created() {
        this.isModuleEnabled("ModComments") || Vue.delete(this.filterOptions, "ModComments"), "Contacts" != this.$module && Vue.delete(this.filterOptions.touchpoints.children, "Whatsapp"), this.init(), this.getUsersInfo(), this.getDraftComment()
    },
    mounted() {
        this.element = this.$el, this.listenCommentCancelAction()
    },
    watch: {
        selectedFilters() {
            this.resetActivities(), this.getActivities();
            let t = Object.keys(this.selectedFilters).length > 0 ? this.selectedFilters : {};
            this.saveFilters(t)
        }
    },
    methods: {
        init() {
            if (this.loadFilter(), this.$currentUser) this.setEmptyRecords(); else {
                let t = this.$watch("$currentUser", (e, i) => {
                    e && (this.setEmptyRecords(), t())
                })
            }
            window.addEventListener("scroll", this.registerLoadOnScroll), this.$root.$on("vds::update::completed::actions", this.updateCompletedActions), this.$root.$on("vds::cases::add::comment::action", () => {
                Vue.set(this, "showCommentInput", !1)
            }), this.initFilterOptions()
        }, initFilterOptions() {
            let t = {
                optGroupLabel: this.translate("LBL_SETTINGS"),
                label: this.translate("LBL_ROLL_UP"),
                children: {touchpoints: this.translate("LBL_TOUCH_POINTS")}
            };
            this.isTouchpointModule ? this.fillRelatedModuleModels() : Vue.delete(this.filterOptions, "touchpoints"), "Accounts" == this.$module && Vue.set(this.filterOptions, "rollup", t), this.retrieveRelationModels(this.$module).then(t => {
                if (this.relationModel = BaseModel.getModuleSpecificModel(this.$module, "Relation", t), t) {
                    let e = !1;
                    for (let i of t) if (["Calendar"].includes(i.relatedModuleName)) {
                        this.addEventsActivityTypesPicklistsToFilter();
                        let t = this.translate("Completed", "Calendar") + " " + this.translate("LBL_TODOS");
                        Vue.set(this.filterOptions, "Tasks", t), e = !0
                    }
                    e || this.filterOptionChecks.push("Events")
                }
                this.filterOptionChecks.push("Relation")
            }, () => {
                this.filterOptionChecks.push("Relation")
            }), "Reactions" in (AppStorage.get("app_module_permissions", !1) || {}) && (this.reactionsEnabled = !0)
        }, resetActivities() {
            Vue.set(this, "page", 1), Vue.set(this, "nextPageExists", !0), this.messageids = [], this.recentActivities = []
        }, loadFilter() {
            let t = this.getCachedFilters();
            if (t) this.selectedFilters = t, this.initializeFilter = !0; else {
                let t = this.$watch("filterOptionChecks", (e, i) => {
                    if (e && !this.initializeFilter) {
                        let i = ["Relation", "Events"];
                        for (let t of i) if (!e.includes(t)) return !1;
                        this.initializeDefaultFilter(e), t()
                    }
                })
            }
        }, getCachedFilters() {
            let t = AppStorage.get("completed_activtities_filters", {})[this.$module], e = !1;
            return t && "object" == typeof t && (e = t), e
        }, saveFilters(t) {
            let e = AppStorage.get("completed_activtities_filters", {});
            e[this.$module] = t, AppStorage.set("completed_activtities_filters", e)
        }, initializeDefaultFilter() {
            let t = this.filterOptions, e = {};
            for (var i in t) if ("ModTracker" !== i) if ("touchpoints" === i) for (var s in e[i] = {}, t[i].children) this.allowedInDefaultFilters(s) && (e[i][s] = !0); else this.allowedInDefaultFilters(i) && (e[i] = !0);
            this.selectedFilters = e, this.initializeFilter = !0
        }, allowedInDefaultFilters(t) {
            let e = !0;
            return void 0 !== this.defaultEnabledFilters && _.isArray(this.defaultEnabledFilters) && !this.defaultEnabledFilters.includes(t) && (e = !1), e
        }, fetchAndStoreReactions() {
            let t = [];
            for (var e = 0; e < this.recentActivities.length; e++) "ModComments" == this.recentActivities[e].activity && t.push(this.recentActivities[e].id);
            t.length > 0 && this.storeReactions(t)
        }, fillRelatedModuleModels() {
            let t = Object.keys(AppStorage.get("app_module_permissions", !1)) || {}, e = ["Events", "Cases"];
            for (let i of e) if ("-1" != _.indexOf(t, i)) {
                let t = this.getCachedModuleDescribe(i);
                t ? this.relatedModuleModels[i] = t : this._getModuleDescribe(i).then(t => {
                    t && (this.relatedModuleModels[i] = t)
                })
            }
        }, addEventsActivityTypesPicklistsToFilter() {
            ["Cases", "InternalTickets"].includes(this.$module) ? this.filterOptionChecks.push("Events") : this._getModuleDescribe("Events").then(t => {
                if (t) {
                    var e = t.getField("activitytype");
                    if (e) {
                        var i = e.allPicklistValues;
                        if (i && this.filterOptions.touchpoints) for (var s in i) 1 != i[s].presence && Vue.set(this.filterOptions.touchpoints.children, i[s].value, this.translate(i[s].label, "Events"))
                    }
                }
                this.filterOptionChecks.push("Events")
            }, () => {
                this.filterOptionChecks.push("Events")
            })
        }, postCommentSave() {
            Vue.set(this, "showCommentInput", !0), this.resetActivities(), this.getActivities()
        }, reloadActivities() {
            this.resetActivities(), this.getActivities()
        }, getActivities() {
            if (!this.dataRequested) {
                this.dataRequested = !0;
                var t = [];
                for (var e in this.rollUpSetting = [], this.selectedFilters) if ("touchpoints" === e) for (var i in this.selectedFilters[e]) this.selectedFilters[e][i] && t.push(i); else if ("rollup" === e) for (var i in this.selectedFilters[e]) this.selectedFilters[e][i] && this.selectedFilters.touchpoints && this.rollUpSetting.push(i); else this.selectedFilters[e] && t.push(e);
                t.length || this.isTouchpointModule || (t = this.isModuleEnabled("ModComments") ? ["ModComments", "Tasks", "ModTracker"] : ["Tasks", "ModTracker"]), this.recentActivities = this.recentActivities.concat(this.emptyActivities);
                var s = {
                    url: "records/completedactions",
                    params: {
                        module: this.$module,
                        id: this.recordId,
                        page: this.page,
                        q: t,
                        rollup: this.rollUpSetting
                    },
                    key: "completedactions_" + this.page
                };
                this.appStore.request("api_get", s).then(t => {
                    this.dataRequested = !1;
                    let e = t.records;
                    if (e = this.groupEmailsAndThreads(e), this.recentActivities.splice(-this.emptyActivities.length, this.emptyActivities.length), e && e.length) {
                        if (1 === this.page ? this.recentActivities = e : this.recentActivities = this.recentActivities.concat(Object.values(e)), this.reactionsEnabled && this.fetchAndStoreReactions(), e.length < 5 && t.checkForMoreRecords && this.page < 3 && (Vue.set(this, "page", this.page + 1), this.getActivities()), this.selectedActivityId && this.activity && this.recentActivities.length) {
                            for (var i = !1, s = 0; s < this.recentActivities.length; s++) if (this.recentActivities[s].activity == this.activity && this.recentActivities[s].id == this.selectedActivityId) {
                                i = !0;
                                break
                            }
                            i || setTimeout((function () {
                                var t = document.scrollingElement || document.body;
                                t.scrollTop = t.scrollHeight + 100
                            }), 2e3)
                        }
                    } else t.checkForMoreRecords ? (Vue.set(this, "page", this.page + 1), this.getActivities()) : (1 !== this.page || e.length || (this.recentActivities = [], this.messageids = []), Vue.set(this, "nextPageExists", !1))
                })
            }
        }, registerLoadOnScroll() {
            let t = document.body.scrollHeight;
            if (t <= 0 && (t = document.documentElement.scrollHeight), Math.ceil(window.innerHeight + window.scrollY) >= Math.ceil(t) && this.nextPageExists) {
                if (this.dataRequested) return;
                var e = jQuery(this.element);
                e && e.closest(".vds-body").length && "summary" == e.closest(".vds-body").attr("viewtype") && (Vue.set(this, "page", this.page + 1), this.getActivities())
            }
        }, isThreadEmail(t) {
            let e = !1;
            return "Emails" == t.type && t.status && ["sent", "received", "failed", "saved", "scheduled", "queued"].includes(t.status.toLowerCase()) && (e = !0), e
        }, getComponentInstance(t) {
            let e = "vds-" + t.activity.toLowerCase() + "-activity";
            return !t.parent_id || "Emails" != t.type || "Cases" != t.parent_id.module && "InternalTickets" != t.parent_id.module || "Engagements" != t.activity ? "Engagements" == t.activity && this.isThreadEmail(t) && (e = "vds-" + t.activity.toLowerCase() + "-email-activity") : e = "vds-case-interaction-activity", e
        }, groupEmailsAndThreads(t) {
            let e = _.isArray(this.threadids) ? [...this.threadids] : [], i = [];
            for (let s in t) {
                let o = t[s], a = o.threadid, n = o.messageid;
                a && !e.includes(a) && e.push(o.threadid), n && this.messageids.includes(n) && this.isThreadEmail(o) || (n && this.isThreadEmail(o) ? (i.push(o), this.messageids.push(n)) : i.push(o))
            }
            return Vue.set(this, "threadids", e), i
        }, listenCommentCancelAction() {
            this.$root.$on("vds::cancel::action", () => {
                this.showCommentInput = !0
            })
        }, transformFilterData: t => t, updateCompletedActions() {
            this.resetActivities(), this.getActivities()
        }, setEmptyRecords() {
            let t = this.$currentUser, e = [];
            for (var i = 0; i < 3; i++) e.push({activity: "Empty", whoid: {id: t.id, label: t.label, module: "Users"}});
            this.emptyActivities = e
        }, showCommentInputByDefault() {
            return this.showCommentInput
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex flex-grow-1 justify-content-between align-items-center mb-4"}, [_c("h5", {staticClass: "mb-0"}, [_v(_s(translate("LBL_ACTIVITY")))]), _v(" "), _c("vds-recent-activities-additonal-actions", {
            staticClass: "ml-auto px-3",
            attrs: {activities: recentActivities}
        }), _v(" "), initializeFilter ? _c("vds-filterdropdown", {
            staticClass: "float-right completedActivitiesDropdown",
            attrs: {
                transform: transformFilterData,
                options: filterOptions,
                separator: !0,
                lazy: !1,
                "dropdown-text": translate("LBL_FILTERS")
            },
            model: {
                value: selectedFilters, callback: function (t) {
                    selectedFilters = t
                }, expression: "selectedFilters"
            }
        }) : _e()], 1), _v(" "), _c("div", [emailAction && _.size(emailRecord) && emailRecord.isLoaded ? _c("vds-reply-case-interaction-email", {
            attrs: {
                emailRecord: emailRecord,
                emailMode: emailAction,
                threadId: threadId.toString()
            }, on: {"vds::post::send::email": postSendingEmail}
        }) : _e()], 1), _v(" "), isCommentsAllowed ? _c("div", {staticClass: "form-group"}, [showCommentInputByDefault() ? _c("input", {
            staticClass: "p-3-5 form-control border-grey-1",
            attrs: {placeholder: translate("LBL_POST_YOUR_COMMENT_HERE")},
            on: {
                click: function (t) {
                    showCommentInput = !showCommentInput
                }, rows: function (t) {
                }
            }
        }) : _e(), _v(" "), showCommentInput ? _e() : _c("vds-comment", {
            attrs: {
                comment: draftComment,
                currentModule: $module,
                relatedTo: recordId,
                relatedModule: $module,
                focus: !0,
                hasCancel: !0
            }, on: {
                "vds::postcomment::save": function (t) {
                    return postCommentSave()
                }, "vds::enable::commentInput": function (t) {
                    showCommentInput = !0
                }
            }
        })], 1) : _e(), _v(" "), _c("div", {
            staticClass: "border border-bottom-0 rounded bg-white",
            attrs: {id: "completedActivitiesBlock"}
        }, _l(recentActivities, (function (t, e) {
            return _c(getComponentInstance(t), {
                key: t.id,
                tag: "component",
                staticClass: "border-bottom",
                attrs: {
                    "restrict-actions": restrictActions,
                    data: t,
                    "parent-record-id": parseInt(recordId),
                    parentRecord: $_detailRecordModel,
                    relatedModuleModels: relatedModuleModels,
                    userImageInfo: userImageInfo,
                    "selected-activity-id": selectedActivityId,
                    "reactions-enabled": reactionsEnabled,
                    threadColorCodes: threadColorCodes,
                    showContentByDefault: !e
                },
                on: {
                    "vds::postcomment::save": function (t) {
                        return postCommentSave()
                    }
                }
            })
        })), 1), _v(" "), !showCommentInput || recentActivities.length || showComposeEmail ? _e() : _c("div", [_c("vds-empty-state-card", {
            staticClass: "mt-5",
            attrs: {"empty-label": translate("LBL_NO_ACTIVITIES_FOUND"), "show-add-button": !1}
        })], 1)])
    },
    $_onBoard: {steps: {onboard_email_prospect: ["onboard_email_prospect_step3"]}}
});
var Vtiger_Component_DetailContactsRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    data: () => ({
        fieldIconMapping: {opp_contactrole: "user"},
        customRelationFields: ["opp_contactrole"],
        editableHeaders: ["opp_contactrole"]
    }), computed: {
        recordActions() {
            let e = [{
                name: "call",
                label: this.translate("LBL_CALL", "Calendar"),
                icon: "phone-alt",
                handler: this.call,
                deprecated: AppStorage.get("phonecalls_deprecated")
            }, {
                name: "email",
                label: this.translate("LBL_EMAIL", "Notifications"),
                icon: "envelope",
                handler: this.composeEmail
            }, {name: "sms", label: this.translate("LBL_SMS", "Notifications"), icon: "comment", handler: this.sms}];
            return this.isSendEmailAllowed || (e = _.without(e, _.findWhere(e, {name: "email"}))), this.relation && ["1:N", "N:N"].includes(this.relation.relationtype) && e.push({
                name: "unlink",
                label: this.translate("LBL_UNLINK"),
                icon: "times",
                handler: this.unlinkRecord
            }), e
        }
    }, methods: {
        call() {
            var e = {id: this.$id, module: this.parentModuleModel.name};
            this.showModal({
                componentName: App.loadComponent("VtigerBuiltinPhoneCallsController", "PhoneCalls"),
                componentData: {record: this.record, modulename: this.$module, parent: e}
            })
        }, sms() {
            this.showModal({
                componentName: "ListViewSendSMS",
                componentData: {record: this.record, modulename: this.$module}
            })
        }, getValue(e) {
            return this.record.getDisplayValue(e)
        }, getCustomRelationFields() {
            let e = this.parentModuleModel.getField("opp_contactrole");
            if (_.isUndefined(e)) return [];
            let t = $.extend(!0, {}, e, {
                viewable: !0,
                displaytype: "1",
                emptyLabel: this.translate("LBL_SELECT_CONTACT_ROLE")
            });
            return e = BaseModel.getModuleSpecificModel(this.parentModuleModel._moduleName, "Field", t), [e]
        }, updateCustomRelationValue(e, t) {
            void 0 !== this.relation.relation_id && this.appStore.request("api_put", {
                url: "records/relationrecords/relationspecificdata",
                params: {
                    module: this.relation.module,
                    id: this.$id,
                    contactid: this.record.id,
                    relationid: this.relation.relation_id,
                    opp_contactrole: t.value
                }
            }).then(o => {
                o.success && Vue.set(this.record, e, t.value)
            })
        }
    }
});
var Vtiger_Component_DeepDive = App.vtComponent.extend({
    components: {
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-detail-record-banner": App.loadComponent("DetailRecordBanner"),
        "vds-detail-approval-banner": App.loadComponent("DetailApprovalBanner")
    },
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Validators, Vtiger_Mixin_EmailOptin, App.loadMixin("Record"), App.loadMixin("PicklistDependency"), App.loadMixin("ReferenceAutoSelect"), App.loadMixin("DependentFields"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_CurrencyUtils, App.loadMixin("DependencyValidator")],
    data: () => ({
        editing: !1,
        fieldEdit: {},
        editRecordModel: null,
        searchString: "",
        filteredFields: {},
        showLineItems: !1,
        deepdivebodyheight: 0,
        emailOptinInfo: {},
        saving: !1,
        isMulticurrencyChangeAllowed: !0,
        emailOptinRequestsent: !1
    }),
    props: ["isAjaxEditAllowed"],
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }, inviteesLabel: () => "LBL_PARTICIPANTS", tranlsatedInviteesLabel() {
            return this.translate(this.inviteesLabel, "Events")
        }, inviteesComponent() {
            if (this.editRecordModel) return App.loadComponent("EventInvitees", "Vtiger", !1)
        }, recordModel() {
            return this.editRecordModel ? this.editRecordModel : Vtiger_Record_Model.getCleanInstance(this.$module)
        }, compositeFieldStatus: () => !1, getBody() {
            var e = "";
            return this.$_detailRecordModel.header && (e += this.$_detailRecordModel.header), this.$_detailRecordModel.data && (e += this.$_detailRecordModel.data), this.$_detailRecordModel.footer && (e += this.$_detailRecordModel.footer), e
        }
    },
    mounted() {
        this.init(), this.registerSelect2FocusOnEdit(), this.$root.$on("vds-senstive-data-revealed", () => {
            this.resetView()
        })
    },
    watch: {
        "$store.state.deepdive_cancel_clicked"(e) {
            e && (this.resetView(), this.appStore.set({
                key: "deepdive_save_button_show",
                data: !1
            }), this.appStore.set({
                key: "deepdive_save_clicked",
                data: !1
            }), this.appStore.set({key: "deepdive_cancel_clicked", data: !1}))
        }
    },
    methods: {
        mandatoryMissingValueFields() {
            let e = [], i = this.moduleModel.getMandatoryFields(), t = Object.keys(i);
            var d = this.moduleModel.blocks;
            for (let i in t) {
                let l = this.editRecordModel[t[i]], s = t[i], a = this.moduleModel.fields[t[i]],
                    o = _.findIndex(d, {id: a.block});
                if ((_.isEmpty(l) || !_.isUndefined(l.id) && (!l.id || 0 === parseInt(l.id))) && jQuery.inArray(t[i], this.fieldEdit) < 0 && !_.contains(this.getEditRestrictedFields(), s) && a.editable) {
                    if (a.isLineItemField && !this.showLineItems) continue;
                    this.moduleModel.blocks[o].data.display_status && 0 == this.moduleModel.blocks[o].data.display_status && Vue.set(this.moduleModel.blocks[o].data, "display_status", "1"), e.push(t[i])
                }
            }
            return e
        },
        isFieldAllowedToShow: e => !0,
        init() {
            this.watchForRecordLoad(), this.setStoreEnvironmentForReference(), this.handleDependencyFieldRefUpdate();
            let e = this.$namespaceStore, i = "vds::deepdive::save::clicked";
            e && (i += "::" + e), this.$root.$off(i), this.$root.$on(i, () => {
                this.appStore.set({key: "deepdive_save_clicked", data: !0}), this.validateAndSave()
            }), this.$root.$on("vds::deepdive::cancel::clicked", () => {
                this.appStore.set({key: "deepdive_cancel_clicked", data: !0})
            }), this.getDeepDiveHeight(), this.appStore.set({key: "deepdive_save_button_show", data: !1})
        },
        getDeepDiveHeight() {
            let e = document.getElementById("topbar") ? document.getElementById("topbar").offsetHeight : 0,
                i = document.getElementById("detailHeader") ? document.getElementById("detailHeader").offsetHeight : 0,
                t = window.innerHeight;
            this.deepdivebodyheight = t - (e + i)
        },
        editMode(e) {
            e = Boolean(e), this.appStore.set({key: "deepdive_save_button_show", data: e})
        },
        watchForRecordLoad() {
            let e = function () {
            };
            e = this.$watch("$_detailRecordModel", (e, i) => {
                if (!_.isEqual(e, i) && e.isLoaded && !this.saving) {
                    let i = {};
                    if (this.editRecordModel) {
                        let e = JSON.parse(JSON.stringify(this.editRecordModel));
                        delete e._raw, delete e._changed, delete e._isTracking, delete e.lineItemRecords, delete e.isclosed, i = e || {}
                    }
                    e = {...i, ...JSON.parse(JSON.stringify(e))}, this.editRecordModel = Vtiger_Record_Model.getCleanInstance(this.$module, JSON.parse(JSON.stringify(e)))
                }
            }, {immediate: !0})
        },
        getFieldModel(e) {
            let i = e;
            return _.isObject(e) && (i = e.fieldname), this.moduleModel.getField(i) || BaseModel.getModuleSpecificModel(this.$module, "Field", {})
        },
        isDetailViewField(e) {
            if ((e = this.getFieldModel(e)).isViewableInDetail) return !0
        },
        isRichTextField: e => "34" === e.uitype,
        isTextAreaField: e => "19" == e.uitype || "21" == e.uitype && e.isCustomField,
        isTemplateField: e => "body" === e.fieldname,
        isBooleanField: e => !(!e.type || "boolean" !== e.type.name),
        isTaxField: e => "83" == e.uitype,
        isEmailOptinField(e) {
            return "emailoptin" == e.fieldname && (this.setEmailOptinInfo(e), !0)
        },
        setEmailOptinInfo(e) {
            let i = this.$_detailRecordModel[e.fieldname];
            i && 0 == _.keys(this.emailOptinInfo).length && !this.emailOptinRequestsent && (this.emailOptinRequestsent = !0, this.getEmailOptinInfo(i).then(e => {
                this.emailOptinRequestsent = !1, e.requestsPending = e.requestCountLimit - this.$_detailRecordModel.emailoptin_requestcount, this.emailOptinInfo = e
            }))
        },
        isMultiCurrencyField: e => 74 == e.uitype && "multicurrency" == e.type.name && 1 == e.displaytype,
        isPrintTemplatePreviewBlockField(e, i) {
            if (e && "LBL_TEMPLATE" == e.data.label && i && _.indexOf(["header", "footer"], i.fieldname)) return !1
        },
        getEditRestrictedFields: () => [],
        toggleEdit(e, i = !1, t = !1) {
            if (setTimeout(() => {
                jQuery(this.$refs["deepdive_" + e.fieldname]).length && jQuery(this.$refs["deepdive_" + e.fieldname][0].$el).find("input,textarea").focus()
            }, 0), this.$_detailRecordModel.isClosed) return !0;
            var d = this.getEditRestrictedFields();
            if (_.contains(d, e.fieldname)) return !0;
            if (i) {
                if (jQuery(i.target).is("a")) return !0
            }
            t || (e = this.getFieldModel(e));
            let l = e.isEditViewField && e.isEditable;
            if (!l && e.isCompositeParent) {
                let i = e.getCompositeChilds();
                for (let e in i) {
                    let t = i[e];
                    if (t.isEditable) {
                        l = t.isEditable;
                        break
                    }
                }
            }
            if (this.recordModel.isEditable && l && !this.fieldEdit[e.fieldname]) {
                if (t || (this.editing = this.isAjaxEditAllowed), Vue.set(this.fieldEdit, e.fieldname, this.editing), this.handleReferenceAutoSelect(e), this.handleDependentFields(e), t || this.appStore.set({
                    key: "deepdive_save_button_show",
                    data: this.editing
                }), e.isCompositeParent) {
                    var s = e.getCompositeChilds();
                    for (var a in s) {
                        s[a].isEditable && Vue.set(this.fieldEdit, a, this.editing)
                    }
                }
                if ("Documents" == this.$module && e && "fileLocationType" == e.type.name && Vue.set(this.fieldEdit, "filename", !0), e.isMultiCurrencyField) {
                    Vue.set(this.fieldEdit, "record_currency_id", this.editing), Vue.set(this.fieldEdit, "record_conversion_rate", this.editing);
                    var o = this.moduleModel.getFieldsOfType("multicurrency");
                    for (var n in o) {
                        var r = o[n];
                        1 != r.displaytype || r.isEditable || Vue.set(this, "isMulticurrencyChangeAllowed", !1), 1 == r.displaytype && r.isEditViewField && r.isEditable && Vue.set(this.fieldEdit, n, this.editing)
                    }
                }
            }
        },
        handleReferenceAutoSelect(e) {
            if (e.isReferenceField) var i = this.$watch(() => ({
                field: e,
                isInEditMode: this.fieldEdit[e.fieldname]
            }), ({field: e, isInEditMode: t}) => {
                if (!t) return void i();
                let d = e.referenceAutoFillInfo;
                for (let e in d) {
                    let i = d[e].fieldname;
                    this.$watch(() => ({
                        fieldName: i,
                        fieldValue: this.editRecordModel[i]
                    }), ({fieldName: e, fieldValue: i}) => {
                        this.editing && (this.$off("select-field-loaded"), Vue.set(this.fieldEdit, e, !0), this.$nextTick(() => {
                            this.registerSelect2FocusOnEdit()
                        }))
                    })
                }
            }, {immediate: !0})
        },
        handleDependentFields(e) {
            let i = this.moduleModel.dependentTriggererFields, t = this.moduleModel.picklistDependency, d = [], l = {};
            if (!_.isUndefined(t)) for (let e in t) d.push(t[e].sourcefield), Object.keys(l).includes(t[e].sourcefield) || (l[t[e].sourcefield] = []), l[t[e].sourcefield].push(t[e].targetfield);
            if (i = _.union(i, d), i.includes(e.name)) var s = this.$watch(() => ({
                fieldName: e.name,
                isInEditMode: this.fieldEdit[e.name],
                fieldValue: this.recordModel.get(e.name)
            }), (i, t) => {
                let a;
                if (({isInEditMode: a} = i), !a) return void s();
                if (_.isEqual(i, t)) return;
                let o = Object.keys(this.dynamicallyUpdatedEditableFields), n = !1;
                if (d.includes(e.name) && (n = !0, o = _.union(o, l[e.name])), o.length > 0) {
                    let i = JSON.parse(JSON.stringify(this.recordModel)),
                        t = BaseModel.getModuleSpecificModel(this.$module, "Record", i);
                    "pipeline" == e.name ? this.showModal({
                        componentName: App.loadComponent("moveToOtherPipeline", this.$module),
                        componentData: {
                            recordId: this.$id,
                            module: this.$module,
                            namespaceStore: this.$namespaceStore,
                            prevSalesStage: this.sourceField,
                            recordModel: t,
                            previousPipeLineVal: this.$_detailRecordModel[e.name],
                            pipelineChange: !0
                        }
                    }) : this.showModal({
                        componentName: App.loadComponent("DependentFieldsModal", this.$module),
                        componentData: {
                            module: this.$module,
                            record: t,
                            triggerFieldModel: e,
                            targetFields: o,
                            pickListDependencyExists: n
                        }
                    }), this.$off("vds::dependentfields::save"), this.$on("vds::dependentfields::save", e => {
                        let i = e.triggerFieldModel;
                        i && this.recordModel.set(i.name, t.get(i.name));
                        let d = e.targetFieldModelList;
                        for (var l in this.$off("select-field-loaded"), d) this.recordModel.set(l, t.get(l)), Vue.set(this.fieldEdit, l, !0);
                        this.$nextTick(() => {
                            this.registerSelect2FocusOnEdit()
                        })
                    }), this.$off("vds::dependentfields::close"), this.$on("vds::dependentfields::close", e => {
                        let i = e.targetFieldModelList;
                        for (var t in this.$off("select-field-loaded"), i) Vue.set(this.fieldEdit, t, !0);
                        this.$nextTick(() => {
                            this.registerSelect2FocusOnEdit()
                        })
                    })
                }
            })
        },
        validateAndSave(e = {}) {
            this.saving = !0;
            let i = this.mandatoryMissingValueFields();
            if (i.length > 0 && !e.skipMandatory) {
                for (let e in i) Vue.set(this.fieldEdit, i[e], !0);
                this.$off("select-field-loaded");
                let e = this.errors && this.errors.items && this.errors.items[0] ? this.errors.items[0].field : i[0];
                return setTimeout(() => {
                    jQuery(this.$refs["deepdive_" + e]).length && jQuery(this.$refs["deepdive_" + e][0].$el).find("input,select,textarea").focus()
                }, 50), this.appStore.set({
                    key: "deepdive_save_clicked",
                    data: !1
                }), this.appStore.set({key: "deepdive_cancel_clicked", data: !1}), void (this.saving = !1)
            }
            this.$validator.validate().then(i => {
                if (i) {
                    let i = this.prepareRecordToSave(e);
                    this.saveRecord(i, this.moduleModel, this).then(e => {
                        let i = this.$root.$refs.pagecontroller.urlComputedData;
                        i.returnUrl ? this.redirectUrl("view/list?" + i.returnUrl) : (e = this.transformRecordToUserFormat(e, this.moduleModel), this.appStore.set({
                            key: "Detail_Record_Model",
                            data: e
                        }), this.resetView(), this.appStore.set({
                            key: "deepdive_save_button_show",
                            data: !1
                        }), this.appStore.set({
                            key: "deepdive_save_clicked",
                            data: !1
                        }), this.appStore.set({
                            key: "deepdive_cancel_clicked",
                            data: !1
                        }), this.$emit("vds::deepdive::save::success"), this.$bubble("vds::deepdive::save::success"))
                    }, e => {
                        e.message == this.translate("LBL_DEALS_NOT_ALLOWED_TO_SAVE", this.$module) ? this.showConfirmationToSkipTasks() : e && e.message && !e.duplicate_exception && this.showErrorNotification(e.message), this.appStore.set({
                            key: "deepdive_save_clicked",
                            data: !1
                        }), this.appStore.set({
                            key: "deepdive_cancel_clicked",
                            data: !1
                        }), this.$emit("vds::deepdive::save::failure")
                    }).finally(() => this.saving = !1)
                } else this.appStore.set({
                    key: "deepdive_save_clicked",
                    data: !1
                }), this.appStore.set({key: "deepdive_cancel_clicked", data: !1}), this.saving = !1
            })
        },
        showConfirmationToSkipTasks() {
            let e = this.translate("JS_SKIP_STAGE_TASKS_INFO", "Potentials");
            this.showModal({
                componentName: "ConfirmationBox",
                componentData: {onConfirm: this.validateAndSave, confirmEntity: {confirmbyuser: 1}, message: e},
                modalOnModalMode: !1
            })
        },
        prepareRecordToSave(e = {}) {
            let i = Vtiger_Record_Model.getCleanInstance(this.$module);
            i.id = this.editRecordModel.id;
            for (let e in this.fieldEdit) if (this.fieldEdit[e]) {
                let t = this.moduleModel.getField(e);
                if (t && "image" == t.fieldType && this.editRecordModel[e] && this.$_detailRecordModel[e]) {
                    let t = VTHelper.convertUrlToDataParams(this.$_detailRecordModel[e][0].url);
                    i.set("imgDeleted", !0), i.set("imageid", [t.get("fid")])
                } else if (t && "multicurrency" == t.fieldType) {
                    let e = this.moduleModel.getFieldsOfType("multicurrency");
                    e && 2 == Object.keys(e).length && (i.set("record_currency_id", this.editRecordModel.record_currency_id), i.set("record_conversion_rate", this.editRecordModel.record_conversion_rate))
                }
                i.set(e, this.editRecordModel[e])
            }
            let t = ["assigned_user_id"];
            for (var d in t) if (!i.get(l)) {
                var l = t[d];
                i.set(l, this.editRecordModel[l])
            }
            return i
        },
        resetView() {
            this.editRecordModel = Vtiger_Record_Model.getCleanInstance(this.$module, JSON.parse(JSON.stringify(this.$_detailRecordModel)));
            for (let e in this.fieldEdit) Vue.set(this.fieldEdit, e, !1);
            this.editing = !1, this.emailOptinInfo = {}, this.searchString = ""
        },
        filterFields() {
            this.filteredFields = {}, "" != this.searchString && this.moduleModel.blocks.forEach(e => {
                let i = this.translate(e.data.label);
                Object.values(e.fields).filter(e => this.translate(e.fieldlabel).toLowerCase().includes(this.searchString.toLowerCase())).forEach(e => {
                    let t = e.fieldname, d = this.getFieldModel(e);
                    d.isCompositeChild && (t = this.$_currentModuleModel.getParentFieldForCompositeType(d.fieldType), d = this.getFieldModel(t)), this.isDetailViewField(d) && !this.isTaxField(d) && (this.filteredFields[t] = {
                        fieldName: t,
                        blockName: i,
                        fieldModel: d
                    })
                })
            })
        },
        hasViewableFields(e) {
            for (let i in e.fields) {
                if (this.moduleModel.getField(i).isViewableInDetail) return !0
            }
            return !1
        },
        clearSearchString() {
            this.searchString = ""
        },
        isBlockOpen(e) {
            return this.$refs[e] && this.$refs[e].show ? this.$refs[e].show : !!this.$refs[e] && (!!this.$refs[e][0] && this.$refs[e][0].show)
        },
        handleDependencyFieldRefUpdate() {
            let e = this.moduleModel.fields;
            if (Object.keys(e).length <= 0) {
                let e = this.$watch("moduleModel", () => {
                    this.handleDependencyFieldRefUpdate(), e()
                });
                return
            }
            let i = e => {
                let i = e.validationDependencies;
                if (i.length > 0) for (var t in i) {
                    let d = i[t];
                    this.$watch(() => ({
                        dependencyFieldName: d,
                        markedForEdit: this.fieldEdit[d]
                    }), ({dependencyFieldName: i, markedForEdit: t}) => {
                        let d = e.name, l = this.$validator.fields.find({name: d});
                        l && l.updateDependencies()
                    })
                }
            };
            for (var t in e) {
                i(e[t])
            }
        },
        isFieldLocked(e) {
            let i = !1;
            return _.isUndefined(this.recordModel.locked_fields) || _.isUndefined(this.recordModel.locked_fields[e.fieldname]) || (i = !0), i
        },
        lockedFieldMsg(e) {
            return lockedmsg = "", _.isUndefined(this.recordModel.locked_fields) || _.isUndefined(this.recordModel.locked_fields[e.fieldname]) || (lockedmsg = this.recordModel.locked_fields[e.fieldname]), lockedmsg
        },
        hasInfo: e => "record_approvalstatus" == e.fieldname,
        infoMsg(e) {
            return "record_approvalstatus" == e.fieldname ? this.translate("LBL_APPROVAL_STATUS_INFO") : ""
        },
        registerSelect2FocusOnEdit() {
            this.$on("select-field-loaded", e => {
                setTimeout(() => {
                    jQuery(this.$refs["deepdive_" + e][0].$el).find(".select2-container").siblings("select:enabled").select2("open")
                }, 50)
            })
        },
        enableDateEdits() {
        },
        inviteeAdded() {
        },
        inviteeDeleted() {
        },
        checkReadOnly(e) {
            let i = !0;
            this.recordModel.isEditable && !this.$_detailRecordModel.isClosed || (i = !1);
            let t = this.getFieldModel(e);
            return t && t.isEditable && this.isAjaxEditAllowed && !_.contains(this.getEditRestrictedFields(), e.fieldname) || (i = !1), !i
        },
        isFullWidthField: e => !1
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex flex-column deepdiveBody vds-pg-bg",
            style: {"min-height": deepdivebodyheight + "px"},
            attrs: {id: $module + "_deepdiveBody"}
        }, [_c("vds-detail-record-banner"), _v(" "), $_detailRecordModel._loaded && ($_detailRecordModel.isRecordLocked || "Approvals" == $_detailRecordModel._moduleName) ? _c("vds-detail-approval-banner", {attrs: {detailRecord: $_detailRecordModel}}) : _e(), _v(" "), isAjaxEditAllowed ? _c("div", {
            staticClass: "py-3",
            attrs: {id: "searchContainer"}
        }, [_c("div", {staticClass: "form-inline has-search w-100 d-flex justify-content-center"}, [_c("div", {staticClass: "col-6 d-flex align-items-center"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer h5",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("vds-input-clear", {
            attrs: {
                "input-style": {
                    paddingTop: "0.4rem",
                    paddingBottom: "0.4rem",
                    fontSize: "16px"
                }, inputvalue: searchString, placeholder: translate("LBL_TYPE_SEARCH")
            }, on: {
                "update:inputvalue": function (e) {
                    searchString = e
                }, "vds::post::input:clear": clearSearchString, "vds::search::on::keyup": function (e) {
                    _.debounce(filterFields, 500)()
                }
            }
        })], 1)])]) : _e(), _v(" "), _l(moduleModel.blocks, (function (e) {
            return [showLineItems && "LBL_ITEM_DETAILS" == e.data.label ? [_c("div", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: "" == searchString,
                    expression: "searchString == ''"
                }], staticClass: "mb-3"
            }, [_c("div", {staticClass: "mx-4 rounded bg-white"}, [_c("div", {staticClass: "detailBlockHeader p-0 border-0"}, [_c("h5", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: e.data.label,
                    expression: "block.data.label"
                }], staticClass: "c-pointer mb-0 p-3 font-18", attrs: {href: "#" + e.data.label}
            }, [_c("i", {
                staticClass: "fa mr-2",
                class: {"fa-chevron-down": isBlockOpen(e.data.label), "fa-chevron-right": !isBlockOpen(e.data.label)}
            }), _v("\n                                    " + _s(translate(e.data.label)) + "\n                                ")])]), _v(" "), _c("b-collapse", {
                ref: e.data.label,
                refInFor: !0,
                attrs: {visible: "1" === e.data.display_status, id: e.data.label}
            }, [$_currentModuleModel._loaded ? _c(lineItemsComponent, {
                tag: "component",
                attrs: {
                    moduleModel: $_currentModuleModel,
                    mode: lineItemsEdit ? "edit" : "deepdive",
                    recordModel: recordModel
                },
                on: {
                    "update:recordModel": function (e) {
                        recordModel = e
                    }, "update:record-model": function (e) {
                        recordModel = e
                    }
                },
                nativeOn: {
                    click: function (e) {
                        return toggleLineItemEdit(e)
                    }
                }
            }) : _e()], 1)], 1)])] : _e(), _v(" "), hasViewableFields(e) && e.isViewableInDetail ? _c("div", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: "" == searchString,
                    expression: "searchString == ''"
                }], staticClass: "mb-3"
            }, [_c("div", {staticClass: "mx-4 rounded bg-white"}, [_c("div", {staticClass: "detailBlockHeader p-1 border-0"}, [_c("h5", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: e.data.label,
                    expression: "block.data.label"
                }], staticClass: "c-pointer mb-0 p-3 font-18", attrs: {href: "#" + e.data.label}
            }, [_c("i", {
                staticClass: "fa mr-2",
                class: {"fa-chevron-down": isBlockOpen(e.data.label), "fa-chevron-right": !isBlockOpen(e.data.label)}
            }), _v("\n                                " + _s(translate(e.data.label)) + "\n                                ")])]), _v(" "), _c("b-collapse", {
                ref: e.data.label,
                refInFor: !0,
                attrs: {visible: "1" === e.data.display_status, id: e.data.label}
            }, [_c("table", {staticClass: "w-100"}, [_c("tbody", [_c("tr", {staticClass: "row mx-2 my-2"}, [moduleModel.isInventoryModule && "LBL_ADDRESS_INFORMATION" == e.data.label ? [_c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("div", {
                staticClass: "label",
                attrs: {title: translate("LBL_BILLING_ADDRESS_FROM")}
            }, [_v("\n                                                        " + _s(translate("LBL_BILLING_ADDRESS_FROM")) + "\n                                                    ")])]), _v(" "), _c("span", {staticClass: "w-75 mr-5 deepDiveEditFieldVal"}, [_c("vds-inventory-address-dropdown", {
                attrs: {
                    editable: recordModel.isEditable && moduleModel.getField("bill_street").editable,
                    field: moduleModel.getField("bill_street")
                }
            })], 1)]), _v(" "), _c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("div", {
                staticClass: "label",
                attrs: {title: translate("LBL_SHIPPING_ADDRESS_FROM")}
            }, [_v("\n                                                        " + _s(translate("LBL_SHIPPING_ADDRESS_FROM")) + "\n                                                    ")])]), _v(" "), _c("span", {staticClass: "w-75 mr-5 deepDiveEditFieldVal"}, [_c("vds-inventory-address-dropdown", {
                attrs: {
                    editable: recordModel.isEditable && moduleModel.getField("ship_street").editable,
                    field: moduleModel.getField("ship_street")
                }
            })], 1)])] : _e(), _v(" "), _l(e.fields, (function (i) {
                return [isDetailViewField(i) ? [isTemplateField(i) ? [_c("td", {staticClass: "d-flex col-md-12 col-sm-12 col-lg-12 p-2 justify-content-center bgLtGrey mt-2"}, [$_detailRecordModel.body ? _c("vds-iframe", {
                    staticClass: "overflow-hidden",
                    attrs: {content: purifyContent($_detailRecordModel.body)}
                }) : _e()], 1)] : isBooleanField(i) ? [_c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        module: moduleModel.name,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        lockedFieldMsg: lockedFieldMsg(moduleModel.getField(i.fieldname))
                    }
                })], 1), _v(" "), editRecordModel && editRecordModel.isLoaded ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "w-75 mr-5 deepDiveEditFieldVal",
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        readonly: checkReadOnly(i),
                        field: getFieldModel(i),
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        record: editRecordModel,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                })], 1) : _e()])] : "LBL_TEMPLATE" == e.data.label && "data" == i.fieldname ? [_c("td", {staticClass: "d-flex col-md-12 col-sm-12 col-lg-12 p-2"}, [_c("div", {
                    staticStyle: {"word-wrap": "break-word"},
                    domProps: {innerHTML: _s(purifyContent(getBody))}
                })])] : isRichTextField(i) ? [_c("td", {staticClass: "d-flex p-2 col-12 justify-content-begin"}, [_c("span", {staticClass: "col-2 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        module: moduleModel.name
                    }
                })], 1), _v(" "), fieldEdit[i.fieldname] ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "flex-grow-1 p-2 pl-3 mr-5 text-break"
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {focusOnField: !0, field: getFieldModel(i), record: editRecordModel}
                })], 1) : _c("span", {
                    key: i.fieldname + "_display",
                    staticClass: "flex-grow-1 p-2 pl-3 mr-5 deepDiveFieldVal",
                    class: {"bg-grey-hue-8": !i.editable},
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("vds-field-display", {
                    attrs: {
                        record: $_detailRecordModel,
                        field: moduleModel.getField(i.fieldname),
                        modulemodel: moduleModel
                    }
                })], 1)])] : getFieldModel(i).isGridField ? [_c("td", {staticClass: "d-flex p-2 col-12 justify-content-begin"}, [_c("span", {staticClass: "col-2 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        module: moduleModel.name
                    }
                })], 1), _v(" "), _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "flex-grow-1 mr-5 text-break",
                    staticStyle: {"max-width": "72vw"},
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        focusOnField: !0,
                        field: getFieldModel(i),
                        record: editRecordModel,
                        readonly: checkReadOnly(i)
                    }
                })], 1)])] : isTextAreaField(i) ? [_c("td", {staticClass: "d-flex p-2 col-12 justify-content-begin"}, [_c("span", {staticClass: "col-2 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        record: editRecordModel,
                        module: moduleModel.name,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        lockedFieldMsg: lockedFieldMsg(moduleModel.getField(i.fieldname)),
                        hasInfo: hasInfo(moduleModel.getField(i.fieldname)),
                        infoMsg: infoMsg(moduleModel.getField(i.fieldname))
                    }
                })], 1), _v(" "), fieldEdit[i.fieldname] ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "flex-grow-1 mr-5 text-break"
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        field: getFieldModel(i),
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        record: editRecordModel,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                })], 1) : _c("span", {
                    key: i.fieldname + "_display",
                    staticClass: "flex-grow-1 p-2 pl-3 mr-5 deepDiveFieldVal",
                    class: {"bg-grey-hue-8": !i.editable, deepDiveFieldVal: isAjaxEditAllowed},
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("vds-field-display", {
                    staticClass: "w-100",
                    attrs: {
                        record: $_detailRecordModel,
                        field: moduleModel.getField(i.fieldname),
                        modulemodel: moduleModel
                    }
                })], 1)])] : isTaxField(i) && recordModel.record_taxes && i._viewable ? _l(recordModel.record_taxes, (function (e) {
                    return _c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("div", {staticClass: "label"}, [_c("label", [_v(_s(e.taxlabel) + "(%)")])])]), _v(" "), _c("vds-tax-edit", {
                        attrs: {
                            editable: i._editable && recordModel.isEditable,
                            tax: e,
                            "tax-regions": recordModel.tax_regions
                        }, on: {
                            "update:tax": function (i) {
                                e = i
                            }, "vds::event::tax::toggleEdit": function (e) {
                                return toggleEdit(i)
                            }
                        }
                    })], 1)
                })) : isEmailOptinField(i) ? [_c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        module: moduleModel.name,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        lockedFieldMsg: lockedFieldMsg(moduleModel.getField(i.fieldname)),
                        hasInfo: hasInfo(moduleModel.getField(i.fieldname)),
                        infoMsg: infoMsg(moduleModel.getField(i.fieldname))
                    }
                })], 1), _v(" "), fieldEdit[i.fieldname] ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "w-75 mr-5 deepDiveEditFieldVal"
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        field: getFieldModel(i),
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        record: editRecordModel,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                })], 1) : _c("span", {staticClass: "d-flex flex-column w-100"}, [_c("span", {
                    key: i.fieldname + "_display",
                    staticClass: "p-2 pl-3 mr-5 deepDiveFieldVal d-flex align-items-center",
                    class: {"bg-grey-hue-8": !i.editable, deepDiveFieldVal: isAjaxEditAllowed},
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("vds-field-display", {
                    staticClass: "w-100",
                    attrs: {
                        record: $_detailRecordModel,
                        field: moduleModel.getField(i.fieldname),
                        modulemodel: moduleModel
                    }
                }), _v(" "), _c("i", {
                    staticClass: "fa fa-lg",
                    class: {
                        "fa-emailoptnone text-grey-4": "none" == $_detailRecordModel.emailoptin,
                        "fa-emailoptin text-success": "singleoptinuser" == $_detailRecordModel.emailoptin,
                        "fa-emailoptout text-danger": "optoutuser" == $_detailRecordModel.emailoptin
                    },
                    attrs: {title: emailOptinInfo.folderTooltip ? translate(emailOptinInfo.folderTooltip, $module, translate("SINGLE_" + $module)) : ""}
                })], 1), _v(" "), "doubleoptin" != $_detailRecordModel.emailoptin ? _c("span", {
                    staticClass: "c-pointer text-primary pt-1",
                    attrs: {title: translate("LBL_YOU_MAY_SEND_REQUEST", moduleModel.name, emailOptinInfo.requestsPending)},
                    on: {
                        click: function (e) {
                            return requestConfirmation($id)
                        }
                    }
                }, [_v(_s(translate(emailOptinInfo.buttonText, moduleModel.name)))]) : _e()])])] : isMultiCurrencyField(i) ? [_c("td", {staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center"}, [_c("span", {staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl"}, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        module: moduleModel.name,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        lockedFieldMsg: lockedFieldMsg(moduleModel.getField(i.fieldname)),
                        hasInfo: hasInfo(moduleModel.getField(i.fieldname)),
                        infoMsg: infoMsg(moduleModel.getField(i.fieldname))
                    }
                })], 1), _v(" "), fieldEdit[i.fieldname] ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "w-75 mr-5 deepDiveEditFieldVal"
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        field: getFieldModel(i),
                        currencyChange: isMulticurrencyChangeAllowed,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        record: editRecordModel,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                })], 1) : _c("span", {
                    key: i.fieldname + "_display",
                    staticClass: "w-75 p-2 pl-3 mr-5 word-break-all deepDiveFieldVal d-flex align-items-center",
                    class: {"bg-grey-hue-8": !i.editable, deepDiveFieldVal: isAjaxEditAllowed},
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("vds-field-display", {
                    staticClass: "w-100",
                    attrs: {
                        record: $_detailRecordModel,
                        field: moduleModel.getField(i.fieldname),
                        modulemodel: moduleModel
                    }
                })], 1)])] : !isTaxField(i) && "LBL_TEMPLATE" !== e.data.label && isFieldAllowedToShow(i) ? [_c("td", {
                    staticClass: "d-flex col-md-6 col-sm-6 p-2 align-items-center",
                    class: {"col-md-12  col-sm-12": isFullWidthField(i.fieldname)}
                }, [_c("span", {
                    staticClass: "col-sm-4 ml-3 p-2 justify-content-center deepDiveFieldLbl",
                    class: {"col-md-2  col-sm-2": isFullWidthField(i.fieldname)}
                }, [_c("vds-field-label", {
                    attrs: {
                        field: moduleModel.getField(i.fieldname),
                        record: editRecordModel,
                        module: moduleModel.name,
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        lockedFieldMsg: lockedFieldMsg(moduleModel.getField(i.fieldname)),
                        hasInfo: hasInfo(moduleModel.getField(i.fieldname)),
                        infoMsg: infoMsg(moduleModel.getField(i.fieldname))
                    }
                })], 1), _v(" "), fieldEdit[i.fieldname] ? _c("span", {
                    key: i.fieldname + "_edit",
                    staticClass: "w-75 mr-5 deepDiveEditFieldVal",
                    class: {"flex-grow-1": isFullWidthField(i.fieldname)}
                }, [_c("ui-field-edit-type", {
                    ref: "deepdive_" + i.fieldname,
                    refInFor: !0,
                    attrs: {
                        field: getFieldModel(i),
                        isFieldLocked: isFieldLocked(moduleModel.getField(i.fieldname)),
                        record: editRecordModel,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                })], 1) : _c("span", {
                    key: i.fieldname + "_display",
                    staticClass: "w-75 p-2 pl-3 mr-5 word-break-all deepDiveFieldVal d-flex align-items-center",
                    class: {
                        "bg-grey-hue-8": getFieldModel(i) && !getFieldModel(i).isEditable,
                        deepDiveFieldVal: isAjaxEditAllowed
                    },
                    on: {
                        click: function (e) {
                            return toggleEdit(i, e)
                        }
                    }
                }, [_c("vds-field-display", {
                    staticClass: "w-100",
                    attrs: {
                        record: $_detailRecordModel,
                        field: moduleModel.getField(i.fieldname),
                        modulemodel: moduleModel
                    }
                })], 1), _v(" "), "location" == i.fieldname && "Events" == moduleModel.name && $_detailRecordModel.get(i.fieldname) ? [_c("vds-location-map", {attrs: {address: $_detailRecordModel.getRawValue(i.fieldname)}})] : _e()], 2)] : _e()] : _e()]
            }))], 2)])])])], 1)]) : _e()]
        })), _v(" "), "Events" == $module && (!searchString || searchString && tranlsatedInviteesLabel.toLowerCase().includes(searchString)) ? _c("div", {staticClass: "mb-2"}, [_c("div", {staticClass: "mx-4 rounded bg-white"}, [_c("div", {staticClass: "detailBlockHeader card-header p-3 bg-white border-0"}, [_c("h5", {
            directives: [{
                name: "b-toggle",
                rawName: "v-b-toggle",
                value: inviteesLabel,
                expression: "inviteesLabel"
            }], staticClass: "c-pointer mb-0", attrs: {href: "'#'+inviteesLabel"}
        }, [_c("i", {
            staticClass: "fa mr-2",
            class: {"fa-chevron-down": isBlockOpen(inviteesLabel), "fa-chevron-right": !isBlockOpen(inviteesLabel)}
        }), _v("\n                            " + _s(translate(inviteesLabel, "Events")) + "\n                        ")])]), _v(" "), _c("b-collapse", {
            ref: inviteesLabel,
            attrs: {visible: "", id: inviteesLabel}
        }, [_c(inviteesComponent, {
            tag: "component",
            staticClass: "pl-4 ml-3 mr-5 pb-2",
            attrs: {displayMode: !1, record: editRecordModel, hideBlockLabel: !0},
            on: {
                "vds::event::invitees::altered": inviteeAdded,
                "vds::event::invitees::deleted": inviteeDeleted,
                "vds::enable::date::edit": enableDateEdits,
                "update:record": function (e) {
                    editRecordModel = e
                }
            }
        })], 1)], 1)]) : _e(), _v(" "), _l(filteredFields, (function (e) {
            return _c("div", {staticClass: "d-flex flex-column align-items-center w-100"}, [searchString ? _c("div", {
                staticClass: "card m-3 w-50 searchFieldBorder",
                attrs: {id: "filterFieldContainer"}
            }, [_c("div", {staticClass: "d-flex justify-content-between my-3 mx-4"}, [_c("vds-field-label", {
                attrs: {
                    field: e.fieldModel,
                    record: editRecordModel,
                    module: moduleModel.name,
                    isFieldLocked: isFieldLocked(e.fieldModel),
                    lockedFieldMsg: lockedFieldMsg(e.fieldModel),
                    hasInfo: hasInfo(e.fieldModel),
                    infoMsg: infoMsg(e.fieldModel)
                }
            }), _v(" "), _c("span", {staticClass: "badge-pill text-dark deepdiveSearchResultBadge bg-secondary"}, [_v(_s(e.blockName))])], 1), _v(" "), _c("div", {staticClass: "d-flex my-3 mx-4"}, [fieldEdit[e.fieldName] ? _c("span", {
                key: e.fieldName + "_edit",
                staticClass: "w-100 deepDiveEditFieldVal"
            }, [_c("ui-field-edit-type", {
                attrs: {
                    field: e.fieldModel,
                    record: editRecordModel
                }
            })], 1) : _c("span", {
                key: e.fieldName + "_display",
                staticClass: "w-100 p-2 pl-3 deepDiveFieldVal",
                class: {"bg-grey-hue-8": !e.fieldModel.editable},
                on: {
                    click: function (i) {
                        return toggleEdit(e.fieldModel.__data, i)
                    }
                }
            }, [_c("vds-field-display", {
                attrs: {
                    record: $_detailRecordModel,
                    field: e.fieldModel,
                    modulemodel: moduleModel
                }
            })], 1)])]) : _e()])
        }))], 2)
    }
});
var Vtiger_Component_CreateRelated = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord], render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "createRecordModal",
                size: "lg",
                "hide-footer": !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-title", id: "modalTitle"},
            slot: "modal-title"
        }, [_v(_s(translate("LBL_CREATE_NEW", relation.relatedModule)))]), _v(" "), _c("form", {attrs: {id: "createRecordForm"}}, _l(quickCreateFields, (function (e) {
            return _c("div", {staticClass: "form-group"}, [_c("label", {
                attrs: {
                    id: e.fieldname + "Label",
                    for: e.fieldname + "Input"
                }
            }, [_v(_s(e.fieldlabel))]), _v(" "), _c("ui-field-edit-type", {attrs: {field: e, record: recordModel}})], 1)
        })), 0), _v(" "), _c("div", {
            staticClass: "row m-2",
            attrs: {id: "modalActions"}
        }, [_c("button", {
            staticClass: "btn btn-secondary", class: {disabled: recordSaving}, on: {
                click: function (e) {
                    return createRecord()
                }
            }
        }, [_v(_s(translate("LBL_CREATE")))])])])
    }, props: {relation: {default: () => BaseModel.getModuleSpecificModel(this.$module, "Relation", {})}}, data() {
        return {recordModel: BaseModel.getModuleSpecificModel(this.$module, "Record", {}), recordSaving: !1}
    }, computed: {
        quickCreateFields() {
            let e = this.relation.relatedModuleModel.getQuickCreateFields(), t = [];
            return Object.keys(e).length && (t = Object.values(e).map(e => BaseModel.getModuleSpecificModel(this.$module, "Field", e))), t
        }
    }, methods: {
        createRecord() {
            this.recordSaving = !0;
            let e = this.getMandatoryFields(), t = {module: this.relation.relatedModule};
            for (fieldIndex in e) {
                let d = e[fieldIndex], i = this.recordModel.getRawValue(d.fieldname);
                if (_.isUndefined(i) || "" == i) return;
                t[d.fieldname] = i
            }
            this.appStore.request("api_post", {url: "/records", params: t}).then(e => {
                this.linkRecord(e.id)
            })
        }, linkRecord(e) {
            this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.relation.relatedModule,
                    related_record_id: e
                }
            }).then(e => {
                !_.isUndefined(e) && e && (this.$root.$emit("bv::hide::modal", "createRecordModal"), this.$root.$emit("bv::hide::modal", "addAttachmentsModal"), this.$root.$emit("vds::widgets::refresh"))
            }).finally(() => this.recordSaving = !1)
        }
    }
});
var Vtiger_Component_CalendarBaseView = App.vtComponent.extend({
    mixins: [App.loadMixin("DateUtils")],
    data: function () {
        return {}
    },
    props: {filterid: {type: [String, Number]}, listSearchParams: {type: Object}},
    mounted: function () {
        this.init(), this.$root.$on("vds::list::force::reload", () => {
            this.loadEvents(), this.$root.$emit("vds::list::force::reloaded", !1)
        })
    },
    watch: {
        filterid(t, e) {
            t && this.loadEvents()
        }, listSearchParams: {
            handler(t, e) {
                t && this.loadEvents()
            }, deep: !0
        }
    },
    methods: {
        init() {
            this.$root.$on("vds::fullcalendar::agenda::view::click", t => {
            })
        }, removeCalendarSpecificFilterCondition() {
            let t = url("?");
            if (t.q) {
                let e = new SearchParams(JSON.parse(t.q));
                e.pop("date_start"), t.q = JSON.stringify(e.data), VTHelper.pushDataToUrl(t)
            }
        }, loadEvents() {
        }
    },
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_AboutUS = App.vtComponent.extend({
    data: () => ({version: __version}), methods: {
        close() {
            this.$refs.aboutus.hide("cancel")
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "aboutus",
            attrs: {id: "aboutus", size: "lg", "hide-footer": "", "hide-header": "", "body-class": "p-0"}
        }, [_c("div", {staticClass: "d-flex"}, [_c("div", {
            staticClass: "d-flex justify-content-center w-50 rounded-left",
            staticStyle: {
                "border-right": "1px solid #ccc",
                "background-image": "linear-gradient(to bottom, #0065ff, #5DB5EE, #8FE0E5, #F6FEFC)",
                height: "450px"
            }
        }, [_c("img", {
            attrs: {
                src: "layouts/v9/assets/modules/Ondemand/images/about_us.svg",
                width: "350px"
            }
        })]), _v(" "), _c("div", {staticClass: "pl-4 p-2 w-50"}, [_c("div", {
            staticClass: "c-pointer",
            staticStyle: {position: "absolute", right: "10px", top: "10px"},
            on: {
                click: function (t) {
                    return close()
                }
            }
        }, [_c("i", {staticClass: "fa fa-times"})]), _v(" "), _c("div", {staticClass: "m-4 d-flex justify-content-center"}, [_c("h3", {staticStyle: {"border-bottom": "5px solid #0d70fe"}}, [_c("b", [_v("About Us")])])]), _v(" "), _c("div", {staticClass: "mb-3 d-flex justify-content-center"}, [_v("\n                        Vtiger is one, integrated CRM that helps"), _c("br"), _v("\n                        companies deliver outstanding customer "), _c("br"), _v("\n                        experience by breaking barriers between"), _c("br"), _v("\n                        marketing, sales, and support teams.\n                        "), _c("br"), _c("br"), _v("\n                        With Vtiger CRM,your team can work as one,"), _c("br"), _v("\n                        just the way it was meant to be.\n                    ")]), _v(" "), _c("div", {staticClass: "mb-3 d-flex justify-content-center"}, [_c("img", {
            staticStyle: {height: "90px"},
            attrs: {src: "layouts/v9/assets/images/VtigerLogo.png"}
        })]), _v(" "), _c("div", {staticClass: "mb-3"}, [_c("div", {
            staticClass: "d-flex justify-content-center",
            staticStyle: {"font-style": "italic"}
        }, [_v("Powered by Vtiger CRM - " + _s(version) + " © 2004-2019")])]), _v(" "), _c("div", {staticClass: "mb-4"}, [_c("div", {staticClass: "py-2 bg-grey-hue-9 text-secondary text-center d-flex justify-content-around"}, [_c("div", [_c("a", {
            staticClass: "text-decoration-none",
            attrs: {href: "https://www.vtiger.com", target: "_blank"}
        }, [_v("Vtiger")])]), _v(" "), _c("div", [_c("a", {
            staticClass: "text-decoration-none",
            attrs: {href: "https://www.vtiger.com/policy-legal-center/privacy-policy", target: "_blank"}
        }, [_v("Privacy Policy")])]), _v(" "), _c("div", [_c("a", {
            staticClass: "text-decoration-none",
            attrs: {href: "https://www.vtiger.com/policy-legal-center/security-statement", target: "_blank"}
        }, [_v("Security Statement")])])])])])])])
    }
});
var Vtiger_Component_AddOrCreateActionModal = App.vtComponent.extend({
    props: {relations: {type: [Object]}},
    components: {"vds-detail-add-or-create-action": App.loadComponent("DetailAddOrCreateAction")},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "addOrCreateModal",
                size: "lg",
                "hide-footer": !0,
                "header-class": "bgLtGrey"
            }
        }, [_c("template", {slot: "modal-title"}, [_v("\n               " + _s(translate("LBL_CREATE_NEW")) + "\n            ")]), _v(" "), _c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c("vds-detail-add-or-create-action", {
            on: {
                "close-add-or-create-action-modal": function (e) {
                    return $root.$emit("bv::hide::modal", "addOrCreateModal")
                }
            }
        })], 2)
    }
});
var Vtiger_Component_AlertBox = Vtiger_Component_ConfirmationBox.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                "hide-header": !title,
                title: title,
                id: "",
                "ok-title": okTitle,
                "ok-only": ""
            }, on: {ok: onOk, cancel: onClose}
        }, [_c("div", {domProps: {innerHTML: _s(message)}})])
    }
});
var Vtiger_Component_CacheController = App.vtComponent.extend({
    name: "vds-cache-controller", data: () => ({enabled: !0, timeout: !1}), created() {
        this.enabled && this.initialize()
    }, methods: {
        initialize() {
            App.notification.listen("LocalStorage", e => {
                if (!storageExists) return;
                let t = e.token;
                if ("true" != localStorage.getItem("cacheExecution" + t)) {
                    switch (localStorage.setItem("cacheExecution" + t, !0), window.AppStorage.inactive && (window.AppStorage = storageController(), window.AppStorage.indexedDBStore.getItem("test")), t) {
                        case"module":
                            this.clearModuleCache(e.module);
                            break;
                        case"userinfo":
                            var o = e.users || [];
                            for (var s in o) {
                                let e = o[s];
                                this.clearUserCache(e, !0)
                            }
                            break;
                        case"user":
                            o = e.users || [];
                            for (var s in o) {
                                let e = o[s];
                                this.clearUserCache(e)
                            }
                            break;
                        case"deletekey":
                            this.deleteKey(e.key);
                            break;
                        case"flushall":
                            AppStorage.flush()
                    }
                    (e => {
                        setTimeout(() => {
                            localStorage.setItem("cacheExecution" + e, !1)
                        }, 2e3)
                    })(t)
                }
            }), AppStorage.listenKeyDelete("ModulesDescribe", () => {
                this.clearAppModulesCache(), this.appStore.set({key: "_modules", data: {}})
            })
        }, getAllUsersDbList: () => new Promise((e, t) => {
            AppStorage.dbListCollectionStore.getItem("dblist").then(t => {
                e(t = t || [])
            })
        }), clearModuleCache(e) {
            e && !_.isArray(e) && (e = [e]), this.getAllUsersDbList().then(t => {
                for (let o of t) {
                    let t = storageController(o);
                    t.indexedDBStore.getItem("ModulesDescribe").then(s => {
                        if (e && s) {
                            for (var r in e) delete s[e[r]], o == AppStorage.dbName && this.$store.commit("_deleteModuleDesc", e[r]);
                            t.set("ModulesDescribe", s)
                        } else t.delete("ModulesDescribe")
                    })
                }
                this.clearAppModulesCache()
            })
        }, clearAppModulesCache() {
            this.timeout || (this.timeout = setTimeout(() => {
                AppStorage.delete("app_modules"), this.timeout = !1
            }, 5e3))
        }, clearUserCache(e, t) {
            if (e) {
                let o = storageController("v9_db_" + e);
                t ? o.delete("user_info") : (o.delete("user_info"), o.delete("app_modules"), o.delete("ModulesDescribe"), o.delete("app_module_permissions"))
            }
        }, deleteKey(e) {
            this.getAllUsersDbList().then(t => {
                for (let o of t) {
                    (t => {
                        AppStorage.indexedDBStore.getItem("test").then(() => {
                            t.delete(e)
                        })
                    })(storageController(o))
                }
            })
        }
    }, render: function anonymous() {
        with (this) return _c("span")
    }
});
Vue.component("vds-calendar", App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, Vtiger_Mixin_DateUtils, Vtiger_Mixin_ModuleModel, App.loadMixin("Record", this.$module)],
    props: {records: {type: Array}, height: {type: Number}},
    data: function () {
        return {
            convertedEvents: [],
            calendarHeaderTitle: "",
            calendarInstance: "",
            defaultEventBackgroundColor: "#f6f7f8",
            defaultTextColor: "#1c2121",
            allDaySlot: !0,
            eventLimitText: "",
            currentCalendarView: "",
            regularEvents: [],
            groupedEvents: [],
            userConvertedEventDateTimes: []
        }
    },
    computed: {},
    watch: {
        records: function (e, t) {
            if (e) {
                let t = this.returnCalendarFormatRecords(e);
                t && this.addEventsToCalendar(t)
            }
        }
    },
    mounted: function () {
        this.eventLimitText = this.translate("LBL_MORE").toLowerCase() + " " + this.translate(this.$module).toLowerCase(), this.init()
    },
    methods: {
        init() {
            if (this.$root.$on("vds::fullcalendar::change::view", e => {
                if (this.currentCalendarView = e, "vtAgendaList" != e) if ("today" == e) {
                    var t = moment();
                    jQuery("#fullCalendarContainer").fullCalendar("changeView", "agendaDay", t)
                } else jQuery("#fullCalendarContainer").fullCalendar("changeView", e); else jQuery("#fullCalendarContainer").fullCalendar("changeView", "agendaWeek")
            }), this.$root.$off("vds::fullcalendar::rerender::events"), this.$root.$on("vds::fullcalendar::rerender::events", (function () {
                let e = jQuery("#fullCalendarContainer");
                e && e.length > 0 && e.fullCalendar("rerenderEvents")
            })), this.$root.$on("vds::record::completed", this.markRecordAsCompleted), "Tasks" == this.$module && (this.allDaySlot = !1), this.$currentUser) this.loadCalendar(); else {
                let e = this.$watch("$currentUser", (t, a) => {
                    t && (this.loadCalendar(), e())
                })
            }
        },
        markRecordAsCompleted(e, t) {
            "Events" == this.$module ? this.markAsHeld(e, t) : this.markAsCompleted(e, t)
        },
        getDefaultCalendarView() {
            var e = this.$currentUser.activity_view;
            return "Today" === e ? e = "agendaDay" : "This Week" === e ? e = "agendaWeek" : "3 Day" === e ? e = "agendaThreeDay" : "1 Day" === e ? e = "agendaDay" : "Agenda" === e ? (e = "vtAgendaList", this.$root.$emit("vds::fullcalendar::agenda::view::click", e)) : e = "month", e
        },
        loadCalendar() {
            let e = jQuery("#fullCalendarContainer"), t = this.getDefaultCalendarTimeFormat(),
                a = this.getDefaultCalendarView();
            this.currentCalendarView = a, this.calendarInstance = e.fullCalendar({
                header: {left: "", center: "", right: ""},
                titleFormat: "MMM YYYY",
                views: {
                    month: {eventLimit: !0, titleFormat: "MMM YYYY", displayEventEnd: !0},
                    agendaWeek: {eventLimit: !0, eventLimitText: "More tasks", titleFormat: "DD MMM YYYY"},
                    agendaDay: {
                        eventLimit: !0,
                        eventLimitText: "More tasks",
                        eventOrder: "sortOn",
                        titleFormat: "DD MMM YYYY"
                    },
                    agendaThreeDay: {
                        type: "agenda",
                        eventLimit: !0,
                        eventLimitText: "More tasks",
                        titleFormat: "DD MMM YYYY",
                        duration: {days: 3}
                    },
                    vtAgendaList: {type: "agenda", duration: {days: 7}}
                },
                dayClick: (e, t, a) => {
                    this.$emit("vds::fullcalendar::day::click", e, t, a)
                },
                events: [],
                eventClick: (e, t) => {
                    e && "groupEvent" == e.eventType ? this.$emit("vds::fullcalendar::group::event::click", e.ids, e.start) : (selectedEventRecord = _.where(this.records, {id: e.id}), this.$emit("vds::fullcalendar::event::click", selectedEventRecord[0]))
                },
                eventRender: (e, t) => {
                    this.performPreEventRenderActions(e, t)
                },
                viewRender: (e, t) => {
                    this.$root.$emit("vds::fullcalendar::title::event", e), this.calendarHeaderTitle = e.title, "Events" == this.$module && this.renderEventsBasedOnView(e)
                },
                dayRender: (e, t, a) => {
                },
                allDaySlot: this.allDaySlot,
                eventLimit: !0,
                defaultView: a,
                eventLimitText: this.eventLimitText,
                timeFormat: t,
                slotLabelFormat: this.getAxisDefaultTimeFormat(),
                eventLimitClick: (e, t, a) => {
                    var r = e.date;
                    eventRecordModels = this.returnRecordModelsForMoreTasks(e), this.$emit("vds::fullcalendar::event::morelink::click", eventRecordModels, r)
                },
                eventDrop: (e, t, a, r, s, i) => {
                    this.$emit("vds::fullcalendar::event::drop::or::resize", e, t, a, r, s, i, "drag")
                },
                eventResize: (e, t, a, r, s, i) => {
                    this.$emit("vds::fullcalendar::event::drop::or::resize", e, t, a, r, s, i, "resize")
                },
                height: "auto",
                fixedWeekCount: !1,
                editable: !0,
                firstDay: this.getFirstDayIndex(),
                scrollTime: this.$currentUser.start_hour,
                businessHours: {start: this.$currentUser.start_hour, end: "23:59:59", dow: [0, 1, 2, 3, 4, 5, 6]},
                monthNames: [this.translate("LBL_JANUARY", "Calendar"), this.translate("LBL_FEBRUARY", "Calendar"), this.translate("LBL_MARCH", "Calendar"), this.translate("LBL_APRIL", "Calendar"), this.translate("LBL_MAY", "Calendar"), this.translate("LBL_JUNE", "Calendar"), this.translate("LBL_JULY", "Calendar"), this.translate("LBL_AUGUST", "Calendar"), this.translate("LBL_SEPTEMBER", "Calendar"), this.translate("LBL_OCTOBER", "Calendar"), this.translate("LBL_NOVEMBER", "Calendar"), this.translate("LBL_DECEMBER", "Calendar")],
                monthNamesShort: [this.translate("LBL_JAN", "Calendar"), this.translate("LBL_FEB", "Calendar"), this.translate("LBL_MAR", "Calendar"), this.translate("LBL_APR", "Calendar"), this.translate("LBL_MAY", "Calendar"), this.translate("LBL_JUN", "Calendar"), this.translate("LBL_JUL", "Calendar"), this.translate("LBL_AUG", "Calendar"), this.translate("LBL_SEP", "Calendar"), this.translate("LBL_OCT", "Calendar"), this.translate("LBL_NOV", "Calendar"), this.translate("LBL_DEC", "Calendar")],
                dayNames: [this.translate("LBL_SUNDAY", "Calendar"), this.translate("LBL_MONDAY", "Calendar"), this.translate("LBL_TUESDAY", "Calendar"), this.translate("LBL_WEDNESDAY", "Calendar"), this.translate("LBL_THURSDAY", "Calendar"), this.translate("LBL_FRIDAY", "Calendar"), this.translate("LBL_SATURDAY", "Calendar")],
                dayNamesShort: [this.translate("LBL_SUN", "Calendar"), this.translate("LBL_MON", "Calendar"), this.translate("LBL_TUE", "Calendar"), this.translate("LBL_WED", "Calendar"), this.translate("LBL_THU", "Calendar"), this.translate("LBL_FRI", "Calendar"), this.translate("LBL_SAT", "Calendar")]
            }), this.calendarInstance.fullCalendar("addEventSource", (e, t, a, r) => {
                var s = e.format("YYYY-MM-DD"), i = t.format("YYYY-MM-DD");
                this.$emit("vds::fullcalendar::event::load::records", {start: s, end: i}), r([])
            })
        },
        renderEventsBasedOnView(e) {
            jQuery("#fullCalendarContainer").fullCalendar("removeEvents"), jQuery("#fullCalendarContainer").fullCalendar("addEventSource", (t, a, r, s) => {
                var i = [];
                e && "month" == e.name ? this.groupedEvents && (i = this.groupedEvents) : this.regularEvents && (i = this.regularEvents), s(i)
            })
        },
        returnRecordModelsForMoreTasks(e) {
            let t = e.hiddenSegs;
            var a = [];
            for (var r in t) {
                let e = t[r];
                var s = e.footprint.eventDef.miscProps.eventType;
                if (s && "singleEvent" == s) {
                    let t = e.footprint.eventDef.id, r = e.isStart;
                    t && r && (t = parseInt(t), selectedEventRecord = _.where(this.records, {id: t}), a.push(selectedEventRecord[0]))
                } else if (s && "groupEvent" == s) {
                    let t = e.footprint.eventDef.miscProps.ids;
                    if (t) for (id in t) groupRecordId = t[id], groupRecordId && (groupRecordId = parseInt(groupRecordId), selectedEventRecord = _.where(this.records, {id: groupRecordId}), a.push(selectedEventRecord[0]))
                }
            }
            return a
        },
        performPreEventRenderActions(e, t) {
            var a = jQuery("#fullCalendarContainer").fullCalendar("getView");
            this.addEventSpecificHtml(e, t), this.registerPopoverEvent(e, t, a)
        },
        getDefaultCalendarTimeFormat: function () {
            var e = this.$currentUser.hour_format;
            return e = 24 === parseInt(e) ? "HH:mm" : "hh:mm A"
        },
        registerPopoverEvent(e, t, a) {
            if ("groupEvent" != e.eventType && "Tasks" != e.module) {
                var r = {
                    header: "hide", trigger: "manual", content: (e => {
                        let t = ["eventstatus", "assigned_user_id", "parent_id"], a = {};
                        for (let r in t) this.$_currentModuleModel.getField(t[r]).isViewable && Vue.set(a, t[r], e.recordData[t[r]]);
                        e.id;
                        var r = "";
                        if (r = '<div class="taskEventContent" style="width:200px">', a.eventstatus) {
                            let t = this.$_currentModuleModel.getField("eventstatus").type.picklistValues.filter(({label: t}) => t == e.recordData.eventstatus),
                                s = t && t[0] && t[0].color ? t[0].color : "#8E9093";
                            r += '<div class="py-1 d-flex"><div class="w-50 text-truncate font-weight-bold">' + this.translate("LBL_STATUS", "Accounts") + '</div><div class="w-maxContent ml-1 text-truncate badge badge-pill" style="background-color:' + s + ';">' + a.eventstatus + "</div></div>"
                        }
                        return a.assigned_user_id && a.assigned_user_id.id && (r += '<div class="py-1 d-flex"><div class="w-50 text-truncate font-weight-bold">' + this.translate("LBL_ASSIGNED_TO") + '</div><div class="w-50 ml-2 text-truncate">' + a.assigned_user_id.label + "</div></div>"), a.parent_id && a.parent_id.id && (r += '<div class="py-1 d-flex"><div class="w-50 text-truncate font-weight-bold">' + this.translate("LBL_RELATED_TO") + '</div><div class="w-50 ml-2 text-truncate">' + a.parent_id.label + "</div></div>"), r += "</div>", jQuery(r)
                    })(e), placement: "top", html: !0, animation: !1
                }, s = this;
                t.popover(r).on("mouseenter", (function () {
                    $(this).popover("show"), $(".popover").on("mouseleave", (function () {
                        $(s).popover("hide")
                    }))
                })).on("mouseleave", (function () {
                    $(this).popover("hide")
                }))
            }
        },
        addEventSpecificHtml(e, t) {
            if (e && "groupEvent" != e.eventType) e.recordData.isClosed;
            title = e.title, target = t.find(".fc-title"), "groupEvent" != e.eventType && e.recordData.isClosed && ("Events" == this.$module && e.recordData.eventstatus && "Held" != e.recordData.eventstatus || "Tasks" == this.$module && e.recordData.taskstatus && "Completed" != e.recordData.taskstatus) ? target.html("<div class='w-75 calendarCardModalTitle strikeThrough'>" + title + "</div>") : target.html("<div class='w-75 calendarCardModalTitle'>" + title + "</div>"), t.css("height", "auto"), t.css("min-height", "20px");
            var a = t.find(".fc-time").text();
            if (t.find(".fc-time").remove(), t.find(".fc-content").parent().addClass("calendarDayContent"), t.find(".fc-content").addClass("p-1"), t.find(".fc-content > .fc-title").addClass("font-weight-bold d-flex"), setTimeout(() => {
                if ("groupEvent" == e.eventType) t.find(".fc-content").parent().addClass("groupEvents"), $(".groupEvents").css("border-left", "5px solid #8E9093"); else {
                    t.find(".fc-content").parent().addClass("record_" + e.recordData.id);
                    let a = VTHelper.getColorCode(e.recordData.assigned_user_id.label);
                    $(".record_" + e.recordData.id).css("border-left", "5px solid " + a)
                }
            }, 0), "Events" == this.$module) {
                let a = this.getActivityIcon(e.activityType);
                e.eventType, t.find(".fc-content > .fc-title").append('<div class="w-15"><i class="fa ' + a + ' float-right text-grey-4 h6 mb-0"></i></div>')
            }
            if (1 == e.vtAllDay && (t.css("min-height", "auto"), t.find(".fc-content > .fc-title").after('<div class="mt-2 mb-1"><span class="border rounded-pill p-1 bg-white">' + this.translate("JS_ALL_DAY") + "</span></div>")), "singleEvent" == e.eventType) {
                let a = "", r = "", s = "";
                if (e.recordData.isClosed && ("Events" == this.$module && e.recordData.eventstatus && "Held" != e.recordData.eventstatus || "Tasks" == this.$module && e.recordData.taskstatus && "Completed" != e.recordData.taskstatus)) return;
                e.recordData.isClosed && ("Events" == this.$module && e.recordData.eventstatus && "Held" == e.recordData.eventstatus || "Tasks" == this.$module && e.recordData.taskstatus && "Completed" == e.recordData.taskstatus) ? (a = "checked", r = "bg-success") : e.recordData.isClosed || (s = '<span class="check"></span>');
                let i = "checkbox_" + e.recordData.id;
                t.find(".fc-content > .fc-title").prepend('<div id="' + i + '"+ class="smallCheckBox mr-2"><div class="w-15 vt-checkbox-container hw-14px"><input type="checkbox" ' + a + ' /><span class="checkmark hw-14px border-0 ' + r + '"></span>' + s + "</div></div>"), setTimeout(() => {
                    $("#" + i).click(t => {
                        t.stopPropagation();
                        let a = e.recordData;
                        "Events" == this.$module ? this.markAsHeld(a, !e.recordData.isClosed) : this.markAsCompleted(a, !e.recordData.isClosed)
                    })
                }, 0)
            }
            a && t.find(".fc-content > .fc-title").after('<div class="pt-1">' + a + "</div>")
        },
        markAsHeld(e, t) {
            $(".popover").hide();
            let a = e.id;
            t ? this.markEventAsHeld(e).then(t => {
                t && (e = t, this.showSuccessNotification(this.translate("JS_EVENT_UPDATED", "Calendar")), this.$root.$emit("vds::tasks::preview::modal::post::completed", t), this.$root.$emit("vds::event::held", e))
            }, t => {
                this.showErrorNotification(t), this.$nextTick(() => {
                    e.set("isclosed", !1)
                })
            }) : this.reOpenRecord(a, this.$module).then(e => {
                e && this.retrieveRecord(a, this.$module).then(e => {
                    e = e, this.$root.$emit("vds::tasks::preview::modal::post::completed", e)
                })
            })
        },
        markAsCompleted(e, t) {
            t ? this.markTaskAsCompleted(e.id, t).then(t => {
                t && (e = t, this.showSuccessNotification(this.translate("JS_TASK_UPDATED", "Calendar")), this.$root.$emit("vds::tasks::preview::modal::post::completed", t))
            }, t => {
                this.showErrorNotification(t), e.set("isclosed", !1)
            }) : this.reOpenRecord(e.id, this.$module).then(t => {
                t && this.retrieveRecord(e.id, this.$module).then(e => {
                    e = e, this.$root.$emit("vds::tasks::preview::modal::post::completed", e)
                })
            }, t => {
                e.set("isclosed", !0)
            })
        },
        addEventsToCalendar(e) {
            this.calendarInstance.fullCalendar("removeEvents"), this.calendarInstance.fullCalendar("addEventSource", e)
        },
        generateCalendarEventsDataFromTasks(e) {
            for (var t in this.convertedEvents = [], e) {
                let g = e[t];
                if (!g.due_date) continue;
                var a = g.subject, r = g.date_start, s = g.time_start, i = g.due_date, n = g.time_end,
                    d = g.assigned_user_id.id, l = g.id, o = g.taskstatus, c = g.activitytype,
                    v = (g.visibility, this.defaultEventBackgroundColor), h = this.defaultTextColor, u = g.moduleName;
                a = g.subject;
                n && void 0 !== n || (n = "00:00:00");
                let y = r + " " + s;
                var m = this.getDisplayDateTime(y, !0);
                let E = i + " " + n;
                var p = this.getDisplayDateTime(E, !0);
                if (m && p) {
                    var f = this.splitDateTimeBasedOnUserFormat(m), C = this.splitDateTimeBasedOnUserFormat(p);
                    f[0] && C[0] && f[0] != C[0] && (p = m)
                }
                eventObject = {
                    title: a,
                    start: m,
                    end: p,
                    id: l,
                    status: o,
                    color: v,
                    textColor: h,
                    module: u,
                    activityType: c,
                    assigned_user: d,
                    recordData: g,
                    eventType: "singleEvent"
                }, this.convertedEvents.push(eventObject)
            }
            return this.convertedEvents
        },
        generateCalendarEventsDataFromEvents(e) {
            for (var t in this.convertedEvents = [], e) {
                let C = e[t];
                var a = C.subject, r = C.date_start, s = C.time_start, i = C.due_date, n = C.time_end, d = C.allday,
                    l = C.id, o = C.eventstatus, c = (C.visibility, this.defaultEventBackgroundColor),
                    v = this.defaultTextColor, h = C.moduleName, u = (a = C.subject, !1), m = C.activitytype;
                let g = r + " " + s;
                var p = this.getDisplayDateTime(g, !0);
                let y = i + " " + n;
                var f = this.getDisplayDateTime(y, !0);
                let E = this.splitDateTimeBasedOnUserFormat(p), D = this.splitDateTimeBasedOnUserFormat(f),
                    _ = {date_start: E[0], time_start: E[1], due_date: D[0], time_end: D[0]};
                if (this.userConvertedEventDateTimes[l] = _, parseInt(C.allday)) {
                    p = E[0], f = D[0];
                    u = !0
                } else E[0] && D[0] && E[0] != D[0] && (f = p);
                eventObject = {
                    title: a,
                    start: p,
                    end: f,
                    id: l,
                    status: o,
                    color: c,
                    textColor: v,
                    module: h,
                    recordData: C,
                    eventType: "singleEvent",
                    vtAllDay: d,
                    allDay: u,
                    activityType: m
                }, this.convertedEvents.push(eventObject)
            }
            return this.convertedEvents
        },
        generateCalendarEventsInGroupedFormat(e) {
            for (var t in e) {
                let r = e[t];
                var a = r.id;
                r.userFormatStartDate = this.userConvertedEventDateTimes[a].date_start, r.userFormatStartTime = this.userConvertedEventDateTimes[a].time_start, r.userFormatEndDate = this.userConvertedEventDateTimes[a].due_date, r.userFormatEndTime = this.userConvertedEventDateTimes[a].time_end
            }
            this.convertedGroupedEvents = [];
            var r = _.groupBy(e, (function (e) {
                return e.userFormatStartDate + "#" + e.activitytype
            })), s = _.map(r, (function (e) {
                return {
                    date_start: e[0].date_start,
                    time_start: e[0].time_start,
                    activitytype: e[0].activitytype,
                    activityIds: _.pluck(e, "activityid"),
                    isclosed: e[0].isclosed
                }
            }));
            for (var t in s) {
                let e = s[t], a = e.activityIds, r = !1;
                if (e.activityIds.length > 1) {
                    startDate = e.date_start;
                    let t = e.time_start, s = startDate + " " + t, d = this.getDisplayDateTime(s, !0);
                    d = this.splitDateTimeBasedOnUserFormat(d)[0], r = !0;
                    var i = this.defaultEventBackgroundColor, n = this.defaultTextColor;
                    let l = e.activityIds.length + " " + this.translate(e.activitytype) + "s";
                    eventObject = {
                        title: l,
                        start: d,
                        end: d,
                        ids: a,
                        eventType: "groupEvent",
                        color: i,
                        textColor: n,
                        activityType: e.activitytype,
                        allDay: r
                    }, this.convertedGroupedEvents.push(eventObject)
                } else for (activity in a) {
                    activityId = parseInt(a[activity]), activityRecordModel = _.where(this.records, {id: activityId});
                    var d = this.generateCalendarEventsDataFromEvents(activityRecordModel);
                    this.convertedGroupedEvents.push(d[0])
                }
            }
            return this.convertedGroupedEvents
        },
        getFirstDayIndex() {
            var e = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thrusday", "Friday", "Saturday");
            return this.$currentUser && this.$currentUser.dayoftheweek ? e.indexOf(this.$currentUser.dayoftheweek) : e.indexOf("Sunday")
        },
        returnCalendarFormatRecords(e) {
            var t = [], a = [];
            for (var r in e) {
                let s = e[r];
                s.activitytype;
                "Tasks" == this.$module ? t.push(s) : a.push(s)
            }
            return "Tasks" == this.$module ? this.generateCalendarEventsDataFromTasks(t) : (0 != this.$currentUser.hidecompletedevents && (a = a.filter(e => 0 == e.isclosed)), this.regularEvents = this.generateCalendarEventsDataFromEvents(a), this.groupedEvents = this.generateCalendarEventsInGroupedFormat(a), this.currentCalendarView && "month" == this.currentCalendarView ? this.groupedEvents : this.regularEvents)
        },
        getAxisDefaultTimeFormat() {
            var e = "HH";
            return "12" == parseInt(this.$currentUser.hour_format) && (e = "h(:mm)a"), e
        },
        getActivityIcon: e => "Meeting" === e || "Onsite meeting" === e ? "fa-users" : "Call" === e || "Mobile Call" === e ? "fa-phone-alt" : "fa-calendar"
    },
    beforeDestroy() {
        this.$root.$off("vds::record::completed", this.markRecordAsCompleted)
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {
            staticClass: "px-3 pt-0",
            style: {"max-height": height + "px"},
            attrs: {id: "fullCalendarContainer"}
        })])
    }
}));
var Vtiger_Component_CaptureEmotionController = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_EmotionUtils, App.loadMixin("Record", this.$module)],
    mounted() {
        this.init()
    },
    methods: {
        init() {
            this.getEnabledModules().then(o => {
                _.indexOf(o, "Emotions") >= 0 && (this.$root.$on("vds::show::emotion::modal", this.showEmotionCaptureModal), this.$root.$on("vds::event::held", this.initiateEventsEmotionsSave), this.$root.$on("vds::call::popup::closed", this.inititatePhoneCallEmotionsSave))
            })
        }, showEmotionCaptureModal(o) {
            if (o && o.parentModuleName) {
                let t = BaseModel.getModuleSpecificModel(o.parentModuleName);
                if (t && !t.isEmotionsSupported) return
            }
            this.showModal({
                componentName: "EmotionModal",
                componentData: {
                    parentId: o.parentId,
                    recordId: o.recordId,
                    relatedRecordIds: o.relatedRecordIds,
                    modalPosition: o.modalPosition,
                    modalTitle: o.modalTitle,
                    activityType: o.activityType,
                    relatedModule: o.relatedModule
                }
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ChangeOwner = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    props: {
        recordIds: {type: [Array]},
        modulename: {type: String},
        getSelectedRecords: {type: Function},
        reloadList: {type: Function}
    },
    data: () => ({usersInfo: {}, groupInfo: {}, selectedUser: "", trasnferClosedRecords: ""}),
    mounted() {
        this.getUsersAndGroupInfo()
    },
    methods: {
        getUsersAndGroupInfo() {
            let e = () => {
                let e = this.$_currentModuleModel.getField("assigned_user_id").picklistValues;
                this.usersInfo = e.users, this.groupInfo = e.groups
            }, t = this.$watch(() => ({loaded: this.$_currentModuleModel._loaded}), ({loaded: s}) => {
                s && (_.defer(() => {
                    t()
                }), e())
            }, {immediate: !0})
        }, getUsersLabel() {
            return this.translate("LBL_USERS")
        }, getGroupLabel() {
            return this.translate("LBL_GROUPS")
        }, async getSelectedRecordIds() {
            var e = [];
            return this.record ? e.push(this.record.id) : e = await this.getSelectedRecords(), e
        }, async saveChangeOwner() {
            let e = await this.getSelectedRecordIds();
            var t = this.selectedUser;
            let s = [], r = {
                type: "put",
                api: "records",
                parameters: {
                    module: this.modulename,
                    id: "",
                    assigned_user_id: t,
                    transferClosedRecords: this.trasnferClosedRecords
                }
            };
            for (let t of e) r.parameters.id = t, s.push(jQuery.extend(!0, {}, r));
            this.appStore.request("api_batch", {requests: s}).then(t => {
                e.splice(0), this.reloadList({massAction: !0})
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "recordChangeOwner",
                "body-class": "pt-4 pb-3",
                "ok-title": translate("LBL_SAVE"),
                "header-class": "py-3 bgLtGrey"
            }, on: {
                ok: function (e) {
                    return saveChangeOwner()
                }
            }
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", [_v(_s(translate("LBL_SELECT_USERS", "Calendar")))])]), _v(" "), _c("form", [_c("div", {staticClass: "form-group mb-0"}, [_c("v-select2", {
            attrs: {name: "assignedTo"},
            model: {
                value: selectedUser, callback: function (e) {
                    selectedUser = e
                }, expression: "selectedUser"
            }
        }, [_c("optgroup", {attrs: {label: getUsersLabel()}}, _l(usersInfo, (function (e, t) {
            return _c("option", {domProps: {value: e.value}}, [_v(_s(e.label))])
        })), 0), _v(" "), _c("optgroup", {attrs: {label: getGroupLabel()}}, _l(groupInfo, (function (e, t) {
            return _c("option", {domProps: {value: e.value}}, [_v(_s(e.label))])
        })), 0)]), _v(" "), _c("div", {staticClass: "d-flex align-items-center pt-3"}, [_c("label", {
            staticClass: "pr-2 mb-0",
            attrs: {for: "transferCheckbox"}
        }, [_v(_s(translate("LBL_TRANSFER_CLOSED_RECORDS")))]), _v(" "), _c("span", [_c("vds-checkbox", {
            staticClass: "mr-4",
            model: {
                value: trasnferClosedRecords, callback: function (e) {
                    trasnferClosedRecords = e
                }, expression: "trasnferClosedRecords"
            }
        })], 1)])], 1)])])
    }
});
var Vtiger_Component_CloudAlert = App.vtComponent.extend({
    name: "vds-cloud-alert",
    mixins: [Vtiger_Mixins_ShowModal],
    data: () => ({messages: "", isActive: !1, message: {}, modalShow: !1}),
    created() {
        var e = e => {
            e && e.length && (this.messages = e, this.message = e[0], this.isActive = !0)
        }, s = AppStorage.get("cloudalertmessages");
        s ? e(s) : this.appStore.request("api_get", {
            url: "cloudalertmessages",
            params: {module: "Ondemand"}
        }).then(s => {
            AppStorage.set("cloudalertmessages", s), e(s)
        })
    },
    methods: {
        showMoreMessage(e) {
            this.showModal({
                componentName: App.loadComponent("CloudAlertModal"),
                componentData: {messages: this.messages}
            }), e.preventDefault()
        }, markAllMessagesAsSeen() {
            this.isActive = !1;
            this.appStore.request("api_delete", {url: "cloudalertmessages", params: {module: "Ondemand"}}).then(e => {
            })
        }
    },
    render: function anonymous() {
        with (this) return isActive ? _c("div", {
            staticClass: "w-100 align-items-center",
            class: [isActive ? "d-flex d-block" : "d-none"],
            attrs: {id: "cloudalert"}
        }, [_c("div", {staticClass: "col-11 d-flex justify-content-center"}, [_c("span", [_c("i", {
            class: {
                "fa fa-exclamation-triangle": "Alert" == message.type,
                "fa fa-info-circle": message.type = "Info"
            }
        }), _v("  ")]), _v(" "), _c("span", {domProps: {innerHTML: _s(message.message)}}), _v(" "), messages.length > 1 ? _c("span", [_v("  |  \n                    "), _c("a", {
            attrs: {href: "#"},
            on: {click: showMoreMessage}
        }, [_v("+" + _s(messages.length - 1) + " " + _s(translate("LBL_MORE")))])]) : _e()]), _v(" "), _c("div", {staticClass: "col-1 d-flex justify-content-end"}, [_c("span", {on: {click: markAllMessagesAsSeen}}, [_c("i", {staticClass: "fa fa-times c-pointer"})])])]) : _e()
    }
}), Vtiger_Component_CloudAlertModal = App.vtComponent.extend({
    data: () => ({modalShow: !0}), props: {messages: ""}, methods: {
        dismiss(e) {
            var s = {url: "cloudalertmessages", params: {module: "Ondemand", id: e.ecs_record_id}};
            this.appStore.request("api_delete", s).then(s => {
                s && this.messages && this.messages.forEach((s, t) => {
                    s.ecs_record_id == e.ecs_record_id && this.messages.splice(t, 1)
                }), 0 == this.messages.length && (this.modalShow = !1)
            })
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "lg",
                "header-class": "p-3 bgLtGrey",
                lazy: !0,
                "hide-footer": "",
                "body-class": "previewModal p-0",
                title: translate("LBL_ANNOUNCEMENTS")
            }, model: {
                value: modalShow, callback: function (e) {
                    modalShow = e
                }, expression: "modalShow"
            }
        }, _l(messages, (function (e) {
            return _c("div", [_c("div", {staticClass: "p-2 pl-4"}, [_c("span", {staticClass: "d-flex align-items-center"}, [_c("i", {class: ["Alert" == e.type ? "fa fa-exclamation-triangle text-danger" : "fa fa-info-circle text-info"]}), _v("  ")]), _v(" "), _c("span", {
                staticStyle: {"font-size": "13px"},
                domProps: {innerHTML: _s(e.message)}
            })]), _v(" "), _c("div", {staticClass: "pl-4"}, [_c("button", {
                staticClass: "btn btn-sm btn-secondary",
                on: {
                    click: function (s) {
                        return dismiss(e)
                    }
                }
            }, [_v(_s(translate("LBL_DISMISS")))])]), _v(" "), _c("hr")])
        })), 0)
    }
});
var Vtiger_Component_ComingsoonView = App.vtComponent.extend({
    props: {isSubview: {type: Boolean, default: !1}},
    render: function anonymous() {
        with (this) return _c("div", {class: isSubview ? "" : "vds-body"}, [_c("div", {staticClass: "my-4 mx-5 d-flex justify-content-center flex-column"}, [_m(0), _v(" "), _c("div", {staticClass: "align-self-center px-2 mt-4 font-weight-bold"}, [_c("h5", {staticClass: "text-center font-weight-bold"}, [_v(_s(translate("LBL_COMING_SOON")))]), _v(" "), _c("span", [_v(_s(translate("LBL_NOTIFY_WHEN_FEATURE_READY")))])])])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "align-self-center mt-2 mx-4"}, [_c("img", {attrs: {src: "layouts/v9/assets/modules/Ondemand/images/coming-soon.svg"}})])
    }]
});
var Vtiger_Component_CompactHeaderFields = Vtiger_Component_DetailHeaderFields.extend({
    mixins: [Vtiger_Mixin_Module], methods: {
        getFieldIcon(e) {
            var t = "fa-info-circle";
            if (e.isLoaded) {
                switch (e.type.name) {
                    case"email":
                        t = "fa-envelope";
                        break;
                    case"phone":
                        t = "fa-phone-alt";
                        break;
                    case"owner":
                        t = "fa-user";
                        break;
                    case"coowner":
                        t = "fa-users";
                        break;
                    case"reference":
                        t = "fa-phone-alt";
                        let a = "";
                        e && e.type.relatedModules && 1 == e.type.relatedModules.length && (a = e.type.relatedModules[0], t = this.getModuleIconClass(a))
                }
                return t
            }
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-wrap w-100 my-1"}, _l(getHeaderFields, (function (e) {
            return e.isViewableInDetail ? _c("div", {
                staticClass: "mb-1 d-flex align-items-center mr-3",
                staticStyle: {"min-width": "0px", height: "20px"}
            }, [_c("div", {staticClass: "d-flex text-truncate align-items-center w-100 defaultLightFontColor"}, [computedRecordModel ? _c("span", {staticClass: "mr-2"}, [_c("i", {
                staticClass: "fa",
                class: getFieldIcon(e),
                attrs: {title: translate(e.label, $module)}
            })]) : _e(), _v(" "), _c("vds-field-display", {
                staticClass: "textOverflowEllipsis",
                attrs: {isCompact: "true", record: computedRecordModel, field: e, modulemodel: $_currentModuleModel}
            })], 1)]) : _e()
        })), 0)
    }
});
var Vtiger_Component_ComposeEmailModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_EmailCompose],
    components: {"vds-compose-email": App.loadComponent("ComposeEmail")},
    data: () => ({showConfirmation: !1, displayedOnce: !1}),
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalComposeEmail",
            attrs: {
                id: "modalComposeEmail",
                lazy: !0,
                "hide-footer": "",
                size: "xl",
                "header-class": "bgLtGrey d-flex align-items-center",
                title: translate("LBL_COMPOSE_EMAIL"),
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("template", {slot: "modal-header"}, [_c("div", {
            staticClass: "d-flex bd-highlight align-items-center",
            staticStyle: {width: "100%"}
        }, [_c("div", {staticClass: "flex-grow-1 bd-highlight"}, [_c("h5", [_v(_s(translate("LBL_COMPOSE_EMAIL")))])]), _v(" "), showConfirmation ? _c("div", {staticClass: "bd-highlight"}, [_c("b-button", {
            attrs: {variant: "danger"},
            on: {
                click: function (e) {
                    return discardDraft()
                }
            }
        }, [_v(_s(translate("LBL_DISCARD")))])], 1) : _e(), _v(" "), _c("div", {staticClass: "bd-highlight"}, [_c("button", {
            staticClass: "close",
            attrs: {type: "button", "aria-label": "Close"},
            on: {
                click: function (e) {
                    return closeEmail()
                }
            }
        }, [_v("× ")])])])]), _v(" "), _c("vds-compose-email", {
            ref: "composeEmail",
            attrs: {
                id: "composeEmail",
                recordId: recordId,
                record: record,
                recordIds: recordIds,
                threadId: threadId,
                module: module,
                emailRecord: emailRecord,
                emailRecordId: emailRecordId,
                emailFieldName: emailFieldName,
                emailAction: emailAction,
                showrelated: showrelated,
                showFromEmail: showFromEmail,
                showReplyTo: showReplyTo,
                showSubject: showSubject,
                getSelectedRecords: getSelectedRecords,
                hasCancel: hasCancel,
                attachments: attachments,
                showConfirmation: showConfirmation,
                defaultTemplateId: defaultTemplateId
            },
            on: {
                "vds::post::send::email": postEmailSend, "update:showConfirmation": function (e) {
                    showConfirmation = e
                }, "update:show-confirmation": function (e) {
                    showConfirmation = e
                }
            }
        })], 2)
    },
    props: {
        recordId: {type: [String, Number], required: !1},
        record: {type: [Object], required: !1},
        recordIds: {required: !1},
        threadId: {type: [String]},
        emailRecord: {type: [Object]},
        emailFieldName: {required: !1},
        emailAction: {},
        emailRecordId: {type: [String, Number]},
        module: {required: !0},
        showrelated: {required: !1, default: !1},
        showFromEmail: {type: [Boolean], default: !0},
        showReplyTo: {type: [Boolean], default: !0},
        showSubject: {type: [Boolean], default: !0},
        hasCancel: {type: [Boolean], default: !1},
        groupEmails: {type: [Array]},
        getSelectedRecords: {type: [Function], required: !1},
        attachments: {type: [Array], default: () => []},
        defaultTemplateId: {type: String, default: ""}
    },
    mounted() {
        this.$root.$on("vds::post::send::email", () => {
            this.$root.$emit("bv::hide::modal", "modalComposeEmail")
        }), this.$root.$off("vds::show::draft::confirmation"), this.$root.$on("vds::show::draft::confirmation", e => {
            this.showConfirmation = e
        }), this.$root.$on("vds::hide::email::compose::modal", this.closeEmailModal)
    },
    beforeDestroy() {
        this.$root.$off("vds::hide::email::compose::modal", this.closeEmailModal)
    },
    methods: {
        closeEmailModal() {
            this.displayedOnce = !0, this.$refs.modalComposeEmail.hide()
        }, discardDraft() {
            this.$refs.composeEmail.discardDraft(this.emailRecordId)
        }, closeEmail() {
            this.emailAction || !this.showConfirmation ? this.$root.$emit("bv::hide::modal", "modalComposeEmail") : this.showConfirmation && this.discardDraft()
        }, postEmailSend() {
            this.$root.$emit("vds::post::send::email")
        }
    }
});
var Vtiger_Component_ConfirmationBoxWithInput = Vtiger_Component_ConfirmationBox.extend({
    props: {inputmessage: {type: String, required: !0}},
    data: () => ({userinput: "", showerror: !1}),
    methods: {
        onOk(t) {
            this.inputmessage.toUpperCase() == this.userinput ? ("function" == typeof this.onConfirm && this.onConfirm(this.confirmEntity), this.$emit("onOk", this.returnEntity)) : (t.preventDefault(), this.showerror = !0)
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                "hide-header": !title,
                title: title,
                id: "",
                "ok-title": inputmessage,
                "cancel-title": cancelTitle
            }, on: {ok: onOk, cancel: onClose}
        }, [_c("div", {domProps: {innerHTML: _s(message)}}), _v(" "), _c("div", {staticClass: "my-2"}, [_c("span", [_v(_s(translate("JS_TYPE")) + " ")]), _v(" "), _c("span", {staticClass: "text-danger"}, [_v(_s(inputmessage.toUpperCase()) + " ")]), _v(" "), _c("span", [_v(_s(translate("JS_AND_CLICK")) + " " + _s(inputmessage))])]), _v(" "), _c("div", [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: userinput,
                expression: "userinput"
            }],
            staticClass: "form-control",
            attrs: {type: "text"},
            domProps: {value: userinput},
            on: {
                input: function (t) {
                    t.target.composing || (userinput = t.target.value)
                }
            }
        }), _v(" "), _c("span", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: showerror,
                expression: "showerror"
            }], staticClass: "text-danger ml-2"
        }, [_v(_s(translate("LBL_EXACT_TEXT", "Settings:Vtiger")))])])])
    }
});
var Vtiger_Component_CreateReminder = App.vtComponent.extend({
    mixins: [App.loadMixin("Record", "Tasks"), Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DateUtils],
    props: {module: String, recordId: [Number, String], defaultTitle: {type: String, default: "Follow up"}},
    data: function () {
        return {
            description: "",
            loadInlineDatePicker: "",
            markascompleted: !1,
            remainderTitle: this.defaultTitle,
            activeAction: "today",
            selectedTimeValue: "",
            selectedDateValue: "",
            today: "",
            buttonActions: {
                today: this.translate("LBL_TODAY"),
                tomorrow: this.translate("LBL_TOMORROW"),
                "next-week": this.translate("LBL_NEXT_WEEK"),
                "next-month": this.translate("LBL_NEXT_MONTH"),
                custom: this.translate("LBL_CUSTOM")
            },
            recordModel: BaseModel.getModuleSpecificModel("Tasks", "Record", {})
        }
    },
    watch: {
        activeAction: function (e, t) {
            if (e && "custom" == e) this.loadInlineDatePicker = !0; else {
                this.loadInlineDatePicker = !1;
                var i = new Date(this.today);
                "today" == e ? this.selectedDateValue = this.today : "tomorrow" == e ? (i.setDate(i.getDate() + 1), this.selectedDateValue = i.toJSON().slice(0, 10).replace(/-/g, "-")) : "next-week" == e ? (i.setDate(i.getDate() + 7), this.selectedDateValue = i.toJSON().slice(0, 10).replace(/-/g, "-")) : "next-month" == e && (i.setDate(i.getDate() + 30), this.selectedDateValue = i.toJSON().slice(0, 10).replace(/-/g, "-"))
            }
        }
    },
    mounted: function () {
        this.computeCurrentDate()
    },
    methods: {
        customDateTimePick() {
            this.loadInlineDatePicker = !0
        }, updatedTimeValue(e) {
            this.selectedTimeValue = e
        }, saveRemainder() {
            this._getModuleDescribe("Tasks").then(e => {
                "" == this.selectedTimeValue && this.showErrorNotification({message: this.translate("LBL_SELECT_TIME_BEFORE_CREATING_REMINDER")}), "custom" == this.activeAction && "" == this.selectedDateValue && this.showErrorNotification({message: this.translate("LBL_SELECT_DATE_BEFORE_CREATING_REMINDER")}), this.recordModel.subject = this.remainderTitle ? this.remainderTitle : this.defaultTitle;
                var t = this.convertDateToUserFormat(this.selectedDateValue),
                    i = this.convertTimeToUserFormat(this.selectedTimeValue);
                this.recordModel.date_start = t, this.recordModel.due_date = t, this.recordModel.time_start = i, e.getField("time_end") && (this.recordModel.time_end = i), this.recordModel.activitytype = "Task", this.recordModel.taskstatus = "Not Started", this.recordModel.taskpriority = "High", this.recordModel.parent_id = this.recordId, this.recordModel.assigned_user_id = this.$currentUser.get("id"), this.saveRecord(this.recordModel, e).then(e => {
                    this.$emit("vds::post::actionreminder::save", e)
                }, e => {
                    this.showErrorNotification(e.message)
                })
            })
        }, computeCurrentDate() {
            this.today = (new Date).toJSON().slice(0, 10).replace(/-/g, "-"), this.selectedDateValue = this.today
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            on: {
                submit: function (e) {
                    e.preventDefault()
                }
            }
        }, [_c("b-popover", {
            ref: "popover",
            staticClass: "w-100",
            class: "createReminderPopOverClass_" + recordId,
            attrs: {
                target: "createReminderPopOver_" + recordId,
                triggers: "click",
                placement: "bottomleft",
                container: "reminderAlert_" + recordId,
                boundary: "reminderAlert_" + recordId
            }
        }, [_c("template", {slot: "title"}, [_c("div", {staticClass: "form-inline border-bottom input-group border-2"}, [_c("i", {staticClass: "d-flex align-items-center px-1 fa fa-clock"}), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: remainderTitle,
                expression: "remainderTitle"
            }],
            staticClass: "border-0 form-control w-90",
            attrs: {type: "text", placeholder: translate("LBL_ENTER_REMINDER_TITLE")},
            domProps: {value: remainderTitle},
            on: {
                input: function (e) {
                    e.target.composing || (remainderTitle = e.target.value)
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "text-nowrap"}, [_c("div", {
            staticClass: "btn-group w-100",
            attrs: {role: "group"}
        }, _l(buttonActions, (function (e, t) {
            return _c("button", {
                staticClass: "border btn btn-group btn-sm ",
                class: [activeAction === t ? "btn-primary" : "btn-outline-secondary"],
                attrs: {type: "button"},
                on: {
                    click: function (e) {
                        activeAction = t
                    }
                }
            }, [_v("\n\t\t\t\t\t\t\t\t" + _s(e) + "\n\t\t\t\t\t\t\t")])
        })), 0)]), _v(" "), _c("br"), _v(" "), _c("div", {staticClass: "d-flex flex-column"}, [_c("div", [loadInlineDatePicker ? _c("vds-datepicker", {
            attrs: {"date-format": "getUserDateFormat()"},
            model: {
                value: selectedDateValue, callback: function (e) {
                    selectedDateValue = e
                }, expression: "selectedDateValue"
            }
        }) : _e()], 1), _v(" "), _c("div", {staticClass: "mt-2 d-flex justify-content-center"}, [_c("div", {staticClass: "w-50"}, [_c("vds-timepicker", {on: {input: updatedTimeValue}})], 1)])]), _v(" "), _c("div", {staticClass: "d-flex mt-3 justify-content-center"}, [_c("button", {
            staticClass: "btn btn-success",
            on: {click: saveRemainder}
        }, [_v(_s(translate("LBL_SAVE_REMINDER")))])])], 2)], 1)
    }
});
var Vtiger_Component_DataTable = App.vtComponent.extend({
    props: {module: {type: String}}, render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_DateDiffString = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DateUtils],
    props: {utcTime: String, showTooltip: {type: Boolean, default: !0}},
    data: () => ({interval: 1e3, diffString: "", intervalObj: !1}),
    computed: {
        displayTime() {
            return this.getDisplayDateTime(this.utcTime)
        }
    },
    mounted() {
        this.computeDiffString(), this.updateOnInterval()
    },
    watch: {
        interval() {
            clearInterval(this.intervalObj), this.updateOnInterval()
        }, utcTime() {
            clearInterval(this.intervalObj), this.computeDiffString(), this.updateOnInterval()
        }
    },
    methods: {
        computeDiffString() {
            var t, i, e = new Date, a = this.utcTime.trim().split(" "), r = new Date(a[0] + "T" + a[1] + "Z"),
                n = Math.floor((e - r) / 1e3);
            0 === n && (this.interval = 6e4, this.diffString = this.translate("LBL_JUSTNOW")), n > 0 ? (t = "", i = " " + this.translate("LBL_AGO")) : (t = this.translate("LBL_DUE") + " ", i = "", n = -n);
            var s = Math.floor(n / 60), l = Math.floor(s / 60), h = Math.floor(l / 24), o = Math.floor(h / 30),
                f = Math.floor(h / 365);
            n < 60 ? (this.interval = 6e4, this.diffString = t + this.translate("LBL_FEW_SECONDS") + i) : s < 60 ? (this.interval = 6e4, this.diffString = t + this.pluralize(s, "LBL_MINUTE") + i) : l < 24 ? (this.interval = 36e5, this.diffString = t + this.pluralize(l, "LBL_HOUR") + i) : h < 30 ? (this.interval = 864e5, this.diffString = t + this.pluralize(h, "LBL_DAY") + i) : o < 12 || f < 1 ? (this.interval = 2592e6, this.diffString = t + this.pluralize(o, "LBL_MONTH") + i) : o > 11 && (this.interval = 31536e6, this.diffString = t + this.pluralize(f, "LBL_YEAR") + i)
        }, pluralize(t, i) {
            return t + " " + (1 === t ? this.translate(i) : this.translate(i + "S"))
        }, updateOnInterval() {
            var t = this;
            this.intervalObj = setInterval((function () {
                t.computeDiffString()
            }), this.interval)
        }
    },
    render: function anonymous() {
        with (this) return _c("span", [showTooltip ? _c("span", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip"
            }], attrs: {title: displayTime}
        }, [_v(_s(diffString))]) : _c("span", {attrs: {title: displayTime}}, [_v(_s(diffString))])])
    }
});
Vue.component("vds-date-diff-string", Vtiger_Component_DateDiffString);
var Vtiger_Component_DateFilter = App.vtComponent.extend({
    model: {prop: "dateValueProp", event: "update::date::value"},
    props: {dateValueProp: {type: String}},
    mixins: [Vtiger_Mixin_DateUtils],
    data() {
        return {dates: [], customDateFrom: "", customDateTo: "", dateValue: this.dateValueProp, dateName: ""}
    },
    created() {
        this.init(), this.setCustomDateRangeValue()
    },
    methods: {
        init() {
            let t = this.getUserDateFormat();
            var a = this.$currentUser.time_zone;
            let e = moment().tz(a).format(t), s = moment().tz(a).subtract(1, "days").format(t);
            this.dates.push({
                label: "JS_TODAY",
                value: e + "," + e + "_today",
                name: "today"
            }), this.dates.push({
                label: "JS_YESTERDAY",
                value: s + "," + s + "_yesterday",
                name: "yesterday"
            }), this.dates.push({
                label: "JS_THIS_MONTH",
                value: moment().tz(a).startOf("month").format(t) + "," + moment().tz(a).endOf("month").format(t) + "_thisMonth",
                name: "thisMonth"
            }), this.dates.push({
                label: "JS_LAST_MONTH",
                value: moment().tz(a).subtract(1, "month").startOf("month").format(t) + "," + moment().tz(a).subtract(1, "month").endOf("month").format(t) + "_lastMonth",
                name: "lastMonth"
            }), this.dates.push({
                label: "JS_LAST_7_DAYS",
                value: moment().tz(a).subtract(6, "days").format(t) + "," + e + "_last7Days",
                name: "last7Days"
            }), this.dates.push({
                label: "JS_LAST_30_DAYS",
                value: moment().tz(a).subtract(29, "days").format(t) + "," + e + "_last30Days",
                name: "last30Days"
            }), this.dates.push({
                label: "JS_LAST_90_DAYS",
                value: moment().tz(a).subtract(89, "days").format(t) + "," + e + "_last90Days",
                name: "last90Days"
            }), this.dates.push({
                label: "JS_CURRENT_YEAR",
                value: moment().tz(a).startOf("year").format(t) + "," + moment().tz(a).endOf("year").format(t) + "_currentYear",
                name: "currentYear"
            }), this.dates.push({
                label: "JS_WEEK_TO_DATE",
                value: moment().tz(a).startOf("week").format(t) + "," + e + "_weektodate",
                name: "weektodate"
            }), this.dates.push({
                label: "JS_MONTH_TO_DATE",
                value: moment().tz(a).startOf("month").format(t) + "," + e + "_monthtodate",
                name: "monthtodate"
            }), this.dates.push({
                label: "JS_QUARTER_TO_DATE",
                value: moment().tz(a).startOf("quarter").format(t) + "," + e + "_quartertodate",
                name: "quartertodate"
            }), this.dates.push({
                label: "JS_YEAR_TO_DATE",
                value: moment().tz(a).startOf("year").format(t) + "," + e + "_yeartodate",
                name: "yeartodate"
            }), this.dates.push({
                label: "JS_CUSTOM_RANGE",
                value: this.customDateFrom + "," + this.customDateTo,
                name: "customRange"
            })
        }, setCustomDateRangeValue() {
            if (this.dateValue) {
                for (var t in this.dates) {
                    var a = this.dates[t];
                    if (a.value.includes(this.dateValue)) {
                        this.dateValue = a.value, this.dateName = a.name;
                        break
                    }
                }
                if (!this.dateName) {
                    _.findWhere(this.dates, {name: "customRange"}).value = this.dateValue;
                    let t = this.dateValue.split(",");
                    this.customDateFrom = t[0], this.customDateTo = t[1], this.dateName = "customRange"
                }
            }
        }
    },
    watch: {
        customDateFrom() {
            "customRange" == this.dateName && this.$emit("update::date::value", this.customDateFrom + "," + this.customDateTo)
        }, customDateTo() {
            "customRange" == this.dateName && this.$emit("update::date::value", this.customDateFrom + "," + this.customDateTo)
        }, dateValue: {
            handler(t) {
                let a = Object.values(this.dates).filter(a => a.value == t);
                this.dateName = a[0].name, "customRange" == a[0].name && (t = this.customDateFrom + "," + this.customDateTo), t.includes("_") && (t = t.split("_")[0]), this.$emit("update::date::value", t)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "pl-0 mb-0"}, [_c("b-form-radio-group", {
            model: {
                value: dateValue,
                callback: function (t) {
                    dateValue = t
                },
                expression: "dateValue"
            }
        }, _l(dates, (function (t) {
            return _c("div", {staticClass: "py-1"}, [_c("b-form-radio", {
                key: t.value,
                attrs: {value: t.value, "data-name": t.name}
            }, [_v(_s(translate(t.label, "SalesInsights")))])], 1)
        })), 0), _v(" "), "customRange" == dateName ? _c("div", {staticClass: "d-flex pl-2"}, [_c("div", {staticClass: "col-6"}, [_c("span", [_v(_s(translate("JS_FROM", "SalesInsights")))]), _v(" "), _c("vds-datepicker", {
            attrs: {dateFormat: getUserDateFormat()},
            model: {
                value: customDateFrom, callback: function (t) {
                    customDateFrom = t
                }, expression: "customDateFrom"
            }
        })], 1), _v(" "), _c("div", {staticClass: "col-6"}, [_c("span", [_v(_s(translate("JS_TO", "SalesInsights")))]), _v(" "), _c("vds-datepicker", {
            attrs: {dateFormat: getUserDateFormat()},
            model: {
                value: customDateTo, callback: function (t) {
                    customDateTo = t
                }, expression: "customDateTo"
            }
        })], 1)]) : _e()], 1)
    }
});
var Vtiger_Component_DependentFieldsModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("DependentFields"), Vtiger_Mixin_Validators, Vtiger_Mixin_PicklistDependency],
    props: {
        module: {type: [String], required: !0},
        record: {type: [Object], required: !0},
        triggerFieldModel: {type: [Object], required: !0},
        targetFields: {type: [Array], required: !0},
        pickListDependencyExists: {type: [Boolean], default: !1}
    },
    data() {
        return {dynamicUpdatedTargetFields: this.targetFields, clonedMasterRecordModel: {}}
    },
    computed: {
        masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.clonedMasterRecordModel
        }, targetFieldModelList() {
            let e = {};
            if (this.masterModuleModel) for (var t in this.dynamicUpdatedTargetFields) {
                let d = this.dynamicUpdatedTargetFields[t], i = this.masterModuleModel.getField(d);
                i && i.isEditable && (e[d] = i)
            }
            return e
        }, moduleModel() {
            return this.masterModuleModel
        }, picklistDependency_DataFields() {
            return this.record
        }
    },
    methods: {
        save() {
            this.$validator.validate().then(e => {
                e && (this.$refs.dependentFieldBModal.hide("ok"), this.$emit("vds::dependentfields::save", this), this.$bubble("vds::trigger::save::dependentfields"))
            })
        }, cancel() {
            this.$refs.dependentFieldBModal.hide("cancel"), this.$emit("vds::dependentfields::cancel", this)
        }, modalClose() {
            this.$emit("vds::dependentfields::close", this)
        }, handleDependentFields(e) {
            this.moduleModel && (this.$watch(() => ({
                fieldName: e.name,
                fieldValue: this.record.get(e.name)
            }), (e, t) => {
                if (_.isEqual(e, t)) return;
                let d, i;
                ({fieldName: d, fieldValue: i} = e), this.clonedMasterRecordModel.set(d, i)
            }), this.$watch(() => ({
                fieldName: e.name,
                fieldValue: this.clonedMasterRecordModel.get(e.name)
            }), (e, t) => {
                _.isEqual(e, t) || (this.dynamicUpdatedTargetFields = Object.keys(this.dynamicUpdatedFields), this.pickListDependencyExists && (this.dynamicUpdatedTargetFields = _.union(this.targetFields, Object.keys(this.dynamicUpdatedFields))))
            }))
        }, isFieldLocked(e) {
            let t = !1;
            return _.isUndefined(this.record.locked_fields) || _.isUndefined(this.record.locked_fields[e.fieldname]) || (t = !0), t
        }
    },
    watch: {
        moduleModel() {
            this.handleDependentFields(this.triggerFieldModel)
        }, dynamicUpdatedFields() {
            this.dynamicUpdatedTargetFields = Object.keys(this.dynamicUpdatedFields), this.pickListDependencyExists && (this.dynamicUpdatedTargetFields = _.union(this.targetFields, Object.keys(this.dynamicUpdatedFields)))
        }
    },
    created() {
        let e = JSON.parse(JSON.stringify(this.record));
        this.clonedMasterRecordModel = BaseModel.getModuleSpecificModel(this.$module, "Record", e), this.handleDependentFields(this.triggerFieldModel)
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "dependentFieldBModal",
            attrs: {
                id: "dependentFieldBModal",
                lazy: !0,
                title: translate("LBL_PICKLIST_DEPENDENCY", "Settings:Vtiger"),
                "header-class": "bgLtGrey px-4",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            },
            on: {hide: modalClose}
        }, [_c("form", {
            on: {
                submit: function (e) {
                    return e.stopPropagation(), e.preventDefault(), save()
                }
            }
        }, [triggerFieldModel ? _c("div", {staticClass: "form-group w-100"}, [_c("vds-field-label", {
            attrs: {
                field: triggerFieldModel,
                module: module,
                isEditView: !1
            }
        }), _v(" "), _c("div", {staticClass: "fieldName"}, [_c("ui-field-edit-type", {
            attrs: {
                field: triggerFieldModel,
                record: record,
                currencyChange: !1
            }
        })], 1)], 1) : _e(), _v(" "), _l(targetFieldModelList, (function (e, t) {
            return _c("div", {staticClass: "form-group"}, [_c("div", {staticClass: "form-group w-100"}, [_c("vds-field-label", {
                attrs: {
                    field: e,
                    module: module,
                    isEditView: !1
                }
            }), _v(" "), _c("div", {staticClass: "fieldName"}, [_c("ui-field-edit-type", {
                attrs: {
                    isFieldLocked: isFieldLocked(e),
                    field: e,
                    record: record,
                    currencyChange: !1
                }
            })], 1)], 1)])
        }))], 2), _v(" "), _c("div", {
            staticClass: "d-flex w-100 justify-content-end",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-secondary mx-1", attrs: {type: "button"}, on: {
                click: function (e) {
                    return cancel()
                }
            }
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), _c("button", {
            staticClass: "btn btn-success mx-1",
            attrs: {type: "button"},
            on: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : save()
                }, click: function (e) {
                    return save()
                }
            }
        }, [_v(_s(translate("LBL_APPLY")))])])])
    },
    $_veeValidate: {validator: "new"}
});
var Contacts_Component_DetailOneViewRelatedList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module, Vtiger_Mixin_Record, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Emotions, App.loadMixin("Record", "Emotions"), Vtiger_Mixins_ShowModal],
    components: {
        "vds-related-list-header": App.loadComponent("DetailRelatedListHeader"),
        "vds-one-view-additional-top-widget": App.loadComponent("DetailOneViewAdditionalTopWidget"),
        "vds-select-related-record-actions": App.loadComponent("SelectRelatedRecordActions"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard")
    },
    render: function anonymous() {
        with (this) return _c("div", {attrs: {id: "oneViewList"}}, [_l(widgets, (function (e) {
            return [_c(e, {tag: "component"})]
        })), _v(" "), _c("vds-one-view-additional-top-widget"), _v(" "), _l(oneViewModules, (function (e, t) {
            return !_.isUndefined(relatedRecords[e]) && relatedRecords[e].length ? _c("div", {staticClass: "mb-2 mt-1"}, [_c("vds-related-list-header", {attrs: {moduleName: e}}, [_c("h5", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: "collapsableRelatedBlock" + e,
                    expression: "'collapsableRelatedBlock' + moduleName"
                }],
                staticClass: "c-pointer mb-0 d-flex w-100 align-items-center",
                attrs: {slot: "title", href: "#collapsableRelatedBlock" + e},
                slot: "title"
            }, [_c("span", {staticClass: "when-opened mr-1"}, [_c("i", {staticClass: "fa fa-chevron-down"})]), _v(" "), _c("span", {staticClass: "when-closed mr-2"}, [_c("i", {staticClass: "fa fa-chevron-right"})]), _v(" "), _c("span", {staticClass: "pb-1"}, [_v(_s(getModuleLabelToDisplay(e)))])]), _v(" "), _c("template", {slot: "action"}, [actionsPermittedModules.includes(e) ? _c("vds-select-related-record-actions", {
                attrs: {
                    relation: getRelationModel(e),
                    record: getRelatedParentRecord(e)
                }, on: {"vds::popup:record::selected": t => link(t, e)}
            }) : _e()], 1)], 2), _v(" "), _.isUndefined(relatedRecords[e]) || relatedRecords[e].length || showMoreLink[e] ? _c("b-collapse", {
                staticClass: "widget-list",
                attrs: {id: "collapsableRelatedBlock" + e, visible: ""}
            }, [_l(relatedRecords[e], (function (t, o) {
                return [_c(getRelatedRecordComponent(e), {
                    key: t.getId(),
                    tag: "component",
                    attrs: {
                        relation: getRelationModel(e),
                        module: e,
                        parentModuleModel: $_currentModuleModel,
                        record: t,
                        fromOneView: !0,
                        index: o,
                        expanded: !o
                    },
                    on: {"vds::related:record::action": handleAction}
                })]
            })), _v(" "), showMoreLink[e] ? ["Potentials" == $module && "Cases" == e ? _c("div", {
                staticClass: "moreRecordsLink text-center text-primary c-pointer mt-2",
                on: {
                    click: function (e) {
                        return getContactRelatedModuleRecords("Cases")
                    }
                }
            }, [_v(_s(translate("LBL_SHOW_MORE")))]) : "Events" == $module && "Contacts" == e ? _c("div", {
                staticClass: "moreRecordsLink text-center text-primary c-pointer mt-2",
                on: {
                    click: function (e) {
                        contactPage++, getRelatedContactDetails()
                    }
                }
            }, [_v(_s(translate("LBL_SHOW_MORE")))]) : _c("div", {
                directives: [{
                    name: "showModal",
                    rawName: "v-showModal.LinkedRecordsModal",
                    value: {module: e, record: $_detailRecordModel, relation: getRelationModel(e)},
                    expression: "{module: moduleName, record: $_detailRecordModel, relation: getRelationModel(moduleName)}",
                    modifiers: {LinkedRecordsModal: !0}
                }], staticClass: "text-center text-primary c-pointer mt-2"
            }, [_v(_s(translate("LBL_SHOW_MORE")))])] : _e()], 2) : _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])], 1) : _e()
        })), _v(" "), hasOneViewRecords || loaded ? _e() : _c("vds-empty-state-card", {
            staticStyle: {"margin-top": "30vh"},
            attrs: {
                "show-add-button": !$_detailRecordModel.isClosed || $_currentModuleModel.isClosedRelationAllowed,
                "empty-label": translate("NO_RELATED_RECORDS_FOUND")
            }
        }, [_c("div", {
            staticClass: "text-center",
            attrs: {slot: "empty-action"},
            slot: "empty-action"
        }, [_c("button", {
            staticClass: "btn btn-success",
            on: {click: addOrCreateModal}
        }, [_c("i", {staticClass: "fa fa-plus pr-2"}), _v(_s(translate("LBL_NEW")) + "\n                    ")])])])], 2)
    },
    props: {
        relation: {
            default: () => {
                Vtiger_Relation_Model.getCleanInstance(this.$module, {})
            }
        }, relationCollection: {
            default: () => {
                Vtiger_RelationCollection_Model.getModuleSpecificModel(this.$module, "RelationCollection", {loaded: !1})
            }
        }, activeRelationId: {type: [String, Number, Boolean], default: !1}
    },
    data: () => ({
        oneViewModules: ["Accounts", "Potentials", "Cases", "Quotes", "Invoice", "SalesOrder", "PurchaseOrder"],
        indirectRelationModules: ["Potentials", "Cases"],
        customRelationModules: ["Accounts"],
        ignoreClosedModules: [],
        oneViewModuleModels: {},
        relatedRecords: {},
        count: {},
        recordLimit: 20,
        moduleModelsLoaded: !1,
        relatedContactIds: [],
        loaded: !1,
        showMore: {},
        modulesLoaded: 0,
        widgets: [],
        oneViewRelations: {},
        oneViewScriptsLoaded: !1
    }),
    computed: {
        directRelationModules() {
            return _.difference(this.oneViewModules, this.indirectRelationModules)
        }, actionsPermittedModules() {
            let e = [];
            for (let t of this.oneViewModules) this.isRelatedListActionPermitted(t) && e.push(t);
            return e
        }, showMoreLink: {
            get() {
                if (_.isEmpty(this.showMore)) {
                    let e = {};
                    for (let t of this.oneViewModules) _.isUndefined(this.relatedRecords[t]) || (this.relatedRecords[t].length >= this.recordLimit || !_.isUndefined(this.count[t]) && this.relatedRecords[t].length < this.count[t]) && (e[t] = !0);
                    Vue.set(this, "showMore", e)
                }
                return this.showMore
            }, set(e) {
                Vue.set(this, "showMore", e)
            }
        }, hasOneViewRecords() {
            return _.size(this.relatedRecords) && Object.values(this.relatedRecords).some(e => e.length > 0)
        }
    },
    created() {
        this.init(), this.injectUnwatch = this.$root.vtInjector.listen("vds::detail::oneview::subscriptions", e => {
            for (var t in e) {
                let o = "vds-component-" + Math.random();
                this.widgets.push(o), this.$options.components[o] = e[t]
            }
        }, {module: this.$module})
    },
    beforeDestroy() {
        this.injectUnwatch && this.injectUnwatch()
    },
    watch: {
        "relatedRecords.Contacts": {
            handler(e, t) {
                if (e && e.length > 0) {
                    let t = [];
                    for (var o in e) {
                        let i = e[o].id;
                        t.push(i)
                    }
                    this.relatedContactIds = t
                }
            }, deep: !0
        }, relatedContactIds: {
            handler(e, t) {
                e && e.length > 0 && _.difference(e, t).length > 0 && this.getBatchEmotionDetails(e)
            }
        }, hasOneViewRecords(e) {
            this.loaded = !!e
        }
    },
    methods: {
        getBatchEmotionDetails(e) {
            this.retrieveBatchEmotions(e).then(e => {
                let t = this.relatedRecords.Contacts;
                if (e && e.length > 0) for (index in e) {
                    let o = e[index], i = o.parent_id.id, d = o.emotion, s = _.findIndex(t, (function (e) {
                        return e.id == i
                    }));
                    t[s] && Vue.set(t[s], "lastEmotion", d)
                }
            })
        }, init() {
            this.loaded = !0, this.mapOneViewRelationModels(), this.loadOneViewModuleScripts(), this.getDirectRelationModuleModels(), this.getExtraFields(this.indirectRelationModules).then(e => {
                this.getIndirectRelationRecords(this.indirectRelationModules, e)
            });
            let e = function () {
            };
            e = this.$watch(() => this.$_detailRecordModel.isLoaded && this.moduleModelsLoaded && this.$_currentModuleModel.isLoaded && this.oneViewScriptsLoaded, (t, o) => {
                t && (this.getDirectRelationRecords(), this.getCustomRelatedRecords(), _.defer(() => {
                    e()
                }))
            }, {immediate: !0})
        }, getDirectRelationModuleModels() {
            let e = [];
            for (let t of this.directRelationModules) {
                let o, i = this.oneViewRelations[t];
                if (i && (o = i.relatedModuleModel), o && o.isLoaded || (o = this.getCachedModuleDescribe(t)), !o) {
                    let e = this.getCachedPartialModuleDescribe(t);
                    e && e.fieldsLoaded && (o = e)
                }
                o ? (i && (i.relatedModuleModel = o), Vue.set(this.oneViewModuleModels, t, o)) : e.push(t)
            }
            let t = {}, o = {type: "get", api: "describe"};
            for (let i of e) t[i] = jQuery.extend(!0, {}, o, {parameters: {module: i}});
            _.size(t) ? this.appStore.request("api_batch", {requests: t, key: "one_view_partial_describe"}).then(e => {
                for (let t in e) {
                    let o = t.split("-")[0], i = e[t];
                    try {
                        i = JSON.parse(i)
                    } catch (e) {
                        this.oneViewModules.splice(this.oneViewModules.indexOf(o), 1);
                        continue
                    }
                    let d = AppStorage.get("app_module_permissions"), s = d && d[o] ? d[o] : {};
                    i = jQuery.extend(!0, {}, s, i), i._partial = !0;
                    let l = Vtiger_Module_Model.getInstance(i, o), a = this.oneViewRelations[o];
                    a && (a.relatedModuleModel = l), Vue.set(this.oneViewModuleModels, o, l)
                }
                this.moduleModelsLoaded = !0
            }) : this.moduleModelsLoaded = !0
        }, getRelationModel(e) {
            return this.customRelationModules.includes(e) ? this.getCustomRelationModel(e) : e in this.oneViewRelations ? this.oneViewRelations[e] : Object.values(this.relationCollection).find(t => t.relatedModule == e && !t.isCustom)
        }, getCustomRelationModel() {
        }, getIndirectRelationRecords(e, t) {
            let o = {};
            for (let i in e) {
                let d = e[i], s = this.getRelationModel(d);
                if (_.isUndefined(s) || this.customRelationModules.includes(d)) continue;
                let l = s.id, a = this.ignoreClosedModules.includes(d) ? 1 : 0;
                a && this.getIndirectRelationCounts(d, l);
                let r = t && t[d] ? t[d] : [], n = {
                    type: "get",
                    api: "records/relationrecords",
                    parameters: {
                        module: this.$module,
                        id: this.$_detailRecordModel.getId(),
                        relationid: l,
                        extrafields: r,
                        ignoreclosed: a,
                        pagelimit: this.recordLimit
                    }
                };
                o[d] = n
            }
            _.size(o) && this.appStore.request("api_batch", {
                requests: o,
                key: "indirect_relation_records_data"
            }).then(e => {
                Object.keys(e).forEach(t => {
                    let o = t.split("-")[0];
                    if ("string" == typeof e[t]) try {
                        let i = JSON.parse(e[t]).map(e => BaseModel.getModuleSpecificModel(o, "Record", e));
                        Vue.set(this.relatedRecords, o, i)
                    } catch (e) {
                        console.warn(e.message)
                    } else Vue.set(this.relatedRecords, o, e[t])
                })
            }).finally(() => this.modulesLoaded++)
        }, getIndirectRelationCounts(e, t) {
            this.appStore.request("api_get", {
                url: "records/relationrecords/count",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relationid: t,
                    relatedModuleName: e
                }
            }).then(o => {
                Vue.set(this.count, e, o[t])
            })
        }, getExtraFields(e) {
            return new Promise((t, o) => {
                var i = {}, d = ["email", "phone"];
                for (let t in e) (e => {
                    let t, o = this.oneViewRelations[e];
                    o && (t = o.relatedModuleModel), t && t.isLoaded || this._getModuleDescribe(e).then(t => {
                        var s = t;
                        o.relatedModuleModel = s;
                        let l = [];
                        l = s ? Object.keys(s.getFieldsOfType(d)) : l, l.push("primary_phone_field", "primary_email_field"), i[e] = l
                    })
                })(e[t]);
                t(i)
            })
        }, getModuleReferenceField(e, t = this.$module) {
            let o = !1, i = this.oneViewModuleModels[e];
            if (_.isUndefined(i)) return o;
            let d = i.getFieldsOfType("reference");
            for (let e in d) {
                let i = d[e];
                if (i.type.relatedModules.includes(t) && !i.isCustomField) {
                    o = i;
                    break
                }
            }
            return o
        }, getQueryParameters(e) {
            let t = new SearchParams, o = this.getModuleReferenceField(e);
            if (!o) return !1;
            let i = this.$_detailRecordModel.recordLabel;
            return t.pushAll(o.fieldname, "e", i), t
        }, getDirectRelationRecords() {
            let e = {}, t = {
                type: "get",
                api: "records/relationrecords",
                parameters: {module: this.$module, id: this.$_detailRecordModel.getId(), pagelimit: this.recordLimit}
            };
            for (let o of this.directRelationModules) {
                let i = this.getRelationModel(o);
                if (_.isUndefined(i) || this.customRelationModules.includes(o)) continue;
                let d = i.id, s = this.ignoreClosedModules.includes(o) ? 1 : 0, l = jQuery.extend(!0, {}, t);
                this.getQueryParameters(o) && (l.parameters.relationid = d, l.parameters.extrafields = Object.keys(this.oneViewModuleModels[o].getSummaryAndHeaderFields()), s && (l.parameters.ignoreclosed = s, this.getDirectRelationCounts(o, l.parameters.q)), e[o] = l)
            }
            _.size(e) && this.appStore.request("api_batch", {requests: e}).then(e => {
                Object.keys(e).forEach(t => {
                    let o = t.split("-")[0];
                    if ("string" == typeof e[t]) try {
                        let i = JSON.parse(e[t]).map(e => BaseModel.getModuleSpecificModel(o, "Record", e));
                        Vue.set(this.relatedRecords, o, i)
                    } catch (e) {
                        console.warn(e.message)
                    } else Vue.set(this.relatedRecords, o, e[t]);
                    this.modulesLoaded++
                })
            })
        }, getDirectRelationCounts(e, t) {
            this.appStore.request("api_get", {url: "records/count", params: {module: e, q: t}}).then(t => {
                Vue.set(this.count, e, t.count)
            })
        }, getCustomRelatedRecords() {
            this.getRelatedCompanyDetails()
        }, getRelatedCompanyDetails() {
            let e = this.$_detailRecordModel.getRawValue("account_id");
            0 == e || _.isUndefined(e) || 0 == e.id || this.retrieveRecord(e.id, "Accounts").then(e => {
                Vue.set(this.relatedRecords, "Accounts", [BaseModel.getModuleSpecificModel("Accounts", "Record", e)])
            }), this.modulesLoaded++
        }, getRelatedRecordComponent(e) {
            let t = `Detail${this.$module}${e}RelatedRecord`, o = `Detail${e}RelatedRecord`;
            return App.getDynamicComponentInstance(t, this.$module) || App.getDynamicComponentInstance(o, this.$module) || App.getDynamicComponentInstance("DetailRelatedRecord", this.$module)
        }, getRelatedParentRecord(e) {
            return this.$_detailRecordModel
        }, link(e, t) {
            var o = e.map((function (e) {
                return _.isObject(e) ? e.getId() : e
            }));
            o && 0 == o.length || this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.getRelationModel(t).relation_id,
                    related_module: t,
                    related_record_id: o
                }
            }).then(e => {
                "true" == e && this.refreshWidgets(t)
            })
        }, unlink(e) {
            "" != e.getId() && this.appStore.request("api_delete", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.getRelationModel(e.moduleName).relation_id,
                    related_module: e.moduleName,
                    related_record_id: e.getId()
                }
            }).then(t => {
                if (t) {
                    let t = this.relatedRecords[e.moduleName].findIndex(t => t.id == e.id);
                    this.relatedRecords[e.moduleName].splice(t, 1), Vue.set(this.count, e.moduleName, this.count[e.moduleName] - 1)
                }
            })
        }, refreshWidgets(e) {
            this.indirectRelationModules.includes(e) ? this.getExtraFields([e]).then(t => {
                this.getIndirectRelationRecords([e], t)
            }) : (this.getDirectRelationRecords(), this.getCustomRelatedRecords())
        }, handleAction(e) {
            switch (e.name) {
                case"unlink":
                    this.unlink(e.data)
            }
        }, isRelatedListActionPermitted(e) {
            if (this.$_detailRecordModel && this.$_detailRecordModel.isClosed && this.$_currentModuleModel && this.$_currentModuleModel.closedStateDetails && !parseInt(this.$_currentModuleModel.closedStateDetails.allow_relations)) return !1;
            let t = this.getRelationModel(e);
            return !(!t || !["1:N", "N:N"].includes(t.relationtype) || !t.isSelectPermitted && !t.isCreatePermitted)
        }, addOrCreateModal() {
            this.showModal({componentName: "AddOrCreateActionModal", componentData: {}})
        }, getModuleLabelToDisplay(e) {
            return this.translate(e, e)
        }, loadOneViewModuleScripts() {
            App.loadModuleScripts({module: this.oneViewModules}).then(() => {
                this.oneViewScriptsLoaded = !0
            })
        }, mapOneViewRelationModels() {
            for (var e of this.oneViewModules) {
                var t = this.getRelationModel(e);
                t && (this.oneViewRelations[e] = t)
            }
        }
    }
});
var Vtiger_Component_DetailedGlobalSearch = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_Record],
    components: {
        "vds-detailed-search-card": App.loadComponent("DetailedGlobalSearchCard"),
        "vds-detailed-global-search-display": App.loadComponent("DetailedGlobalSearchDisplay"),
        "vds-global-search-result-navbar": App.loadComponent("GlobalSearchResultNavBar")
    },
    props: {
        selectedModule: {type: String},
        advancedSearchModule: {type: String},
        matchingRecords: {type: Object},
        combinedSearchRecords: {type: Array},
        singleLoaderOnScroll: {type: Boolean}
    },
    data() {
        return {
            showAllResults: !0,
            moduleWiseResult: [],
            searchResultModule: this.selectedModule,
            allModuleResultPerPageCount: 10,
            allModuleResultPage: 1,
            currentPageRecords: [],
            dummyRecord: BaseModel.getModuleSpecificModel("Contacts", "Record", {})
        }
    },
    mounted() {
        document.getElementById("Global_Search_Display_Modal").addEventListener("scroll", this.scrollEvent)
    },
    computed: {
        totalRecordsCount() {
            let e = 0;
            var t = [];
            if (this.matchingRecords) for (var l in t = Object.keys(this.matchingRecords)) {
                var s = t[l];
                let o = this.matchingRecords[s].count;
                o && o > 0 && (e += o)
            }
            return e
        }, recordsToBeDisplayed() {
            if ("all" == this.searchResultModule) {
                let e = 1, t = this.combinedSearchRecords.length;
                if (t && t > 0 && (e = t / this.allModuleResultPerPageCount), e && this.allModuleResultPage <= e || t < 10) {
                    let e = this.paginateArray(this.combinedSearchRecords, this.allModuleResultPerPageCount, this.allModuleResultPage);
                    this.currentPageRecords = _.union(this.currentPageRecords, e)
                }
                return this.$emit("update:singleLoaderOnScroll", !1), this.currentPageRecords
            }
            {
                let e = this.searchResultModule;
                if (this.matchingRecords[e] && this.matchingRecords[e].records) return this.matchingRecords[e].records
            }
        }, searchResultModules() {
            var e = [], t = {};
            if (this.matchingRecords) for (var l in e = Object.keys(this.matchingRecords)) {
                var s = e[l];
                let o = this.matchingRecords[s].count;
                t[s] = o
            }
            return t
        }
    },
    watch: {
        searchResultModule: {
            handler(e, t) {
                e && e != t && this.$emit("update:selectedModule", e)
            }
        }, advancedSearchModule(e) {
            e && (this.searchResultModule = e)
        }, matchingRecords: {
            handler(e, t) {
                _.isEqual(t, e) || (this.currentPageRecords = [])
            }
        }
    },
    methods: {
        scrollEvent(e) {
            e.target.clientHeight + e.target.scrollTop >= e.target.scrollHeight - 20 && ("all" != this.selectedModule ? this.$root.$emit("vds::load::more::search::results") : "all" == this.selectedModule && (this.allModuleResultPage = this.allModuleResultPage + 1, this.$emit("update:singleLoaderOnScroll", !0)))
        }, paginateArray: (e, t, l) => (--l, e.slice(l * t, (l + 1) * t))
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-column w-100"}, [Object.keys(matchingRecords).length ? [_c("div", {staticClass: "d-flex align-items-center"}, [searchResultModules && 1 == Object.keys(searchResultModules).length ? _c("div", {staticClass: "d-flex mt-3 ml-5"}, [$isLoading ? _c("div", {staticStyle: {width: "150px"}}, [_c("vds-value-progress")], 1) : _c("div", [_c("p", {staticClass: "mb-0 h5"}, [_v(_s(translate("LBL_SEARCH_RESULTS")) + " (" + _s(totalRecordsCount) + ")")])])]) : _e(), _v(" "), searchResultModules && Object.keys(searchResultModules).length > 1 ? _c("vds-global-search-result-navbar", {
            key: Object.keys(matchingRecords).length,
            attrs: {
                "selected-module": searchResultModule,
                modules: searchResultModules,
                "total-records-count": totalRecordsCount
            },
            on: {
                "update:selectedModule": function (e) {
                    searchResultModule = e
                }, "update:selected-module": function (e) {
                    searchResultModule = e
                }
            }
        }) : _e()], 1), _v(" "), _c("div", {staticClass: "mt-4 d-flex flex-column px-5"}, [_l(recordsToBeDisplayed, (function (e, t) {
            return recordsToBeDisplayed ? _c("div", [_c("vds-detailed-global-search-display", {
                key: e.id,
                attrs: {"record-info": e, module: e.module}
            })], 1) : _e()
        })), _v(" "), singleLoaderOnScroll ? [_c("vds-detailed-search-card", {
            key: dummyRecord.id,
            attrs: {
                "single-loader-on-scroll": singleLoaderOnScroll,
                "record-info": dummyRecord,
                module: dummyRecord.module
            }
        })] : _e()], 2)] : _e()], 2)
    }
});
var Vtiger_Component_DetailedGlobalSearchCard = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_Record, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_ShowPreview],
    components: {
        "vds-header-fields-display": App.loadComponent("DetailHeaderFields"),
        "vds-compact-header-fields": App.loadComponent("CompactHeaderFields"),
        "vds-record-status-display": App.loadComponent("RecordStatusDisplay")
    },
    props: {
        module: {type: String},
        recordInfo: {type: [Object]},
        matchingRecords: {type: [Object]},
        isCompactCard: {type: Boolean, default: !1},
        singleLoaderOnScroll: {type: Boolean, default: !1}
    },
    computed: {
        recordModel() {
            var e;
            if (this.recordInfo) return e = this.recordInfo.module ? this.recordInfo.module : this.recordInfo.record_module, BaseModel.getModuleSpecificModel(e, "Record", this.recordInfo)
        }
    },
    methods: {
        loadDetailView() {
            let e = this.module, t = null;
            if (t = "EmailTemplates" == e ? this.recordInfo.templateid : this.recordInfo.id, "ModComments" == e) {
                let s = this.recordInfo.related_to.module, o = this.recordInfo.related_to.id;
                o && s && (t = o, e = s)
            }
            this.openRecord(t, e)
        }, getRecordLabel() {
            return "EmailTemplates" == this.module && this.recordInfo && this.recordInfo.templatename ? VTHelper.getDecodedValue(this.recordInfo.templatename) : this.recordInfo && this.recordInfo.label ? VTHelper.getDecodedValue(this.recordInfo.label) : void 0
        }, getAccessedTime() {
            if (this.recordInfo && this.recordInfo.accessedon) return this.recordInfo.accessedon
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [isCompactCard ? _e() : _c("div", {staticClass: "d-flex justify-content-center globalSearchDetailedCard"}, [_c("div", {
            staticClass: "w-75 d-flex flex-column rounded border-dark mb-3 p-3 c-pointer mr-3 bg-white justify-content-between GlobalSearchBoxShadow",
            on: {
                click: function (e) {
                    return loadDetailView()
                }
            }
        }, [$isLoading || singleLoaderOnScroll ? [_c("div", {staticClass: "w-15 pl-4 pt-2 mt-1"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "d-flex pl-4"}, [_c("div", {staticClass: "w-25 pr-4"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "w-15 pr-4"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "w-15"}, [_c("vds-value-progress")], 1)]), _v(" "), _c("div", {staticClass: "w-15 pl-4 pb-2 mb-1"}, [_c("vds-value-progress")], 1)] : [_c("div", {
            staticClass: "f-600 d-flex flex-wrap",
            class: "ModComments" == module ? "w-25" : "w-100"
        }, [_c("span", {staticClass: "textOverflowEllipsis"}, [_v(_s(getRecordLabel()))])]), _v(" "), recordInfo ? _e() : _c("b-spinner", {
            staticClass: "text-primary d-flex align-self-center mb-5",
            attrs: {type: "border", small: ""}
        }), _v(" "), "ModComments" != module ? _c("div", {staticClass: "d-flex flex-row mt-2 pl-1 headerFields"}, [_c("vds-header-fields-display", {attrs: {"record-model": recordModel}})], 1) : _e(), _v(" "), "ModComments" == module ? _c("div", {staticClass: "mt-2"}, [_c("span", {
            staticClass: "fieldDisplayValue word-break-all",
            domProps: {innerHTML: _s(recordModel.getDisplayValue("commentcontent"))}
        })]) : _e(), _v(" "), recordInfo ? _c("div", {staticClass: "d-flex justify-content-between py-1 align-items-center"}, [_c("vds-record-status-display", {
            attrs: {
                module: module,
                "record-model": recordModel
            }
        }), _v(" "), _c("span", {
            staticClass: "h5 circle-icon border-0 mb-0 user-image-sm",
            staticStyle: {"background-color": "#03a588"}
        }, [_c("i", {
            staticClass: "h5 text-white m-0",
            class: getModuleIconClass(module)
        })])], 1) : _e()]], 2)]), _v(" "), isCompactCard ? _c("div", {
            staticClass: "d-flex flex-column rounded border-dark mb-3 px-3 pt-3 pb-2 c-pointer mr-3 bg-white justify-content-between GlobalSearchBoxShadow",
            staticStyle: {"min-height": "10.5rem"},
            on: {
                click: function (e) {
                    return loadDetailView()
                }
            }
        }, [_c("div", {staticClass: "d-flex justify-content-between flex-wrap"}, [_c("div", {staticClass: "f-600 textOverflowEllipsis w-50"}, [_v(_s(getRecordLabel()))]), _v(" "), getAccessedTime() ? _c("div", {staticClass: "text-muted textOverflowEllipsis w-50 d-flex justify-content-end"}, [_c("vds-date-diff-string", {attrs: {utcTime: getAccessedTime()}})], 1) : _e()]), _v(" "), recordInfo ? _e() : _c("b-spinner", {
            staticClass: "text-primary d-flex align-self-center mb-5",
            attrs: {type: "border", small: ""}
        }), _v(" "), recordInfo ? _c("vds-compact-header-fields", {
            attrs: {
                "record-model": recordModel,
                "hide-labels": !0,
                "only-header-fields": !0
            }
        }) : _e(), _v(" "), recordInfo ? _c("div", {staticClass: "d-flex justify-content-between py-1 align-items-center"}, [_c("vds-record-status-display", {
            attrs: {
                module: module,
                "record-model": recordModel
            }
        }), _v(" "), _c("span", {
            staticClass: "h5 circle-icon border-0 mb-0 user-image-sm",
            staticStyle: {"background-color": "#03a588"}
        }, [_c("i", {staticClass: "h5 text-white m-0", class: getModuleIconClass(module)})])], 1) : _e()], 1) : _e()])
    }
});
var Vtiger_Component_DetailedGlobalSearchDisplay = App.vtComponent.extend({
    props: {
        module: {type: String},
        recordInfo: {type: [Object]}
    }, data() {
        return {updatedModule: this.module}
    }, created() {
        this.$options.components["vds-detailed-global-search-card"] = App.loadComponent("DetailedGlobalSearchCard", this.updatedModule)
    }, render: function anonymous() {
        with (this) return _c("div", [_c("vds-detailed-global-search-card", {
            attrs: {
                "record-info": recordInfo,
                module: updatedModule
            }
        })], 1)
    }
});
var Vtiger_Component_DiscardDraft = App.vtComponent.extend({
    components: {"vds-delete-confirmation": App.loadComponent("DeleteConfirmation", this.$module, !1)},
    render: function anonymous() {
        with (this) return _c("vds-delete-confirmation", {
            attrs: {"modal-id": modalId},
            on: {ok: ok, cancel: cancel}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_DISCARD_EMAIL")))]), _v(" "), _c("template", {slot: "message"}, [_c("div", [_v(_s(translate("LBL_DISCARD_EMAIL_CONFIRMATION_NOTE")))])]), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_GO_BACK")))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_DISCARD")))])], 2)
    },
    props: {modulename: {}, recordId: {}, modalId: {default: "deleteConfirmation"}, composeModalId: {required: !0}},
    methods: {
        ok() {
            this.discardDraft()
        }, cancel() {
            this.$root.$emit("bv::hide::modal", this.modalId)
        }, discardDraft() {
            this.recordId ? this.appStore.request("api_delete", {
                url: "records/discarddraft",
                params: {module: "Emails", id: this.recordId},
                key: "email_discard_draft"
            }).then((t, e) => {
                this.$root.$emit("bv::hide::modal", this.modalId), this.$root.$emit("bv::hide::modal", this.composeModalId), this.$root.$emit("vds::thread::draft::deleted")
            }) : (this.$root.$emit("bv::hide::modal", this.modalId), this.$root.$emit("bv::hide::modal", this.composeModalId))
        }
    }
});
var Vtiger_Component_DuplicatesPopup = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, App.loadMixin("Record")],
    props: {
        record: {type: [Object, Array], required: !0},
        moduleDesc: {type: [Object, Array], required: !0},
        duplicates: {type: [Object, Array], required: !0}
    },
    data: () => ({currentRecordData: {}}),
    computed: {
        title() {
            return this.translate("LBL_DUPLICATES_DETECTED")
        }, message() {
            let e = [], t = [], i = this.moduleDesc.name, a = this.translate("SINGLE_" + i, i), r = a;
            Object.keys(this.duplicates).length > 1 && (r = this.translate(i, i));
            let s = this.moduleDesc.fields,
                n = this.moduleDesc.mandatoryDuplicateCheckFields ? this.moduleDesc.mandatoryDuplicateCheckFields : [];
            for (var l in s) {
                let a = s[l], r = [];
                (parseInt(a.isunique) || -1 != n.indexOf(l)) && (e.push(this.translate(a.fieldlabel, i)), r.push(l), r.push(a.type.name), t.push(r))
            }
            let o = "all" == this.moduleDesc.duplicateCondition ? "LBL_AND" : "LBL_OR", d = e.join(",");
            if (e.length > 1) {
                let t = e.pop();
                d = e.join(","), d += " " + this.translate(o, i) + " ", d += t
            }
            let c = this.translate("LBL_DUPLICATES_FOUND_MESSAGE", i, a, r, d) + " ";
            if (e.length != n.length) if (this.$currentUser.is_admin) {
                "Tasks" == i && (i = "Calendar");
                let e = "index.php?parent=Settings&module=LayoutEditor&sourceModule=" + i + "&mode=showDuplicationHandling";
                e = '<a href="' + e + '" target="_blank"> ' + this.translate("LBL_CLICK_HERE", i) + " </a>", c += this.translate("LBL_DUPLICATION_FAILURE_FOR_ADMIN", i, e)
            } else c += this.translate("LBL_DUPLICATION_FAILURE_FOR_NON_ADMIN", i);
            c += "<br><br>", c += this.translate("LBL_DUPLICATE_RECORD_LISTS", i, r) + " <br>";
            let h = 0, u = _.size(this.duplicates);
            for (var p in this.duplicates) {
                if (h < 5) {
                    c += "<a href='" + this.getDetailViewURL(i, p, "deepdive") + "' target='_blank'> " + this.duplicates[p] + " </a> <br>"
                }
                h++
            }
            if (u > 5 && t.length > 0) {
                this.initilizeCurrentRecordData();
                let e = this.getListViewUrl(i) + "&viewtype=List", a = new SearchParams;
                for (var D in t) if (!_.isEmpty(this.currentRecordData)) {
                    let e = this.getFieldValue(t[D]);
                    e && a.pushAll(t[D][0], "e", e)
                }
                e = e + "&q=" + JSON.stringify(a.data), c += "<a href='" + e + "' target='_blank'> " + this.translate("LBL_SHOW_MORE") + " </a>"
            }
            return c
        }
    },
    methods: {
        ok() {
            this.appStore.set({
                key: "quickcreate_save_button_show",
                data: !0
            }), this.appStore.set({
                key: "deepdive_save_clicked",
                data: !1
            }), this.appStore.set({key: "editview_save_button_show", data: !0})
        }, initilizeCurrentRecordData() {
            let e = Object.keys(this.duplicates);
            _.isEmpty(this.currentRecordData) && this.retrieveRecord(e[0], this.moduleDesc.name).then(e => {
                this.currentRecordData = this.transformRecordToUserFormat(e, this.moduleDesc)
            })
        }, getFieldValue(e) {
            return "multipicklist" != e[1] || _.isEmpty(this.currentRecordData[e[0]]) ? "reference" != e[1] || _.isEmpty(this.currentRecordData[e[0]]) ? this.currentRecordData[e[0]] : this.currentRecordData[e[0]].label : this.currentRecordData[e[0]].join(",")
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "duplicatespopup",
                "ok-only": "",
                lazy: !0,
                size: "lg",
                title: title,
                "header-bg-variant": "light",
                "body-class": "px-0 pt-0"
            }, on: {
                ok: function (e) {
                    return ok()
                }, close: function (e) {
                    return ok()
                }, hidden: function (e) {
                    return ok()
                }
            }
        }, [_c("div", {staticClass: "p-3", domProps: {innerHTML: _s(message)}})])
    }
});
var Vtiger_Component_EditView = App.vtComponent.extend({
    components: {"vds-edit-view-contents": App.loadComponent("EditViewContents")},
    props: {
        id: {type: [String, Number]},
        module: {type: String},
        mode: {type: String},
        source_records: {type: String, default: "[]"},
        source_module: {type: String}
    },
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record"), App.loadMixin("PicklistDependency"), Vtiger_Mixin_Validators, App.loadMixin("DependencyValidator"), App.loadMixin("ReferenceAutoSelect")],
    data() {
        return {
            record: Vtiger_Record_Model.getCleanInstance(this.module, {loaded: !1}),
            relatedRecord: !1,
            saveClicked: !1,
            sourceRecords: JSON.parse(this.source_records),
            editviewallowed: !0,
            loading: !1
        }
    },
    computed: {
        moduleInfo() {
            return this.$_currentModuleModel
        }, isEditViewPermitted: {
            get() {
                return this.editviewallowed
            }, set(e) {
                this.editviewallowed = e
            }
        }, picklistDependency_DataFields() {
            return this.record
        }, recordModel() {
            return this.record
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }
    },
    methods: {
        init() {
            if (this.setStoreEnvironmentForReference(), this.$_currentModuleModel.isLoaded) this.loadRecord(); else {
                let e = this.$watch("$_currentModuleModel", (t, i) => {
                    t.isLoaded && (this.loadRecord(), e())
                })
            }
        }, isEditViewField: e => e.isEditViewField, moduleLevelRecordChanges() {
        }, loadRecord() {
            this.record.set("id", this.id), this.id ? (this.loading = !0, this.retrieveRecord(this.id, this.module, this.mode).then(e => {
                this.loading = !1, this.record = e, "duplicate" === this.mode ? (this.$_currentModuleModel && this.$_currentModuleModel.isCreateable && e.isViewable ? this.editviewallowed = !0 : this.editviewallowed = !1, this.setFieldDefaultValues(this.module, this.record), this.resetIgnoredFields(this.module, this.record), this.$_currentModuleModel && this.$_currentModuleModel.isInventoryModule && this.record.set("currency_change_from_parent_record", !0), this.moduleLevelRecordChanges()) : this.editviewallowed = e.editable
            })) : (this.setFieldDefaultValues(this.module, this.record), this.$attrs.related_to && this.$attrs.related_module && (this.record.set("from_related_record", !0), this.record.set("from_module_name", this.$attrs.related_module), this.record.set("relationOperation", !0), this.record.set("sourceModule", this.$attrs.related_module), this.record.set("sourceRecord", this.$attrs.related_to), this.record.set("returnrelationId", this.$attrs.returnrelationId), this.retrieveRecord(this.$attrs.related_to, this.$attrs.related_module).then(e => {
                this.relatedRecord = e, this.setRelatedRecordValues()
            })))
        }, setRelatedRecordValues() {
            var e = this.$_currentModuleModel, t = e.getFieldsOfType("reference");
            this._getModuleDescribe(this.relatedRecord.moduleName).then(i => {
                let r = i.getFieldsOfType("reference"), d = {};
                for (let e in r) {
                    let t = this.relatedRecord.get(e);
                    t && t.id && !d[t.module] && (d[t.module] = t)
                }
                for (var s in t) {
                    var o = t[s], l = o.type.relatedModules;
                    if (!o.isCustomField && l.includes(this.relatedRecord.moduleName)) this.record.set(o.name, {
                        id: this.relatedRecord.getId(),
                        module: this.relatedRecord.moduleName,
                        label: this.relatedRecord.recordLabel
                    }); else for (let e in l) d[l[e]] && this.record.set(o.name, d[l[e]])
                }
                (i.isInventoryModule || i.isPSLineItemsEnabled) && (e.isInventoryModule || e.isPSLineItemsEnabled) && this.copyLineItemMappedFieldsFromRelatedRecord(i), "function" == typeof this.copyModuleSpecificValuesFromRelatedRecord && this.copyModuleSpecificValuesFromRelatedRecord()
            })
        }, copyLineItemMappedFieldsFromRelatedRecord(e) {
            var t = this.$_currentModuleModel;
            let i = e.lineItemCustomFieldMapping, r = t.lineItemCustomFieldMapping, d = {};
            ["Products", "Services"].forEach(e => {
                if (!i[e] || !r[e]) return !1;
                let t = i[e], s = r[e];
                for (var o in t) {
                    var l = t[o];
                    let e = Object.keys(s).find(e => s[e] === l);
                    e && (d[o] = e)
                }
            });
            let s = this.relatedRecord.lineitems;
            for (let e in s) {
                let t = s[e];
                for (let i in d) t[i + e] && (t[d[i] + e] = t[i + e])
            }
        }, prepareRecordToSave() {
            return this.recordModel
        }, submitForm() {
            this.saveClicked = !0, this.$validator.validate().then(e => {
                if (e) {
                    let e = this.prepareRecordToSave();
                    this.saveRecord(e, this.moduleInfo).then(e => {
                        if (e.getId()) {
                            if ("Esign" == this.module && e.docusignTagURL) return void (window.location.href = e.docusignTagURL);
                            if (this.sourceRecords && this.sourceRecords.length && "PrintTemplates" == this.module) this.saveClicked = !1, this.showSuccessNotification(this.translate("LBL_TEMPLATE_SAVED_SUCCESSFULLY", this.module)); else {
                                if (this.$attrs.return && this.$attrs.related_to && this.$attrs.related_module) {
                                    var t = "view/detail?id=" + this.$attrs.related_to + "&module=" + this.$attrs.related_module;
                                    this.$attrs.relatedtab && (t += "&relatedtab=" + this.$attrs.relatedtab)
                                } else {
                                    t = "view/detail?id=" + e.getId() + "&module=" + this.module;
                                    this.moduleInfo.isInventoryModule && (t += "&relatedtab=Settings")
                                }
                                this.redirectUrl(t)
                            }
                            "Esign" == this.module && e.service_error && this.showErrorNotification(e.service_error)
                        }
                    }, e => {
                        this.saveClicked = !1, e && e.message && !e.duplicate_exception && this.showErrorNotification(e.message)
                    })
                } else if (this.saveClicked = !1, this.errors && this.errors.items && this.errors.items[0]) {
                    let e = jQuery("[name=" + this.errors.items[0].field + "]");
                    e && e.find("input,select,textarea").focus()
                }
            })
        }, getViewHeight() {
            var e = document.getElementById("topbar") ? document.getElementById("topbar").clientHeight : 0,
                t = document.getElementById("editViewFooter") ? document.getElementById("editViewFooter").clientHeight : 0;
            return window.innerHeight - (e + t)
        }, resetView() {
            let e = this.getRecordDetailViewUrl(this.id, this.module);
            this.redirectUrl(e)
        }, cancel() {
            this.clearRecordFromCache(this.id), window.history.back()
        }, exportpdf() {
            var e = this;
            this.$validator.validate().then(t => {
                if (t) {
                    var i = this.recordModel, r = this.moduleInfo;
                    let t = e.getRecordParams(i, r), d = jQuery.extend(!0, {}, i);
                    delete d._raw, d = e.convertToDBFormat(d, r), t = jQuery.extend(t, d), t.source_module = this.source_module, t.source_records = this.source_records, this.appStore.request("api_post", {
                        url: "/Records/Download",
                        params: t
                    }).then(e => {
                        window.location.href = "ui-api/records/download?module=PrintTemplates&mode=downloadPDFFile&filename=" + e.filename + "&id=" + t.id + "&source_module=" + t.source_module + "&source_records=" + t.source_records
                    })
                }
            })
        }
    },
    mounted() {
        this.init()
    },
    watch: {
        $currentUser(e, t) {
            e.id && !this.record.id && void 0 === t && (Vue.set(this.record, "assigned_user_id", {id: e.id}), Vue.set(this.record, "_loaded", !0))
        }, "$store.state.editview_save_button_show"(e) {
            e && (this.appStore.set({key: "editview_save_button_show", data: !1}), this.saveClicked = !1)
        }
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "vds-body"}, [isEditViewPermitted ? [_c("div", {staticClass: "container-fluid p-0 editViewHeader vds-bodyfixedheader bg-grey-hue-2 w-100"}, [_c("center", [_c("div", {
            staticClass: "d-flex align-items-center justify-content-between",
            staticStyle: {height: "56px", width: "96%"}
        }, [_c("div", [_c("h5", {staticClass: "mb-0"}, [id && "duplicate" !== mode ? [_v(_s(translate("LBL_EDIT", $module)) + " ")] : "duplicate" === mode ? [_v(_s(translate("LBL_DUPLICATE")))] : [_v(_s(translate("LBL_CREATE", $module)) + " ")], _v("\n\t\t                                " + _s(moduleInfo.singularLabel) + " ")], 2)]), _v(" "), _c("div", [sourceRecords && sourceRecords.length && "PrintTemplates" == module ? _e() : _c("button", {
            staticClass: "btn btn-secondary mr-2",
            attrs: {type: "button"},
            on: {click: cancel}
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), sourceRecords && sourceRecords.length && "PrintTemplates" == module ? _c("button", {
            staticClass: "btn btn-secondary mr-2",
            attrs: {type: "button"},
            on: {click: cancel}
        }, [_v(_s(translate("LBL_BACK")))]) : _e(), _v(" "), _c("button", {
            staticClass: "btn btn-primary ",
            attrs: {disabled: saveClicked},
            on: {click: submitForm}
        }, [_v(_s(translate("LBL_SAVE")))]), _v(" "), sourceRecords && sourceRecords.length && "PrintTemplates" == module ? _c("button", {
            staticClass: "btn btn-outline-primary",
            attrs: {type: "button"},
            on: {click: exportpdf}
        }, [_v(_s(translate("LBL_EXPORT_PDF", "PrintTemplates")))]) : _e()])])])], 1), _v(" "), _c("div", {
            staticClass: "container-fluid p-0 editViewBody",
            class: {"d-flex align-items-center border rounded mb-4": "duplicate" !== mode},
            staticStyle: {width: "96%"},
            style: {"max-height": getViewHeight()}
        }, [_c("vds-edit-view-contents", {
            attrs: {module: module, record: recordModel, mode: mode},
            on: {
                "update:record": function (e) {
                    recordModel = e
                }
            }
        })], 1)] : [_c("vds-permission-denied")]], 2)
    }
});
var Vtiger_Component_EditViewContents = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DependentFields],
    props: {record: {type: Object}, module: {type: String}, mode: {type: String, default: "edit"}},
    computed: {
        moduleInfo() {
            return this.$_currentModuleModel
        },
        inviteesComponent: () => App.loadComponent("EventInvitees", "Vtiger", !1),
        compositeFieldStatus: () => !1,
        inviteesBlockLabel: () => "LBL_INVITEES",
        blocks() {
            return this.moduleInfo.blocks
        },
        masterRecordModel() {
            return this.record
        },
        masterModuleModel() {
            return this.$_currentModuleModel
        }
    },
    methods: {
        RTEComponent() {
        }, isEditViewField(e) {
            let t = e.isEditViewField;
            if (!t && e.isCompositeParent) {
                let i = e.getCompositeChilds();
                for (let e in i) {
                    let l = i[e];
                    if (l.isEditable) {
                        t = l.isEditable;
                        break
                    }
                }
            }
            return t
        }, isFullWidthField: e => ["richtext", "image", "grid", "comboField"].includes(e), getFieldModel(e) {
            return this.moduleInfo.getField(e)
        }, getFieldSepecificProps(e) {
            var t = {};
            return "boolean" == e.fieldType && (t.display = "custom"), t
        }, hasEditableFields(e) {
            for (let t in e.fields) {
                let i = this.moduleInfo.getField(t);
                if ("LBL_ITEM_DETAILS" == e.data.label && i.isLineItemField) return !0;
                if (i.isEditViewField && i.isEditable) return !0
            }
            return !1
        }, isBlockOpen(e) {
            return this.$refs[e] && this.$refs[e].show ? this.$refs[e].show : !!this.$refs[e] && (!!this.$refs[e][0] && this.$refs[e][0].show)
        }, isInventorySpecificField: e => !1
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "col-12"}, ["duplicate" === mode ? _c("div", {staticClass: "row py-2"}, [_l(blocks, (function (e) {
            return hasEditableFields(e) > 0 && (moduleInfo.isInventoryModule || !moduleInfo.isInventoryModule && "LBL_ITEM_DETAILS" != e.data.label) ? [_c("div", {staticClass: "w-100 rounded mb-4 shadow-sm"}, [_c("div", {staticClass: "detailBlockHeader card-header p-0 bg-grey-hue-2 my-0 w-100 border-0"}, [_c("h5", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: e.data.label,
                    expression: "blockInfo.data.label"
                }], staticClass: "c-pointer mb-0 p-3 font-18", attrs: {href: "#" + e.data.label}
            }, [_c("i", {
                staticClass: "fa mr-2",
                class: {"fa-chevron-down": isBlockOpen(e.data.label), "fa-chevron-right": !isBlockOpen(e.data.label)}
            }), _v("\n\t\t\t\t\t\t\t\t\t\t" + _s(translate(e.data.label)) + "\n\t\t\t\t\t\t\t\t\t")])]), _v(" "), _c("b-collapse", {
                ref: e.data.label,
                refInFor: !0,
                staticClass: "bg-grey-hue-2",
                attrs: {visible: "", id: e.data.label}
            }, ["LBL_ITEM_DETAILS" == e.data.label ? [moduleInfo._loaded ? _c(lineItemsEditComponent, {
                tag: "component",
                attrs: {recordModel: record, moduleModel: moduleInfo, "is-duplicate": "duplicate" == mode},
                on: {
                    "update:recordModel": function (e) {
                        record = e
                    }, "update:record-model": function (e) {
                        record = e
                    }
                }
            }) : _e()] : "LBL_TEMPLATE" == e.data.label ? [_c(RTEComponent, {
                tag: "component",
                attrs: {recordModel: record},
                on: {
                    "update:recordModel": function (e) {
                        record = e
                    }, "update:record-model": function (e) {
                        record = e
                    }
                }
            })] : [_c("div", {staticClass: "row p-2 mx-0"}, [_l(e.fields, (function (e, t) {
                return moduleInfo.getField(t) && isEditViewField(moduleInfo.getField(t)) ? [moduleInfo.getField(t).isTaxField && record.record_taxes ? [_l(record.record_taxes, (function (e) {
                    return [_c("div", {staticClass: "d-flex p-2 align-items-center col-6"}, [_c("div", {staticClass: "ml-3 p-2 justify-content-center deepDiveFieldLbl w-50"}, [_c("div", {staticClass: "label"}, [_c("label", [_v(_s(e.taxlabel) + "(%)")])])]), _v(" "), _c("div", {staticClass: "mr-5 deepDiveEditFieldVal w-75 fieldName"}, [_c("vds-tax-edit", {
                        attrs: {
                            editable: moduleInfo.getField(t)._editable,
                            tax: e,
                            "tax-regions": $_currentModuleModel.tax_regions
                        }, on: {
                            "update:tax": function (t) {
                                e = t
                            }
                        }
                    })], 1)])]
                }))] : [_c("div", {
                    staticClass: "d-flex p-2 align-items-center",
                    class: {"col-12": isFullWidthField(e.type.name), "col-6": !isFullWidthField(e.type.name)}
                }, [_c("div", {
                    staticClass: "ml-3 p-2 justify-content-center deepDiveFieldLbl",
                    class: {"w-50": !isFullWidthField(e.type.name), "col-2": isFullWidthField(e.type.name)}
                }, [_c("vds-field-label", {
                    attrs: {
                        mode: mode,
                        isEditView: !0,
                        field: moduleInfo.getField(t),
                        module: moduleInfo.name
                    }
                })], 1), _v(" "), _c("div", {
                    staticClass: "mr-5 deepDiveEditFieldVal",
                    class: {
                        "w-75": !isFullWidthField(e.type.name) || "grid" == e.type.name,
                        "flex-grow-1 ml-3": isFullWidthField(e.type.name)
                    }
                }, [_c("ui-field-edit-type", _b({
                    attrs: {
                        mode: mode,
                        field: getFieldModel(t),
                        record: record,
                        ignoreCompositeGrouping: compositeFieldStatus
                    }
                }, "ui-field-edit-type", getFieldSepecificProps(moduleInfo.getField(t)), !1))], 1)])]] : _e()
            }))], 2)]], 2)], 1)] : _e()
        })), _v(" "), "Events" == module && record.invitees ? [_c("div", {staticClass: "w-100 rounded mb-4 shadow-sm"}, [_c("div", {staticClass: "detailBlockHeader card-header p-0 bg-grey-hue-2 my-0 w-100 border-0"}, [_c("h5", {
            directives: [{
                name: "b-toggle",
                rawName: "v-b-toggle",
                value: inviteesBlockLabel,
                expression: "inviteesBlockLabel"
            }], staticClass: "c-pointer mb-0 p-3 font-18", attrs: {href: "'#'+inviteesBlockLabel"}
        }, [_c("i", {
            staticClass: "fa mr-2",
            class: {
                "fa-chevron-down": isBlockOpen(inviteesBlockLabel),
                "fa-chevron-right": !isBlockOpen(inviteesBlockLabel)
            }
        }), _v(" "), _c("span", [_v(_s(translate(inviteesBlockLabel)))])])]), _v(" "), _c("b-collapse", {
            ref: inviteesBlockLabel,
            staticClass: "bg-grey-hue-2",
            attrs: {visible: "", id: inviteesBlockLabel}
        }, [_c(inviteesComponent, {
            tag: "component",
            staticClass: "px-4 ml-3 mr-5",
            attrs: {displayMode: !1, record: record, "hide-block-label": !0},
            on: {
                "update:record": function (e) {
                    record = e
                }
            }
        })], 1)], 1)] : _e()], 2) : _c("div", {staticClass: "row py-4 bg-grey-hue-2 borderTopRadius"}, _l(moduleInfo.fields, (function (e, t) {
            return e && isEditViewField(e) && (e.isQuickCreateField || e.isMandatory || isInventorySpecificField(t)) && !e.isLineItemField ? _c("div", {
                staticClass: "row col-6 my-2 d-flex align-items-center ml-2 form-group",
                class: {"col-12": isFullWidthField(e.type.name)}
            }, [_c("vds-field-label", {
                attrs: {
                    mode: mode,
                    field: e,
                    module: moduleInfo.name,
                    isEditView: !0
                }
            }), _v(" "), _c("div", {
                staticClass: "editTemplate col-6",
                class: {"col-9 pl-2": isFullWidthField(e.type.name)}
            }, [_c("ui-field-edit-type", _b({
                attrs: {
                    mode: mode,
                    field: getFieldModel(t),
                    record: record,
                    ignoreCompositeGrouping: compositeFieldStatus
                }
            }, "ui-field-edit-type", getFieldSepecificProps(e), !1))], 1)], 1) : _e()
        })), 0), _v(" "), _c("div", [moduleInfo.isInventoryModule && "duplicate" != mode ? [moduleInfo._loaded ? _c(lineItemsEditComponent, {
            tag: "component",
            attrs: {mode: mode, recordModel: record, moduleModel: moduleInfo},
            on: {
                "update:recordModel": function (e) {
                    record = e
                }, "update:record-model": function (e) {
                    record = e
                }
            }
        }) : _e()] : _e()], 2)])
    }
});
var Vtiger_Component_EmailPreview = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_DateUtils, Vtiger_Mixins_ShowModal, Vtiger_Mixin_EmailActionsData, Vtiger_Mixin_EmailPreviewActionsUtils, Vtiger_Mixin_ModulePermissions],
    props: {recordid: [String, Number], isReplyAllowed: {type: Boolean, default: !0}},
    data: () => ({record: {}}),
    mounted() {
        this.retrieveRecord(this.recordid, "Emails").then(t => {
            this.record = t
        })
    },
    methods: {
        replyAction() {
            this.retrieveEmailActionsData(this.recordid, "reply").then(t => {
                this.showModal({
                    componentName: "ComposeEmailModal",
                    componentData: {emailRecord: t, module: this.record._moduleName, emailAction: "reply"},
                    modalOnModalMode: !1
                })
            })
        }, replyAllAction() {
            this.retrieveEmailActionsData(this.recordid, "replyall").then(t => {
                this.showModal({
                    componentName: "ComposeEmailModal",
                    componentData: {emailRecord: t, module: this.record._moduleName, emailAction: "replyall"},
                    modalOnModalMode: !1
                })
            })
        }, forwardAction() {
            this.retrieveEmailActionsData(this.recordid, "forward").then(t => {
                this.showModal({
                    componentName: "ComposeEmailModal",
                    componentData: {emailRecord: t, module: this.record._moduleName, emailAction: "forward"},
                    modalOnModalMode: !1
                })
            })
        }, hideModal() {
            this.$root.$emit("bv::hide::modal", "emailPreviewModal")
        }, getAllAttachmentURL(t) {
            let a = "";
            return t && (a = "index.php?module=Emails&action=DownloadFile&mode=downloadAllAttachments&record=" + t), a
        }, getAttachmentIcon: t => t ? VTHelper.getFileIconByFileName(t) : "fa-file"
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "lg",
                "hide-footer": !0,
                id: "emailPreviewModal"
            }
        }, [_c("template", {slot: "modal-header"}, [_c("h5", {
            staticClass: "m-0",
            staticStyle: {"line-height": "1.67"}
        }, [_v(_s(translate("LBL_EMAIL_INFORMATION", "Emails")))]), _v(" "), _c("div", {staticClass: "float-right"}, [_c("button", {
            staticClass: "btn btn-outline-primary btn-sm",
            on: {
                click: function (t) {
                    return printAction()
                }
            }
        }, [_c("i", {staticClass: "fa fa-print"}), _v("  " + _s(translate("LBL_PRINT", "Emails")) + "\n\t\t\t\t\t")]), _v(" "), "QUEUED" !== record.email_flag && isSendEmailAllowed ? [isReplyAllowed ? _c("button", {
            staticClass: "btn btn-outline-primary btn-sm",
            on: {
                click: function (t) {
                    return replyAction()
                }
            }
        }, [_c("i", {staticClass: "fa fa-reply"}), _v("  " + _s(translate("LBL_REPLY", "Emails")) + "\n\t\t\t\t\t\t")]) : _e(), _v(" "), isReplyAllowed && (to.length > 1 || cc.length >= 1 || bcc.length >= 1) ? _c("button", {
            staticClass: "btn btn-outline-primary btn-sm",
            on: {
                click: function (t) {
                    return replyAllAction()
                }
            }
        }, [_c("i", {staticClass: "fa fa-reply-all"}), _v("  " + _s(translate("LBL_REPLY_ALL", "Emails")) + "\n\t\t\t\t\t\t")]) : _e(), _v(" "), _c("button", {
            staticClass: "btn btn-outline-primary btn-sm",
            on: {
                click: function (t) {
                    return forwardAction()
                }
            }
        }, [_c("i", {staticClass: "fa fa-share"}), _v("  " + _s(translate("LBL_FORWARD", "Emails")) + "\n\t\t\t\t\t\t")])] : _e(), _v(" "), _c("button", {
            staticClass: "close",
            staticStyle: {"line-height": "1.4"},
            attrs: {type: "button", "aria-label": "Close"},
            on: {
                click: function (t) {
                    return hideModal()
                }
            }
        }, [_v("×")])], 2)]), _v(" "), _c("div", [_c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_FROM", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, [_c("span", {staticClass: "badge badge-secondary badge-pill"}, [_v(_s(record.from_email))])])]), _v(" "), _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_TO", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, _l(to, (function (t) {
            return _c("span", {staticClass: "badge badge-secondary badge-pill mr-2"}, [_v(_s(t))])
        })), 0)]), _v(" "), cc.length > 0 ? _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_CC", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, [_l(cc, (function (t, a) {
            return a < 3 ? _c("span", {staticClass: "badge badge-secondary badge-pill mr-2"}, [_v(_s(t))]) : _e()
        })), _v(" "), cc.length > 3 ? _c("span", {staticClass: "moreEmails"}, [_c("b-dropdown", {
            attrs: {
                variant: "link",
                "toggle-class": "text-decoration-none p-0 d-flex align-items-center",
                "no-caret": ""
            }
        }, [_c("template", {slot: "button-content"}, [_c("h6", {staticClass: "mb-0"}, [_c("span", [_v(" +" + _s(cc.length - 3) + " " + _s(translate("LBL_MORE")))])])]), _v(" "), _l(cc, (function (t, a) {
            return a >= 3 ? _c("b-dropdown-item", {staticClass: "py-1 pl-2"}, [_c("span", {staticClass: "badge badge-secondary badge-pill mr-2"}, [_v(_s(t))])]) : _e()
        }))], 2)], 1) : _e()], 2)]) : _e(), _v(" "), bcc.length > 0 ? _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_BCC", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, [_l(cc, (function (t, a) {
            return a < 3 ? _c("span", {staticClass: "badge badge-secondary badge-pill mr-2"}, [_v(_s(t))]) : _e()
        })), _v(" "), bcc.length > 3 ? _c("span", {staticClass: "moreEmails"}, [_c("b-dropdown", {
            key: index,
            attrs: {
                variant: "link",
                "toggle-class": "text-decoration-none p-0 d-flex align-items-center",
                "no-caret": ""
            }
        }, [_c("template", {slot: "button-content"}, [_c("h6", {staticClass: "mb-0"}, [_c("span", [_v(" +" + _s(bcc.length - 3) + " " + _s(translate("LBL_MORE")))])])]), _v(" "), _l(bcc, (function (t, a) {
            return a >= 3 ? _c("b-dropdown-item", {staticClass: "py-1 pl-2"}, [_c("span", {staticClass: "badge badge-secondary badge-pill mr-2"}, [_v(_s(t))])]) : _e()
        }))], 2)], 1) : _e()], 2)]) : _e(), _v(" "), _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_SENT_ON", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, [_v("\n\t\t\t\t\t\t" + _s(getDisplayInDayString(record.date_start + " " + record.time_start)) + "\n\t\t\t\t\t")])]), _v(" "), _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_OWNER", "Emails")))]), _v(" "), record.assigned_user_id ? _c("div", {staticClass: "p-0 flex-grow-1"}, [_v("\n\t\t\t\t\t\t" + _s(record.assigned_user_id.label) + "\n\t\t\t\t\t")]) : _e()]), _v(" "), _c("div", {staticClass: "mb-3 d-flex word-break-all"}, [_c("div", {staticClass: "p-0 col-2"}, [_v(_s(translate("LBL_SUBJECT", "Emails")))]), _v(" "), _c("div", {staticClass: "p-0 flex-grow-1"}, [_v("\n\t\t\t\t\t\t" + _s(record.subject) + "\n\t\t\t\t\t")])]), _v(" "), _c("div", {staticClass: "mb-3 d-flex"}, [_c("div", {staticClass: "p-0 col-2 d-flex"}, [_c("div", {staticClass: "d-flex"}, [_v(_s(translate("LBL_ATTACHMENT", "Emails")))]), _v(" "), record && record.attachments && record.attachments.length > 1 ? _c("div", [_c("a", {
            staticClass: "p-1",
            attrs: {href: getAllAttachmentURL(recordid), title: translate("LBL_DOWNLOAD_ALL", "Documents")}
        }, [_c("i", {staticClass: "fa fa-download h5"})])]) : _e()]), _v(" "), _c("div", {staticClass: "p-0 d-flex flex-wrap"}, [_l(record.attachments, (function (t, a) {
            return record.attachments && record.attachments.length > 0 ? _c("div", {
                staticClass: "d-flex align-items-center mb-2",
                on: {
                    click: function (t) {
                        t.stopPropagation()
                    }
                }
            }, [_c("div", {staticClass: "d-flex rounded bg-grey-hue-4 text-dark font-weight-normal px-2 py-1 w-100 font-10 mr-3"}, [_c("i", {
                staticClass: "circle-icon border-0 d-flex far mr-1 my-0 text-grey-4",
                class: getAttachmentIcon(t.attachment)
            }), _v(" "), _c("a", {
                staticClass: "d-flex w-100 ml-1 text-dark no-text-decoration align-items-center",
                attrs: {href: t.url}
            }, [_c("span", {staticClass: "w-100 textOverflowEllipsis"}, [_v(_s(t.attachment))]), _v(" "), _c("i", {staticClass: "far fa-download ml-2 text-grey-4"})])])]) : _e()
        })), _v(" "), _.isEmpty(record.attachments) ? _c("div", {staticClass: "p-0 d-flex"}, [_v("\n\t\t\t\t\t\t\t" + _s(translate("LBL_NO_ATTACHMENTS")) + "\n\t\t\t\t\t\t")]) : _e()], 2)]), _v(" "), _c("div", [_c("div", {
            staticClass: "border p-3 overflow-y",
            domProps: {innerHTML: _s(linkify(purifyContent(record.description)))}
        })])])], 2)
    }
});
var Vtiger_Component_EmailVerification = App.vtComponent.extend({
    data: function () {
        return {isVerified: !0, sendingEmail: !1}
    }, props: {email: {type: String, required: !0}}, computed: {
        key() {
            return this.email.replace(/[^a-zA-Z1-9]/g, "") + "_" + Math.random()
        }
    }, methods: {
        checkVerificationStatus() {
            this.appStore.request("api_get", {
                url: "EmailVerification?module=Vtiger",
                params: {email: this.email}
            }).then(i => {
                Vue.set(this, "isVerified", !0), this.$root.$emit("vds::email::verified")
            }, i => {
                Vue.set(this, "isVerified", !1), this.$root.$emit("vds::email::not::verified")
            })
        }, sendVerificationEmail() {
            Vue.set(this, "sendingEmail", !0), this.appStore.request("api_post", {
                url: "EmailVerification?module=Vtiger",
                params: {email: this.email}
            }).then(i => {
                Vue.set(this, "sendingEmail", !1), this.showErrorNotification({message: this.translate("JS_VERIFICATION_EMAIL_SENT_MSG", "Vtiger", this.email)})
            }, i => {
                Vue.set(this, "sendingEmail", !1), this.showErrorNotification({message: "Failed to send"})
            })
        }
    }, watch: {
        email: {
            handler() {
                this.email && this.checkVerificationStatus()
            }, immediate: !0
        }
    }, render: function anonymous() {
        with (this) return email && !isVerified ? _c("span", {staticClass: "verifyEmailBlock c-pointer"}, [_c("b-link", {
            staticClass: "fa fa-exclamation-triangle text-danger",
            attrs: {id: key}
        }), _v(" "), _c("b-popover", {
            attrs: {
                triggers: "focus",
                target: key
            }
        }, [_c("div", [_v("\n                            " + _s(translate("LBL_EMAIL_NOT_VERIFIED")) + " "), _c("br"), _v("\n                            " + _s(translate("LBL_PLEASE")) + "\n                            "), _c("b-button", {
            staticClass: "c-pointer p-0",
            attrs: {variant: "link", disabled: sendingEmail},
            on: {click: sendVerificationEmail}
        }, [_v("  " + _s(translate("LBL_CLICK_HERE")) + " ")]), _v("\n                            " + _s(translate("LBL_TO_SEND_VERIFICATION")) + "\n                        ")], 1)])], 1) : _e()
    }
});
var Vtiger_Component_EmojiTextArea = App.vtComponent.extend({
    props: {
        value: {},
        validators: {},
        rows: {default: "6"},
        pickerPosition: {default: "right"},
        name: {}
    }, data: () => ({defaultValue: ""}), watch: {
        value: {
            handler(e) {
                $(this.$el).data("emojioneArea").setText(e)
            }, deep: !0
        }
    }, created() {
        this.value && (this.defaultValue = this.value)
    }, mounted() {
        let e = this;
        $(this.$el).emojioneArea({
            pickerPosition: e.pickerPosition, events: {
                change: function (t, a) {
                    e.$emit("input", this.getText())
                }
            }
        })
    }, render: function anonymous() {
        with (this) return _c("textarea", {
            staticClass: "w-100 rounded",
            attrs: {rows: rows, "v-validate": validators, name: name}
        }, [_v(_s(defaultValue))])
    }
});
var Vtiger_Component_EmotionEmojis = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Emotions],
    props: {selectedEmotion: {type: String}, emojiSize: {type: String, default: "h2"}},
    data: () => ({selectedEmoji: ""}),
    methods: {
        selectEmoji(e) {
            this.selectedEmoji == e ? (this.$emit("update:selectedEmotion", ""), this.selectedEmoji = "") : (this.$emit("update:selectedEmotion", e), this.selectedEmoji = e)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex text-secondary align-items-center"}, [_c("div", {
            staticClass: "emojiContainer mr-1",
            on: {
                click: function (e) {
                    return selectEmoji("Negative Passive")
                }
            }
        }, [_c("img", {
            class: ["Negative Passive" == selectedEmoji ? "emotionEmojiSelected" : emojiSize],
            attrs: {src: getEmotionIcon("Negative Passive")}
        })]), _v(" "), _c("div", {
            staticClass: "emojiContainer mr-1", on: {
                click: function (e) {
                    return selectEmoji("Negative Active")
                }
            }
        }, [_c("img", {
            class: ["Negative Active" == selectedEmoji ? "emotionEmojiSelected" : emojiSize],
            attrs: {src: getEmotionIcon("Negative Active")}
        })]), _v(" "), _c("div", {
            staticClass: "emojiContainer mr-1", on: {
                click: function (e) {
                    return selectEmoji("Neutral")
                }
            }
        }, [_c("img", {
            class: ["Neutral" == selectedEmoji ? "emotionEmojiSelected" : emojiSize],
            attrs: {src: getEmotionIcon("Neutral")}
        })]), _v(" "), _c("div", {
            staticClass: "emojiContainer mr-1", on: {
                click: function (e) {
                    return selectEmoji("Positive Passive")
                }
            }
        }, [_c("img", {
            class: ["Positive Passive" == selectedEmoji ? "emotionEmojiSelected" : emojiSize],
            attrs: {src: getEmotionIcon("Positive Passive")}
        })]), _v(" "), _c("div", {
            staticClass: "emojiContainer mr-1", on: {
                click: function (e) {
                    return selectEmoji("Positive Active")
                }
            }
        }, [_c("img", {
            class: ["Positive Active" == selectedEmoji ? "emotionEmojiSelected" : emojiSize],
            attrs: {src: getEmotionIcon("Positive Active")}
        })])])
    }
});
var Vtiger_Component_EmotionModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Emotions, App.loadMixin("Record")],
    components: {"vds-display-emotion-emojis": App.loadComponent("EmotionEmojis")},
    props: {
        modalId: {type: String, default: "Emotion_Display_Modal"},
        recordId: {type: [Number, String], required: !0},
        parentId: {type: [Number, String]},
        relatedRecordIds: {type: Array, default: []},
        modalPosition: {type: String, default: ""},
        modalTitle: {type: String, default: ""},
        activityType: {type: String},
        relatedModule: {type: String}
    },
    data: () => ({selectedEmotion: ""}),
    computed: {
        displayText() {
            return this.translate("LBL_HOW_WAS_THE") + ` ${this.activityType} ?`
        }
    },
    methods: {
        saveEmotion() {
            this.sendEmotionsSaveBatchRequest()
        }, sendEmotionsSaveBatchRequest() {
            if (this.selectedEmotion) {
                let e = [], t = {type: "post", api: "records", parameters: {module: "Emotions"}};
                if (this.relatedRecordIds && this.relatedRecordIds.length > 0) for (let o of this.relatedRecordIds) t.parameters.related_to = this.recordId, o.parent_id && (t.parameters.parent_id = o.parent_id), o.emotionId && (t.parameters.id = o.emotionId), t.parameters.emotion = this.selectedEmotion, t.parameters.relatedModule = this.relatedModule, e.push(jQuery.extend(!0, {}, t)); else t.parameters.related_to = this.recordId, t.parameters.parent_id = this.parentId, t.parameters.emotion = this.selectedEmotion, e.push(jQuery.extend(!0, {}, t));
                this._getModuleDescribe("Emotions").then(t => {
                    t && _.size(e) && this.appStore.request("api_batch", {requests: e}).then(e => {
                        let t = Object.values(e);
                        for (var o = 0; o < t.length; o++) {
                            let e = BaseModel.getModuleSpecificModel("Emotions", "Record", JSON.parse(t[o]));
                            if (this.parentId == e.parent_id.id || !this.parentId && this.recordId == e.related_to.id) {
                                this.$root.$emit("vds::emotion::value::saved", e);
                                break
                            }
                        }
                        this.$root.$emit("bv::hide::modal", this.modalId)
                    })
                })
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            class: modalPosition,
            attrs: {
                id: modalId,
                size: "md",
                lazy: !0,
                "hide-footer": "",
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-3",
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_v(" " + _s(modalTitle) + " ")]), _v(" "), _c("div", {staticClass: "d-flex flex-column"}, [_c("div", {staticClass: "h4 mb-0 d-flex justify-content-center"}, [_v(" " + _s(displayText) + " ")]), _v(" "), _c("br"), _v(" "), _c("div", {staticClass: "d-flex justify-content-center height-40px emojiDisplay"}, [_c("vds-display-emotion-emojis", {
            attrs: {
                emojiSize: "mediumEmoji",
                "selected-emotion": selectedEmotion
            }, on: {
                "update:selectedEmotion": function (e) {
                    selectedEmotion = e
                }, "update:selected-emotion": function (e) {
                    selectedEmotion = e
                }
            }
        })], 1), _v(" "), _c("br"), _v(" "), _c("div", {staticClass: "d-flex justify-content-center"}, [_c("button", {
            staticClass: "btn btn-primary my-2",
            attrs: {disabled: !selectedEmotion},
            on: {
                click: function (e) {
                    return saveEmotion()
                }
            }
        }, [_v(_s(translate("LBL_SUBMIT", "Documents")))])])])])
    }
});
var Vtiger_Component_EmptyStateCard = App.vtComponent.extend({
    components: {"vds-list-add-action": App.loadComponent("ListAddAction")},
    data: () => ({illustrationURL: ""}),
    props: {
        showAddButton: {type: Boolean, default: !0},
        emptyLabel: {type: String, default: ""},
        moduleLabel: {type: String, default: ""},
        moduleSingularLabel: {type: String, default: ""},
        selectedFilter: {type: [String, Number]},
        illustrationName: {type: String, default: ""},
        illustrationSize: {type: String, default: "illustrationImage"},
        addActionAllowed: {type: Boolean, default: !0}
    },
    mounted() {
        this.illustrationName && this.checkImageExists("layouts/v9/assets/images/" + this.illustrationName).then(t => {
            this.illustrationURL = t ? "layouts/v9/assets/images/" + this.illustrationName : ""
        })
    },
    methods: {
        checkImageExists: t => new Promise((e, s) => {
            var a = new Image;
            a.onload = function () {
                e(!0)
            }, a.onerror = function () {
                e(!1)
            }, a.src = t
        }), getEmptyLabel() {
            let t = this.moduleLabel.toLowerCase() || this.translate(this.$module, this.$module).toLowerCase(),
                e = this.moduleSingularLabel.toLowerCase() || this.translate("SINGLE_" + this.$module, this.$module).toLowerCase(),
                s = "";
            return s = this.showAddButton ? this.translate("LBL_NO_ENTITIES_FOUND_CREATE_NEW", this.$module, t, e) : this.translate("LBL_NO_ENTITIES_FOUND", this.$module, t), s
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [_c("div", [[illustrationURL ? _c("div", {staticClass: "text-center mb-4"}, [_c("img", {
            class: illustrationSize,
            attrs: {src: illustrationURL}
        })]) : _c("div", {staticClass: "text-center mb-4"}, [_c("i", {staticClass: "fa-10x fas fa-image"})])], _v(" "), _c("div", {
            staticClass: "text-center mb-4 h5",
            domProps: {innerHTML: _s(emptyLabel || getEmptyLabel())}
        }), _v(" "), showAddButton ? _t("empty-action", [_c("vds-list-add-action", {
            staticClass: "text-center",
            attrs: {"selected-filter": selectedFilter}
        })]) : _e()], 2)])
    }
});
var Vtiger_Component_EventInvitees = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DateUtils, Vtiger_Mixin_UsersUtils],
    props: {
        record: {type: [Object, Array], required: !0},
        displayMode: {type: Boolean, default: !0},
        showSearchInvitee: {type: Boolean, default: !0},
        hideBlockLabel: {type: Boolean, default: !1}
    },
    data() {
        return {
            iconHoverStates: {},
            isRecordClosed: this.record.isClosed,
            displaySlots: !1,
            combinedSlots: {},
            loadingCombinedSlots: !1,
            prevContacts: [],
            contactCreateAllowed: !0,
            timer: "",
            combinedCacheKeys: []
        }
    },
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        },
        isContactFieldEditAllowed() {
            let e = this.moduleModel;
            if (e && e.isLoaded) {
                let t = e.getField("contact_id");
                if (t && t.isEditable) return !0
            }
            return !1
        },
        contactReferencePopupComponent: () => App.loadComponent("PopupReferenceList", "Contacts"),
        inviteeSearchComponent: () => App.loadComponent("InviteesSearch", "Events", !1),
        inviteeDetails() {
            var e = {};
            if (void 0 === this.record.invitees) return "";
            let t = this.record.invitees ? this.record.invitees.invitees_details : {};
            if (t) {
                for (var i in t) if (t[i].module && t[i].id && (t[i].completed || this.record.invitees.count)) {
                    var s = {};
                    s.id = t[i].id, s.label = t[i].label, s.status = t[i].status, s.module = t[i].module, s.hasEvent = t[i].hasEvent, s.hasNoEmail = t[i].hasNoEmail, e[s.id] = s
                }
                return e
            }
        },
        isAllowedToAdd() {
            let e = this.record.eventstatus;
            if (e) {
                let t = this.$_currentModuleModel.closedStateDetails;
                if (t && t.status_values) return !t.status_values.includes(e)
            }
            return !0
        },
        showDeleteInvitee() {
            return !this.record || !this.record.isClosed
        },
        getUserImageInfo() {
            return this.appStore.get("users_details")
        }
    },
    watch: {
        "record.invitees": {
            handler(e, t) {
                e && !_.isEqual(e, t) && this.setInviteeIds()
            }, deep: !0, immediate: !0
        }, "$store.state.Detail_Record_Model.isclosed"(e, t) {
            this.isRecordClosed = !!e
        }
    },
    mounted() {
        this.addWatcherForContactField(), this.addWatcherForFetchingSlotsInfo(), this.checkContactPermission(), this.getUsersInfo(), this.fetchEmailInfoForInvitees()
    },
    methods: {
        showQuickCreateModal(e) {
            this._getModuleDescribe(e).then(t => {
                if (t && t.createable) {
                    var i = Vtiger_Record_Model.getCleanInstance(e);
                    this.showModal({
                        componentName: App.loadComponent("QuickCreateModal", e),
                        componentData: {
                            module: e,
                            record: i,
                            showSaveAndContinueBtn: !1,
                            postQuickCreateSave: this.postQuickCreateContactSave,
                            caseSendEmailAllowed: !1
                        },
                        modalOnModalMode: !0
                    })
                } else this.showErrorNotification(this.translate("JS_NO_CREATE_OR_NOT_QUICK_CREATE_ENABLED", "Vtiger"))
            })
        },
        postQuickCreateContactSave(e) {
            if (e && e.id) {
                let t = {
                    id: e.id,
                    label: e.label,
                    name: e.label,
                    status: "invite_not_sent",
                    module: "Contacts",
                    hasNoEmail: !1,
                    completed: !0
                };
                this.addInvitee(t), this.record && this.record.id && this.inviteeHasEmail(e.id).then(t => {
                    t && 0 == t.length && this.updateInviteeEmailInfo([e.id])
                })
            }
        },
        addPopupListener() {
            this.$off("vds::popup:record::selected"), this.$on("vds::popup:record::selected", (e, t) => {
                _.isArray(t) || (t = [t]);
                let i = [];
                t.forEach(e => {
                    if (e && e.id) {
                        let t = {
                            id: e.id,
                            label: e.label,
                            name: e.label,
                            status: "invite_not_sent",
                            module: "Contacts",
                            hasNoEmail: !1,
                            completed: !0
                        };
                        i.push(e.id), this.addInvitee(t)
                    }
                }), this.record && this.record.id && i && i.length > 0 && this.inviteeHasEmail(i).then(e => {
                    if (e) {
                        let t = _.map(e, e => parseInt(e));
                        this.updateInviteeEmailInfo(_.difference(i, t))
                    }
                })
            }), this.$emit("vds::referenceModal::show")
        },
        referenceParams: () => ({
            module: "Contacts",
            multiple: !0,
            fieldname: "contact_id",
            parentModule: "Events",
            ignoreLinkedRecords: !0
        }),
        removeInvitee(e) {
            let t = e.id, i = e.status, s = this.record.id, r = !1;
            this.clearCachedCombinedSlotsInfo();
            var a = () => {
                for (let e in this.record.contact_id) this.record.contact_id[e].id === t && (this.record.contact_id[e].completed = !1);
                let e = this.record.invitees ? this.record.invitees : {};
                e = jQuery.extend(!0, {}, e);
                let i = e.invitees_details ? e.invitees_details : {};
                for (let e in i) {
                    i[e].id == t && delete i[e]
                }
                e.invitees_details = i, Vue.set(this.record, "invitees", e)
            };
            if (s) {
                var n = this.translate("JS_ARE_YOU_SURE_TO_REMOVE_INVITEE");
                -1 != jQuery.inArray(i, ["yes", "maybe", "awaiting_response"]) && (n = this.translate("JS_SEND_MAIL_TO_REMOVED_INVITEE"), r = !0), e && e.hasNoEmail ? (a(), this.deleteInviteeApi(t, !1, s)) : this.showConfirmationBox({
                    message: n,
                    okTitle: this.translate("LBL_YES"),
                    cancelTitle: this.translate("LBL_NO")
                }).then(() => {
                    a(), this.deleteInviteeApi(t, r, s)
                }, () => {
                    a(), this.deleteInviteeApi(t, !1, s)
                })
            } else a()
        },
        deleteInviteeApi(e, t, i) {
            var s = {url: "records/invitees", params: {module: "Events", inviteeid: e, send_mail: t, record: i}};
            this.appStore.request("api_delete", s).then(e => {
                e && (this.showSuccessNotification(this.translate("INVITEE_REMOVED_SUCCESSFULLY", "Events")), this.$emit("vds::event::invitees::deleted", !0))
            }, e => {
                this.showErrorNotification(e.message)
            })
        },
        addInvitee(e) {
            let t = this.record.invitees ? this.record.invitees : {};
            t = jQuery.extend(!0, {}, t), this.clearCachedCombinedSlotsInfo();
            let i = t.invitees_details;
            !_.isArray(i) && i || (i = {});
            let s = e.recordId ? e.recordId : e.id;
            if (!i[s]) {
                var r = {
                    id: s,
                    label: e.name,
                    status: "invite_not_sent",
                    module: e.module,
                    completed: !0,
                    hasEvent: !1
                };
                e && "Users" == e.module && this.inviteeUserHasEvents(s).then(e => {
                    this.updateInviteeUserInfo(e)
                }), Vue.set(i, s, r), t.invitees_details = i, Vue.set(this.record, "invitees", t), this.$emit("vds::event::invitees::altered", r)
            }
        },
        addWatcherForContactField() {
            let e = new URLSearchParams(window.location.search), t = e.has("mode") && "duplicate" == e.get("mode"),
                i = !(this.record && this.record.id || t);
            this.$watch("record.contact_id", (e, t) => {
                if (!t || e && e.length > t.length && !e.fromCode) {
                    let i = _.difference(e, t);
                    if (_.size(i) > 0) {
                        let e = [];
                        i.forEach(t => {
                            t && t.id && e.push(parseInt(t.id))
                        }), e && e.length > 0 && this.inviteeHasEmail(e).then(t => {
                            if (this.setRelatedEventInvitee(i), t) {
                                let i = _.map(t, e => parseInt(e));
                                this.updateInviteeEmailInfo(_.difference(e, i))
                            }
                        })
                    }
                }
                e && e.fromCode && delete e.fromCode, this.prevContacts = t
            }, {deep: !0, immediate: i})
        },
        addWatcherForFetchingSlotsInfo() {
            let e = ["date_start", "time_start", "due_date", "time_end", "invitees"];
            for (let t in e) {
                let i = e[t];
                this.$watch(() => ({
                    fieldName: i,
                    fieldValue: this.record.get(i)
                }), ({fieldName: e, fieldValue: t}, i) => {
                    let s = i.fieldValue;
                    if (t && !_.isEqual(t, s) && (this.clearCachedCombinedSlotsInfo(), "invitees" != e)) {
                        let e = [], t = this.record.invitees ? this.record.invitees : {};
                        if (t && t.invitees_details) {
                            let i = t.invitees_details;
                            for (var r in i) {
                                let t = i[r];
                                t && "Users" == t.module && e.push(t.id)
                            }
                        }
                        e && e.length > 0 && this.inviteeUserHasEvents(e).then(t => {
                            this.updateInviteeUserInfo(t, e)
                        })
                    }
                }, {deep: !0, immediate: !1})
            }
        },
        inviteeUserHasEvents(e = []) {
            return new Promise((t, i) => {
                _.isArray(e) || (e = [e]);
                let s = "", r = this.record.date_start, a = this.record.time_start, n = this.record.due_date,
                    o = this.record.time_end;
                if (r && a) {
                    let e = r + " " + a;
                    s = this.convertUserDateTimeToDatabaseFormat(e)
                }
                if (n && o) {
                    let e = n + " " + o;
                    dbFormattedEndDateTime = this.convertUserDateTimeToDatabaseFormat(e)
                }
                this.appStore.request("api_get", {
                    url: "InviteeUserEvents",
                    params: {module: "Events", userids: e, start: s, end: dbFormattedEndDateTime}
                }).then(e => {
                    t(e)
                })
            })
        },
        inviteeHasEmail(e) {
            return new Promise((t, i) => {
                _.isArray(e) || (e = [e]), this.appStore.request("api_get", {
                    url: "inviteeemail",
                    params: {module: "Events", inviteeid: e}
                }).then(e => {
                    let i = Object.keys(e);
                    t(i)
                })
            })
        },
        clearCachedCombinedSlotsInfo() {
            if (this.combinedCacheKeys && this.combinedCacheKeys.length > 0) for (i in this.combinedCacheKeys = _.unique(this.combinedCacheKeys), this.combinedCacheKeys) {
                let e = this.combinedCacheKeys[i];
                e && this.appStore.delete(e)
            }
        },
        fetchCombinedSlots() {
            this.loadingCombinedSlots = !0;
            let e = this.record.invitees ? this.record.invitees : {}, t = this.record.assigned_user_id, i = [];
            if (e && e.invitees_details) {
                let t = e.invitees_details;
                for (var s in t) {
                    let e = t[s];
                    e && "Users" == e.module && i.push(e.id)
                }
            }
            i.push(t.id);
            let r = 30, a = this.record.date_start, n = this.record.time_start, o = this.record.due_date,
                d = this.record.time_end;
            if (a && n) {
                let e = a + " " + n;
                dbFormattedStartDateTime = this.convertUserDateTimeToDatabaseFormat(e)
            }
            if (o && d) {
                let e = o + " " + d;
                dbFormattedEndDateTime = this.convertUserDateTimeToDatabaseFormat(e)
            }
            dbFormattedStartDateTime && dbFormattedEndDateTime && (momentStart = moment(dbFormattedStartDateTime), momentEnd = moment(dbFormattedEndDateTime), r = momentEnd.diff(momentStart, "minutes", !0));
            let l = this.$currentUser.time_zone, c = this.record.activitytype, m = `${c}_${r}_combined_slots_response`;
            this.combinedCacheKeys.push(m), this.appStore.request("api_get", {
                url: "InviteeUserInfo",
                params: {module: "Events", userids: i, activityType: c, slotDuration: r, convertToTimeZone: l},
                key: m,
                cache: !0
            }).then(e => {
                let t = jQuery.extend(!0, {}, e);
                var i = this.$currentUser.time_zone, s = moment().tz(i);
                let r = s.format("YYYY-MM-DD");
                s.format("HH:mm:ss");
                for (key in t) {
                    let i = !1;
                    key && r && r == key && (i = !0);
                    let s = e[key], a = this.convertDateToUserFormat(key), n = _.map(s, (e, t) => {
                        if (t = this.convertTimeToUserFormat(t), i) {
                            let e = a + " " + t;
                            e && !this.isGreaterThanNow(e) && (t = "")
                        }
                        return t
                    });
                    delete t[key], t[a] = n
                }
                this.loadingCombinedSlots = !1, this.combinedSlots = t
            }, () => {
                this.loadingCombinedSlots = !1
            }), this.timer || (this.timer = setTimeout(() => {
                this.timer = null, this.clearCachedCombinedSlotsInfo()
            }, 4e3))
        },
        getEventDuration() {
            let e = 30;
            e = "Call" === this.record.activitytype ? this.$currentUser.callduration : this.$currentUser.othereventduration;
            let t = this.record.date_start, i = this.record.time_start, s = this.record.due_date,
                r = this.record.time_end;
            if (t && i) {
                let e = t + " " + i;
                dbFormattedStartDateTime = this.convertUserDateTimeToDatabaseFormat(e)
            }
            if (s && r) {
                let e = s + " " + r;
                dbFormattedEndDateTime = this.convertUserDateTimeToDatabaseFormat(e)
            }
            return dbFormattedStartDateTime && dbFormattedEndDateTime && (momentStart = moment(dbFormattedStartDateTime), momentEnd = moment(dbFormattedEndDateTime), e = momentEnd.diff(momentStart, "minutes", !0)), e
        },
        updateInviteeUserInfo(e) {
            if (_.size(e)) {
                let i = this.record.invitees ? this.record.invitees : {};
                for (var t in e) {
                    let s = e[t];
                    i && i.invitees_details && i.invitees_details[t] && (t && !_.isEmpty(s) ? Vue.set(i.invitees_details[t], "hasEvent", !0) : Vue.set(i.invitees_details[t], "hasEvent", !1))
                }
            }
        },
        updateInviteeEmailInfo(e) {
            if (_.size(e)) {
                let i = this.record.invitees ? this.record.invitees : {};
                for (var t in e) {
                    let s = e[t];
                    i && i.invitees_details && i.invitees_details[s] && Vue.set(i.invitees_details[s], "hasNoEmail", !0)
                }
            }
        },
        setRelatedEventInvitee(e) {
            if (_.size(e)) {
                if (!this.record.id && !this.isAllowedToAdd) return;
                let r = this.record.invitees ? this.record.invitees : {};
                for (var t in r = jQuery.extend(!0, {}, r), e) {
                    var i = e[t];
                    _.isUndefined(i.completed) && (i.completed = !0);
                    var s = {
                        id: i.id,
                        label: i.label,
                        module: i.module,
                        completed: i.completed,
                        status: "invite_not_sent"
                    };
                    !_.isArray(r.invitees_details) && r.invitees_details || (r.invitees_details = {});
                    let a = r.invitees_details;
                    a[s.id] || s.completed && (a[s.id] = s)
                }
                Vue.set(this.record, "invitees", r)
            }
        },
        setInviteeIds() {
            let e = this.record.invitees ? this.record.invitees : {};
            e = jQuery.extend(!0, {}, e);
            let t = e.invitees_details ? e.invitees_details : [];
            t = Object.values(t);
            let i = [], s = [], r = [];
            for (let e in t) {
                let a = t[e];
                if (a && "Contacts" == a.module) {
                    let e = a;
                    delete e.status, delete e.completed, r.push(e), s.push(e.id)
                }
                i.push(a.id)
            }
            if (this.record && !this.record.id && r && r.length > 0) {
                let e = this.$_currentModuleModel;
                if (e && e.isLoaded) {
                    let t = e.getField("contact_id");
                    t && t.isEditable && Vue.set(this.record, "contact_id", r)
                }
            }
            i.length ? Vue.delete(this.record, "allInviteeRemoved") : Vue.set(this.record, "allInviteeRemoved", !0), Vue.set(this.record, "inviteesid", i.join(";"))
        },
        updateStartDate(e, t) {
            if (this.record.id && 1 == this.record.allday) return this.showErrorNotification(this.translate("JS_NOT_ALLOWED_TO_CHANGE_DATE_FOR_ALLDAY", "Events")), void this.$refs.popover.$emit("close");
            let i = AppStorage.get("app_module_permissions");
            if (i && i.Calendar && !i.Calendar.editable && this.record && this.record.id) return void this.showErrorNotification(this.translate("JS_NO_EDIT_PERMISSION"));
            this.$emit("vds::enable::date::edit");
            let s = t + " " + e, r = this.getEventDuration();
            var a = this.splitDateTimeBasedOnUserFormat(s);
            let n = new String(a[0]);
            if (n.markAsUserFormat(!0), Vue.set(this.record, "date_start", n), 12 == this.$currentUser.hour_format) {
                let e = new String(a[1] + " " + a[2]);
                e.markAsUserFormat(!0), Vue.set(this.record, "time_start", e)
            } else {
                let e = new String(a[1]);
                e.markAsUserFormat(!0), Vue.set(this.record, "time_start", e)
            }
            var o = this.getUserDateTimeFormat(), d = this.$currentUser.time_zone, l = moment.tz(s, o, d);
            l.add("minutes", Number(r));
            o = this.getUserDateTimeFormat();
            let c = l.format(o);
            var m = this.splitDateTimeBasedOnUserFormat(c);
            let h = new String(m[0]);
            if (h.markAsUserFormat(!0), Vue.set(this.record, "due_date", h), 12 == this.$currentUser.hour_format) {
                let e = new String(m[1] + " " + m[2]);
                e.markAsUserFormat(!0), Vue.set(this.record, "time_end", e)
            } else {
                let e = new String(m[1]);
                e.markAsUserFormat(!0), Vue.set(this.record, "time_end", e)
            }
            setTimeout(() => {
                jQuery("html,body").animate({scrollTop: jQuery('input[name="date_start"]').offset().top - 150}, "slow")
            }, 100), this.$refs.popover.$emit("close")
        },
        getReadableDate(e) {
            let t = this.getUserDateFormat();
            return moment(e, t).format("ll")
        },
        onPopoverShow() {
            this.fetchCombinedSlots()
        },
        getColor: e => VTHelper.getColorCode(e),
        checkContactPermission() {
            let e = AppStorage.get("app_module_permissions");
            e && e.Contacts && (this.contactCreateAllowed = e.Contacts.creatable)
        },
        fetchEmailInfoForInvitees() {
            if (this.record && this.record.id) {
                let e = this.record.invitees ? this.record.invitees : {};
                e = jQuery.extend(!0, {}, e);
                let t = e.invitees_details ? e.invitees_details : [];
                t = Object.values(t);
                let i = [];
                for (let e in t) {
                    let s = t[e];
                    s && "Contacts" == s.module && i.push(parseInt(s.id))
                }
                i && i.length > 0 && this.inviteeHasEmail(i).then(e => {
                    if (e) {
                        let t = _.map(e, e => parseInt(e));
                        this.updateInviteeEmailInfo(_.difference(i, t))
                    }
                })
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "bg-grey-hue-7 border rounded p-3"}, [!displayMode && showSearchInvitee ? _c("div", {staticClass: "d-flex flex-column mb-2"}, [_c("div", {staticClass: "d-flex w-100 justify-content-between mb-3"}, [_c("div", {staticClass: "d-flex"}, [hideBlockLabel ? _e() : _c("span", [_c("label", {
            staticClass: "deepDiveFieldLbl",
            attrs: {for: "LBL_INVITEES"}
        }, [_v(_s(translate("LBL_PARTICIPANTS", "Events")))])])]), _v(" "), isRecordClosed ? _e() : _c("div", {staticClass: "d-flex slotPopover"}, [_c("b-btn", {
            staticClass: "p-0 text-decoration-none d-flex align-items-center w-100",
            attrs: {id: "eventSlotsInfo", variant: "link"}
        }, [_v("\n                                        " + _s(translate("LBL_SUGGESTED_TIME", "Events")) + "\n                                    ")]), _v(" "), _c("b-popover", {
            ref: "popover",
            attrs: {target: "eventSlotsInfo", placement: "left", triggers: "focus", container: "eventSlotsInfo"},
            on: {show: onPopoverShow}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_SUGGESTED_TIME", "Events")) + _s(translate("LBL_SLOTS", "Events")))]), _v(" "), loadingCombinedSlots ? _c("span", [_v(_s(translate("JS_LOADING_PLEASE_WAIT")))]) : _e(), _v(" "), _c("div", {staticClass: "d-flex flex-column pl-3 pt-2"}, _l(combinedSlots, (function (e, t) {
            return _c("div", {staticClass: "d-flex flex-column mb-3"}, [_c("div", {staticClass: "mb-2 h6"}, [_v(_s(getReadableDate(t)))]), _v(" "), _c("div", {staticClass: "d-flex flex-wrap"}, _l(e, (function (e) {
                return e ? _c("span", {
                    staticClass: "justify-content-center d-flex border mw-70 rounded-6 p-2 bg-grey-hue-4 mr-2 mb-2 c-pointer",
                    on: {
                        click: function (i) {
                            return updateStartDate(e, t)
                        }
                    }
                }, [_v("\n                                                        " + _s(e) + "\n                                                    ")]) : _e()
            })), 0)])
        })), 0), _v(" "), _.isEmpty(combinedSlots) ? _c("span", [_v(" " + _s(translate("LBL_NO_SLOTS_AVAILABLE_FOR_DURATION")) + " ")]) : _e()])], 1)]), _v(" "), isAllowedToAdd && !isRecordClosed ? _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "deepDiveFieldLbl col-2 text-truncate p-0"}, [_v(" " + _s(translate("LBL_ADD_PARTICIPANTS", "Events")) + " ")]), _v(" "), _c("div", {staticClass: "d-flex flex-grow-1 justify-content-between"}, [_c("div", {staticClass: "flex-grow-1"}, [_c(inviteeSearchComponent, {
            ref: "vt_inviteesearch_ref",
            tag: "component",
            staticClass: "border w-100 h-75 p-0",
            attrs: {searchModule: "Contacts", placeholder: translate("LBL_TYPE_AND_SEARCH"), record: this.record},
            on: {vt_invitee_selected: addInvitee}
        })], 1), _v(" "), isContactFieldEditAllowed ? _c("div", {staticClass: "input-group-append height-35px"}, [_c("span", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.contactReferencePopupComponent.vds::referenceModal::show.true",
                value: referenceParams,
                expression: "referenceParams",
                modifiers: {contactReferencePopupComponent: !0, "vds::referenceModal::show": !0, true: !0}
            }], staticClass: "input-group-text c-pointer", on: {click: addPopupListener}
        }, [_c("i", {class: getModuleIconClass("Contacts")})]), _v(" "), contactCreateAllowed ? _c("span", {
            staticClass: "input-group-text c-pointer",
            on: {
                click: function (e) {
                    return showQuickCreateModal("Contacts")
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus"})]) : _e()]) : _e()])]) : _e()]) : _e(), _v(" "), _.size(inviteeDetails) > 0 ? _c("div", {staticClass: "inviteeList mb-2 d-flex flex-wrap"}, _l(inviteeDetails, (function (e, t, i) {
            return _c("div", {staticClass: "d-flex w-50"}, [_c("div", {
                staticClass: "border rounded bgLtGrey mb-2 d-flex align-items-center w-100 border-grey-4 row-height-47",
                class: {"mr-2": !(i % 2), "ml-2": i % 2}
            }, [_c("div", {staticClass: "details d-flex align-items-center flex-grow-1 pl-0 mr-2"}, [_c("div", {staticClass: "icon my-1"}, [_c("div", {staticClass: "col-2 m-0"}, ["Users" != e.module ? _c("i", {
                staticClass: "h4 ml-1",
                class: getModuleIconClass(e.module, e.id)
            }) : [getUserImageInfo && getUserImageInfo[e.id] && getUserImageInfo[e.id].image ? _c("img", {
                staticClass: "border-grey-6 p-0 mr-2 user-image-sm",
                attrs: {src: getUserImageInfo[e.id].image.url}
            }) : _c("div", {
                staticClass: "mr-2 text-white border-grey-6 d-flex align-items-center justify-content-center text-capitalize user-image-sm",
                style: {background: getColor(e.label)}
            }, [_v(_s(e.label.substring(0, 2)))])]], 2)]), _v(" "), _c("div", {staticClass: "my-1 name"}, [_c("span", {staticClass: "inviteeInfo"}, [_c("span", [_v(_s(e.label))]), _c("br")])])]), _v(" "), record.id && !e.hasNoEmail ? _c("div", {staticClass: "col-3 d-flex align-items-center px-0"}, [_c("div", {staticClass: "badge badge-pill badge-secondary py-2 px-3 text-truncate"}, [_v(_s(translate(e.status, "Events")))])]) : _e(), _v(" "), _c("div", {staticClass: "actions d-flex align-items-center p-2"}, [_c("h6", {staticClass: "inviteeActions m-0"}, [e.hasEvent ? _c("span", {
                staticClass: "inviteeActions-item p-1 mx-1 c-pointer text-grey-4",
                attrs: {title: translate("LBL_USER_HAS_EVENT_SCHEDULED", "Events", e.label)}
            }, [_c("i", {staticClass: "fa fa-exclamation-triangle text-warning"})]) : _e(), _v(" "), e.hasNoEmail ? _c("span", {
                staticClass: "inviteeActions-item p-1 mx-1 c-pointer text-grey-4",
                attrs: {title: translate("LBL_EMAIL_NOT_AVAILABLE", "Events", e.label)}
            }, [_c("i", {staticClass: "fa fa-mail-slash text-warning"})]) : _e(), _v(" "), showDeleteInvitee ? _c("span", {
                staticClass: "inviteeActions-item p-1 mx-1 c-pointer text-grey-4",
                attrs: {title: translate("LBL_REMOVE_INVITEE", "Events")},
                on: {
                    click: function (t) {
                        return removeInvitee(e)
                    }
                }
            }, [_c("i", {staticClass: "fa fa-times-circle"})]) : _e()])])])])
        })), 0) : _e()])])
    }
}), Events_Component_InviteesSearch = App.vtComponent.extend({
    computed: {
        invitees() {
            let e = this.record.inviteesid, t = [];
            return e && (t = e.split(";")), t
        }
    },
    render(e) {
        return e("v-select2", {
            props: {
                ajax_url: "records/invitees",
                ajax_data: this.formatRequest,
                ajax_response: this.formatResult
            },
            attrs: Object.assign(this.$attrs, {
                tags: !1,
                multiple: !0,
                tokenSeparators: [","],
                containerCssClass: ":all:",
                escapeMarkup: function (e) {
                    return e
                },
                templateSelection: function (e) {
                    return `<span>${e.label || e.id}</span>`
                }
            }),
            on: {
                vt_select2_selected: e => {
                    this.$emit("vt_invitee_selected", e), jQuery(this.$refs.Vt_Invitees_Component_Reference.$el).val(null).trigger("change"), this.$refs.Vt_Invitees_Component_Reference.close()
                }, change: e => {
                    this.$emit("change", e)
                }
            },
            ref: "Vt_Invitees_Component_Reference"
        })
    },
    props: {lists: {type: [Object, Array]}, record: {type: Object}},
    methods: {
        formatRequest: ({term: e}) => ({module: "Events", searchValue: e}), formatResult(e, t) {
            let i = [];
            for (let t in e) {
                var s = [], r = [];
                s.text = t;
                for (let i in e[t]) for (let s in e[t][i]) {
                    var a = e[t][i][s];
                    this.invitees.includes(i) || (a.id = a.value, a.text = a.label, a.recordId = i, a.module = t, r.push(a))
                }
                r.length <= 0 || (s.children = r, i.push(s))
            }
            return {results: i}
        }
    }
});
var Vtiger_Component_EventInviteesEmailConfirmation = App.vtComponent.extend({
    props: {
        record: {type: Object}, cb: {
            type: Function, default: () => {
            }
        }
    }, computed: {
        modalTitle() {
            var t = this.translate("JS_CONFIRM_SEND_EMAIL_TO_INVITEES");
            return this.record && "Cancelled" == this.record.eventstatus && (t = this.translate("JS_SEND_MAIL_ABOUT_CANCELLATION_UPDATE")), t
        }
    }, methods: {
        closeModal(t = !0) {
            t && (this.appStore.set({
                key: "quickcreate_save_button_show",
                data: !0
            }), this.appStore.set({
                key: "deepdive_save_clicked",
                data: !1
            }), this.appStore.set({
                key: "editview_save_button_show",
                data: !0
            })), this.$root.$emit("bv::hide::modal", "inviteesemailconfirmationmodal")
        }, send() {
            this.cb("true"), this.closeModal(!1)
        }, dontsend() {
            this.cb(!1), this.closeModal(!1)
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "inviteesemailconfirmationmodal",
                "body-class": "p-0",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("template", {slot: "modal-header"}, [_c("div", {
            staticClass: "d-flex bd-highlight align-items-center",
            staticStyle: {width: "100%"}
        }, [_c("div", {staticClass: "flex-grow-1 bd-highlight"}, [_c("h5", [_v(_s(modalTitle))])]), _v(" "), _c("div", {staticClass: "bd-highlight"}, [_c("button", {
            staticClass: "close",
            attrs: {type: "button", "aria-label": "Close"},
            on: {
                click: function (t) {
                    return closeModal(!0)
                }
            }
        }, [_v("× ")])])])]), _v(" "), _c("template", {slot: "modal-footer"}, [_c("b-button", {
            staticClass: "float-right",
            on: {
                click: function (t) {
                    return closeModal()
                }
            }
        }, [_v(" \n                            " + _s(translate("LBL_CANCEL")) + "\n                        ")]), _v(" "), _c("b-button", {
            staticClass: "float-right",
            attrs: {variant: "outline-primary"},
            on: {
                click: function (t) {
                    return dontsend()
                }
            }
        }, [_v("\n                            " + _s(translate("Do not send Email")) + "\n                        ")]), _v(" "), _c("b-button", {
            staticClass: "float-right",
            attrs: {variant: "primary"},
            on: {
                click: function (t) {
                    return send()
                }
            }
        }, [_v("\n                            " + _s(translate("Send Email")) + "\n                        ")])], 1)], 2)
    }
});
var Vtiger_Component_ExpandedRteModal = App.vtComponent.extend({
    props: ["recordValue", "focusOnField", "fieldName", "advancedEditor", "editorExtraConfig"],
    mixins: [Vtiger_Mixin_ModuleModel],
    data() {
        return {value: this.recordValue, isAdvancedEditor: !!this.advancedEditor}
    },
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }, extraConfig() {
            let e = this.editorExtraConfig || {}, t = window.innerHeight - 268;
            return Object.assign(e, {height: t}), e
        }
    },
    methods: {
        minimise() {
            this.$root.$emit("bv::hide::modal", "rteModal"), this.$root.$emit("vds::rte::edited", this.value)
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "rteModal",
                size: "xl",
                "header-class": "p-0 bgLtGrey",
                lazy: !0,
                "hide-footer": "",
                "body-class": "previewModal p-4",
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            staticClass: "d-flex justify-content-between w-100 px-4 py-3 align-items-center",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [moduleModel.isLoaded ? _c("span", {staticClass: "h5 mb-0"}, [_v(_s(moduleModel.getField(fieldName).label))]) : _e(), _v(" "), _c("i", {
            staticClass: "fa-expand-alt c-pointer h5 my-1",
            on: {click: minimise}
        })]), _v(" "), _c("vds-rte", {
            attrs: {
                focus: focusOnField,
                "is-advanced": isAdvancedEditor,
                extraConfig: extraConfig,
                "cursor-position": "end"
            }, model: {
                value: value, callback: function (e) {
                    value = e
                }, expression: "value"
            }
        })], 1)
    }
});
var Vtiger_Component_ExtendTrial = App.vtComponent.extend({
    name: "vds-extend-trial",
    components: {"vds-extend-trial-content": App.loadComponent("ExtendTrialContent", "Vtiger")},
    props: {info: {required: !0, default: ""}},
    computed: {
        modalTitle() {
            return this.translate("LBL_TRIAL_EXPIRED_DAYS", "Ondemand", this.info.days_left)
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "extendtrial",
            attrs: {
                lazy: !0,
                size: "xxl",
                "hide-footer": "",
                title: modalTitle,
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-0",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c("vds-extend-trial-content", {attrs: {info: info}})], 1)
    }
}), Vtiger_Component_ExtendTrialContent = App.vtComponent.extend({
    name: "vds-extend-trial-content",
    props: {info: {required: !0, default: ""}},
    data: () => ({step: 1, feedback: ""}),
    methods: {
        extendTrial(t, e) {
            if (this.step = e, t.stopPropagation(), 3 == e) {
                var a = {
                    url: "admin/accountinfo",
                    params: {module: "Ondemand", mode: "extendTrial", feedback: this.feedback}
                };
                this.appStore.request("api_post", a).then(t => {
                    this.info.is_trial_extended = !0, AppStorage.set("notificationMessage", "")
                })
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [1 == step ? _c("div", {staticClass: "row p-5"}, [_c("div", {staticClass: "col-6"}, [_c("div", {
            staticStyle: {
                margin: "8px",
                "background-color": "#fff",
                "text-align": "center",
                "box-shadow": "1px 0px 8px 2px #999",
                padding: "8px"
            }
        }, [_c("img", {
            staticStyle: {width: "120px", "margin-top": "16px"},
            attrs: {src: "layouts/v8/skins/images/subscribe.png"}
        }), _v(" "), _c("h4", {
            staticStyle: {
                margin: "16px",
                "min-height": "80px"
            }
        }, [_v("I'm ready to grow my business with Vtiger")]), _v(" "), _c("div", {staticStyle: {padding: "40px"}}, [_c("a", {
            staticClass: "btn btn-primary c-pointer",
            attrs: {href: "index.php?module=Ondemand&view=Billing"}
        }, [_v(" " + _s(translate("LBL_SUBSCRIBE", "Ondemand")))])])])]), _v(" "), _c("div", {staticClass: "col-6"}, [_c("div", {
            staticStyle: {
                margin: "8px",
                "background-color": "#fff",
                "text-align": "center",
                "box-shadow": "1px 0px 8px 2px #999",
                padding: "8px"
            }
        }, [_c("img", {
            staticStyle: {width: "120px", "margin-top": "16px"},
            attrs: {src: "layouts/v8/skins/images/extend.png"}
        }), _v(" "), _c("h4", {
            staticStyle: {
                margin: "16px",
                "min-height": "80px"
            }
        }, [_v("I need more time to explore Vtiger")]), _v(" "), _c("div", {staticStyle: {padding: "40px"}}, [_c("a", {
            staticClass: "btn btn-secondary c-pointer",
            attrs: {title: translate("LBL_EXTEND_TRIAL_TOOLTIP", "Ondemand")},
            on: {
                click: function (t) {
                    return extendTrial(t, 2)
                }
            }
        }, [_v(" " + _s(translate("LBL_EXTEND_TRIAL", "Ondemand")))])])])])]) : _e(), _v(" "), 2 == step ? _c("div", {staticClass: "d-flex justify-content-center p-4"}, [_c("div", {
            staticStyle: {
                margin: "8px",
                "background-color": "#fff",
                "box-shadow": "1px 0px 8px 2px #999",
                padding: "8px 54px"
            }
        }, [_c("h2", {
            staticClass: "mb-1",
            staticStyle: {margin: "32px 0"}
        }, [_c("strong", [_v(_s(translate("LBL_EXTEND_TRIAL", "Ondemand")))])]), _v(" "), _c("h6", {staticClass: "mb-4"}, [_v(_s(translate("LBL_EXTEND_TRIAL_TOOLTIP", "Ondemand")))]), _v(" "), _c("div", [_c("h4", [_v(_s(translate("LBL_ANY_FEEDBACK", "Ondemand")))])]), _v(" "), _c("div", [_c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: feedback,
                expression: "feedback"
            }],
            staticClass: "extensionReason",
            staticStyle: {width: "100%", resize: "vertical"},
            attrs: {rows: "8"},
            domProps: {value: feedback},
            on: {
                input: function (t) {
                    t.target.composing || (feedback = t.target.value)
                }
            }
        })]), _v(" "), _c("div", {
            staticStyle: {
                "text-align": "center",
                margin: "16px"
            }
        }, [_c("a", {
            staticClass: "c-pointer", on: {
                click: function (t) {
                    step = 1
                }
            }
        }, [_c("span", {
            staticStyle: {
                display: "inline-block",
                "margin-right": "16px"
            }
        }, [_v(_s(translate("LBL_BACK")))])]), _v(" "), _c("a", {
            staticClass: "btn btn-primary text-white c-pointer",
            on: {
                click: function (t) {
                    return extendTrial(t, 3)
                }
            }
        }, [_v(_s(translate("LBL_EXTEND_TRIAL", "Ondemand")))])])])]) : _e(), _v(" "), 3 == step ? _c("div", {staticClass: "d-flex justify-content-center p-4"}, [_c("div", {staticClass: "row"}, [_c("div", {
            staticClass: "trialExndFeedbackBox",
            staticStyle: {"text-align": "center", padding: "54px"}
        }, [_c("img", {
            staticStyle: {width: "120px", "margin-top": "16px"},
            attrs: {src: "layouts/v8/skins/images/thanks_feedback.png"}
        }), _v(" "), _c("div", {staticStyle: {margin: "32px"}}, [_c("h4", [_v(_s(translate("LBL_TRIAL_EXTENDED_MSG", "Ondemand", "7")))])])])])]) : _e()])
    }
});
var Vtiger_Component_FieldEditPopover = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Validators, Vtiger_Mixin_DateUtils],
    inject: ["$validator"],
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    data() {
        return {
            keepDatePickerOpen: !0,
            showErrorMsgAbove: !0,
            widgetPositioning: {horizontal: "auto", vertical: "bottom"},
            editRecordModel: jQuery.extend(!0, Vtiger_Record_Model.getCleanInstance("Tasks"), this.recordModel),
            showPopover: !1
        }
    },
    created() {
        "due_date" == this.fieldName && this.dateConversion()
    },
    computed: {
        popoverTargetId() {
            var e = this.editRecordModel.id + "_dueDate";
            return this.$namespaceStore && (e += this.$namespaceStore), e
        }
    },
    props: {
        recordModel: {type: [Object]},
        moduleModel: {type: [Object]},
        fieldName: {type: [String]},
        dependentField: {type: [String], default: ""},
        isEditable: {type: Boolean, default: !0}
    },
    methods: {
        onPopoverShow(e) {
            this.$refs.popover._toolpop.getTipElement().classList.add("dateTimeEditPopover"), setTimeout(() => {
                jQuery(this.$refs[e]).length && jQuery(this.$refs[e].$el).find("input,textarea").focus()
            }, 100)
        }, saveFieldFromPopover(e) {
            "due_date" == this.fieldName && (Vue.set(this.recordModel, this.fieldName, this.editRecordModel.due_date), Vue.set(this.recordModel, "time_end", this.editRecordModel.time_end)), this.$validator.validate().then(t => {
                t && (this.showPopover = !1, this.$emit("vds::save::field", e, this.recordModel))
            })
        }, cancel(e) {
            this.$emit("vds::cancel::field::save", e, this.recordModel), this.showPopover = !1
        }, recalcuateDependentField() {
            let e = this.$validator.fields.find({name: this.fieldName});
            e && e.updateDependencies()
        }, dateConversion() {
            let e = {dueDateAndTime: ["due_date", "time_end"], startDateAndTime: ["date_start", "time_start"]};
            for (let i in e) {
                let d = e[i], o = this.editRecordModel[d[0]], r = this.editRecordModel[d[1]];
                if (o && !o.isUserFormat()) {
                    let e = o + " " + r, i = this.getDisplayDateTime(e);
                    if (e) {
                        var t = this.splitDateTimeBasedOnUserFormat(i);
                        let e = new String(t[0]);
                        if (e.markAsUserFormat(!0), Vue.set(this.editRecordModel, d[0], e), 12 == this.$currentUser.hour_format) {
                            let e = new String(t[1] + " " + t[2]);
                            e.markAsUserFormat(!0), Vue.set(this.editRecordModel, d[1], e)
                        } else {
                            let e = new String(t[1]);
                            e.markAsUserFormat(!0), Vue.set(this.editRecordModel, d[1], e)
                        }
                    }
                }
            }
        }
    },
    mounted() {
        this.editRecordModel.isClosed || setTimeout(() => {
            dependentField = this.dependentField;
            let e = this.$refs.popover.$refs[this.fieldName];
            Object.defineProperty(e.$refs, dependentField, {
                get: () => e.$parent.$parent.$parent.$refs[dependentField],
                set(e) {
                },
                configurable: !0,
                enumerable: !0
            }), this.recalcuateDependentField()
        }, 500), this.$watch(() => {
            let e = this.editRecordModel;
            return {recordModel: e, fieldValue: e[this.dependentField]}
        }, ({recordModel: e, fieldValue: t}) => {
            this.recalcuateDependentField()
        })
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("b-popover", {
            ref: "popover",
            attrs: {
                disabled: !isEditable,
                show: showPopover,
                target: popoverTargetId,
                placement: "top",
                triggers: "focus"
            },
            on: {
                "update:show": function (e) {
                    showPopover = e
                }, show: function (e) {
                    return onPopoverShow(fieldName)
                }
            }
        }, [_c("div", {
            staticClass: "d-flex justify-content-between",
            attrs: {slot: "title"},
            slot: "title"
        }, [_c("div", [_v(_s(translate("LBL_CHANGE") + " " + translate("Due Date")))]), _v(" "), _c("i", {
            staticClass: "fa fa-times c-pointer",
            on: {
                click: function (e) {
                    return cancel(fieldName)
                }
            }
        })]), _v(" "), editRecordModel && !editRecordModel.isClosed ? [_c("div", {staticClass: "pt-1"}, [moduleModel.isLoaded ? _c("ui-field-edit-type", {
            ref: fieldName,
            attrs: {
                showErrorMsgAbove: showErrorMsgAbove,
                keepDatePickerOpen: keepDatePickerOpen,
                field: moduleModel.getField(fieldName),
                record: editRecordModel,
                widgetPositioning: widgetPositioning
            }
        }) : _e()], 1), _v(" "), _c("div", {staticClass: "d-flex font-13 justify-content-end mb-12px mr-3 position-absolute b-0 r-0"}, [_c("div", {
            staticClass: "text-primary pr-3 c-pointer",
            on: {
                click: function (e) {
                    return cancel(fieldName)
                }
            }
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), _c("div", {
            staticClass: "text-primary c-pointer",
            on: {
                click: function (e) {
                    return saveFieldFromPopover(fieldName)
                }
            }
        }, [_v(_s(translate("LBL_SAVE")))])])] : _e()], 2)
    }
});

Vue.component("vds-filterdropdown", {
    model: {prop: "selected", event: "vds::filterdropdown::selected"},
    props: {
        filterIcon: {type: String, default: "fa fa-filter"},
        parentCheckBox: {type: Boolean, default: !1},
        VerticalScroll: {type: Boolean, default: !1},
        applyButton: {type: Boolean, default: !1},
        variant: {type: String, default: "primary"},
        options: {type: Object, mandatory: !0},
        dropdownText: {type: String, default: ""},
        separator: {type: Boolean, default: !1},
        selected: {
            type: [Array, Object], default: function () {
                return {}
            }
        },
        lazy: {type: Boolean, default: !0},
        transform: {type: Function, default: (e, t) => (t || (e = Object.keys(e)), e)},
        emptyButtonVariant: {type: String, default: "secondary"},
        showZeroCount: {type: Boolean, default: !1}
    },
    data: () => ({value: {}, count: 0}),
    watch: {
        value: {
            handler() {
                this.lazy || (this.calculateValuesAndEmit(), this.counter())
            }, deep: !0
        }, selected() {
            if (_.isArray(this.selected) && _.difference(Object.keys(this.value), this.selected).length > 0) {
                let t = {};
                for (var e of this.selected) t[e] = !0;
                this.value = t
            }
        }
    },
    mounted() {
        if (_.isArray(this.selected)) {
            let t = {};
            for (var e of this.selected) t[e] = !0;
            this.value = t
        } else this.value = jQuery.extend(!0, {}, this.selected)
    },
    methods: {
        updateSelectedList() {
            this.$emit("vds::update::selected::list")
        }, calculateValuesAndEmit() {
            let e = {}, t = !1;
            for (var o in this.value) if ("object" == typeof this.value[o]) {
                for (var n in t = !0, e[o] = {}, this.value[o]) this.value[o][n] && (e[o][n] = this.value[o][n]);
                _.isEmpty(e[o]) && delete e[o]
            } else this.value[o] && (e[o] = this.value[o]);
            e = this.transform(e, t), _.isEqual(this.selected, e) || this.$emit("vds::filterdropdown::selected", e)
        }, counter() {
            this.count = 0;
            for (let e in this.value) if ("object" == typeof this.value[e]) for (let t in this.value[e]) !0 === this.value[e][t] && this.count++; else !0 === this.value[e] && this.count++
        }
    },
    render(h) {
        let vm = this;
        getCheckbox = function (e, t = "", o = "") {
            var n = "" != o ? (vm.value[o] = vm.value[o] || {}, vm.value[o][t]) : vm.value[t];
            n || (n = !1);
            let s = e + "_" + n.toString();
            return vm.value && !Object.keys(vm.value).includes(t) && (s += "_" + Math.random()), h("div", {class: ["d-flex", "w-100"]}, [h("span", {class: ["pr-1", "w-100"]}, [h("vds-checkbox", {
                key: s,
                attrs: {status: "" != o ? (vm.value[o] = vm.value[o] || {}, vm.value[o][t]) : vm.value[t], label: e},
                on: {
                    change(e) {
                        o ? (vm.value[o] = vm.value[o] || {}, vm.value[o][t] = e) : Vue.set(vm.value, t, e), vm.$root.$once("bv::dropdown::hide", (function (e) {
                            e.preventDefault()
                        }))
                    }
                }
            })]), h("span", {class: ["pl-1"]})])
        }, getSwitchCheckbox = function (e, t = "", o = "", n) {
            return h("div", {class: ["d-flex", "w-100", "justify-content-between", "align-items-center"]}, [h("vds-switch", {
                props: {
                    status: "" != o ? (vm.value[o] = vm.value[o] || {}, vm.value[o][t]) : vm.value[t],
                    label: e
                }, on: {
                    input(e) {
                        o ? (vm.value[o] = vm.value[o] || {}, vm.value[o][t] = e) : Vue.set(vm.value, t, e), vm.$root.$once("bv::dropdown::hide", (function (e) {
                            e.preventDefault()
                        }))
                    }
                }
            })])
        };
        let parentCheckBoxHandler = (parentKey, childrens) => {
            let parentCheckboxGetFn = "()=>{with(this){ return ",
                parentCheckboxSetFn = "(parentCheckboxValue)=>{with(this){";
            for (var key in childrens) parentCheckboxGetFn += `this['${parentKey}']['${key}']&&`, parentCheckboxSetFn += `this['${parentKey}']['${key}'] = parentCheckboxValue;`;
            parentCheckboxGetFn = parentCheckboxGetFn.slice(0, -2), parentCheckboxGetFn += "}}", parentCheckboxSetFn += "}}", Object.defineProperty(vm.value, "_" + parentKey, {
                configurable: !0,
                get() {
                    return eval(parentCheckboxGetFn)()
                },
                set(value) {
                    eval(parentCheckboxSetFn)(value)
                }
            })
        }, dropdownItems = [];
        for (var optionKey in this.options) {
            let e = {}, t = !1, o = optionInfo = this.options[optionKey], n = "";
            if ("object" == typeof o && (e = o.children, o = o.label, n = optionInfo.optGroupLabel, t = !0), t) for (var key in _.isEmpty(this.value[optionKey]) && Vue.set(this.value, optionKey, {}), e) _.isUndefined(this.value[optionKey][key]) && Vue.set(this.value[optionKey], key, !1);
            let s = optionKey;
            t && (s = "_" + optionKey, parentCheckBoxHandler(optionKey, e));
            let a = "";
            n && (a = h("b-dropdown-header", {class: ["d-flex", "w-100", "pl-2", "ml-1"]}, [h("span", n.toUpperCase())]));
            let l = h("b-dropdown-item", {
                attrs: {href: "javascript:void(0)"},
                class: ["d-flex", "w-100", "py-2"]
            }, [this.parentCheckBox ? getCheckbox(o, s) : getSwitchCheckbox(o, s, "", t)]);
            if (n && a && dropdownItems.push(a), dropdownItems.push(l), t) {
                for (var key in childrenComponents = [], e) childrenComponents.push(h("b-dropdown-item", {
                    class: ["filterDropdown", "w-50", "py-2", "px-3", "dropdown"],
                    attrs: {href: "javascript:void(0)"}
                }, [getCheckbox(e[key], key, optionKey)]));
                let t = h("div", {class: ["d-flex", "flex-wrap"]}, childrenComponents);
                dropdownItems.push(t)
            }
            this.separator && dropdownItems.push(h("b-dropdown-divider", {class: ["m-0"]}))
        }
        if (this.applyButton && _.size(this.options)) {
            var applyButton = h("button", {
                class: "btn btn-primary btn-sm mb-2",
                attrs: {type: "button"},
                on: {click: this.updateSelectedList}
            }, [this.translate("LBL_APPLY", "EmailCampaigns")]);
            dropdownItems.push(h("b-dropdown-item", {class: ["d-flex", "justify-content-center"]}, [applyButton]))
        }
        if (this.separator && dropdownItems.pop(), this.count) return dropdownItems.push(h("div", {
            slot: "button-content",
            class: ["d-flex", "justify-content-around", "align-items-center"]
        }, [h("i", {class: this.filterIcon}), h("span", {
            class: ["px-2"],
            domProps: {innerHTML: this.dropdownText}
        }), h("div", {class: ["filterCountBadge", "d-flex", "align-items-center", "justify-content-center", "text-primary"]}, this.count), h("i", {class: ["fa fa-caret-down", "pl-2"]})])), h("b-dropdown", {
            attrs: {right: !0},
            props: {variant: this.variant, "no-caret": !0, "menu-class": "shadow-sm"},
            on: {hidden: this.calculateValuesAndEmit},
            class: [this.VerticalScroll ? "scrollableDropdown" : ""]
        }, dropdownItems);
        var countEle = this.showZeroCount ? h("div", {class: ["filterCountBadge", "d-flex", "align-items-center", "justify-content-center", "text-primary", "mr-2"]}, this.count) : "";
        return dropdownItems.push(h("div", {
            slot: "button-content",
            class: ["d-flex", "justify-content-around", "align-items-center"]
        }, [h("i", {class: this.filterIcon}), h("span", {
            class: ["px-2"],
            domProps: {innerHTML: this.dropdownText}
        }), [countEle], h("i", {class: ["fa fa-caret-down"]})])), h("b-dropdown", {
            attrs: {right: !0},
            props: {variant: this.emptyButtonVariant, "no-caret": !0, "menu-class": "shadow-sm"},
            class: [this.VerticalScroll ? "scrollableDropdown" : ""]
        }, dropdownItems)
    }
});
var Vtiger_Component_Followers = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_UsersUtils], render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "recordFollowersModal",
                "hide-footer": !0,
                "header-class": "bgLtGrey px-4",
                "body-class": "px-4"
            }
        }, [_c("div", {
            staticClass: "d-flex flex-row w-100 align-items-center",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("h5", {staticClass: "flex-grow-1 mb-0"}, [_v("\n                    " + _s(translate("LBL_FOLLOWERS")) + "\n                ")]), _v(" "), _c("button", {
            staticClass: "btn py-1 px-2",
            class: {"btn-primary": !following, "btn-warning": following},
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return toggleStatus()
                }
            }
        }, [_c("i", {staticClass: "far fa-eye pr-1"}), _v(" "), following ? _c("span", [_v(_s(translate("LBL_FOLLOWING")))]) : _c("span", [_v(_s(translate("LBL_FOLLOW")))])]), _v(" "), _c("button", {
            staticClass: "close",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "recordFollowersModal")
                }
            }
        }, [_v("×")])]), _v(" "), followers.length ? _c("ul", {staticClass: "list-unstyled mb-0"}, _l(followers, (function (t) {
            return _c("li", {staticClass: "p-2 d-flex align-items-center"}, [t.imagename[0] ? _c("img", {
                staticClass: "img-fluid border circle-icon circle-icon-lg p-0",
                attrs: {src: t.imagename[0].url}
            }) : _c("div", {
                staticClass: "text-capitalize  text-white circle-icon circle-icon-lg border-grey-6 p-0",
                style: {background: getColor(getLabel(t))},
                attrs: {"aria-hidden": "true"}
            }, [_c("div", {
                staticClass: "h4",
                staticStyle: {"margin-top": "10px"}
            }, [_v(_s(getLabel(t).substring(0, 2)))])]), _v(" "), _c("span", {staticClass: "p-2"}, [_v(_s(getLabel(t)))])])
        })), 0) : _c("div", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])])
    }, props: {
        record: {
            default: () => {
                BaseModel.getModuleSpecificModel(this.$module, "Record", {})
            }
        }
    }, data: () => ({followers: []}), computed: {
        following: {
            get() {
                let t = this.record.getRawValue("starred");
                return 1 == t || 1 == t
            }, set(t) {
                this.record.set("starred", t)
            }
        }
    }, created() {
        this.getFollowers()
    }, methods: {
        getFollowers() {
            this.appStore.request("api_get", {
                url: "records/follow",
                params: {module: this.$module, id: this.record.getId()},
                key: this.$id + "_record_followers"
            }).then(t => {
                t.length > 0 ? this.retrieveRecords(t, "Users").then(t => this.followers = t) : this.followers = {}
            })
        }, getLabel: t => `${t.first_name} ${t.last_name}`.trim(), toggleStatus() {
            let t = {module: this.$module, id: this.record.getId()}, e = this.following ? "delete" : "put";
            this.appStore.request("api_" + e, {url: "records/follow", params: t}).then(t => {
                this.following = !this.following, this.getFollowers()
            })
        }, getColor: t => VTHelper.getColorCode(t)
    }
});
var Vtiger_Component_GlobalSearchAdvanceFilter = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Filter],
    components: {"vds-filter-conditions": App.loadComponent("FilterConditions")},
    provide: function () {
        return {
            goToStep: function () {
            }, validateAndSaveFilter: function () {
            }, saveFilter: function () {
            }
        }
    },
    props: {module: {type: String}},
    data() {
        return {filterDetails: new Vtiger_Filter_Model({entitytype: this.module, conditions: {}})}
    },
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }, getFields() {
            if (this.moduleModel) return this.moduleModel.fields
        }
    },
    watch: {
        module(e, t) {
            e && (this.$_moduleModel_init(e), this.filterDetails = new Vtiger_Filter_Model({
                entitytype: e,
                conditions: {}
            }))
        }, filterDetails: {
            handler(e) {
                this.$emit("vds::emit::advanced::criteria::conditions", e)
            }, deep: !0
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex w-100 flex-row mb-2 my-2 align-items-center"}, [_c("div", {staticClass: "label col-3 mr-2 font-weight-bold"}, [_v("\n                        " + _s(translate("LBL_CONDITIONS")) + "\n                    ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("vds-filter-conditions", {
            attrs: {
                "filter-details": filterDetails,
                "show-footer": !1,
                "filter-enabled-fields": getFilterEnabledModuleFieldsWithMetricFields
            }
        })], 1)])
    }
});
var Vtiger_Component_GlobalSearchBasicCard = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_Record, Vtiger_Mixin_ShowPreview],
    props: {recordInfo: {type: [Object, Array]}, listType: {type: String}},
    data: () => ({userNamesArray: []}),
    mounted() {
        "Calendar" == this.recordInfo.module && (this.recordInfo.module = "Tasks")
    },
    methods: {
        loadDetailView() {
            if ("lists" == this.listType) {
                let e = this.getListViewUrl(this.recordInfo.module) + "&viewtype=List&filterid=" + this.recordInfo.id;
                this.redirectUrl(e, !1, "_blank")
            } else this.openRecord(this.recordInfo.id, this.recordInfo.module)
        }, getRecordLabel() {
            let e = "", s = this.recordInfo.name, t = this.recordInfo.module;
            return e = "lists" == this.listType && "All" == s ? this.translate(s, t) + " " + this.translate(t, t) : this.recordInfo.label ? VTHelper.getDecodedValue(this.recordInfo.label) : VTHelper.getDecodedValue(this.recordInfo.name), e
        }, getAccessedTime() {
            if (this.recordInfo.accessedon) return this.recordInfo.accessedon
        }, sharedListUsers() {
            if ("lists" != this.listType || "lists" == this.listType && "Reports" == this.recordInfo.module) return "";
            let e = this.recordInfo.recordModel;
            if (e && e.hasOwnProperty("share")) {
                let r = e.share.Users;
                var s = "Users:" + this.$currentUser.id;
                if (r) {
                    var t = Object.keys(r);
                    return t && t.includes(s) ? t.length - 1 : t.length
                }
            }
        }, getListOwnerName() {
            let e = "";
            if ("lists" != this.listType || "lists" == this.listType && "Reports" == this.recordInfo.module) return "";
            let s = this.recordInfo.recordModel.data.userid;
            return s && this.userNamesArray && 1 == Object.keys(this.userNamesArray).includes(s) ? e = this.userNamesArray[s] : s && this.retrieveRecord(s, "Users").then(t => {
                this.userNamesArray[s] = t.fullName, e = t.fullName
            }), e
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex flex-column rounded border-dark mb-3 c-pointer p-3 bg-white mr-3 GlobalSearchBoxShadow",
            on: {
                click: function (e) {
                    return loadDetailView()
                }
            }
        }, [$isLoading ? _e() : [_c("div", {staticClass: "d-flex justify-content-between"}, [_c("div", {staticClass: "f-600 textOverflowEllipsis w-50"}, [_v(_s(getRecordLabel()))]), _v(" "), getAccessedTime() ? _c("div", {staticClass: "text-muted textOverflowEllipsis w-50 d-flex justify-content-end"}, [_c("vds-date-diff-string", {attrs: {utcTime: getAccessedTime()}})], 1) : _e()]), _v(" "), listType && "lists" == listType ? _c("div", {staticClass: "d-flex justify-content-between mt-3 py-1 align-items-center defaultLightFontColor"}, ["Reports" != recordInfo.module ? _c("span", {staticClass: "mr-2"}, [_c("i", {staticClass: "fa fa-user mr-2"}), _v(" " + _s(getListOwnerName()) + " ")]) : _e(), _v(" "), "Reports" != recordInfo.module ? _c("span", {staticClass: "mr-2"}, [_c("i", {staticClass: "fa fa-users mr-2"}), _v(" + " + _s(sharedListUsers()) + " People")]) : _e(), _v(" "), _c("span", {
            staticClass: "h5 circle-icon border-0 mb-0 user-image-sm ml-auto",
            staticStyle: {"background-color": "#03a588"}
        }, [_c("i", {
            staticClass: "h5 text-white m-0",
            class: getModuleIconClass(recordInfo.module)
        })])]) : _c("div", {staticClass: "d-flex justify-content-end mt-3 py-1"}, [_c("span", {
            staticClass: "h5 circle-icon border-0 mb-0 user-image-sm",
            staticStyle: {"background-color": "#03a588"}
        }, [_c("i", {
            staticClass: "h5 text-white m-0",
            class: getModuleIconClass(recordInfo.module)
        })])])], _v(" "), $isLoading ? [_c("div", {staticClass: "w-15 pl-2 pt-2 mt-1"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "d-flex pl-2"}, [_c("div", {staticClass: "w-15 pr-4"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "w-15 pr-4"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "w-15"}, [_c("vds-value-progress")], 1)]), _v(" "), _c("div", {staticClass: "w-15 pl-2 pb-2 mb-1"}, [_c("vds-value-progress")], 1)] : _e()], 2)
    }
});
var Vtiger_Component_GlobalSearchFilters = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    components: {
        "vds-global-search-text-filter": App.loadComponent("GlobalSearchTextFilter"),
        "vds-global-search-advance-filter": App.loadComponent("GlobalSearchAdvanceFilter")
    },
    props: {selectedModule: {type: String}, entityModules: {type: Array}, title: {type: String}},
    data() {
        return {
            searchModule: this.selectedModule,
            textSearchConditions: "",
            advancedFilterConditions: "",
            textSearchFilterRecords: !1
        }
    },
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }, getHeaderAndSummaryFields() {
            var e = this.moduleModel;
            return headerAndSummaryFields = e.getSummaryAndHeaderFields(), Object.keys(headerAndSummaryFields).length > 0 ? Object.keys(headerAndSummaryFields) : []
        }
    },
    watch: {
        searchModule(e, t) {
            e && "all" != e && this.$_moduleModel_init(e)
        }
    },
    methods: {
        updateTextSearchConditions(e) {
            this.textSearchConditions = e
        }, updateAdvancedSearchConditions(e) {
            this.advancedFilterConditions = e
        }, closeSearchFilterModal() {
            this.$root.$emit("bv::hide::modal", "Global_Search_Filters_Modal")
        }, generateSearchQuery() {
            let e = this.advancedFilterConditions.advancedfilter;
            if (!_.isUndefined(e)) {
                var t = [];
                t[0] = [];
                for (let a in e[1].columns) {
                    let s = e[1].columns[a];
                    s.columnname && t[0].push([s.columnname, s.comparator, s.value])
                }
                if (e[2].columns.length) {
                    t[1] = [];
                    for (let a in e[2].columns) {
                        let s = e[2].columns[a];
                        s.columnname && t[1].push([s.columnname, s.comparator, s.value])
                    }
                }
                var a = new SearchParams(t);
                return JSON.stringify(a.data)
            }
        }, getMatchingRecordsWithText() {
            var e = {}, t = {};
            return t.anyword = this.textSearchConditions.anyword, t.exact = this.textSearchConditions.exact, t.allwords = this.textSearchConditions.allwords, new Promise((a, s) => {
                params = {
                    module: this.searchModule,
                    pagelimit: 50,
                    searchParams: t
                }, this.appStore.request("api_get", {url: "/records/globalsearch", params: params}).then(t => {
                    a(e = t)
                }, t => {
                    this.showErrorNotification(t), a(e)
                })
            })
        }, getAdvancedSearchResults() {
            var e = {}, t = this.searchModule, a = this.generateSearchQuery();
            var s = {
                url: "records",
                params: {module: t, pagelimit: 500, q: a, extrafields: this.getHeaderAndSummaryFields},
                key: "global_search_advanced_condition_search"
            };
            return new Promise((a, r) => {
                this.appStore.request("api_get", s).then(s => {
                    s && s.length > 0 && (e[t] = {records: s, count: s.length}), a(e)
                }, t => {
                    this.showErrorNotification(t), a(e)
                })
            })
        }, searchWithCondtions() {
            this.closeSearchFilterModal(), this.appStore.set({key: "loading_advanceSearch", data: !0});
            let e = {};
            "all" === this.searchModule ? (e.type = "text", e.conditions = this.textSearchConditions, this.getMatchingRecordsWithText().then(t => {
                this.$emit("vds::global::search::filter::result", t, e), 0 === _.size(t) ? this.textSearchFilterRecords = !0 : this.textSearchFilterRecords = !1
            })) : (e.type = "advancedSearch", this.getAdvancedSearchResults().then(t => {
                this.$emit("vds::global::search::filter::result", t, e), this.closeSearchFilterModal()
            }))
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "Global_Search_Filters_Modal",
                size: "xxl",
                lazy: !0,
                "hide-footer": "",
                "header-class": "bgLtGrey",
                "body-class": "globalSearchFiltersModal"
            }
        }, [_c("div", {
            staticClass: "w-100 d-flex align-items-center mx-2",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("div", {staticClass: "ml-2 mr-3"}, [_c("span", {
            on: {
                click: function (e) {
                    return closeSearchFilterModal()
                }
            }
        }, [_c("i", {staticClass: "fa fa-arrow-left h4 c-pointer mb-0"})])]), _v(" "), _c("div", {staticClass: "d-flex flex-grow-1 mr-2 h4 mb-0"}, [_v("\n                            " + _s(title) + "\n                        ")]), _v(" "), _c("div", {staticClass: "ml-2 mr-3"}, [_c("i", {
            staticClass: "fa fa-times h4 float-right c-pointer mb-0",
            on: {
                click: function (e) {
                    return closeSearchFilterModal()
                }
            }
        })])]), _v(" "), _c("div", [textSearchFilterRecords ? [_c("div", {staticClass: "d-flex justify-content-center"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])] : [_c("div", {staticClass: "d-flex flex-row mb-2 my-2"}, [_c("div", {staticClass: "label col-3 mr-2 font-weight-bold"}, [_v("\n                                    " + _s(translate("LBL_SEARCH_IN")) + "\n                                ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("v-select2", {
            staticClass: "w-25",
            staticStyle: {width: "200px"},
            attrs: {options: entityModules, emptyOption: !1},
            model: {
                value: searchModule, callback: function (e) {
                    searchModule = e
                }, expression: "searchModule"
            }
        })], 1)]), _v(" "), searchModule && "all" == searchModule ? _c("div", {staticClass: "d-flex mb-2 my-2"}, [_c("vds-global-search-text-filter", {on: {"vds::emit::text::criteria::conditions": updateTextSearchConditions}})], 1) : _e(), _v(" "), searchModule && "all" != searchModule ? _c("div", {staticClass: "d-flex mb-2 my-2"}, [_c("vds-global-search-advance-filter", {
            attrs: {module: searchModule},
            on: {"vds::emit::advanced::criteria::conditions": updateAdvancedSearchConditions}
        })], 1) : _e(), _v(" "), _c("div", {staticClass: "mb-2 d-flex justify-content-center"}, [_c("button", {
            staticClass: "btn btn-primary",
            on: {
                click: function (e) {
                    return searchWithCondtions()
                }
            }
        }, [_v(" Search ")])])]], 2)])
    }
});
var Vtiger_Component_GlobalSearchModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleCollection, Vtiger_Mixin_Record],
    components: {
        "vds-detailed-global-search": App.loadComponent("DetailedGlobalSearch"),
        "vds-recently-accessed-records": App.loadComponent("RecentlyAccessedRecords"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard")
    },
    props: {modalId: {type: String, default: "Global_Search_Display_Modal"}},
    data() {
        return {
            entityModules: [],
            searchString: "",
            selectedModule: "all",
            timer: "",
            matchingRecords: {},
            pageLimit: 10,
            range: 0,
            nextPageExists: !0,
            filterCriteria: "",
            loading: !1,
            singleLoaderOnScroll: !1,
            recordsFound: !0,
            noRecordsFoundLabel: "",
            showBackButtonInErrorState: !1,
            advancedSearchModule: "",
            advancedSearchTitle: this.translate("LBL_ADVANCE_SEARCH") + " " + this.translate("LBL_SEARCH")
        }
    },
    computed: {
        combinedSearchRecords() {
            var e = [], t = this.matchingRecords;
            if (!t) return e;
            for (var s in t) {
                var a = t[s].records;
                if (a) for (var r in a) a[r].module = s, e.push(a[r])
            }
            return e
        }
    },
    watch: {
        searchString: function (e, t) {
            t && !e && this.backToRecentRecords()
        }, selectedModule: {
            handler(e, t) {
                e && e != t && (this.range = 0, this.nextPageExists = !0, this.matchingRecords && Object.keys(this.matchingRecords).length < 1 && (this.matchingRecords = {}))
            }
        }, "$store.state.loading_advanceSearch"(e) {
            e && (this.loading = e, this.setEmptyRecords())
        }
    },
    created() {
        this.init()
    },
    mounted() {
        this.$on("vds::global::search::input::cleared", (function () {
            this.matchingRecords = {}
        })), this.$off("vds::global::search::filter::result"), this.$on("vds::global::search::filter::result", (function (e, t) {
            if (_.size(e) <= 0) this.recordsFound = !1, this.noRecordsFoundLabel = this.translate("LBL_NO_RECORDS_FOUND_FOR_ENTERED_NAME") + ". " + this.translate("LBL_WOULD_YOU_LIKE_TO_TRY_AGAIN"); else {
                if (this.recordsFound = !0, this.matchingRecords = e, t && "advancedSearch" == t.type && this.matchingRecords && 1 == Object.keys(this.matchingRecords).length) {
                    let e = Object.keys(this.matchingRecords)[0];
                    this.selectedModule = e, this.advancedSearchModule = e
                }
                this.filterCriteria = t.conditions
            }
            this.loading = !1, this.appStore.set({key: "loading_advanceSearch", data: !1})
        })), this.$root.$off("vds::load::more::search::results"), this.$root.$on("vds::load::more::search::results", this.loadMoreRecords)
    },
    methods: {
        init() {
            this.getAllModules()
        }, getAllModules() {
            this.getSearchableModules().then(e => {
                e.unshift({label: "All Modules", value: "all"}), this.entityModules = e
            })
        }, getSearchableModules() {
            return new Promise((e, t) => {
                this.$store.state._searchmodules ? e(this.$store.state._searchmodules.map(e => ({
                    value: e,
                    label: this.translate(e, e)
                }))) : this.appStore.request("api_get", {url: "searchmodules", key: "_searchmodules"}).then(t => {
                    let s = t.map(e => ({value: e, label: this.translate(e, e)}));
                    e(s)
                })
            })
        }, getSearchRecords() {
            this.loading = !0;
            let e = this.selectedModule;
            this.filterCriteria = "", params = {
                module: e,
                value: this.searchString
            }, "all" != e ? (params.pagelimit = this.pageLimit, params.range = this.range) : params.pagelimit = this.entityModules.length, this.setEmptyRecords(), this.fetchRecordsFromSolar(params).then(t => {
                if ("all" != e && t && t.length > 0) {
                    this.nextPageExists = t[e].isNextPageExists, 0 == t[e].records.length && 1 == this.nextPageExists && (this.range = this.range + this.pageLimit, params.range = this.range, this.getSearchRecords())
                }
                this.matchingRecords = {}, _.isEmpty(t) ? (this.recordsFound = !1, this.noRecordsFoundLabel = this.translate("LBL_NO_RECORDS_FOUND_FOR_ENTERED_NAME") + ". " + this.translate("LBL_WOULD_YOU_LIKE_TO_TRY_AGAIN"), this.showBackButtonInErrorState = !1) : (this.recordsFound = !0, this.matchingRecords = t), this.loading = !1, App.root.$emit("vds::global::search::record::search")
            }, e => {
                e && "Search service down" == e.message ? (this.showBackButtonInErrorState = !0, this.noRecordsFoundLabel = this.translate("LBL_GLOBAL_SEARCH_DOWN"), this.recordsFound = !1) : this.showErrorNotification(e.message), this.loading = !1, this.matchingRecords = {}
            })
        }, showAdvancedSearch() {
            this.showModal({
                componentName: "GlobalSearchFilters",
                componentData: {
                    selectedModule: this.selectedModule,
                    entityModules: this.entityModules,
                    title: this.advancedSearchTitle
                }
            })
        }, fetchRecordsFromSolar(e) {
            return new Promise((t, s) => {
                this.appStore.request("api_get", {
                    url: "/records/globalsearch",
                    params: e,
                    key: "globalrecords",
                    abortPrev: !0
                }).then(e => {
                    t(e)
                }, e => {
                    s({message: e.message})
                })
            })
        }, loadMoreRecords() {
            if (this.singleLoaderOnScroll) return;
            if (!this.searchString && !this.filterCriteria) return;
            this.range = this.range + this.pageLimit;
            let e = this.selectedModule;
            if (params = {module: e, value: this.searchString}, "all" != this.selectedModule && this.nextPageExists) {
                if (this.filterCriteria) {
                    delete params.value;
                    var t = {};
                    t.anyword = this.filterCriteria.anyword, t.exact = this.filterCriteria.exact, t.allwords = this.filterCriteria.allwords, params.searchParams = t
                }
                params.pagelimit = this.pageLimit, params.range = this.range, this.singleLoaderOnScroll = !0, this.fetchRecordsFromSolar(params).then(t => {
                    if (t && t[e]) {
                        this.nextPageExists = t[e].isNextPageExists;
                        let s = this.matchingRecords[e].records, a = t[e].records;
                        0 == a.length && 1 == this.nextPageExists && this.loadMoreRecords(), Vue.set(this.matchingRecords[e], "records", _.union(s, a))
                    } else t && 0 == t.length && (this.nextPageExists = !1);
                    this.loading = !1, this.singleLoaderOnScroll = !1
                }, e => {
                    this.loading = !1, this.singleLoaderOnScroll = !1, this.showErrorNotification(e.message)
                })
            }
        }, setEmptyRecords() {
            this.loading = !0;
            for (var e = 0, t = []; e < 3;) {
                let s = {
                    assigned_user_id: {id: this.$currentUser.id},
                    related_to: {id: 0},
                    contact_id: {id: 0, label: ""},
                    loaded: !1
                };
                t.push(BaseModel.getModuleSpecificModel("Contacts", "Record", s)), e++
            }
            let s = {Contacts: {records: t}};
            this.matchingRecords = s
        }, backToRecentRecords() {
            this.searchString = "", this.recordsFound = !0, this.matchingRecords = {}
        }, clearSearchString() {
            this.searchString = ""
        }, searchForResult() {
            this.getSearchRecords()
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: modalId,
                size: "xxl",
                lazy: !0,
                "hide-footer": "",
                "header-class": "p-0",
                "body-class": "bg-grey-hue-8 p-0 rounded-bottom"
            }
        }, [_c("div", {
            staticClass: "w-100 d-flex align-items-center bgLtGrey p-3 px-4 rounded-top",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("div", {
            staticClass: "mr-3 border bg-success px-2 d-flex height-40px align-items-center",
            staticStyle: {"border-radius": "0.25em"},
            attrs: {title: advancedSearchTitle}
        }, [_c("span", {staticClass: "mx-2 text-white"}, [_c("i", {
            staticClass: "fa fa-advancedsearch h5 mb-0 c-pointer",
            on: {
                click: function (e) {
                    return showAdvancedSearch()
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "globalSearchModulesDropDown"}, [_c("v-select2", {
            staticClass: "p-3",
            staticStyle: {width: "200px"},
            attrs: {name: selectedModule, options: entityModules, emptyOption: !1},
            model: {
                value: selectedModule, callback: function (e) {
                    selectedModule = e
                }, expression: "selectedModule"
            }
        })], 1), _v(" "), _c("div", {staticClass: "col height-40px"}, [_c("vds-input-clear", {
            attrs: {
                inputvalue: searchString,
                placeholder: translate("LBL_TYPE_SEARCH_TEXT_ENTER"),
                showWarningText: !recordsFound
            }, on: {
                "update:inputvalue": function (e) {
                    searchString = e
                }, "vds::post::input:clear": clearSearchString, "vt-onenter": searchForResult
            }
        })], 1), _v(" "), _c("div", {staticClass: "mx-2"}, [_c("i", {
            staticClass: "fa fa-times h5 mb-0 float-right c-pointer",
            on: {
                click: function (e) {
                    return $root.$emit("bv::hide::modal", modalId)
                }
            }
        })])]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: recordsFound,
                expression: "recordsFound"
            }]
        }, [_c("div", {staticClass: "d-flex"}, [_c("vds-detailed-global-search", {
            attrs: {
                "single-loader-on-scroll": singleLoaderOnScroll,
                "combined-search-records": combinedSearchRecords,
                "matching-records": matchingRecords,
                "selected-module": selectedModule,
                advancedSearchModule: advancedSearchModule
            }, on: {
                "update:singleLoaderOnScroll": function (e) {
                    singleLoaderOnScroll = e
                }, "update:single-loader-on-scroll": function (e) {
                    singleLoaderOnScroll = e
                }, "update:selectedModule": function (e) {
                    selectedModule = e
                }, "update:selected-module": function (e) {
                    selectedModule = e
                }
            }
        })], 1), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !Object.keys(matchingRecords).length,
                expression: "!Object.keys(matchingRecords).length"
            }], staticClass: "container-fluid"
        }, [_c("vds-recently-accessed-records")], 1)]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !recordsFound,
                expression: "!recordsFound"
            }], staticClass: "my-8 py-5"
        }, [_c("vds-empty-state-card", {
            attrs: {
                illustrationName: "global_search_empty_state.svg",
                showAddButton: showBackButtonInErrorState,
                emptyLabel: noRecordsFoundLabel
            }
        }, [showBackButtonInErrorState ? _c("div", {
            staticClass: "text-center",
            attrs: {slot: "empty-action"},
            slot: "empty-action"
        }, [_c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button"},
            on: {click: backToRecentRecords}
        }, [_v("\n                                    " + _s(translate("LBL_BACK")))])]) : _e()])], 1)])
    }
});
var Vtiger_Component_GlobalSearchResultNavBar = App.vtComponent.extend({
    props: {
        modules: {type: Object, default: {}},
        selectedModule: {type: String, default: "all"},
        totalRecordsCount: {type: Number}
    }, data() {
        return {allModulesList: Object.keys(this.modules), tabIndex: 0}
    }, computed: {
        displayableModules() {
            var t = this.allModulesList, e = t.indexOf("all");
            return -1 !== e && t.splice(e, 1), t.splice(0, 0, "all"), t.slice(0, 5)
        }, moreSearchModules() {
            var t = this.allModulesList;
            return t.slice(5, t.length)
        }
    }, methods: {
        selectModule(t, e = !1) {
            if (-1 == this.displayableModules.indexOf(t)) {
                let e = this.allModulesList.indexOf(t);
                this.allModulesList.splice(e, 1), this.allModulesList.splice(4, 0, t)
            }
            e && (this.tabIndex = 4), this.$emit("update:selectedModule", t), this.$emit("vds::show::module::wise::result", t)
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex globalSearchResultTabs align-items-center w-100"}, [_c("div", {staticClass: "globalSearchResultCount"}, [_c("p", {staticClass: "mb-0 h5"}, [_v(_s(translate("LBL_SEARCH_RESULTS")) + " (" + _s(totalRecordsCount) + ")")])]), _v(" "), _c("b-tabs", {
            staticClass: "navBarHeader",
            attrs: {"no-key-nav": !0},
            model: {
                value: tabIndex, callback: function (t) {
                    tabIndex = t
                }, expression: "tabIndex"
            }
        }, [_l(displayableModules, (function (t, e) {
            return _c("b-tab", {
                key: t,
                staticClass: "mx-1",
                attrs: {active: selectedModule == t},
                on: {
                    click: function (e) {
                        return selectModule(t)
                    }
                }
            }, [_c("template", {slot: "title"}, [_c("div", {staticClass: "testwew"}, ["all" == t ? _c("span", [_v(_s(translate("LBL_ALL_RESULT", "TextSearch")))]) : _c("span", [_c("span", {staticClass: "mr-1"}, [_v(_s(translate(t, t)))]), _v(" "), _c("span", {staticClass: "badge badge-pill text-white"}, [_v(_s(modules[t]))])])])])], 2)
        })), _v(" "), moreSearchModules.length > 0 ? _c("b-tab", [_c("template", {slot: "title"}, [_c("b-dropdown", {
            attrs: {
                size: "sm",
                offset: "-117,10",
                variant: "link",
                "toggle-class": "text-decoration-none"
            }
        }, [_c("span", {
            attrs: {slot: "button-content"}, on: {
                click: function (t) {
                    tabIndex = 5
                }
            }, slot: "button-content"
        }, [_v(_s(translate("LBL_MORE")))]), _v(" "), _l(moreSearchModules, (function (t) {
            return _c("b-dropdown-item", {
                key: t, staticClass: "px-2", on: {
                    click: function (e) {
                        return selectModule(t, !0)
                    }
                }
            }, [_c("span", {staticClass: "d-flex justify-content-between"}, [_c("span", {staticClass: "mr-2"}, [_v(_s(translate(t, t)))]), _v(" "), _c("span", {staticClass: "badge badge-pill text-white ml-2"}, [_v(_s(modules[t]))])])])
        }))], 2)], 1)], 2) : _e()], 2)], 1)
    }
});
var Vtiger_Component_GlobalSearchTextFilter = App.vtComponent.extend({
    data: () => ({textCriteria: {allwords: "", exact: "", anyword: ""}}), watch: {
        textCriteria: {
            handler() {
                this.$emit("vds::emit::text::criteria::conditions", this.textCriteria)
            }, deep: !0
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-column flex-grow-1"}, [_c("div", {staticClass: "d-flex flex-row text-align-center my-2"}, [_c("div", {staticClass: "label col-3 mr-2 font-weight-bold"}, [_v("\n                            " + _s(translate("LBL_HAS_ALL_THESE_WORDS")) + "\n                        ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: textCriteria.allwords,
                expression: "textCriteria.allwords"
            }],
            staticClass: "form-control",
            attrs: {type: "text"},
            domProps: {value: textCriteria.allwords},
            on: {
                input: function (t) {
                    t.target.composing || $set(textCriteria, "allwords", t.target.value)
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "d-flex flex-row text-align-center my-2"}, [_c("div", {staticClass: "label col-3 mr-2 font-weight-bold"}, [_v("\n                            " + _s(translate("LBL_HAS_EXACT_WORDS")) + "\n                        ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: textCriteria.exact,
                expression: "textCriteria.exact"
            }],
            staticClass: "form-control",
            attrs: {type: "text"},
            domProps: {value: textCriteria.exact},
            on: {
                input: function (t) {
                    t.target.composing || $set(textCriteria, "exact", t.target.value)
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "d-flex flex-row text-align-center my-2"}, [_c("div", {staticClass: "label col-3 mr-2 font-weight-bold"}, [_v("\n                            " + _s(translate("LBL_HAS_ANY_OF_THESE_WORDS")) + "\n                        ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: textCriteria.anyword,
                expression: "textCriteria.anyword"
            }],
            staticClass: "form-control",
            attrs: {type: "text"},
            domProps: {value: textCriteria.anyword},
            on: {
                input: function (t) {
                    t.target.composing || $set(textCriteria, "anyword", t.target.value)
                }
            }
        })])])])
    }
});
var Vtiger_Component_Header = App.vtComponent.extend({
    name: "vds-header",
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixins_UnimplementedModulesList, Vtiger_Mixin_Module],
    props: {selectedModule: {default: App.module()}, parentModule: {}},
    components: {"vds-empty-state-card": App.loadComponent("EmptyStateCard")},
    data() {
        return {
            selectedApp: "",
            selectedModules: [],
            apps: [],
            specialModules: ["Contacts", "Leads", "SMSNotifier", "PhoneCalls", "Olark", "Webchat", "Reports", "EventForms", "Esign", "Timelog", "EmailSequence", "EmailTemplates", "PrintTemplates", "Surveys", "Approvals"],
            specialModuleApps: {
                Contacts: "People",
                Leads: "People",
                PhoneCalls: "Conversations",
                Olark: "Conversations",
                SMSNotifier: "Conversations",
                Webchat: "Conversations",
                Surveys: "Conversations",
                Reports: "Productivity",
                EventForms: "Productivity",
                Esign: "Productivity",
                Timelog: "Productivity",
                EmailSequence: "Productivity",
                EmailTemplates: "Templates",
                PrintTemplates: "Templates",
                Approvals: "Productivity",
                Recyclebin: "Productivity"
            },
            specialModuleAppGrouping: {
                People: ["Contacts", "Leads"],
                Conversations: ["Surveys", "PhoneCalls", "Webchat", "SMSNotifier", "Olark"],
                Productivity: ["Reports", "EventForms", "Esign", "Timelog", "EmailSequence", "Approvals", "Recyclebin"],
                Templates: ["EmailTemplates", "PrintTemplates"]
            },
            specialSubApps: ["People", "Conversations", "Productivity", "Templates"],
            bundles: [{name: "Dashboard"}, {name: "Essentials"}, {name: "Sales"}, {name: "Marketing"}, {name: "Support"}, {name: "Project"}, {name: "Inventory"}, {name: "Tools"}],
            activeBundle: "Dashboard",
            bundleGroups: {
                Dashboard: ["DASHBOARDS"],
                Essentials: ["ESSENTIALS", "CONVERSATIONS"],
                Sales: ["SALES", "SALESENABLEMENT"],
                Marketing: ["MARKETING"],
                Support: ["SUPPORT", "INTERNALSUPPORT"],
                Project: ["PROJECT"],
                Inventory: ["INVENTORY", "ORDERFULLFILLMENT"],
                Tools: ["TOOLS"]
            },
            minModulesToDisplay: 6,
            showReferralMessage: !1,
            activeOnBoardIndex: -1,
            onBoardItems: [],
            userStatus: "",
            preferenceLinks: [{
                icon: "fas fa-user-cog",
                title: this.translate("LBL_MY_PREFERENCES", "Users"),
                checkAdmin: !1,
                checkWhiteLabel: !1,
                func: this.goToPreferences
            }, {
                icon: "fas fa-cog",
                title: this.translate("LBL_SETTINGS", "Users"),
                checkAdmin: !0,
                checkWhiteLabel: !1,
                func: this.goToSettings
            }, {
                icon: "fas fa-walking",
                title: this.translate("LBL_GUIDED_TOUR", "Ondemand"),
                checkAdmin: !1,
                checkWhiteLabel: !1,
                func: this.startGuidedTour
            }, {
                icon: "fas fa-megaphone",
                title: this.translate("LBL_WHATS_NEW_BUTTON", "Ondemand"),
                checkAdmin: !1,
                checkWhiteLabel: !0,
                func: this.whatsNew
            }, {
                icon: "fas fa-credit-card",
                title: this.translate("LBL_BILLING", "Ondemand"),
                checkAdmin: !0,
                checkWhiteLabel: !1,
                func: this.goToBillingPage
            }, {
                icon: "fas fa-building",
                title: this.translate("LBL_ABOUT_US", "Ondemand"),
                checkAdmin: !1,
                checkWhiteLabel: !0,
                func: this.aboutUs
            }, {
                icon: "fas fa-sign-out-alt",
                title: this.translate("LBL_LOGOUT", "Ondemand"),
                checkAdmin: !1,
                checkWhiteLabel: !1,
                func: this.logout
            }],
            searchString: "",
            mySearchTimeout: "",
            widgets: []
        }
    },
    watch: {
        modules(e, t) {
            this.selectedModules = e
        }, selectedApp() {
            this.selectedApp && AppStorage.set("parentApp", this.selectedApp)
        }, searchString(e) {
            if ("" != e) {
                let e = this.bundles.find(e => "Search" == e.name);
                _.isUndefined(e) && (this.bundles.unshift({
                    name: "Search",
                    icon: "fa-search"
                }), this.activeBundle = "Search")
            } else this.bundles.shift(), "Search" == this.activeBundle && (this.activeBundle = this.bundles.find(e => !e.hide).name)
        }
    },
    computed: {
        displayableModules() {
            if (!Object.keys(this.selectedModules).length) return [];
            var e = this.selectedModules, t = e.indexOf("Notifications");
            -1 !== t && e.splice(t, 1), "SALES" != this.selectedApp && "SUPPORT" != this.selectedApp && "MARKETING" != this.selectedApp && "PROJECT" != this.selectedApp || e.splice(1, 0, "Notifications");
            var s = e.indexOf(this.selectedModule);
            s > this.minModulesToDisplay - 1 && (-1 !== s && e.splice(s, 1), e.splice(this.minModulesToDisplay - 1, 0, this.selectedModule));
            let i = {};
            this.specialSubApps.forEach(e => {
                let t = this.specialModuleAppGrouping[e];
                _.intersection(t, this.selectedModules).length > 1 ? i[e] = !0 : i[e] = !1
            });
            let a = [], r = [];
            for (let t in e) this.specialModules.includes(e[t]) ? !a.includes(this.specialModuleApps[e[t]]) && i[this.specialModuleApps[e[t]]] ? (r.push(this.specialModuleApps[e[t]]), a.push(this.specialModuleApps[e[t]])) : 0 == i[this.specialModuleApps[e[t]]] && r.push(e[t]) : r.push(e[t]);
            return r
        }, getFormatedSelectedApp() {
            return this.translateGroupApp(this.selectedApp)
        }, user() {
            return _.isUndefined(this.$currentUser) ? BaseModel.getModuleSpecificModel("Users", "Record", {}) : this.$currentUser
        }, userStatusList() {
            return _.difference(["available", "busy", "offline"], [this.userStatus])
        }, getPreferenceLinks() {
            var e = jQuery.extend(!0, [], this.preferenceLinks);
            for (let t = 0; t < e.length; t++) e[t].checkAdmin && (this.user.isAdmin || e.splice(t, 1));
            if (__white_label) for (let t = 0; t < e.length; t++) e[t].checkWhiteLabel && __white_label && e.splice(t, 1);
            let t = [];
            for (let s = 0; s < e.length / 2; s++) t.push(e.slice(2 * s, 2 * s + 2));
            return t
        }, filteredBundles() {
            let e = {}, t = this.apps;
            for (let s in this.bundleGroups) {
                let i = this.bundleGroups[s], a = !0;
                for (let r in i) {
                    let o = i[r];
                    t[o] && (e[s] || (e[s] = new Array), e[s].push(o), a = !1)
                }
                Vue.set(_.findWhere(this.bundles, {name: s}), "hide", a)
            }
            return e
        }, filteredModules() {
            let e = [];
            if ("" != this.searchString) {
                e = _.uniq(_.flatten(Object.values(this.apps))).filter(e => {
                    let t = e;
                    return t = "Notifications" == e ? this.translate("LBL_ACTIONS", e) : this.translate(e, e), t.toLowerCase().includes(this.searchString.toLowerCase())
                }), this.searchMenuModulesEvent()
            }
            return e
        }
    },
    created() {
        this.initializeApp(), this.init(), this.setModules(), this.setModuleNumbersToDisplay();
        let e = Vtiger_OnBoardItemsCollection_Model.getInstance(), t = [];
        for (var s in e) {
            let i = e[s];
            i.viewable && t.push(i)
        }
        this.onBoardItems = t, this.getOnBoardStepStatus(), this.watchForOnBoardCompletion()
    },
    mounted() {
        jQuery(document).ready(() => {
            setTimeout(() => {
                let e = AppStorage.get("productTourCompleted");
                if (__first_time_login && !e) {
                    let e = Vtiger_OnBoardItemsCollection_Model.itemsList, s = {};
                    for (var t in e) {
                        let i = e[t];
                        if ("starttour" == i.id) {
                            s = i;
                            break
                        }
                    }
                    s.completed || setTimeout(() => {
                        App.root.$emit("vds::onboard::init", s), AppStorage.set("productTourCompleted", !0)
                    }, 200)
                }
            }, 500)
        }), this.$root.$on("vds::load::module::app", (e, t) => {
            this.selectedApp != t && this.loadModuleRelatedApp(e, t)
        })
    },
    methods: {
        initializeApp() {
            let e = url("?app");
            e ? this.selectedApp = e : AppStorage.get("parentApp") && (this.selectedApp = AppStorage.get("parentApp")), this.calculateActiveBundle()
        }, init() {
            if (this.$currentUser) {
                let e = this.$watch("$currentUser", (t, s) => {
                    e(), this.processAppModules()
                })
            } else this.processAppModules();
            this.$root.$on("vds::header::widget::add", e => {
                let t = "vds-widget-" + Math.random();
                this.$options.components[t] = e, this.widgets.push(t)
            })
        }, processAppModules() {
            this.__requestAppModules().then((e, t) => {
                if (e.TOOLS && -1 === e.TOOLS.indexOf("FindDuplicates") && e.TOOLS.push("FindDuplicates"), !this.$currentUser.isAdmin && e.TOOLS) {
                    let t = e.TOOLS.indexOf("JourneyTemplates");
                    t >= 0 && e.TOOLS.splice(t, 1)
                }
                this.userStatus = this.user.online_status, this.__process(e)
            })
        }, __requestAppModules() {
            return new Promise((e, t) => {
                let s = AppStorage.get("app_modules", {});
                if (Object.keys(s).length) {
                    let t = AppStorage.get("app_module_permissions", {});
                    this.appStore.set({key: "apps", data: {app_modules: s, app_module_permissions: t}}), e(s)
                } else this.__getModules().then(s => {
                    jQuery.isEmptyObject(s) ? t(s.app_modules) : e(s.app_modules)
                });
                AppStorage.listenKeyDelete("app_modules", this.__getModules)
            })
        }, __getModules() {
            return new Promise((e, t) => {
                this.appStore.request("api_get", {url: "/apps/modules", key: "apps"}).then(t => {
                    AppStorage.set("app_modules", t.app_modules), AppStorage.set("app_module_permissions", t.app_module_permissions), e(t)
                })
            })
        }, __process(e) {
            let t = JSON.parse(JSON.stringify(e));
            for (let e in t) {
                if ("PROJECT" == e) {
                    -1 == (_.isArray(t[e]) ? t[e].indexOf("Tasks") : -1) && t[e] && t[e].splice(1, 0, "Tasks")
                }
                let s = _.isArray(t[e]) ? t[e].indexOf("Calendar") : -1;
                s > -1 && (t[e].splice(s, 1), t[e].splice(s, 0, "Events"), -1 == t[e].indexOf("Tasks") && t[e].splice(s + 1, 0, "Tasks")), (_.isArray(t[e]) && t[e].indexOf(App.module()) > -1 || "Users" == this.selectedModule) && (this.selectedApp || (this.selectedApp = e), this.selectedApp == e && (this.selectedModules = t[e]))
            }
            if (this.apps = t, this.selectedApp && !this.apps[this.selectedApp][this.selectedModule]) for (var s in this.apps) {
                if (this.apps[s].indexOf(this.selectedModule) >= 0) {
                    this.selectedApp = s, this.calculateActiveBundle();
                    break
                }
            } else "" == this.selectedApp && (this.selectedApp = _.first(Object.keys(this.apps)), this.calculateActiveBundle())
        }, buildURL(e, t = "") {
            if ("Ondemand" == e) return "";
            let s = t || this.selectedApp;
            return "Inbox" == e ? "view/mailboxtype?module=" + e : "view/list?module=" + e
        }, getAppURL(e) {
            let t = "";
            for (let i in this.apps) if (this.apps[i].name === e) {
                var s = this.apps[i].modules;
                if (s) {
                    t = this.buildURL(s[0], e);
                    break
                }
            }
            return t
        }, onAppChange(e) {
            e != this.selectedApp && (this.selectedApp = e, this.setModules())
        }, setModules() {
            for (let e in this.apps) this.apps[e].name == this.selectedApp && (this.selectedModules = this.apps[e].modules, this.redirectUrl(this.buildURL(this.selectedModules[0]), {}, !1, !0))
        }, loadGlobalSearchModal() {
            App.root.$emit("vds::globalsearch::click"), this.showModal({
                componentName: "GlobalSearchModal",
                componentData: {module: this.$module},
                modalOnModalMode: !0
            })
        }, logout() {
            App.root.$emit("vds::logout::click"), this.appStore.request("api_post", {
                url: "logout",
                params: {module: "Users"}
            }).then(e => {
                AppStorage.flush(), e && e.logouturl ? window.location.href = e.logouturl : window.location.reload()
            })
        }, getAccessibleModulesForSubApps(e) {
            let t = [];
            for (let s in this.specialModuleAppGrouping[e]) this.selectedModules.includes(this.specialModuleAppGrouping[e][s]) && t.push(this.specialModuleAppGrouping[e][s]);
            return t
        }, loadModule(e, t, s) {
            this.loadModuleRelatedApp(t, s), t && App.root.$emit("vds::menu::module::click", t), this.hideMenu(), e.preventDefault(), this.comingSoonModules.includes(t) && (window.location.href = "restrict/comingsoon?module=" + t);
            let i = this.buildURL(t);
            i && this.redirectUrl(i)
        }, loadModuleRelatedApp(e, t) {
            if (t) this.selectedApp = t; else for (var s in this.apps) {
                if (this.apps[s].indexOf(e) >= 0) {
                    this.selectedApp = s, this.calculateActiveBundle();
                    break
                }
            }
        }, hoverMoreSubmenu(e) {
            $("div[rel=menu_" + e + "]").find("div.dropdown-menu").css("display", "block")
        }, hoveroutMoreSubmenu(e) {
            $("div[rel=menu_" + e + "]").find("div.dropdown-menu").css("display", "none")
        }, setModuleNumbersToDisplay() {
            var e = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            e <= 768 ? this.minModulesToDisplay = 3 : e <= 1044 ? this.minModulesToDisplay = 4 : e > 1044 || e <= 1440 ? this.minModulesToDisplay = 6 : e > 1440 && (this.minModulesToDisplay = 8)
        }, getPreferenceUrl() {
            return this.user.preferencePageURL
        }, switchToV7() {
            localStorage.setItem("currentLayout", "v7"), window.location.href = "index.php"
        }, goToPreferences() {
            localStorage.setItem("currentLayout", "v8"), App.root.$emit("vds::userpreference::click");
            let e = "index.php?module=Users&view=PreferenceDetail&parent=Settings&record=" + this.$currentUser.id;
            this.redirectUrl(e, !1, "_blank"), this.$refs.userDropdown.hide()
        }, goToSettings() {
            localStorage.setItem("currentLayout", "v8"), App.root.$emit("vds::settings::click"), this.redirectUrl("index.php?module=Vtiger&parent=Settings&view=Index", !1, "_blank"), this.$refs.userDropdown.hide()
        }, goToBillingPage() {
            localStorage.setItem("currentLayout", "v8"), App.root.$emit("vds::billing::click"), this.redirectUrl("index.php?module=Ondemand&view=Billing", !1, "_blank"), this.$refs.userDropdown.hide()
        }, showReferralBanner() {
        }, startOnBoard(e) {
            e && e.appDetails && this.selectedApp != e.appDetails.app && this.loadModuleRelatedApp(e.appDetails.module, e.appDetails.app), e.completed = !e.completed, this.$nextTick(() => {
                e.completed = !e.completed
            }), this.$refs.onboardPopover.$emit("close"), this.$root.$emit("vds::onboard::init", e)
        }, getOnBoardStepStatus() {
            let e = Vtiger_OnBoardItemsCollection_Model.getInstance(), t = JSON.parse(__onboard_info);
            for (var s of e) t[s.id] && "true" == t[s.id].completed && (s.completed = !0)
        }, watchForOnBoardCompletion() {
            for (let e of this.onBoardItems) this.$watch(() => ({
                onBoardModel: e,
                markComplete: e.markComplete
            }), ({onBoardModel: e, markComplete: t}) => {
                if (t) {
                    this.activeOnBoardIndex = -1;
                    var s = jQuery("#popover-onboard").get(0);
                    s.focus(), s.dispatchEvent(new Event("focusin", {bubbles: !0})), setTimeout(() => {
                        e.completed || (e.completed = t, this.$root.$emit("vds::onboard::save", e))
                    }, 1e3)
                }
            })
        }, hoveronUserStatus() {
            $("div[rel='preference_user_status']").find("div.dropdown-menu").css("display", "block")
        }, closeUserPreferenceOnCardClick() {
            $("div[rel='preference_user_status']").find("div.dropdown-menu").css("display", "none")
        }, clickOnUserStatus(e) {
            this.userStatus = e, $("div[rel='preference_user_status']").find("div.dropdown-menu").css("display", "none"), this.appStore.request("api_post", {
                url: "/presence",
                params: {module: "Users", presence: e}
            }).then(e => {
            })
        }, whatsNew() {
            App.root.$emit("vds::whatsnew::click"), NProgress.start(), this.appStore.request("api_get", {
                url: "/help",
                params: {module: "Ondemand", mode: "whatsnew"}
            }).then(e => {
                NProgress.done(), NProgress.remove(), this.showModal({
                    componentName: App.loadComponent("WhatsNew", "Vtiger"),
                    componentData: {data: e}
                })
            })
        }, startGuidedTour() {
            var e = jQuery("#popover-onboard").get(0);
            e.focus(), e.dispatchEvent(new Event("focusin", {bubbles: !0})), App.root.$emit("vds::userprofile::guidedtour::click"), this.$refs.userDropdown.hide()
        }, aboutUs() {
            App.root.$emit("vds::aboutus::click"), this.showModal({componentName: App.loadComponent("AboutUS", "Vtiger")})
        }, showGlobalQuickCreateModal() {
            App.root.$emit("vds::globalquickcreate::click", this.selectedApp), this.showModal({
                componentName: App.loadComponent("QuickCreateModules", "Vtiger"),
                componentData: {selectedApp: this.selectedApp}
            })
        }, showOnboarding() {
            App.root.$emit("vds::onboard::shown")
        }, clearSearchString() {
            this.searchString = ""
        }, setActiveBundle(e, t = !1) {
            "" == this.searchString && (t ? this.activeBundle = e.name : setTimeout(() => {
                this.$refs["bundle_" + e.name][0].matches(":hover") && (this.activeBundle = e.name)
            }, 300))
        }, searchMenuModulesEvent() {
            clearTimeout(this.mySearchTimeout), this.mySearchTimeout = setTimeout(() => {
                App.root.$emit("vds::menu::module::search", this.searchString)
            }, 700)
        }, showMenu() {
            this.$refs.appMenuSearchbar.$el.firstChild.focus(), App.root.$emit("vds::menu::shown")
        }, hideMenu() {
            this.$refs.menuDropdown.visible = !1
        }, calculateActiveBundle() {
            if (this.selectedApp) {
                let e = _.find(this.bundles, ({name: e}) => _.findIndex(this.bundleGroups[e], e => this.selectedApp.toLowerCase() == e.toLowerCase()) > -1);
                _.isUndefined(e) || (this.activeBundle = e.name)
            }
        }, translateGroupApp(e) {
            return "SUPPORT" !== e ? VTHelper.toPascalCase(this.translate("LBL_" + e).toLowerCase().toLowerCase()) : VTHelper.toPascalCase(this.translate("LBL_" + e, "Settings:Vtiger").toLowerCase())
        }, getFormatedBundleName(e) {
            let t = "";
            return "Support" !== e && (t = this.translate("LBL_" + e.toUpperCase()).toLowerCase()), t = this.translate("LBL_" + e.toUpperCase(), "Settings:Vtiger").toLowerCase(), t.charAt(0).toUpperCase() + t.slice(1)
        }, isCustomModule(e) {
            let t = AppStorage.get("app_module_permissions");
            return !!(t && t[e] && t[e].iscustom)
        }, getTranslatedModuleName(e) {
            return "Notifications" == e && (e = "LBL_ACTIONS"), this.translate(e, e)
        }, showUserPreferences() {
            App.root.$emit("vds::userprofileicon::click")
        }, hideHandler() {
            this.clearSearchString()
        }
    },
    render: function anonymous() {
        with (this) return _c("nav", {
            staticClass: "navbar navbar-expand-lg navbar-light d-flex align-items-center text-white bg-primary py-0 pl-3 align-items-stretch vds-topbar",
            attrs: {id: "topbar"}
        }, [_c("div", {staticClass: "d-flex justify-content-left align-items-center"}, [_c("b-dropdown", {
            ref: "menuDropdown",
            attrs: {
                "toggle-class": "menu-toggle p-0 bg-primary border-0 mr-2",
                "menu-class": "app-menu border-0",
                boundary: "viewport",
                "no-caret": !0,
                size: "lg",
                role: "menu"
            },
            on: {shown: showMenu, hide: hideHandler}
        }, [_c("i", {
            staticClass: "h4 text-white fa-bars align-middle",
            attrs: {slot: "button-content", title: translate("LBL_MENU")},
            slot: "button-content"
        }), _v(" "), _c("div", {staticClass: "h4 w-100 bg-primary px-4 py-2 mb-0"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("i", {
            staticClass: "text-white fa-bars align-text-top pl-1 pr-3 mr-1 c-pointer",
            on: {click: hideMenu}
        }), _v(" "), _c("strong", {staticClass: "text-white mr-3"}, [_v("Vtiger")]), _v(" "), _c("div", {staticClass: "form-inline has-search flex-grow-1"}, [_c("div", {staticClass: "d-flex align-items-center flex-grow-1"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback text-blue-1",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("vds-input-clear", {
            ref: "appMenuSearchbar",
            attrs: {
                "input-style": {
                    color: "#FFF",
                    backgroundColor: "#0045AD",
                    borderColor: "#003F9F",
                    fontSize: "13px"
                }, inputvalue: searchString, placeholder: translate("LBL_TYPE_SEARCH")
            },
            on: {
                "update:inputvalue": function (e) {
                    searchString = e
                }, "vds::post::input:clear": clearSearchString
            }
        })], 1)])])]), _v(" "), _c("div", {staticClass: "bg-primary pl-4 pr-3"}, [_c("ul", {staticClass: "list-unstyled mb-0"}, [_l(bundles, (function (e, t) {
            return [e.hide ? _e() : _c("li", _g({
                ref: "bundle_" + e.name,
                refInFor: !0,
                staticClass: "c-pointer d-inline-block pl-2 pr-3 pt-3 pb-3",
                class: [activeBundle == e.name ? "text-white" : "text-blue-2", 0 == t ? "ml-n2" : ""],
                attrs: {title: getFormatedBundleName(e.name)},
                on: {
                    mouseover: function (t) {
                        return setActiveBundle(e)
                    }
                }
            }, "" != searchString ? {click: clearSearchString} : {click: () => setActiveBundle(e, !0)}), [e.icon ? _c("i", {class: e.icon}) : _c("span", {staticClass: "h5 mb-0"}, [_v(_s(getFormatedBundleName(e.name)))])])]
        }))], 2)]), _v(" "), _c("div", {staticClass: "px-4 pb-3 app-menu-container overflow-y"}, [_l(filteredBundles[activeBundle], (function (e) {
            return _c("div", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: "Search" != activeBundle,
                    expression: "activeBundle != 'Search'"
                }], staticClass: "pt-3"
            }, [_c("div", {staticClass: "h4"}, [_v(_s(translateGroupApp(e)))]), _v(" "), _c("div", {staticClass: "d-flex flex-wrap px-2"}, [_l(apps[e], (function (t) {
                return [_c("div", {staticClass: "ml-n2 c-pointer w-30 mr-4 my-1"}, [_c("a", {
                    staticClass: "ml-n2 highlight-hover text-dark-0 textOverflowEllipsis text-decoration-none rounded w-100 d-flex p-2 align-items-center",
                    class: [t == selectedModule ? "bg-primary" : ""],
                    attrs: {href: buildURL(t, e), moduleName: t},
                    on: {
                        click: function (s) {
                            return loadModule(s, t, e)
                        }
                    }
                }, [_c("div", {staticClass: "appMenuModuleIcon bgLtGrey p-1 d-flex align-items-center justify-content-center"}, [isCustomModule(t) ? _c("div", {}, [_v(_s(getTranslatedModuleName(t).substring(0, 2)))]) : _c("i", {
                    staticClass: "p-2",
                    class: getModuleIconClass(t)
                })]), _v(" "), _c("div", {
                    staticClass: "h6 mb-0 ml-2 textOverflowEllipsis",
                    class: [t == selectedModule ? "text-white" : ""]
                }, [_v(_s(getTranslatedModuleName(t)))])])])]
            }))], 2)])
        })), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: "Search" == activeBundle,
                expression: "activeBundle=='Search'"
            }], staticClass: "pt-3"
        }, [_c("div", {staticClass: "h4 pb-2"}, [_v(_s(translate("LBL_SEARCH_RESULTS")))]), _v(" "), _c("div", {staticClass: "d-flex flex-wrap"}, [filteredModules.length ? _e() : _c("vds-empty-state-card", {
            staticClass: "w-100",
            attrs: {
                illustrationName: "global_search_empty_state.svg",
                "show-add-button": !1,
                "empty-label": translate("JS_NO_RESULTS_FOUND")
            }
        }), _v(" "), _l(filteredModules, (function (e) {
            return [_c("a", {
                staticClass: "d-block text-dark d-flex align-items-center p-2 col-4 c-pointer textOverflowEllipsis text-decoration-none",
                attrs: {href: buildURL(e)},
                on: {
                    click: function (t) {
                        return loadModule(t, e)
                    }
                }
            }, [_c("span", {staticClass: "appMenuModuleIcon bgLtGrey p-1 d-flex align-items-center justify-content-center"}, [isCustomModule(e) ? _c("i", {staticClass: "p-2 fa fa-custom-widget"}) : _c("i", {
                staticClass: "p-2",
                class: getModuleIconClass(e)
            })]), _v(" "), _c("span", {staticClass: "h6 mb-0 ml-2 textOverflowEllipsis"}, [_v(_s(getTranslatedModuleName(e)))])])]
        }))], 2)])], 2)]), _v(" "), _c("div", {staticClass: "h4 d-flex align-items-center mb-0 border-top border-primary"}, [_c("strong", {staticClass: "mr-2"}, [_v("Vtiger")]), _v(" "), _c("span", {staticClass: "mr-2"}, [_v(_s(getFormatedSelectedApp))]), _v(" "), _c("i", {
            staticClass: "h6 mb-0 fa-chevron-right mr-2",
            staticStyle: {"margin-top": "3px"}
        }), _v(" "), "Notifications" == selectedModule ? _c("a", {
            staticClass: "text-white",
            attrs: {href: buildURL(selectedModule)},
            on: {
                click: function (e) {
                    return loadModule(e, selectedModule, selectedApp)
                }
            }
        }, [_v(_s(translate("LBL_ACTIONS", selectedModule)))]) : parentModule ? _c("span", [_c("a", {
            staticClass: "text-nowrap text-white",
            attrs: {href: buildURL(parentModule)}
        }, [_v(_s(translate(parentModule, parentModule)))]), _v(" "), _c("i", {
            staticClass: "h6 mb-0 fa-chevron-right mr-2",
            staticStyle: {"margin-top": "3px"}
        }), _v("\n                            " + _s(translate(selectedModule, selectedModule)) + "\n                        ")]) : _c("a", {
            staticClass: "text-nowrap text-white",
            attrs: {href: buildURL(selectedModule)},
            on: {
                click: function (e) {
                    return loadModule(e, selectedModule, selectedApp)
                }
            }
        }, [_v(_s(translate(selectedModule, selectedModule)))])])], 1), _v(" "), _c("div", {
            staticClass: "flex-grow-1 d-flex justify-content-end align-items-center pr-0",
            attrs: {id: "onboardPopoverConatiner"}
        }, [_l(widgets, (function (e) {
            return _c("div", {staticClass: "mr-3"}, [_c(e, {tag: "component"})], 1)
        })), _v(" "), _m(0), _v(" "), _c("b-popover", {
            ref: "onboardPopover",
            attrs: {
                container: "onboardPopoverConatiner",
                target: "popover-onboard",
                placement: "bottom",
                triggers: "focus"
            },
            on: {
                shown: function (e) {
                    return showOnboarding()
                }
            }
        }, [_c("div", {
            staticClass: "onboardPopover py-3",
            staticStyle: {margin: "-.5rem -.75rem"}
        }, _l(onBoardItems, (function (e, t) {
            return _c("div", {
                staticClass: "p-2 pl-3 pr-2 mb-1 c-pointer align-middle",
                class: [activeOnBoardIndex == t ? "bg-primary text-white" : ""],
                staticStyle: {"min-width": "250px"},
                on: {
                    mouseover: function (e) {
                        activeOnBoardIndex = t
                    }
                }
            }, [_c("h6", {staticClass: "d-flex align-items-center justify-content-between mb-0"}, [_c("vds-checkbox", {
                staticClass: "w-85 d-flex align-items-center",
                attrs: {status: e.completed, label: e.title},
                on: {
                    change: function (s) {
                        return startOnBoard(e, t)
                    }
                }
            }), _v(" "), _c("i", {
                staticClass: "fas fa-arrow-right text-white h5 mb-0", on: {
                    click: function (s) {
                        return startOnBoard(e, t)
                    }
                }
            })], 1)])
        })), 0)]), _v(" "), __is_v8_instance ? _e() : _c("span", {staticClass: "h3 mt-2 c-pointer"}, [_c("a", {
            staticClass: "mr-3 h2",
            staticStyle: {
                "font-weight": "bold",
                color: "#ff0000",
                background: "#ffff00",
                "border-radius": "6px",
                padding: "2px 8px",
                "font-size": "22px"
            },
            on: {
                click: function (e) {
                    return switchToV7()
                }
            }
        }, [_v("V7")])]), _v(" "), _c("span", {
            staticClass: "h3 mt-2 mr-3 c-pointer", on: {
                click: function (e) {
                    return showGlobalQuickCreateModal()
                }
            }
        }, [_c("i", {staticClass: "fas fa-plus"})]), _v(" "), _c("span", {
            staticClass: "h3 mt-2 c-pointer",
            attrs: {title: translate("LBL_SEARCH")},
            on: {
                click: function (e) {
                    return loadGlobalSearchModal()
                }
            }
        }, [_c("i", {staticClass: "fas fa-search"})]), _v(" "), _c("b-dropdown", {
            ref: "userDropdown",
            attrs: {
                right: "",
                variant: "link",
                size: "sm",
                "menu-class": "user-profile-menu border-light-grey-0 bg-grey-hue-9",
                "toggle-class": "text-decoration-none",
                "no-caret": ""
            },
            on: {
                shown: function (e) {
                    return showUserPreferences()
                }
            }
        }, [_c("template", {slot: "button-content"}, [_c("a", {
            staticClass: "ml-sm-3 h2 text-decoration-none",
            staticStyle: {color: "white"},
            attrs: {title: user.fullName + " (" + user.user_name + ")"}
        }, [user.profileImage ? _c("img", {
            staticClass: "user-image-sm",
            attrs: {src: user.profileImage}
        }) : _c("i", {staticClass: "fas fa-user-circle"})])]), _v(" "), _c("b-dropdown-text", {
            staticClass: "d-flex py-0 border-bottom py-3",
            on: {
                click: function (e) {
                    return closeUserPreferenceOnCardClick()
                }
            }
        }, [_c("div", {staticClass: "profile-img-container border-light-grey-0 mr-3 text-truncate"}, [user.profileImage ? _c("img", {
            staticStyle: {
                "max-height": "100%",
                width: "auto"
            }, attrs: {src: user.profileImage, alt: "user image"}
        }) : _c("div", {
            staticClass: "text-capitalize text-white bg-primary position-absolute h-100 w-100",
            attrs: {"aria-hidden": "true"}
        }, [_c("h3", {staticClass: "text-center my-3"}, [_v(_s(user.fullName))])]), _v(" "), _c("div", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.UpdateUserImageModal",
                modifiers: {UpdateUserImageModal: !0}
            }], staticClass: "image-change"
        }, [_c("i", {staticClass: "text-white fas fa-pencil-alt"})])]), _v(" "), _c("div", {staticClass: "flex-grow-1"}, [_c("div", {staticClass: "row"}, [_c("div", {staticClass: "col-10 text-truncate"}, [_c("h5", {attrs: {title: user.fullName}}, [_c("b", [_v(_s(user.fullName))])])])]), _v(" "), _c("h6", {
            staticClass: "text-dark",
            attrs: {title: user.user_name}
        }, [_v(_s(user.user_name))]), _v(" "), _c("div", [_c("b-dropdown", {
            attrs: {
                rel: "preference_user_status",
                variant: "link",
                "toggle-class": "user_status text-decoration-none p-0 pb-1",
                "no-caret": ""
            }, nativeOn: {
                mouseover: function (e) {
                    return hoveronUserStatus()
                }
            }
        }, [_c("template", {
            staticClass: "d-flex justify-content-center",
            slot: "button-content"
        }, ["available" == userStatus ? _c("span", [_c("i", {
            staticClass: "fa fa-circle text-success",
            on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        })]) : "busy" == userStatus ? _c("span", [_c("i", {
            staticClass: "fa fa-circle text-danger",
            on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        })]) : _c("span", [_c("i", {
            staticClass: "fa fa-circle text-secondary", on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        })]), _v(" "), _c("div", {
            staticClass: "d-inline pl-1 text-dark", on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [_v(_s(translate("JS_" + userStatus)) + " "), _c("i", {staticClass: "fa fa-angle-down pl-1 text-grey-4"})])]), _v(" "), _l(userStatusList, (function (e) {
            return _c("b-dropdown-item", {
                key: e, on: {
                    click: function (t) {
                        return clickOnUserStatus(e)
                    }
                }
            }, [_v(_s(translate("JS_" + e)))])
        }))], 2)], 1)]), _v(" "), _c("div")]), _v(" "), _c("b-dropdown-text", {
            staticClass: "py-3",
            staticStyle: {"background-color": "white"}
        }, [_c("div", {staticClass: "wizardtiles-rectangle d-flex flex-wrap"}, _l(getPreferenceLinks, (function (e) {
            return _c("div", {staticClass: "d-flex justify-content-around w-100 p-2"}, [_l(e, (function (e) {
                return _c("div", {
                    staticClass: "col-6 tile d-flex align-items-center mr-3 pr-2",
                    on: {click: e.func}
                }, [_c("div", {staticClass: "icon d-flex justify-content-center align-items-center textOverflowEllipsis"}, [_c("span", {
                    staticClass: "container d-flex align-items-center justify-content-center mr-2 py-0 px-2",
                    staticStyle: {width: "20px", height: "20px"}
                }, [_c("i", {
                    staticClass: "font-10 text-grey-4",
                    class: e.icon
                })]), _v(" "), _c("div", {
                    staticClass: "name text-truncate",
                    attrs: {title: e.title}
                }, [_v(_s(e.title))])])])
            })), _v(" "), e.length % 2 == 1 ? _c("div", {staticClass: "col-6 d-flex align-items-center mr-3 p-2"}) : _e()], 2)
        })), 0)]), _v(" "), showReferralMessage ? _c("b-dropdown-text", {staticClass: "px-2 py-0"}, [_c("div", {
            staticClass: "py-2 bg-grey-hue-9 text-primary text-center",
            on: {
                click: function (e) {
                    return showReferralBanner()
                }
            }
        }, [_v("\n                                " + _s(translate("LBL_REFER_EARN")) + "\n                            ")])]) : _e()], 2)], 2)])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("a", {
            staticClass: "p-0 mr-3 text-decoration-none onboardtrigger d-flex align-items-center btn",
            attrs: {id: "popover-onboard", tabindex: "0", href: "javascript:void(0)"}
        }, [_c("span", {staticClass: "h3 mt-2 c-pointer"}, [_c("i", {staticClass: "fas fa-rocket text-white"})])])
    }],
    $_onBoard: {steps: {starttour: ["starttour"]}}
});
var Vtiger_Component_HeaderScripts = App.vtComponent.extend({
    created() {
        let e = JSON.parse(__headerScripts);
        for (let t = 0; t < e.length; t++) this.$options.components[e[t].name] = App.loadComponent(e[t].name, e[t].module)
    }, render(e) {
        let t = JSON.parse(__headerScripts), n = [];
        for (let r = 0; r < t.length; r++) n.push(e(t[r].name, t[r].module));
        return e("span", [n])
    }
});
var Vtiger_Component_Help = App.vtComponent.extend({
    name: "vds-help",
    mixins: [Vtiger_Mixins_ShowModal],
    data: () => ({
        helpcontent: "",
        thumbsUp: !1,
        thumbsDown: !1,
        searchString: "",
        helpPopoverOpened: !1,
        feedbackStatus: []
    }),
    methods: {
        clickFeedback() {
            this.showModal({componentName: "Feedback", componentData: {module: this.$module}, modalOnModalMode: !0})
        },
        beforeHelpPopover() {
            let t = $(this.$refs.helppopup._toolpop.$tip).find(".popover-body");
            $(t).addClass("p-0"), $(t).parent().addClass("helpPopup").attr("data-html2canvas-ignore", "true"), this.appStore.request("api_get", {
                url: "help",
                params: {module: "Ondemand", mode: "help", helpmodule: App.module()}
            }).then(t => {
                let e = t, s = "" == this.searchString ? App.module() : this.searchString;
                this.helpcontent = e[s] ? e[s].answers : []
            })
        },
        afterHelpPopover() {
            jQuery("#helpcontent").slimScroll({height: "450px", alwaysVisible: !1, disableFadeOut: !0})
        },
        talkToUs: () => (window.open("index.php?module=Ondemand&view=ChatSupport", "OndemandChatSupport", "width=325,height=530,toolbar=no,status=no,scrollbars=no,resizable=yes,location=no"), !1),
        close() {
            this.$refs.helppopup.$emit("close")
        },
        getAccordionId: t => "accordion-" + t,
        onHoverThumpsup(t) {
            $(t.target).removeClass("text-grey-4").addClass("text-success"), this.thumbsUp = !0
        },
        onHoveroutThumpsup(t) {
            $(t.target).addClass("text-grey-4").removeClass("text-success"), this.thumbsUp = !1
        },
        onHoverThumpsdown(t) {
            $(t.target).removeClass("text-grey-4").addClass("text-danger"), this.thumbsDown = !0
        },
        onHoveroutThumpsdown(t) {
            $(t.target).addClass("text-grey-4").removeClass("text-danger"), this.thumbsDown = !1
        },
        search() {
            this.appStore.request("api_get", {
                url: "help",
                params: {module: "Ondemand", mode: "help", helpmodule: App.module(), searchString: this.searchString}
            }).then(t => {
                let e = t, s = "" == this.searchString ? App.module() : this.searchString;
                this.helpcontent = e[s] ? e[s].answers : []
            })
        },
        feedback(t, e) {
            this.appStore.request("api_post", {
                url: "help",
                params: {module: "Ondemand", mode: "help_feedback", id: t, rating: e}
            }).then(e => {
                e && this.feedbackStatus.push(t)
            })
        },
        thumpsupClick(t) {
            this.feedback(t, 1)
        },
        thumpsdownClick(t) {
            this.feedback(t, -1)
        },
        modifyAnswer(t) {
            let e = $("<span>").html(t), s = e.find("a");
            for (let t = 0; t < s.length; t++) $(s[t]).attr("target", "_blank");
            let a = e.find("img");
            for (let t = 0; t < a.length; t++) $(a[t]).css("max-width", "295px");
            return e.html()
        },
        clearSearchString() {
            this.searchString = "", this.search()
        }
    },
    computed: {
        getAppIcon: () => ("fa-" + App.module()).toLowerCase(),
        iswhiteLabel: () => __white_label,
        helpContentHeight() {
            let t = "400px", e = "400px";
            return this.iswhiteLabel && (t = "445px", e = "445px"), {"max-height": e, "min-height": t}
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {attrs: {id: "help"}}, [_c("a", {
            staticClass: "btn btn-link text-decoration-none helpicon d-flex align-items-center justify-content-center c-pointer",
            class: [helpPopoverOpened ? "bg-primary" : "bg-grey-hue-3"],
            attrs: {id: "helpicon", tabindex: "0"}
        }, [_c("i", {
            staticClass: "fas fa-question h4 mb-0",
            class: [helpPopoverOpened ? "text-white" : "text-primary"]
        })]), _v(" "), _c("b-popover", {
            ref: "helppopup",
            attrs: {
                show: helpPopoverOpened,
                offset: "-150",
                target: "helpicon",
                triggers: "focus",
                placement: "top",
                id: "helptitle",
                "custom-class": "p-2 border-grey-8"
            },
            on: {
                "update:show": function (t) {
                    helpPopoverOpened = t
                }, show: function (t) {
                    return beforeHelpPopover()
                }, shown: function (t) {
                    return afterHelpPopover()
                }
            }
        }, [_c("template", {slot: "default"}, [_c("div", {
            staticStyle: {
                "max-width": "350px",
                "min-width": "350px",
                "min-height": "500px",
                "max-height": "500px"
            }
        }, [_c("div", {staticClass: "bg-primary p-3 rounded-top d-flex align-items-center justify-content-between"}, [_c("div", [_c("h5", {staticClass: "text-white my-0 mx-1"}, [_c("b", [_v(_s(translate("LBL_HELP")))])])]), _v(" "), _c("div", {
            attrs: {
                slot: "modal-header-close",
                "aria-label": "Close"
            }, on: {
                click: function (t) {
                    return close()
                }
            }, slot: "modal-header-close"
        }, [_c("i", {staticClass: "text-white fa fa-times c-pointer h5"})])]), _v(" "), _c("div", {
            staticClass: "p-3 bg-grey-hue-1",
            staticStyle: {"overflow-y": "scroll"},
            style: helpContentHeight,
            attrs: {id: "helpcontent"}
        }, [_c("div", {staticClass: "mb-2"}, [_c("div", {staticClass: "form-inline has-search mb-12px"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("div", {
            staticClass: "d-flex w-100 h-100",
            staticStyle: {height: "33px"}
        }, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: searchString,
                expression: "searchString"
            }],
            staticClass: "form-control w-100 h-100",
            attrs: {type: "text", placeholder: "Search for articles"},
            domProps: {value: searchString},
            on: {
                keyup: function (t) {
                    return !t.type.indexOf("key") && _k(t.keyCode, "enter", 13, t.key, "Enter") ? null : search()
                }, input: function (t) {
                    t.target.composing || (searchString = t.target.value)
                }
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: searchString,
                expression: "searchString"
            }], staticClass: "searchClearIcon m-0 c-pointer", on: {
                click: function (t) {
                    return clearSearchString()
                }
            }
        }, [_c("i", {staticClass: "fa fa-times-circle text-secondary"})])])])]), _v(" "), _c("div", {attrs: {role: "tablist"}}, [_l(helpcontent, (function (t, e) {
            return [_c("b-card", {
                staticClass: "mb-12px border-grey-5",
                attrs: {"no-body": ""}
            }, [_c("div", {attrs: {role: "tab"}}, [_c("div", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: getAccordionId(e),
                    expression: "getAccordionId(index)"
                }], staticClass: "d-flex justify-content-start align-items-center p-2 c-pointer"
            }, [_c("div", {staticClass: "icon-container mr-2 bg-primary d-flex align-items-center justify-content-center p-6px"}, [_c("i", {
                staticClass: "fa text-white font-12",
                class: getAppIcon
            })]), _v(" "), _c("div", {staticClass: "w-100"}, [_c("a", {
                staticClass: "btn btn-link h6 mb-0 text-decoration-none pl-0",
                staticStyle: {"text-align": "left !important"},
                attrs: {href: "javascript:;", role: "button"}
            }, [_v(_s(t.question))])])])]), _v(" "), _c("b-collapse", {
                attrs: {
                    id: getAccordionId(e),
                    visible: "",
                    accordion: "my-accordion",
                    role: "tabpanel"
                }
            }, [_c("b-card-body", {staticClass: "px-3 py-0 mb-3"}, [_c("span", {
                staticClass: "font-13",
                domProps: {innerHTML: _s(modifyAnswer(t.answer))}
            })]), _v(" "), _c("div", {staticClass: "border-top p-2 d-flex justify-content-center align-items-center"}, [feedbackStatus.includes(t.answerid) ? [_c("span", [_v(_s(translate("JS_THANKS_FOR_FEEDBACK")))])] : [_c("span", {staticClass: "pr-2"}, [_v("Was this helpful? ")]), _v(" "), _c("i", {
                staticClass: "fa fa-thumbs-up bg-secondary icon-container-sm d-flex align-items-center justify-content-center text-grey-4 mr-2 c-pointer",
                on: {
                    mouseover: function (t) {
                        return onHoverThumpsup(t)
                    }, mouseout: function (t) {
                        return onHoveroutThumpsup(t)
                    }, click: function (e) {
                        return thumpsupClick(t.answerid)
                    }
                }
            }), _v(" "), _c("i", {
                staticClass: "fa fa-thumbs-down bg-secondary icon-container-sm d-flex align-items-center justify-content-center text-grey-4 mr-2 c-pointer",
                on: {
                    mouseover: function (t) {
                        return onHoverThumpsdown(t)
                    }, mouseout: function (t) {
                        return onHoveroutThumpsdown(t)
                    }, click: function (e) {
                        return thumpsdownClick(t.answerid)
                    }
                }
            })]], 2)], 1)], 1)]
        })), _v(" "), 0 == helpcontent.length ? _c("div", {staticClass: "m-3"}, [_v("\n                                    " + _s(translate("LBL_NO_ARTICLE_FOUND", "Ondemand")) + "\n                                ")]) : _e()], 2), _v(" "), iswhiteLabel ? _e() : _c("div", {
            staticClass: "bg-grey-hue-5 d-flex w-100 justify-content-around p-2 rounded-bottom",
            staticStyle: {position: "absolute", bottom: "0px", right: "0px"}
        }, [_c("div", [_c("button", {
            staticClass: "btn bg-white p-2 px-4", on: {
                click: function (t) {
                    return talkToUs()
                }
            }
        }, [_c("i", {staticClass: "fas fa-comments-alt text-primary"}), _v("  " + _s(translate("LBL_TALK_TO_US", "Ondemand")) + "\n                                    ")])]), _v(" \n                                "), _c("div", [_c("button", {
            staticClass: "btn bg-white p-2 px-4 text-truncate d-flex align-items-center",
            on: {
                click: function (t) {
                    return clickFeedback()
                }
            }
        }, [_c("i", {
            staticClass: "fas fa-comment-alt-lines",
            staticStyle: {color: "#fc8c4a"}
        }), _v("   " + _s(translate("LBL_FEEDBACK")) + "\n                                    ")])])])])])])], 2)], 1)
    }
}), Vtiger_Component_Feedback = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    data: () => ({feedback: "", screenshotImage: "", screenshotUploaded: !1, error: !1}),
    methods: {
        captureScreen() {
        }, showImage(t) {
            let e = t.target, s = !1;
            if (e.files && e.files[0]) {
                let t = e.files[0];
                if ("image" !== t.type.split("/")[0] && (s = !0, this.showErrorNotification(this.translate("LBL_INVALID_IMAGE", "Vtiger"))), t.size > 2097152 && (s = !0, this.showErrorNotification(this.translate("JS_MAX_FILE_UPLOAD_EXCEEDS", "Vtiger") + " 2MB")), s) return void (this.error = !0);
                this.error = !1;
                var a = new FileReader;
                a.onload = function (t) {
                    $("#screenshotimage").attr("src", t.target.result)
                }, a.readAsDataURL(e.files[0]), this.screenshotImage = e.files[0], this.screenshotUploaded = !0
            }
        }, removeScreenshot() {
            $("#screenshotimage").attr("src", ""), this.screenshotUploaded = !1
        }, validate() {
            this.feedback || (this.showErrorNotification(this.translate("LBL_FIELD_MISSING", "Vtiger", this.translate("LBL_FEEDBACK"))), this.error = !0), this.screenshotImage && ("image" !== this.screenshotImage.type.split("/")[0] && (this.error = !0, this.showErrorNotification(this.translate("LBL_INVALID_IMAGE", "Vtiger"))), this.screenshotImage.size > 2097152 && (this.error = !0, this.showErrorNotification(this.translate("JS_MAX_FILE_UPLOAD_EXCEEDS", "Vtiger") + " 2MB")))
        }, submit() {
            if (this.validate(), !this.error) {
                let t = {};
                t.feedback = this.feedback, t._files = {screenshot: this.screenshotImage}, t.mode = "feedback", t.module = "Ondemand", this.appStore.request("api_post", {
                    url: "/help",
                    params: t
                }).then(t => {
                    t ? (this.showSuccessNotification(this.translate("JS_THANKS_FOR_FEEDBACK", "Vtiger")), this.$refs.feedback.hide()) : this.showErrorNotification(this.translate("LBL_FAILED_TO_SEND", "Vtiger"))
                })
            }
        }, showSystemInformation() {
            this.showModal({componentName: "SystemInformation", componentData: {module: this.$module}})
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "feedback",
            attrs: {id: "feedback", size: "md", "body-class": "p-0", "header-class": "bg-grey-hue-4", "hide-footer": ""}
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", [_v(_s(translate("LBL_FEEDBACK")))])]), _v(" "), _c("div", [_c("input", {
            attrs: {
                type: "hidden",
                name: "mode",
                value: "feedback"
            }
        }), _v(" "), _c("div", {staticClass: "p-3"}, [_c("div", {staticClass: "mb-3"}, [_v(_s(translate("LBL_PROVIDE_DETAILS", "Ondemand")))]), _v(" "), _c("div", {staticClass: "mb-2"}, [_c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: feedback,
                expression: "feedback"
            }],
            staticClass: "w-100 p-2 rounded",
            attrs: {rows: "10", placeholder: translate("LBL_PROVIDE_ISSUE_DETAILS_SHARE_IDEAS", "Ondemand")},
            domProps: {value: feedback},
            on: {
                input: function (t) {
                    t.target.composing || (feedback = t.target.value)
                }
            }
        })]), _v(" "), screenshotUploaded ? _e() : _c("div", {staticClass: "mt-3"}, [_c("div", {
            staticClass: "custom-file bg-grey-hue-6 d-flex justify-content-center p-2 w-100 my-3",
            staticStyle: {border: "1px dashed #ccc", width: "80%"}
        }, [_c("input", {
            staticClass: "custom-file-input c-pointer",
            attrs: {type: "file", id: "screenshot"},
            on: {change: showImage}
        }), _v(" "), _c("a", {
            staticClass: "c-pointer",
            staticStyle: {position: "absolute"},
            attrs: {href: "javascript:;"}
        }, [_v(_s(translate("LBL_UPLOAD_SCREENSHOT", "Ondemand")))])])]), _v(" "), screenshotUploaded ? _c("div", [_c("div", {staticClass: "rounded mb-3"}, [_c("img", {
            staticClass: "rounded p-1 bg-grey-hue-5",
            attrs: {id: "screenshotimage", src: screenshotImage, alt: "screenshot", width: "465px", height: "300px"}
        }), _v(" "), _c("div", {
            staticClass: "w-100 d-flex justify-content-center custom-file bg-grey-hue-6 p-2 w-100",
            staticStyle: {border: "1px dashed #ccc", "border-top-style": "hidden"}
        }, [_c("a", {
            attrs: {href: "javascript:;"}, on: {
                click: function (t) {
                    return removeScreenshot()
                }
            }
        }, [_v(_s(translate("LBL_REMOVE_SCREENSHOT", "Ondemand")))])])])]) : _e(), _v(" "), _c("div", [_c("p", [_v("\n                            Some "), _c("a", {
            attrs: {href: "javascript:;"},
            on: {
                click: function (t) {
                    return showSystemInformation()
                }
            }
        }, [_v("system information")]), _v(" will be sent to vtiger. We'll use the information\n                            to respond to your query and improve our services, and handle it as per\n                            our "), _c("a", {
            attrs: {
                href: "https://www.vtiger.com/policy-legal-center/privacy-policy/",
                target: "_blank"
            }
        }, [_v("Privacy policy")]), _v(" and "), _c("a", {
            attrs: {
                href: "https://www.vtiger.com/policy-legal-center/terms-of-service/",
                target: "_blank"
            }
        }, [_v("Terms of Service")]), _v(".\n                        ")])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-end p-2"}, [_c("button", {
            staticClass: "btn btn-success px-4",
            attrs: {type: "submit"},
            on: {
                click: function (t) {
                    return submit()
                }
            }
        }, [_v(_s(translate("JS_SUBMIT")))])])])])])
    }
}), Vtiger_Component_SystemInformation = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "systeminformation",
            attrs: {
                id: "systeminformation",
                size: "sm",
                "body-class": "p-0",
                "header-class": "bg-grey-hue-4",
                "hide-footer": ""
            }
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", [_v(_s(translate("LBL_ADDITIONAL_INFORMATION")))])]), _v(" "), _c("div", {staticClass: "p-4"}, [_c("ul", [_c("li", [_v(_s(translate("LBL_BROWSER_INFORMATION", "Ondemand")))]), _v(" "), _c("li", [_v(_s(translate("LBL_CRM_USERNAME", "Ondemand")))]), _v(" "), _c("li", [_v(_s(translate("LBL_CRM_URL", "Ondemand")))])])])])
    }
});
var Vtiger_Component_Hierarchy = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_LinkedRecordsModal = Vtiger_Component_PopupReferenceList.extend({
    props: {
        record: {type: Object},
        relation: {type: Object}
    }, methods: {
        init() {
        }, componentInstance() {
            return App.getDynamicComponentInstance("RelatedListView", this.module)
        }, rowSelected(e, t) {
            this.redirectUrl(t.detailViewURL, !1, "_blank"), this.$refs.popupModal.hide()
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "popupModal",
            attrs: {lazy: !0, size: "xl", title: getHeader, "hide-footer": "", "body-class": "refListPopup"}
        }, [_c(componentInstance(), {
            tag: "component",
            attrs: {
                record: record,
                relation: relation,
                isMultiSelectable: multiple,
                module: module,
                isFollowingAllowed: !1,
                manageColumns: !1,
                viewtype: viewType,
                filterQuery: filterQuery,
                mode: "compact"
            },
            on: {vt_list_row_click: rowSelected, vt_list_selected_record_models: listSelectedRecordModels}
        })], 1)
    }
});
var Vtiger_Component_ModuleIcon = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_ModuleModel],
    props: {module: {type: String}},
    render: function anonymous() {
        with (this) return _c("span", [$_currentModuleModel && $_currentModuleModel.iscustom ? _c("span", {staticClass: "h5 mb-0 p-1 mr-2 border border-grey-1 rounded bg-grey-hue-19"}, [_v(_s(translate($module, $module).substring(0, 2)))]) : _c("i", {
            staticClass: "h5 mb-1 mr-2",
            class: getModuleIconClass($module),
            attrs: {title: translate($module, $module)}
        })])
    }
});
var Vtiger_Component_Notifier = App.vtComponent.extend({
    created() {
        this.initWebSockets(), this.listenForNotifierMessage()
    }, methods: {
        initWebSockets() {
            AppStorage.get("notifier_url") ? Notifier_CommonHeader_Js.registerEvents() : this.appStore.request("api_get", {url: "notifier"}).then(e => {
                e && e.notifier_url && (AppStorage.set("notifier_url", e.notifier_url), AppStorage.set("current_userid", e.current_userid), Notifier_CommonHeader_Js.registerEvents())
            })
        }, listenForNotifierMessage() {
            var e = this;
            App.notification.listen("Notifications", (function (t) {
                e.process(t)
            })), App.notification.listen("RealTimeNotification", (function (t) {
                e.process(t)
            }))
        }, process(e) {
            let t, i = {};
            t = e && "Notifications" === e.dataModule && e.mode ? e.mode : e && "RealTimeNotification" === e.dataModule ? "RealTimeNotification" : "count", this.appStore.request("api_get", {
                url: "notifier",
                params: {module: "Notifications", type: t}
            }).then(t => {
                if (t) {
                    let o = "nc_desktop_alert_" + t.id;
                    if (localStorage.getItem(o)) return !0;
                    localStorage.setItem(o, !0), window.setTimeout((function () {
                        localStorage.removeItem(o)
                    }), 2e3), this.ringBell(t.count, t.sound);
                    let a = "__vt_NC_Id" + (new Date).getTime(), s = !1, n = !1;
                    e && "RealTimeNotification" === e.dataModule ? (s = "view/list?module=Notifications&tab=notification&subtab=tracks&tracktab=", ["Emails", "Documents"].includes(t.type) && ["Reply", "Comment"].includes(t.action) ? (s += "replies", n = "replies") : "Documents" === t.type && "Download" === t.action ? (s += "downloads", n = "downloads") : "Documents" === t.type && "Reshare" === t.action ? (s += "reshares", n = "reshares") : (s += "opens", n = "opens")) : t.params && t.params.module && t.params.id && (s = "view/detail?module=" + t.params.module + "&id=" + t.params.id, t.params.commentid && (s += "&activity=ModComments&selectedActivityId=" + t.params.commentid)), !n && t.alert_type && (n = t.alert_type), i[a] = s, n && this.appStore.set({
                        key: "actions_reload_type",
                        data: n
                    }), App.getDesktopNotifier("Notifications", a).show({
                        title: t.title,
                        body: t.body,
                        icon: "layouts/v9/assets/images/bell.png",
                        onClick: function (e) {
                            var t = e.currentTarget.tag, o = t.substr(t.indexOf("Notifications") + 13), a = i[o];
                            a && (window.open(a), this.close())
                        }
                    })
                }
            })
        }, ringBell(e, t) {
            parseInt(e) > 0 && t && jQuery.playSound("layouts/v9/assets/bower_components/jquery-play-sound/Notification_Sound")
        }
    }, render: function anonymous() {
        with (this) return _c("span")
    }
});
var Vtiger_Component_OnBoardController = App.vtComponent.extend({
    methods: {
        registerListeners() {
            this.$root.$on("vds::onboard::init", t => {
                if (this.$root.tour && "starttour" == this.$root.tour.id && this.$root.tour.next(), this.$root.tour = new Shepherd.Tour({
                    useModalOverlay: !0,
                    defaultStepOptions: {cancelIcon: {enabled: !0}, scrollTo: {behavior: "smooth", block: "center"}}
                }), this.$root.tour.tourId = t.id, this.$root.tour.on("complete", () => {
                    t.markComplete = !0, "starttour" == t.id && (t.completed = !0), this.$root.$once("vds::onboard::save", () => {
                        this.saveData()
                    })
                }), t.isParent) {
                    let e = t.subList;
                    for (var o in e) {
                        let r = e[o];
                        r.parentId = t.id, r.$root = this.$root, this.$root.tour.addStep(r)
                    }
                    this.$root.tour.start()
                }
            })
        }, getPostData() {
            let t = Vtiger_OnBoardItemsCollection_Model.itemsList, o = {};
            for (var e in t) {
                let r = t[e];
                o[r.id] = {completed: r.completed}
            }
            return o
        }, saveData() {
            let t = this.getPostData();
            this.appStore.request("api_post", {
                url: "/onboard",
                params: {module: "Ondemand", stepsinfo: t}
            }).then(() => {
            })
        }
    }, created() {
        this.registerListeners()
    }, template: "<span></span>"
});
var Vtiger_Component_Pagination = App.vtComponent.extend({
    props: {currentPage: {}, nextPageExist: {}, currentPageCount: {}, showPageJump: {type: Boolean, default: !0}},
    data: function () {
        return {currentpage: parseInt(this.currentPage)}
    },
    render: function anonymous() {
        with (this) return totalCount > 0 || currentPageCount > 0 ? _c("div", {staticClass: "listViewActions d-flex align-items-center"}, [_c("button", {
            staticClass: "btn btn-sm vt-nav-button p-0",
            attrs: {id: "PreviousPageButton", type: "button", disabled: 1 == currentpage},
            on: {click: alterPageCount}
        }, [_c("span", {
            staticClass: "fa fa-chevron-left",
            attrs: {"aria-hidden": "true"}
        })]), _v(" "), showPageJump ? _c("b-dropdown", {
            ref: "paginationDropdown",
            staticClass: "p-0 mr-auto pageNumberText",
            attrs: {right: "", variant: "default", "no-caret": "", disabled: 1 == lastpage && !_nextPageExist}
        }, [_c("div", {
            attrs: {slot: "button-content"}, on: {
                click: function (t) {
                    !totalCount && (1 != lastpage || _nextPageExist) && $emit("vds::load::listview::count")
                }
            }, slot: "button-content"
        }, [_c("span", {
            staticClass: "badge badge-dark c-pointer px-3 py-2",
            attrs: {"data-currentpage": currentpage, "data-pagelimit": pageLimit}
        }, [_v(_s(startingcount) + " " + _s(translate("LBL_TO").toLowerCase()) + " " + _s(endingcount))])]), _v(" "), _c("div", {staticClass: "d-flex flex-column align-items-center p-2"}, [_c("div", {staticClass: "listview-pagenum text-center w-75"}, [totalCount ? [_v(" " + _s(translate("LBL_TOTAL")) + " - " + _s(totalCount) + " ")] : [_c("vds-value-progress")]], 2), _v(" "), _c("div", {staticClass: "d-flex justify-content-center align-items-center listview-pagejump p-2 w-100"}, [totalCount ? [_c("span", {staticClass: "mr-2"}, [_v(_s(translate("LBL_PAGE")))]), _v(" "), _c("input", {
            ref: "pageToJump",
            staticClass: "input w-25 border rounded text-center",
            attrs: {type: "text", id: "pageToJump"},
            domProps: {value: currentpage},
            on: {
                keyup: function (t) {
                    return !t.type.indexOf("key") && _k(t.keyCode, "enter", 13, t.key, "Enter") ? null : jumpToPage(t)
                }
            }
        }), _v(" "), _c("span", {staticClass: "mx-2"}, [_v(_s(translate("LBL_OF")))]), _v(" "), _c("span", {staticClass: "px-1"}, [_v(_s(lastpage))])] : [_c("vds-value-progress")]], 2), _v(" "), _c("div", {staticClass: "listview-pagenum text-center"}, [_c("button", {
            staticClass: "btn btn-primary btn-sm listViewPagingInputSubmit text-center",
            attrs: {
                disabled: !totalCount,
                id: "pageToJumpSubmit",
                "data-toggle": "collapse",
                "data-target": "#PageJumpDropDown",
                type: "button"
            },
            on: {click: jumpToPage}
        }, [_v(_s(translate("LBL_GO")))])])])]) : _e(), _v(" "), showPageJump ? _e() : _c("div", {staticClass: "mx-1 mb-1"}, [_c("span", {
            staticClass: "badge badge-dark c-pointer px-3 py-2",
            attrs: {"data-currentpage": currentpage, "data-pagelimit": pageLimit}
        }, [_v(_s(startingcount) + " " + _s(translate("LBL_TO").toLowerCase()) + " " + _s(endingcount))])]), _v(" "), _c("button", {
            staticClass: "btn btn-sm vt-nav-button p-0",
            attrs: {id: "NextPageButton", type: "button", disabled: !_nextPageExist},
            on: {click: alterPageCount}
        }, [_c("span", {staticClass: "fa fa-chevron-right", attrs: {"aria-hidden": "true"}})])], 1) : _e()
    },
    computed: {
        startingcount() {
            return (this.currentpage - 1) * this.pageLimit + 1
        }, endingcount() {
            if (this.totalCount) {
                var t = this.currentpage * this.pageLimit;
                return this.totalCount && this.totalCount < t ? this.totalCount : t
            }
            if (this.currentPageCount) return (this.currentpage - 1) * this.pageLimit + this.currentPageCount
        }, lastpage() {
            return this.totalCount ? Math.ceil(this.totalCount / this.pageLimit) : this.currentpage
        }, _nextPageExist() {
            return this.totalCount ? Math.ceil(this.totalCount / this.pageLimit) != this.currentpage : !(_.isUndefined(this.nextPageExist) || !this.nextPageExist)
        }, totalCount() {
            return this.pageparams.totalcount
        }, pageLimit() {
            return this.pageparams.pagelimit
        }, pageparams: {
            get() {
                return this.appStore.get("list_pageparams")
            }, set(t) {
                this.appStore.set({key: "list_pageparams", data: t})
            }
        }
    },
    methods: {
        alterPageCount: function (t) {
            "NextPageButton" == t.currentTarget.id && (this.endingcount < this.totalCount || this._nextPageExist) ? this.currentpage++ : "PreviousPageButton" == t.currentTarget.id && this.startingcount > 1 && this.currentpage > 0 && (this.currentpage -= 1), this.$emit("update:currentPage", this.currentpage), this.$emit("vds::reset::selected::records")
        }, jumpToPage: function (t) {
            var e = this.$refs.pageToJump.value;
            e > this.lastpage || e < 0 ? this.showErrorNotification(this.translate("JS_PAGE_NOT_EXIST")) : parseInt(e) ? this.currentpage == e ? this.$refs.paginationDropdown.hide(!0) : this.currentpage > 0 && (this.currentpage = e, this.$emit("update:currentPage", this.currentpage), this.$refs.paginationDropdown.hide(!0), this.$emit("vds::reset::selected::records")) : this.showErrorNotification(this.translate("JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO"))
        }
    },
    watch: {
        currentPage: function (t) {
            this.currentpage = parseInt(t)
        }
    }
});
Vue.component("vds-permission-denied", App.vtComponent.extend({
    name: "vds-permission-denied",
    mixins: [Vtiger_Mixin_Module],
    props: {
        message: {type: String, default: "AcessDenied"},
        showBack: {type: Boolean, default: !0},
        isPreview: {type: Boolean, default: !1}
    },
    methods: {
        showListView() {
            let t = this.getListViewUrl(this.$module);
            this.redirectUrl(t)
        }, goBack() {
            this.isPreview ? this.$bubble("vds::detail::preview::close", this.$id) : window.history.length > 1 ? window.history.back() : this.showListView()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "my-4 mx-5 d-flex justify-content-center flex-column"}, [_m(0), _v(" "), "AcessDenied" == message || "" == message ? _c("div", {staticClass: "mb-3 text-grey"}, [_c("h4", {staticClass: "text-center"}, [_v(_s(translate("LBL_RECORD_ACCESS_DENIED")))]), _v(" "), _c("h4", {
            staticClass: "text-center",
            domProps: {innerHTML: _s(translate("LBL_CONTACT_ADMINISTRATOR"))}
        })]) : _c("div", {staticClass: "mb-3"}, [_c("h4", {staticClass: "text-center text-danger"}, [_v(_s(translate(message)))])]), _v(" "), showBack ? _c("div", {staticClass: "d-flex justify-content-center align-items-center mb-5"}, [_c("button", {
            staticClass: "btn btn-secondary px-3 py-1 font-16",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return goBack()
                }
            }
        }, [_v("\n                    " + _s(translate("LBL_GO_BACK")) + "\n                ")])]) : _e()])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "text-center mb-5"}, [_c("i", {staticClass: "fa-10x fas fa-image"})])
    }]
}));
var Vtiger_Component_PermissionDeniedModal = App.vtComponent.extend({
    props: {isPreview: {type: Boolean, default: !1}},
    mounted() {
        this.$on("vds::detail::preview::close", () => {
            this.$root.$emit("bv::hide::modal", "permissionDeniedModal")
        })
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "permissionDeniedModal",
                size: "xxl",
                "hide-header": !0,
                "hide-footer": !0,
                "body-class": "p-0 border rounded shadow"
            }
        }, [_c("div", {staticClass: "vds-body"}, [_c("vds-permission-denied", {attrs: {"is-preview": isPreview}})], 1)])
    }
});
var Vtiger_Component_PickListDropdown = App.vtComponent.extend({
    model: {prop: "selectedValue", event: "update::selected::value"},
    props: {
        selectedValue: {type: String},
        pickListValues: {type: Array},
        closedStateValues: {type: Array},
        disabled: {type: Boolean, default: !1}
    },
    data: () => ({searchValue: ""}),
    computed: {
        selectedValueLabel() {
            if (this.pickListValues) {
                return this.pickListValues.find(e => e.value == this.selectedValue).label
            }
        }, hasSearchResults() {
            for (let e in this.pickListValues) if (0 == this.pickListValues[e].hide || _.isUndefined(this.pickListValues[e].hide)) return !0;
            return !1
        }
    },
    methods: {
        onSearchStatus(e) {
            let t = e.target.value;
            if (this.pickListValues) for (let e in this.pickListValues) this.pickListValues[e].label.toLowerCase().includes(t.toLowerCase()) ? Vue.set(this.pickListValues[e], "hide", !1) : Vue.set(this.pickListValues[e], "hide", !0)
        },
        getStageColor(e) {
            for (let t in this.pickListValues) if (this.pickListValues[t].value == e) return this.pickListValues[t].color ? this.pickListValues[t].color : "#8E9093"
        },
        closeStatusDropDown() {
            this.$refs.picklistDropdown.hide(!0)
        },
        getPicklistTextColor: e => "#8E9093" == e ? "#fff" : _.isUndefined(e) ? "#1C2121" : VTHelper.pickTextColorBasedOnBgColorSimple(e),
        updateSelectedValue(e) {
            this.$emit("update::selected::value", e)
        },
        dropDownShow() {
            jQuery(this.$el).closest("#picklistDropdown").find("#picklistDropdownContent").slimScroll({
                height: "",
                alwaysVisible: !1,
                disableFadeOut: !0
            }), setTimeout(() => {
                jQuery(this.$el).closest("#picklistDropdown").find("input").focus()
            }, 0)
        },
        resetPickListValues() {
            this.searchValue = "";
            for (let e in this.pickListValues) Vue.set(this.pickListValues[e], "hide", !1)
        }
    },
    render: function anonymous() {
        with (this) return _c("b-dropdown", {
            ref: "picklistDropdown",
            staticClass: "selectStatusDropdown border-radius-4",
            style: {
                backgroundColor: getStageColor(selectedValue),
                color: getPicklistTextColor(getStageColor(selectedValue))
            },
            attrs: {
                id: "picklistDropdown",
                disabled: disabled,
                text: selectedValueLabel,
                title: selectedValueLabel,
                right: "",
                "no-caret": ""
            },
            on: {show: dropDownShow, hide: resetPickListValues}
        }, [_c("div", {attrs: {id: "picklistDropdownContent"}}, [_c("div", {staticClass: "py-2"}, [_c("div", {staticClass: "d-flex align-items-center justify-content-between px-3"}, [_c("span", [_v(_s(translate("LBL_CHANGE") + " " + translate("Status")))]), _v(" "), _c("span", [_c("i", {
            staticClass: "fa fa-times text-grey-4 c-pointer",
            on: {click: closeStatusDropDown}
        })])]), _v(" "), _c("hr", {staticClass: "mt-2 mb-2"}), _v(" "), pickListValues && pickListValues.length > 10 ? _c("div", {staticClass: "bd-highlight form-inline has-search position-relative w-100 mb-2 px-3"}, [_c("div", {staticClass: "form-control-feedback c-pointer"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: searchValue,
                expression: "searchValue"
            }],
            staticClass: "form-control w-100 height-30px",
            attrs: {type: "text", placeholder: translate("LBL_TYPE_SEARCH")},
            domProps: {value: searchValue},
            on: {
                input: [function (e) {
                    e.target.composing || (searchValue = e.target.value)
                }, onSearchStatus]
            }
        })]) : _e(), _v(" "), _l(pickListValues, (function (e, t) {
            return [e.hide ? _e() : _c("b-dropdown-item", {
                staticClass: "px-3 d-flex align-items-center justify-content-between",
                attrs: {id: e.value, title: e.label},
                on: {
                    click: function (t) {
                        return updateSelectedValue(e.value)
                    }
                }
            }, [_c("div", {staticClass: "d-flex align-items-center w-85"}, [_c("div", {
                staticClass: "smallBadge mr-2",
                class: ["#FFFFFF" == getStageColor(e.value) ? "border" : ""],
                style: {background: getStageColor(e.value)}
            }), _v(" "), _c("div", {staticClass: "text-truncate w-85"}, [_v(_s(e.label))])]), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "hw-13px"}, [closedStateValues && closedStateValues.includes(e.value) ? _c("i", {staticClass: "fa fa-ban text-grey-4 mr-2"}) : _e()]), _v(" "), _t("emotion", null, {fieldValueObj: e})], 2), _v(" "), _t("title", null, {fieldValueObj: e})], 2)]
        })), _v(" "), hasSearchResults ? _e() : [_c("div", {staticClass: "text-center"}, [_v(_s(translate("JS_NO_RESULTS_FOUND")))])]], 2), _v(" "), _t("extra-info")], 2)])
    }
});
var Vtiger_Component_ProductAnalytics = App.vtComponent.extend({
    name: "ProductAnalytics", created() {
        this.init()
    }, methods: {
        track(t, o) {
            o || (o = {}), o.version = "v8", "undefined" != typeof websense && websense.event(t, o)
        }, init() {
            var t = this;
            App.root.$on("vds::onboard::init", o => {
                t.track("Onboard Step", {name: o.id, stage: "start"}), setTimeout(() => {
                    this.$root.tour.once("show", (function ({previous: o, step: e}) {
                        let i = App.root.tour.id;
                        if ((!o || !o.id) && i) {
                            var c = App.root.tour.steps, r = {};
                            for (var a in c) {
                                var s = c[a];
                                if (s.id == e.id) break;
                                r = s
                            }
                            o = r
                        }
                        t.track("Onboard Step", {name: o.id, stage: "intermediate", parent: App.root.tour.tourId})
                    })), this.$root.tour.on("complete", (function (o) {
                        t.track("Onboard Step", {name: App.root.tour.tourId, stage: "finish"})
                    })), this.$root.tour.on("cancel", (function () {
                        t.track("Onboard Step", {name: App.root.tour.tourId, stage: "cancel"})
                    }))
                }, 500)
            }), App.root.$on("vds::onboard::shown", () => {
                this.track("Onboard Icon Clicked", {stage: "start"})
            }), App.root.$on("vds::menu::shown", () => {
                this.track("Menu Clicked", {stage: "start"})
            }), App.root.$on("vds::menu::module::search", t => {
                this.track("Menu Module Search", {name: t})
            }), App.root.$on("vds::menu::module::click", t => {
                this.track("Menu Module Clicked", {name: t})
            }), App.root.$on("vds::globalquickcreate::click", t => {
                this.track("Global Quick Create Clicked", {app: t})
            }), App.root.$on("vds::globalsearch::click", () => {
                this.track("Global Search Clicked")
            }), App.root.$on("vds::userprofileicon::click", () => {
                this.track("User Profile Icon Clicked")
            }), App.root.$on("vds::userpreference::click", () => {
                this.track("User Preference Clicked")
            }), App.root.$on("vds::settings::click", () => {
                this.track("Settings Clicked")
            }), App.root.$on("vds::userprofile::guidedtour::click", () => {
                this.track("User Preference Guided Tour Clicked")
            }), App.root.$on("vds::whatsnew::click", () => {
                this.track("Whatsnew Clicked")
            }), App.root.$on("vds::billing::click", () => {
                this.track("Billing Clicked")
            }), App.root.$on("vds::aboutus::click", () => {
                this.track("About Us Clicked")
            }), App.root.$on("vds::logout::click", () => {
                this.track("Logout Clicked")
            }), App.root.$on("vds::global::search::record::search", () => {
                this.track("Global Search Record Searched")
            }), App.root.$on("vds::dashboard::tab::widget::add", t => {
                this.track("Dashboard Widget Added", t)
            }), App.root.$on("vds::dashboard::duplicate::click", t => {
                this.track("Dashboard Duplicate Clicked", {name: t})
            }), App.root.$on("vds::dashboard::save::as::image::click", t => {
                this.track("Dashboard Save As Image Clicked", {name: t})
            }), App.root.$on("vds::dashboard::print::click", t => {
                this.track("Dashboard Print Clicked", {name: t})
            }), App.root.$on("vds::dashboard::project::click", t => {
                this.track("Dashboard Project Clicked", {name: t})
            }), App.root.$on("vds::notifications::action::click", t => {
                this.track("Notifications Action Clicked", {name: t})
            }), App.root.$on("vds::notifications::tab::click", t => {
                this.track("Notifications Tab Clicked", {name: t})
            }), App.root.$on("vds::notifications::configuration::click", () => {
                this.track("Notifications Configuration Clicked")
            }), App.root.$on("vds::notifications::broadcast::click", () => {
                this.track("Notifications Broadcast Clicked")
            }), App.root.$on("vds::notifications::new::action::click", () => {
                this.track("Notifications New Action Clicked")
            }), App.root.$on("vds::custom::life::cycle::alert::add", t => {
                this.track("Custom Life Cycle Alert Added", t)
            }), App.root.$on("vds::import::source::module::select", t => {
                this.track("Import Source Module Selected", {name: t})
            }), App.root.$on("vds::start::import::click", () => {
                this.track("Start Import Clicked")
            }), App.root.$on("vds::start::import::background::click", () => {
                this.track("Start Import Background Clicked")
            }), App.root.$on("vds::import::more::click", () => {
                this.track("Import More Clicked")
            }), App.root.$on("vds::import::finish::click", () => {
                this.track("Import Finish Clicked")
            }), App.root.$on("vds::import::undo::click", () => {
                this.track("Import Undo Clicked")
            }), App.root.$on("vds::deals::journey::tasks::click", () => {
                this.track("Deals Journey Tasks Tab Clicked")
            }), App.root.$on("vds::deals::analytics::click", () => {
                this.track("Deals Analytics Tab Clicked")
            }), App.root.$on("vds::deals::life::cycle::pipeline::click", () => {
                this.track("Deals Life Cycle Pipeline Clicked")
            }), App.root.$on("vds::deals::progression::bar::click", () => {
                this.track("Deals Progression Bar Clicked")
            }), App.root.$on("vds::journey::templates::add::task::click", () => {
                this.track("Journey Templates Add Task Clicked")
            }), App.root.$on("vds::journey::templates::task::add", () => {
                this.track("Journey Templates Task Added")
            }), App.root.$on("vds::email::sequence::add::click", () => {
                this.track("Email Sequence Add Clicked")
            }), App.root.$on("vds::email::sequence::added", t => {
                this.track("Email Sequence Added", t)
            }), App.root.$on("vds::phone::call::click", () => {
                this.track("Phone Call Clicked")
            }), App.root.$on("vds::phone::call::another::number::click", () => {
                this.track("Phone Call Another Number Clicked")
            }), App.root.$on("vds::phone::call::trigger", () => {
                this.track("Phone Call Trggered")
            }), App.root.$on("vds::list::view::click", t => {
                this.track("List View Clicked", {name: t})
            }), App.root.$on("vds::kanban::view::click", t => {
                this.track("Kanban View Clicked", {name: t})
            }), App.root.$on("vds::list::filter::click", t => {
                this.track("List Filter Clicked", {name: t})
            }), App.root.$on("vds::list::filter::change", t => {
                this.track("List Filter Changed", t)
            }), App.root.$on("vds::list::filter::add::click", t => {
                this.track("List Filter Add Clicked", {name: t})
            }), App.root.$on("vds::deepdive::click", t => {
                this.track("Deep Dive Clicked", {name: t})
            }), App.root.$on("vds::summary::click", t => {
                this.track("Summary Clicked", {name: t})
            }), App.root.$on("vds::detail::view::new::action::click", t => {
                this.track("Detail View New Action Clicked", {name: t})
            }), App.root.$on("vds::record::add", t => {
                this.track("Record Added", {name: t})
            })
        }
    }, template: "<span></span>"
});
var Vtiger_Component_QuickCreateAction = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "quickCreate",
                lazy: !0,
                "hide-footer": "",
                size: "lg",
                title: modalTitle
            }
        }, [_c("div", [_c("vds-record-create", {
            attrs: {
                module: module,
                relationOperation: relatedAction,
                relationModule: relatedModule,
                recordId: recordId
            }
        })], 1)])
    },
    components: {"vds-record-create": App.loadComponent("RecordCreateForm")},
    props: {
        module: {required: !0, default: ""},
        recordId: {},
        relatedModule: {},
        relatedAction: {required: !0, default: !1}
    },
    computed: {
        modalTitle() {
            return this.translate("LBL_QUICK_CREATE", "Settings:LayoutEditor") + " > " + this.relatedModule
        }
    }
});
var Vtiger_Component_QuickCreateModalContents = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, App.loadMixin("Record"), Vtiger_Mixin_Validators, Vtiger_Mixin_PicklistDependency, App.loadMixin("ReferenceAutoSelect"), App.loadMixin("DependentFields"), App.loadMixin("DependencyValidator"), Vtiger_Mixins_UnimplementedModulesList, Vtiger_Mixin_RelationUtils],
    components: {
        "vds-record-quick-create": App.loadComponent("RecordQuickCreate"),
        "vds-comingsoon-view": App.loadComponent("ComingsoonView")
    },
    render: function anonymous() {
        with (this) return _c("div", [comingSoonModules.includes(module) ? _c("div", [_c("vds-comingsoon-view", {attrs: {"is-subview": !0}})], 1) : _c("div", [_c("div", {
            staticClass: "px-4 pt-4",
            attrs: {slot: "modal-body"},
            slot: "modal-body"
        }, [_c("vds-record-quick-create", _b({
            ref: "recordQuickCreate",
            attrs: {module: module, record: recordModel, createViewFields: createViewFields},
            on: {
                "vds::submit::form": function (e) {
                    return save()
                }
            }
        }, "vds-record-quick-create", $attrs, !1))], 1), _v(" "), _c("hr", {staticClass: "mt-0"}), _v(" "), showFooter ? _c("div", {
            staticClass: "d-flex w-100 justify-content-end px-4",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-secondary mx-1 cancel",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return cancelModal()
                }
            }
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), showSaveAndContinueBtn ? _c("button", {
            staticClass: "btn btn-primary mx-1 saveandcontinue",
            attrs: {type: "button", disabled: saveClicked},
            on: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : save()
                }, click: function (e) {
                    return save(!0)
                }
            }
        }, [_v(_s(translate("LBL_SAVE_AND_CONTINUE")))]) : _e(), _v(" "), showSaveBtn ? _c("button", {
            staticClass: "btn btn-success mx-1 save",
            attrs: {type: "button", disabled: saveClicked},
            on: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : save()
                }, click: function (e) {
                    return save()
                }
            }
        }, [_v(_s(translate("LBL_SAVE")))]) : _e()]) : _e()])])
    },
    props: {
        module: {required: !0, default: ""},
        record: {required: !1},
        relationModule: {required: !1},
        relationOperation: {required: !1, default: !1},
        showFooter: {required: !1, default: !0},
        showSaveAndContinueBtn: {required: !1, default: !0},
        modalId: {type: [String], required: !0},
        recordData: {
            type: Object, default: () => {
            }
        },
        moduleApp: {type: String, default: ""}
    },
    data() {
        return {
            recordModel: BaseModel.getModuleSpecificModel(this.module, "Record", this.recordData),
            relationId: "",
            fieldListVar: "createViewFields",
            saveClicked: !1,
            showDeepDive: !1,
            showSuccessNotifier: !0,
            showSaveBtn: !0
        }
    },
    computed: {
        $_moduleModel_Name() {
            return this.module
        }, createViewFields() {
            let e = this.$_currentModuleModel;
            return this.relationOperation && (e = this.$_currentModuleModel), e.getQuickCreateFields()
        }, labelFields() {
            return this.$_currentModuleModel.getLabelFields()
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.recordModel
        }, getAfterSaveView: () => "deepdive"
    },
    created() {
        this.setFieldDefaultValues(this.module, this.recordModel), this.watchForUserCurrencyId();
        let e = this.$watch("$_currentModuleModel", t => {
            t.isLoaded && (this.fillRelatedRecordReferenceField(), Vue.nextTick(() => {
                e()
            }))
        }, {immediate: !0});
        this.setStoreEnvironmentForReference()
    },
    watch: {
        "$store.state.quickcreate_save_button_show"(e) {
            e && (this.appStore.set({key: "quickcreate_save_button_show", data: !1}), this.saveClicked = !1)
        }
    },
    mounted() {
        let e = this.$watch("createViewFields", t => {
            _.size(t) && (this.focusOnFirstField(), e())
        });
        setTimeout(() => {
            this.$watch("recordModel", (e, t) => {
                this.$emit("vds::enable::discard::confirmation::option")
            }, {deep: !0})
        }, 300)
    },
    methods: {
        watchForUserCurrencyId() {
            let e = this.$watch("$currentUser", t => {
                Vue.set(this.recordModel, "record_currency_id", t.currency_id), Vue.set(this.recordModel, "record_conversion_rate", t.conv_rate), Vue.nextTick(() => {
                    e()
                })
            }, {immediate: !0})
        }, getRelationId(e) {
            return this.retrieveRelationModels(e)
        }, triggerPostQuickCreateEvent(e) {
            this.$emit("vds::post::quickcreate::save", e)
        }, async save(e = !1) {
            if (this.$emit("update:showDeepDiveVal", e), this.saveClicked = !0, this.relationOperation) {
                let e = "Tasks" == this.module || "Events" == this.module ? "Calendar" : this.module;
                "Events" == this.module ? this.recordModel.set("module", "Events") : this.recordModel.set("module", e), "Tasks" == this.module && this.recordModel.set("activitytype", "Task");
                var t = await this.getRelationId(this.relationModule), i = this.getRequiredRelation(t, e);
                let r = i.relationfieldname;
                r && !this.recordModel[r] && this.recordModel.set(r, this.record.getId()), this.recordModel.set("relationOperation", this.relationOperation), this.recordModel.set("returnrelationId", i.relation_id), this.recordModel.set("sourceModule", this.relationModule), this.recordModel.set("sourceRecord", this.record.getId())
            }
            "Documents" == this.module && (this.recordModel.filestatus = 1, this.recordModel.filelocationtype = "I");
            let r = this.module;
            this._getModuleDescribe(r).then(t => {
                this.$validator.validate().then(i => {
                    if (i) {
                        let i = this.prepareRecordToSave();
                        this.saveRecord(i, t, !0).then(t => {
                            if (this.saveClicked) {
                                this.triggerPostQuickCreateEvent(t), this.relationOperation && this.$root.$emit("vds::post::related::record::quickcreate::save", t), this.$emit("vds::close::quick::create::modal", this.saveClicked);
                                var i = this.getRecordDetailViewUrl(t.getId(), this.module);
                                if (e) {
                                    this.relationOperation && 0 == this.$namespaceStore.indexOf("preview_") && this.$bubble("vds::detail::preview::close", this.record.getId());
                                    var r = this.getAfterSaveView;
                                    this.moduleApp && this.$bubble("vds::load::module::app", this.module, this.moduleApp), this.redirectUrl(i + "&viewtype=" + r)
                                } else this.showSuccessNotifier && this.showSuccessNotification(this.translate("JS_RECORD_CREATED") + "<a href=" + i + ' class="text-success float-right mr-3" target="_blank">' + this.translate("JS_VIEW_RECORD") + "</a>")
                            }
                        }, e => {
                            e.duplicate_exception || this.showErrorNotification(e), this.saveClicked = !1
                        })
                    } else {
                        if (this.errors && this.errors.items && this.errors.items[0]) {
                            let e = jQuery("[name=" + this.errors.items[0].field + "]");
                            e && e.find("input,select,textarea").focus()
                        }
                        this.saveClicked = !1
                    }
                })
            })
        }, getRequiredRelation(e, t) {
            var i = "";
            for (var r in e) if (e[r].relatedModuleName === t) {
                i = e[r];
                break
            }
            return i
        }, prepareRecordToSave() {
            return this.recordModel
        }, focusOnFirstField() {
            setTimeout(() => {
                for (let e in this.createViewFields) {
                    let t = this.createViewFields[e];
                    if (Object.keys(this.$refs).includes(t.name)) {
                        jQuery(this.$refs[t.name].$el).find("input,select").focus();
                        break
                    }
                }
            }, 0)
        }, fillRelatedRecordReferenceField() {
            this.relationModule && this._getModuleDescribe(this.relationModule).then(e => {
                let t = e.getFieldsOfType(["reference", "multireference"]),
                    i = this.$_currentModuleModel.getFieldsOfType(["reference", "multireference"]),
                    r = this.record.label;
                if (_.isUndefined(r)) {
                    r = "";
                    let t = e.getLabelFields();
                    for (let e of t) r += this.record.get(e) + " ";
                    r.trimEnd()
                }
                "Potentials" == this.relationModule && "Project" == this.module && this.recordModel.set("projectname", r);
                let s = {id: this.record.getId(), module: this.relationModule, label: r, record: this.record};
                for (var o in i) {
                    let e = i[o], r = e.referenceModuleList,
                        l = "Tasks" == this.relationModule ? "Calendar" : this.relationModule;
                    if (r.includes(l)) {
                        e.isMultiReferenceField ? (Vue.set(this.recordModel, o, []), this.recordModel[o].push(s)) : this.recordModel.set(o, s);
                        continue
                    }
                    let a = !1;
                    for (var d in t) {
                        let i = t[d], s = this.record.get(d);
                        if (!i.isCustomField && s && 0 != s.value && r.includes(s.module)) {
                            e.isMultiReferenceField ? this.recordModel.set(o, [s]) : this.recordModel.set(o, s), a = !0;
                            break
                        }
                    }
                    if (!a) for (var d in t) {
                        let i = t[d], s = this.record.get(d);
                        i.isCustomField && s && 0 != s.value && r.includes(s.module) && (e.isMultiReferenceField ? this.recordModel.set(o, [s]) : this.recordModel.set(o, s))
                    }
                }
            })
        }, cancelModal() {
            this.$emit("vds::close::quick::create::modal", this.saveClicked)
        }
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_QuickCreateModules = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal], props: {selectedApp: {type: String}}, data() {
        return {
            allowedModulesByApp: {},
            appSelected: this.selectedApp ? this.selectedApp : AppStorage.get("parentApp") ? AppStorage.get("parentApp") : "SALES",
            showAllModules: !1,
            exceptionalModule: ["Esign"]
        }
    }, computed: {
        modalHeader() {
            return this.translate("LBL_QUICK_CREATE") + " > " + (this.showAllModules ? this.translate("All") : VTHelper.toPascalCase(this.appSelected.toLowerCase()))
        }, appModules() {
            if (!_.isEmpty(this.appSelected) && !_.isEmpty(this.allowedModulesByApp)) {
                if (!_.isEmpty(this.allowedModulesByApp[this.appSelected])) return this.sortModules(this.allowedModulesByApp[this.appSelected]);
                this.showAll()
            }
            return []
        }, allModules() {
            if (!_.isEmpty(this.allowedModulesByApp)) {
                let e = ["Contacts", "Accounts", "Tasks", "Events", "Documents", "Leads", "Esign"], t = [],
                    s = jQuery.extend(!0, {}, this.allowedModulesByApp), l = {};
                for (let i in s) {
                    l[i] = [];
                    for (let o of s[i]) e.includes(o) ? t.includes(o) || t.push(o) : l[i].push(o)
                }
                let i = {};
                _.isEmpty(t) || (i.ESSENTIALS = this.sortModules(t));
                for (let e in l) _.isEmpty(l[e]) || (i[e] = this.sortModules(l[e]));
                return i
            }
            return {}
        }
    }, mounted() {
        this.getQuickCreateAllowedModules()
    }, methods: {
        getQuickCreateAllowedModules() {
            this.__getModulesWithPermissions().then(e => {
                if (!_.isEmpty(e)) {
                    let t = e.app_modules, s = e.app_module_permissions;
                    if (!_.isEmpty(t) && !_.isEmpty(s)) {
                        let e = {};
                        for (let l in t) {
                            e[l] = [];
                            let i = _.isArray(t[l]) ? t[l].indexOf("Calendar") : -1;
                            i > -1 && (t[l].splice(i, 1), t[l].splice(i, 0, "Events"), t[l].indexOf("Tasks") < 0 && t[l].splice(i + 1, 0, "Tasks"));
                            for (let i of t[l]) {
                                let t = s[i];
                                "Tasks" !== i && "Events" !== i || (t = s.Calendar), !_.isEmpty(t) && t.creatable && (t.quick_create_allowed || this.exceptionalModule.includes(i)) && e[l].push(i)
                            }
                        }
                        this.allowedModulesByApp = e
                    }
                }
            })
        }, __getModulesWithPermissions() {
            return new Promise((e, t) => {
                let s = AppStorage.get("app_modules", {}), l = AppStorage.get("app_module_permissions", {});
                Object.keys(s).length && Object.keys(l).length ? e({
                    app_modules: s,
                    app_module_permissions: l
                }) : this.appStore.request("api_get", {url: "apps/modules", key: "apps"}).then(t => {
                    e(t)
                })
            })
        }, showAll() {
            this.showAllModules = !0
        }, appNameToPascalCase: e => VTHelper.toPascalCase(e.toLowerCase()), quickCreateModule(e, t) {
            this.$root.$emit("bv::hide::modal", "quickCreateModules");
            let s = AppStorage.get("app_module_permissions", {}), l = !!s[e] && s[e].quick_create_allowed;
            !this.exceptionalModule.includes(e) || l ? this.showModal({
                componentName: App.loadComponent("QuickCreateModal", e),
                componentData: {module: e, moduleApp: t}
            }) : this.redirectUrl("view/edit?module=" + e, {}, !0)
        }, sortModules(e) {
            return e.sort((e, t) => {
                let s = this.translate(e, e), l = this.translate(t, t);
                return s < l ? -1 : s > l ? 1 : 0
            })
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "quickCreateModules",
                title: modalHeader,
                size: "lg",
                "hide-footer": "",
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-0",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c("div", {staticClass: "w-100 px-3 pt-3"}, [showAllModules ? [_c("div", {staticClass: "w-100 p-0"}, _l(allModules, (function (e, t) {
            return _c("div", {
                key: t,
                staticClass: "w-100 p-0 mb-3"
            }, [_c("div", {staticClass: "w-100 px-2"}, [_c("h5", {staticClass: "m-0 font-14"}, [_v(_s(appNameToPascalCase(t)))])]), _v(" "), _c("div", {staticClass: "col-12 p-0"}, _l(e, (function (e) {
                return _c("div", {
                    key: e,
                    staticClass: "col-4 p-2 d-inline-flex"
                }, [_c("div", {
                    staticClass: "d-flex w-100 border rounded p-2 align-items-center bgLtGrey c-pointer quickCreateModuleBlock",
                    on: {
                        click: function (s) {
                            return quickCreateModule(e, t)
                        }
                    }
                }, [_c("div", {staticClass: "d-flex align-items-center mr-2 quickCreateModuleIcon justify-content-center font-16"}, [_c("i", {
                    class: getModuleIconClass(e),
                    staticStyle: {"min-width": "12px", "min-height": "12px"}
                })]), _v(" "), _c("div", {staticClass: "flex-grow-1 w-50"}, [_c("h5", {staticClass: "m-0 font-14 textOverflowEllipsis"}, [_v(_s(translate("SINGLE_" + e, e)))])]), _v(" "), _c("div", {staticClass: "d-flex align-items-center ml-2 justify-content-center quickCreateArrowIcon"}, [_c("i", {staticClass: "fa-long-arrow-right font-16 mr-2"})])])])
            })), 0)])
        })), 0)] : [_c("div", {staticClass: "col-12 p-0"}, _l(appModules, (function (e) {
            return _c("div", {
                key: e,
                staticClass: "col-4 p-2 d-inline-flex"
            }, [_c("div", {
                staticClass: "d-flex w-100 border rounded p-2 align-items-center bgLtGrey c-pointer quickCreateModuleBlock",
                on: {
                    click: function (t) {
                        return quickCreateModule(e)
                    }
                }
            }, [_c("div", {staticClass: "d-flex align-items-center mr-2 quickCreateModuleIcon justify-content-center font-16"}, [_c("i", {
                class: getModuleIconClass(e),
                staticStyle: {"min-width": "12px", "min-height": "12px"}
            })]), _v(" "), _c("div", {staticClass: "flex-grow-1 w-50"}, [_c("h5", {staticClass: "m-0 font-14 textOverflowEllipsis"}, [_v(_s(translate("SINGLE_" + e, e)))])]), _v(" "), _c("div", {staticClass: "d-flex align-items-center ml-2 justify-content-center quickCreateArrowIcon"}, [_c("i", {staticClass: "fa-long-arrow-right font-16 mr-2"})])])])
        })), 0), _v(" "), _c("div", {staticClass: "w-100 px-2"}, [_c("div", {staticClass: "float-right mb-1"}, [_c("button", {
            staticClass: "btn px-3 py-2 btn-secondary my-3",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return showAll()
                }
            }
        }, [_v(_s(translate("LBL_SHOW_ALL")))])])])]], 2)])
    }
});
var Vtiger_Component_QuickCreateRelatedModal = Vtiger_Component_QuickCreateModal.extend({
    props: {relatedModule: {type: String}, relatedAction: {required: !0, default: !1}},
    data: () => ({showDiscardOption: !1, displayedOnce: !1, isSaveOperation: !1}),
    computed: {
        modalTitle() {
            return this.translate("LBL_QUICK_CREATE", this.$module) + " > " + this.translate("SINGLE_" + this.relatedModule, this.relatedModule)
        }, quickCreateComponent() {
            return App.loadComponent("QuickCreateModalContents", this.relatedModule)
        }
    },
    methods: {
        closeModal(e) {
            e && (this.isSaveOperation = !0), this.$refs.quickCreate.hide()
        }, dismissModalConfirmation(e) {
            if (this.showDiscardOption && !this.displayedOnce && !this.isSaveOperation) {
                e.preventDefault();
                this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        message: this.translate("JS_CHANGES_MAY_BE_LOST") + "  " + this.translate("JS_WISH_TO_PROCEED"),
                        onConfirm: e => {
                            this.displayedOnce = !0, this.$refs.quickCreate.hide()
                        }
                    },
                    modalOnModalMode: !1
                })
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "quickCreate",
            attrs: {
                id: formId,
                lazy: !0,
                size: "lg",
                "hide-footer": "",
                title: modalTitle,
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "px-0 pt-0",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            },
            on: {
                hide: function (e) {
                    return dismissModalConfirmation(e)
                }
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c(quickCreateComponent, _b({
            tag: "component",
            attrs: {
                module: relatedModule,
                relationOperation: relatedAction,
                relationModule: module,
                record: record,
                "modal-id": formId
            },
            on: {
                "vds::post::quickcreate::save": postQuickCreateSave,
                "vds::close::quick::create::modal": closeModal,
                "vds::enable::discard::confirmation::option": function (e) {
                    showDiscardOption = !0
                }
            }
        }, "component", $attrs, !1))], 1)
    }
});
var Vtiger_Component_RecentlyAccessedRecords = App.vtComponent.extend({
    mixins: [App.loadMixin("Record")],
    components: {
        "vds-global-search-basic-card": App.loadComponent("GlobalSearchBasicCard"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard")
    },
    data() {
        return {
            recentItemsList: {},
            recentRecords: {},
            recordComponents: [],
            recordsPage: {},
            defaultLimit: 6,
            hasMoreRecords: {},
            noRecordsFoundLabel: this.translate("LBL_NO_RECENTLY_ACCESSED_RECORDS"),
            loading: !0,
            requests: ["records", "documents", "reports", "lists"],
            completedRequests: []
        }
    },
    created() {
        this.init();
        let e = this.$watch("recentItemsList", () => {
            this.clearDummyRecords(), this.recentRecords = this.recentItemsList, e()
        }), t = this.$watch("completedRequests", () => {
            _.size(this.recentItemsList) > 0 && t(), this.requests.every(e => this.completedRequests.indexOf(e) > -1) && (this.clearDummyRecords(), t())
        })
    },
    methods: {
        clearDummyRecords() {
            this.loading = !1, Vue.delete(this.recentRecords, "DummyRecords")
        }, setEmptyRecords() {
            this.loading = !0;
            for (var e = 0, t = []; e < 6;) {
                let s = {
                    assigned_user_id: {id: this.$currentUser.id},
                    related_to: {id: 0},
                    contact_id: {id: 0, label: ""},
                    loaded: !1
                };
                t.push(BaseModel.getModuleSpecificModel("Contacts", "Record", s)), e++
            }
            Vue.set(this.recentRecords, "DummyRecords", t)
        }, init() {
            this.setEmptyRecords(), this.fetchRecentRecords(), setTimeout(() => {
                this.getRecentDocuments(), this.getRecentFiltersList(), this.getRecentReports()
            }, 100)
        }, fetchRecentRecords() {
            let e = {}, t = "records";
            this.recordsPage[t] || (this.recordsPage[t] = 1), e.page = this.recordsPage[t], e.limit = this.defaultLimit, this.retrieveRecentRecords("", ["Documents", "Reports", "ModComments"], e).then(e => {
                e && (this.completedRequests.push("records"), this.recordsPage[t]++, Vue.set(this.hasMoreRecords, t, e.hasMoreRecords), this.setRecordModels(e.records, t))
            }, e => {
                this.completedRequests.push("records")
            })
        }, setRecordModels(e, t) {
            var s = this.recentItemsList[t] ? this.recentItemsList[t] : [];
            e.forEach(e => {
                e.module && "Calendar" == e.module && (e.module = "Tasks"), this.recordComponents[e.module] = App.loadComponent("DetailedGlobalSearchCard", e.module);
                let t = e.recordData;
                var r = t.record_module;
                let o = BaseModel.getModuleSpecificModel(r, "Record", t);
                e.recordModel = o, e.recordModel.accessedon = e.accessedon, s.push(e)
            }), _.size(s) > 0 && Vue.set(this.recentItemsList, t, s)
        }, getRecentFiltersList() {
            let e = {}, t = "lists";
            this.recordsPage[t] || (this.recordsPage[t] = 1), e.page = this.recordsPage[t], e.limit = this.defaultLimit, this.appStore.request("api_get", {
                url: "filters/recent",
                params: e,
                key: "all_recent_filter_list"
            }).then(e => {
                if (e && e.records.length > 0) {
                    this.completedRequests.push("lists"), this.recordsPage[t]++, Vue.set(this.hasMoreRecords, t, e.hasMoreRecords);
                    let s = this.recentItemsList[t] ? this.recentItemsList[t] : [];
                    e.records.forEach(e => {
                        s.push(e)
                    }), _.size(s) > 0 && Vue.set(this.recentItemsList, t, s)
                }
            }, e => {
                this.completedRequests.push("lists")
            })
        }, getRecentDocuments() {
            let e = {}, t = "documents";
            this.recordsPage[t] || (this.recordsPage[t] = 1), e.page = this.recordsPage[t], e.limit = this.defaultLimit, this.retrieveRecentRecords("Documents", !1, e).then(e => {
                this.recordComponents.Documents = App.loadComponent("DetailedGlobalSearchCard", "Documents"), e && (this.completedRequests.push("documents"), this.recordsPage[t]++, Vue.set(this.hasMoreRecords, t, e.hasMoreRecords), this.setRecordModels(e.records, t))
            }, e => {
                this.completedRequests.push("documents")
            })
        }, getRecentReports() {
            let e = {}, t = "reports";
            this.recordsPage[t] || (this.recordsPage[t] = 1), e.page = this.recordsPage[t], e.limit = this.defaultLimit, this.retrieveRecentRecords("Reports", !1, e).then(e => {
                if (e && e.records.length > 0) {
                    this.completedRequests.push("reports"), this.recordsPage[t]++, Vue.set(this.hasMoreRecords, t, e.hasMoreRecords);
                    let s = this.recentItemsList[t] ? this.recentItemsList[t] : [];
                    e.records.forEach(e => {
                        s.push(e)
                    }), _.size(s) > 0 && Vue.set(this.recentItemsList, t, s)
                }
            }, e => {
                this.completedRequests.push("reports")
            })
        }, getTitleForListType(e) {
            var t = this.translate(e, e);
            return this.translate("LBL_RECENT_MODULE", "Vtiger", t)
        }, getComponentInstance(e) {
            return this.recordComponents[e]
        }, loadMoreRecords(e) {
            switch (e) {
                case"records":
                    this.fetchRecentRecords();
                    break;
                case"documents":
                    this.getRecentDocuments();
                    break;
                case"lists":
                    this.getRecentFiltersList();
                    break;
                case"reports":
                    this.getRecentReports()
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex justify-content-center"}, [_c("div", {staticClass: "d-flex flex-column mx-2 px-4"}, [_l(recentRecords, (function (e, t) {
            return [_c("div", {staticClass: "mb-2 d-flex flex-column"}, [$isLoading ? _c("div", {staticClass: "w-15 pt-2 mt-1"}, [_c("vds-value-progress")], 1) : _c("div", {staticClass: "f-600 mt-2"}, [_v(_s(getTitleForListType(t)))]), _v(" "), _c("div", {staticClass: "d-flex mt-2"}, [_c("div", {staticClass: "d-flex flex-wrap w-100"}, _l(e, (function (e, s) {
                return _c("div", {staticClass: "globalSearchCards"}, [!t || "records" != t && "documents" != t ? _e() : _c(getComponentInstance(e.module), {
                    key: e.id,
                    tag: "component",
                    attrs: {"record-info": e.recordModel, module: e.module, "is-compact-card": !0}
                }), _v(" "), t && "records" != t && "documents" != t ? _c("vds-global-search-basic-card", {
                    attrs: {
                        "record-info": e,
                        "list-type": t
                    }
                }) : _e()], 1)
            })), 0)]), _v(" "), hasMoreRecords[t] ? _c("div", {staticClass: "d-flex justify-content-center"}, [_c("button", {
                staticClass: "btn border rounded align-self-center px-2 py-1 text-muted",
                attrs: {type: "button"},
                on: {
                    click: function (e) {
                        return loadMoreRecords(t)
                    }
                }
            }, [_c("i", {staticClass: "fa fa-arrow-circle-down mr-1"}), _v(" "), _c("span", [_v(_s(translate("LBL_MORE")))])])]) : _e()])]
        })), _v(" "), _.size(recentRecords) <= 0 ? [_c("div", {staticClass: "my-8 py-5"}, [_c("vds-empty-state-card", {
            attrs: {
                illustrationName: "global_search_empty_state.svg",
                showAddButton: !1,
                emptyLabel: noRecordsFoundLabel
            }
        })], 1)] : _e()], 2)])
    }
});

Vtiger_Component_RecordDelete = App.vtComponent.extend({
    data: () => ({additionalMessage: ""}),
    components: {"vds-delete-confirmation": App.loadComponent("DeleteConfirmation", this.module, !1)},
    render: function anonymous() {
        with (this) return _c("vds-delete-confirmation", {
            attrs: {"modal-id": "deleteRecord"},
            on: {ok: deleteRecord}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_DELETE")))]), _v(" "), _c("div", {
            attrs: {slot: "message"},
            slot: "message"
        }, [_v(_s(translate("LBL_DELETE_CONFIRMATION_NOTE")) + "?")]), _v(" "), additionalMessage ? _c("template", {slot: "message"}, [_v(_s(additionalMessage))]) : _e(), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_NO")))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_YES")))])], 2)
    },
    props: ["module", "record", "postDeleteEvent"],
    mounted() {
        this.$root.$emit("bv::show::modal", "deleteRecord")
    },
    methods: {
        deleteRecord() {
            this.appStore.request("api_delete", {
                url: "records",
                params: {module: this.module, id: this.record.getId()},
                key: "kanban_record_delete"
            }).then((e, t) => {
                this.postDeleteEvent()
            }, e => {
                this.showErrorNotification(e.message), this.$root.$emit("bv::hide::modal", "deleteRecord")
            })
        }
    }
});
var Vtiger_Component_RecordQuickCreate = App.vtComponent.extend({
    props: ["module", "createViewFields", "record"],
    methods: {
        isFullWidthField(e) {
            if (e && e.isLoaded) {
                if (e.isFullWidthField) return !0;
                if (this.labelFields && this.labelFields.includes(e.name)) return !0
            }
        }, getFieldSepecificProps: e => ({})
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("form", {
            staticClass: "createForm",
            attrs: {id: "Create_Form"},
            on: {
                submit: function (e) {
                    return e.stopPropagation(), e.preventDefault(), $emit("vds::submit::form")
                }
            }
        }, [_c("div", {staticClass: "row"}, _l(createViewFields, (function (e) {
            return _c("div", {
                staticClass: "form-group col-md-6",
                class: {"col-md-12": isFullWidthField(e)}
            }, [_c("div", {staticClass: "form-group w-100 mb-2"}, [_c("vds-field-label", {
                attrs: {
                    field: e,
                    module: module,
                    isEditView: !1
                }
            }), _v(" "), _c("div", {staticClass: "fieldName"}, [_c("ui-field-edit-type", _b({
                attrs: {
                    field: e,
                    record: record
                }
            }, "ui-field-edit-type", getFieldSepecificProps(e), !1))], 1)], 1)])
        })), 0)])])
    }
});
var Vtiger_Component_RecordStatusDisplay = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_Record, Vtiger_Mixin_ModuleModel],
    props: {module: {type: String}, recordModel: {type: [Object]}},
    computed: {
        moduleHeaderProgressionFields() {
            if (this.$_currentModuleModel.isLoaded) {
                var e = this.$_currentModuleModel.getHeaderProgressionFields();
                return e || !1
            }
            return !1
        }, currentProgressionSourceField() {
            if (this.moduleHeaderProgressionFields.sourceField) return this.translate(this.recordModel.getDisplayValue(this.moduleHeaderProgressionFields.sourceField))
        }, currentProgressionTargetField() {
            return this.translate(this.recordModel.getDisplayValue(this.moduleHeaderProgressionFields.targetField))
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [moduleHeaderProgressionFields && (currentProgressionSourceField || currentProgressionTargetField) ? _c("div", [_c("span", {
            staticClass: "badge badge-pill bg-grey-hue-3 text-dark font-weight-normal px-3 py-2",
            staticStyle: {"font-size": "12px"}
        }, [_v(_s(currentProgressionSourceField) + " \n                            "), currentProgressionSourceField && currentProgressionTargetField ? _c("span", [_v("|")]) : _e(), _v(" \n                            " + _s(currentProgressionTargetField))])]) : _e()])
    }
});
var Vtiger_Component_StickyNotes = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_DetailRecord],
    props: {
        id: {required: !0},
        module: {type: String, required: !0},
        stickyNote: {default: () => ({commentcontent: ""})},
        commentLink: {default: !0}
    },
    data: () => ({showCommentLink: !1, showStickyNoteBtn: !1, showMoreBtn: !0, isActive: !1, expandIcon: !1}),
    mounted() {
        this.init()
    },
    computed: {
        detailViewURL() {
            return this.getRecordDetailViewUrl(this.$id, this.$module)
        }
    },
    methods: {
        init() {
            this.showCommentLink = !("List" != App.view() || !this.commentLink) || this.showCommentLink, this.showStickyNoteBtn = "Detail" == App.view() && this.$_detailRecordModel.getId() == this.id || this.showStickyNoteBtn
        }, removeStickyNote(t) {
            this._getModuleDesc("ModComments");
            let e = {
                module: "ModComments",
                id: t.id ? t.id : t.modcommentsid,
                related_to: this.$id,
                field: "isstickynote",
                value: 0
            };
            this.appStore.request("api_patch", {url: "records", params: e}).then(t => {
                this.appStore.set({
                    key: this.$id + "_stickynotes",
                    data: t
                }), this.showSuccessNotification(this.translate("JS_STICKY_NOTE_REMOVED")), this.$root.$emit("vds::stickynote::status", !1)
            })
        }, showORhideContent() {
            this.showMoreBtn = !this.showMoreBtn
        }
    },
    watch: {
        stickyNote: {
            handler: _.debounce((function (t, e) {
                let i = jQuery(this.$el).find(".stickyNoteContent");
                i.prop("scrollHeight") > i.prop("offsetHeight") ? this.expandIcon = !0 : this.expandIcon = !1
            }), 3e3), deep: !0, immediate: !0
        }
    },
    render: function anonymous() {
        with (this) return stickyNote.commentcontent ? _c("div", {
            staticClass: "stickyContainer bg-light-yellow mb-2 overflow-x-auto d-flex",
            attrs: {role: "alert"},
            on: {
                mouseover: function (t) {
                    isActive = !0
                }, mouseout: function (t) {
                    isActive = !1
                }
            }
        }, [_c("div", {staticClass: "col-lg-11  p-3"}, [_c("div", {
            class: {stickyNoteContent: showMoreBtn},
            domProps: {innerHTML: _s(linkify(purifyContent(stickyNote.commentcontent)))}
        })]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: isActive,
                expression: "isActive"
            }], staticClass: "col-lg-1 p-0"
        }, [_c("div", {staticClass: "d-flex flex-column align-items-center pt-3"}, [showStickyNoteBtn ? _c("div", {
            staticClass: "mb-1 stickyIconContainer",
            attrs: {title: translate("JS_STICKY_NOTE")},
            on: {
                click: function (t) {
                    return removeStickyNote(stickyNote)
                }
            }
        }, [_c("i", {staticClass: "far fa-sticky-note fa-sm d-flex justify-content-center c-pointer p-1 text-dark"})]) : _e(), _v(" "), showCommentLink ? _c("a", {
            attrs: {
                target: "_blank",
                href: detailViewURL
            }, on: {
                click: function (t) {
                    t.stopPropagation()
                }
            }
        }, [_c("i", {
            staticClass: "fas fa-external-link-alt c-pointer",
            attrs: {title: translate("LBL_DEEP_DIVE")}
        })]) : _e(), _v(" "), expandIcon ? _c("div", {
            staticClass: "mt-auto stickyIconContainer",
            on: {
                click: function (t) {
                    return t.stopPropagation(), showORhideContent()
                }
            }
        }, [_c("i", {
            staticClass: "d-flex justify-content-center c-pointer p-1 fa-sm text-dark",
            class: {"fas fa-angle-double-down": showMoreBtn, "fas fa-angle-double-up": !showMoreBtn},
            attrs: {title: showMoreBtn ? translate("JS_EXPAND") : translate("JS_COLLAPSE")}
        })]) : _e()])])]) : _e()
    }
});
var Vtiger_Component_StickyNotesController = App.vtComponent.extend({
    methods: {
        mountStickyNotes() {
            this.$root.$emit("vds::stickynotes::show")
        }
    }, mounted() {
        this.$root.$on("vds::display::stickynote", this.mountStickyNotes)
    }, render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_StickyNotesPlaceHolder = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_StickyNotes],
    props: {id: {required: !0}, module: {type: String, required: !0}, commentLink: {default: !0}},
    data: () => ({stickyNotesList: {}, stickyNotesData: {}}),
    created() {
        this.init()
    },
    methods: {
        init() {
            let t = "$store.state.";
            this.$namespaceStore && (t += this.$namespaceStore + "_"), t += this.id + "_stickynotes", this.$watch(t, (function (t) {
                if (1 == t.isstickynote) Vue.set(this.stickyNotesData, this.id, t), Vue.set(this.stickyNotesList, this.id, App.getDynamicComponentInstance("StickyNotes")); else {
                    var e = t.related_to ? t.related_to.id : "";
                    Vue.delete(this.stickyNotesList, e)
                }
            }))
        }, getExtraData(t) {
            return this.stickyNotesData[t] ? {stickyNote: this.stickyNotesData[t]} : {}
        }
    },
    mounted() {
        this.$root.$once("vds::stickynotes::show", () => {
            this.retrieveStickyNoteData(this.id, this.module).then(t => {
                if (t && Object.keys(t).length) {
                    let e = App.getDynamicComponentInstance("StickyNotes");
                    Vue.set(this.stickyNotesData, this.id, t), Vue.set(this.stickyNotesList, this.id, e)
                }
            }, t => {
            })
        })
    },
    render: function anonymous() {
        with (this) return Object.keys(stickyNotesData).length > 0 ? _c("div", _l(stickyNotesList, (function (t) {
            return _c("div", [_c(t, _b({
                tag: "component",
                attrs: {id: id, module: module, commentLink: commentLink}
            }, "component", getExtraData(id), !1))], 1)
        })), 0) : _e()
    }
});
var Vtiger_Component_SyncModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Oauth, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleCollection],
    props: {connectors: Object, availableConnectors: Array, userLevelConnectors: Array},
    data: () => ({
        excludedExtension: ["PieSync"],
        supportedModules: [],
        labels: {
            user_level_connectors: "LBL_USER_LEVEL_CONNECTORS",
            system_Level_Connectors: "LBL_SYSTEM_LEVEL_CONNECTORS"
        }
    }),
    mounted() {
        this.getSupportedModules(), this.$root.$on("vds::authorised", t => {
            this.syncSettings(t)
        })
    },
    methods: {
        syncSettings(t) {
            this.redirectUrl("view/config?module=" + t + "&parentModule=" + this.$module, !1)
        }, syncLog(t) {
            this.redirectUrl("view/extension?module=" + t + "&parentModule=" + this.$module, !1)
        }, configure(t) {
            this.redirectUrl(t, !1, "_blank")
        }, getImage: t => "layouts/v9/assets/images/" + t + ".png", viewAvailableConnectors() {
            this.$root.$emit("bv::hide::modal", "syncModal"), this.showModal({
                componentName: "ViewAvailableConnectors",
                componentData: {
                    connectors: this.connectors,
                    excludedExtension: this.excludedExtension,
                    userLevelConnectors: this.userLevelConnectors,
                    availableConnectors: this.availableConnectors,
                    supportedModules: this.supportedModules,
                    labels: this.labels
                }
            })
        }, getSupportedModules() {
            this.getEnabledModules().then(t => {
                this.supportedModules = t
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "syncModal",
                size: "lg",
                "header-class": "p-0",
                lazy: !0,
                "hide-footer": "",
                "body-class": "p-4",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            staticClass: "modal-header d-flex w-100 bgLtGrey py-3 px-4 rounded align-items-center",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("span", {staticClass: "h5 mb-0"}, [_v(_s(translate("LBL_SYNC")))]), _v(" "), _c("button", {
            staticClass: "close align-right py-3",
            staticStyle: {outline: "none"},
            attrs: {type: "button", "aria-label": "close"}
        }, [_c("i", {
            staticClass: "fa fa-times float-right c-pointer", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "syncModal")
                }
            }
        })])]), _v(" "), _c("div", [_c("div", {staticClass: "pb-4"}, [_c("span", [_v(_s(translate("LBL_EXTENSIONS_INFO", this.$module, translate(this.$module, this.$module), translate(this.$module, this.$module))))]), _v(" "), _.size(availableConnectors) > 0 ? _c("span", {
            staticClass: "text-primary c-pointer",
            on: {click: viewAvailableConnectors}
        }, [_v("View available connectors")]) : _e()]), _v(" "), _l(connectors, (function (t, e) {
            return [_.size(t) > 0 ? _c("div", {staticClass: "font-weight-bold mb-3"}, [_v(_s(translate(labels[e])))]) : _e(), _v(" "), _l(t, (function (t, e) {
                return supportedModules.includes(e) ? [availableConnectors.includes(e) ? _e() : _c("div", [_c("div", {staticClass: "mb-3 bg-grey-hue-9 rounded d-flex align-items-center justify-content-between py-2 px-4"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "circle-icon-widget bg-white rounded-circle d-flex mr-2"}, [_c("img", {
                    staticClass: "h-inherit w-inherit p-2",
                    attrs: {src: getImage(e)}
                })]), _v(" "), _c("span", [_v(_s(e))])]), _v(" "), excludedExtension.includes(e) ? _e() : _c("div", {staticClass: "d-flex"}, [t.installed_status && t.sync_ready_status ? [_c("button", {
                    staticClass: "btn btn-secondary d-flex align-items-center mr-3",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return syncLog(e)
                        }
                    }
                }, [_v("\n                                                        " + _s(translate("LBL_SYNC_LOG")) + "\n                                                    ")]), _v(" "), _c("button", {
                    staticClass: "btn btn-secondary d-flex align-items-center",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return syncSettings(e)
                        }
                    }
                }, [_v("\n                                                        " + _s(translate("LBL_SETTINGS")) + "\n                                                    ")])] : [userLevelConnectors.includes(e) ? _c("button", {
                    staticClass: "btn btn-primary d-flex align-items-center",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return authorize(e)
                        }
                    }
                }, [_v("\n                                                        " + _s(translate("LBL_SIGN_IN")) + "\n                                                    ")]) : _c("button", {
                    staticClass: "btn btn-primary d-flex align-items-center",
                    attrs: {id: "configure", type: "button"},
                    on: {
                        click: function (e) {
                            return configure(t.extension_settings_url)
                        }
                    }
                }, [_v("\n                                                        " + _s(translate("LBL_CONFIGURE")) + "\n                                                    ")])]], 2)])])] : _e()
            }))]
        }))], 2)])
    }
});
var Vtiger_Component_Tags = App.vtComponent.extend({
    inject: ["$validator"],
    mixins: [Vtiger_Mixin_Tags, Vtiger_Mixin_Record],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "recordTagModal",
                "ok-title": translate("LBL_ADD"),
                "ok-only": !0,
                "header-class": "bgLtGrey"
            }, on: {
                ok: function (e) {
                    return validateAndSave(e)
                }
            }
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", [_v(_s(translate("LBL_ADD_OR_SELECT_TAG")))])]), _v(" "), _c("div", {staticClass: "p-2 rounded bg-blue-3 tags-info mb-3"}, [_c("ul", [_c("li", [_v(_s(translate("LBL_TAG_SEPERATOR_DESC")))]), _v(" "), _c("li", [_v(_s(translate("LBL_SHARED_TAGS_ACCESS")))]), _v(" "), _c("li", [_v(_s(translate("LBL_GOTO_TAGS")))])])]), _v(" "), _c("div", [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required : true}"
            }],
            staticStyle: {width: "100%"},
            attrs: {
                multiple: !0,
                emptyOption: !1,
                tags: !0,
                tokenSeparators: [","],
                name: "tag_name",
                "data-vv-as": "tag name"
            },
            model: {
                value: selectedTags, callback: function (e) {
                    selectedTags = e
                }, expression: "selectedTags"
            }
        }, _l(availableTags, (function (e) {
            return _c("option", {domProps: {value: e.tag}}, [_v(_s(e.tag))])
        })), 0), _v(" "), errors.has("tag_name") ? _c("div", {staticClass: "d-flex justify-content-center mt-1 text-danger text-truncate"}, [_v(_s(errors.first("tag_name")))]) : _e()], 1), _v(" "), showExisting ? _c("div", {staticClass: "my-2"}, [_c("ul", {staticClass: "list-group"}, _l(recordTags, (function (e) {
            return _c("li", {staticClass: "list-group-item d-flex justify-content-between"}, [_v("\n                        " + _s(e.tag) + "\n                        "), _c("span", {
                staticClass: "c-pointer",
                on: {
                    click: function (t) {
                        return removeTag(e.id)
                    }
                }
            }, [_c("i", {staticClass: "far fa-times-circle"})])])
        })), 0)]) : _e()])
    },
    props: {
        record: {default: BaseModel.getModuleSpecificModel(this.$module, "Record", {})},
        showExisting: {default: !1, type: Boolean}
    },
    data: () => ({myTags: {}, recordTags: {}, availableTags: {}, selectedTags: []}),
    mounted() {
        this.init()
    },
    methods: {
        init() {
            this.getMyTags().then(e => {
                this.myTags = e, this.showExisting ? this.getAvailableTags() : this.availableTags = this.myTags
            })
        }, getAvailableTags() {
            let e = this.record.getDisplayValue("tags").split(",");
            Object.keys(this.myTags).forEach(t => {
                let s = this.myTags[t];
                e.includes(s.tag) ? Vue.set(this.recordTags, t, s) : Vue.set(this.availableTags, t, s)
            })
        }, getRecordIds() {
            return [this.record.getId()]
        }, removeTag(e) {
            this.appStore.request("api_delete", {
                url: "tags/unlink",
                params: {module: this.$module, id: e, record: this.getRecordIds()[0]}
            }).then(() => {
                delete this.recordTags[e], Vue.set(this.availableTags, e, this.myTags[e]), this.emitModalHideEvent(), this.clearTagsCache({module: this.$module})
            })
        }, checkAndCreateTags() {
            return new Promise((e, t) => {
                let s = [], a = {
                    type: "post",
                    api: "tags",
                    parameters: {module: this.$module, visibility: "private", name: ""}
                }, i = [];
                this.selectedTags.filter(e => {
                    let t = _.findKey(this.myTags, {tag: e});
                    t ? i.push(t) : (a.parameters.name = e, s.push($.extend(!0, {}, a)))
                }), s.length ? this.appStore.request("api_batch", {requests: s}).then(t => {
                    Object.keys(t).forEach(e => {
                        let s = JSON.parse(t[e]);
                        s.tag = s.name, Vue.set(this.myTags, s.id, s), i.push(s.id)
                    }), e(i)
                }) : e(i)
            })
        }, emitModalHideEvent() {
            let e = {selectedTags: this.selectedTags, recordTags: this.recordTags, myTags: this.myTags};
            this.$root.$emit("vds::tags::modal::hide", e)
        }, validateAndSave(e) {
            e.preventDefault(), this.$validator.validate().then(e => {
                e && (this.saveTags(), this.$root.$emit("bv::hide::modal", "recordTagModal"))
            })
        }, async saveTags() {
            let e = this.getRecordIds();
            if (0 == this.selectedTags.length) return;
            let t = await this.checkAndCreateTags();
            if (e.length > 1) {
                let s = {type: "post", api: "tags/link", parameters: {module: this.$module, id: t, record: ""}};
                for (let e of selectedRecords) s.parameters.record = e, batchedRequests.push($.extend(!0, {}, s));
                this.appStore.request("api_batch", {requests: batchedRequests}).then(() => {
                    for (var t of e) this.clearRecordFromCache(t);
                    this.$root.$emit("bv::hide::modal", "recordTagModal"), this.showSuccessNotification(this.translate("JS_TAG_ADDED")), this.clearTagsCache({module: this.$module})
                })
            } else {
                let s = e[0];
                this.appStore.request("api_post", {
                    url: "tags/link",
                    params: {module: this.$module, id: t, record: s}
                }).then(() => {
                    this.clearRecordFromCache(s), this.emitModalHideEvent(t), this.showSuccessNotification(this.translate("JS_TAG_ADDED")), this.clearTagsCache({module: this.$module})
                })
            }
        }
    }
});
var Vtiger_Component_ThreadView = App.vtComponent.extend({
    components: {"vds-thread": App.loadComponent("Thread", "Inbox")},
    data: () => ({threadReRender: 0}),
    props: {recordid: [String, Number]},
    mounted() {
        this.registerEvents()
    },
    methods: {
        closeThread() {
            this.$root.$emit("bv::hide::modal", "threadViewModal")
        }, registerEvents() {
            this.$root.$off("vds::post::send::email"), this.$root.$off("vds::post::thread::updated"), this.$root.$on("vds::post::send::email", () => {
                this.threadReRender += 1
            }), this.$root.$on("vds::post::thread::updated", () => {
                this.threadReRender += 1
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "xl",
                id: "threadViewModal",
                "hide-header": "",
                "hide-footer": "",
                "body-class": "px-3 pt-3"
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c("vds-thread", {
            key: threadReRender,
            attrs: {threadId: recordid, "compact-mode": !0},
            on: {
                "vds::thread::close": function (e) {
                    return closeThread()
                }
            }
        })], 1)
    }
});
var Vtiger_Component_TransferOwnership = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record")],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "transferOwnership",
                size: "md",
                title: translate("LBL_TRANSFER_OWNERSHIP"),
                "header-class": "px-4 py-3 bgLtGrey"
            }, on: {hidden: clearModalData}, model: {
                value: visible, callback: function (e) {
                    visible = e
                }, expression: "visible"
            }
        }, [_c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-sm-5 col-form-label"}, [_v(_s(translate("LBL_SELECT_RELATED_MODULES"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "col-sm-7"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required : true}"
            }],
            staticClass: "form-control",
            attrs: {multiple: !0, name: "relatedid", placeholder: translate("LBL_SELECT_RELATED_MODULES")},
            model: {
                value: relatedid, callback: function (e) {
                    relatedid = e
                }, expression: "relatedid"
            }
        }, _l(records, (function (e) {
            return _c("option", {domProps: {value: e.id}}, [_v(_s(translate(e.label, e.name)))])
        })), 0), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("relatedid"),
                expression: "errors.has('relatedid')"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])], 1)]), _v(" "), _c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-sm-5 col-form-label"}, [_v(_s(translate("LBL_ASSIGNED_TO")))]), _v(" "), _c("div", {staticClass: "col-sm-7"}, [_c("v-select2", {
            staticClass: "form-control",
            attrs: {name: "assignedTo", options: assignTo, emptyOption: !1},
            model: {
                value: transferOwnerId, callback: function (e) {
                    transferOwnerId = e
                }, expression: "transferOwnerId"
            }
        })], 1)]), _v(" "), _c("fieldset", {staticClass: "form-group m-0"}, [_c("div", {staticClass: "row"}, [_c("legend", {staticClass: "col-form-label col-sm-5"}, [_v(_s(translate("LBL_TRANSFER_CLOSED_RECORDS")))]), _v(" "), _c("div", {staticClass: "col-sm-7"}, [_c("div", {staticClass: "form-check px-0 py-2"}, [_c("vds-checkbox", {
            model: {
                value: allowClosed,
                callback: function (e) {
                    allowClosed = e
                },
                expression: "allowClosed"
            }
        })], 1)])])]), _v(" "), _c("div", {
            staticClass: "submitForm",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn-group btn btn-primary justify-content-right",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return e.preventDefault(), transferOwnership(e)
                }
            }
        }, [_v(_s(translate("Save")))])])])
    },
    props: {
        modulename: String,
        recordIds: [Array, Object, String, Number],
        reloadList: Function,
        isPreview: {type: [Boolean], default: !1}
    },
    data() {
        return {
            records: "",
            skipModules: ["Emails", "EmailCampaigns", "ModComments", "ModTracker"],
            assignTo: {Users: [], Groups: []},
            allowClosed: !1,
            relatedid: [],
            transferOwnerId: "",
            visible: !1,
            selectedRecords: this.recordIds
        }
    },
    mounted() {
        this.getRelatedModules(), this.getAssignedTo()
    },
    methods: {
        getRelatedModules() {
            this.appStore.request("api_get", {
                url: "relations",
                params: {module: this.modulename},
                key: this.modulename.toLowerCase() + "_relations_response"
            }).then(e => {
                e = e.filter(e => !this.skipModules.includes(e.modulename));
                let s = BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {
                    module: this.$module,
                    relations: e
                });
                this.records = s.relations
            })
        }, getAssignedTo() {
            this._getModuleDescribe(this.modulename).then(e => {
                this.transferOwnerId = this.$currentUser.id;
                let s = e.fields.assigned_user_id.type.picklistValues;
                for (let e in this.assignTo) this.assignTo[e] = s[e.toLowerCase()]
            })
        }, clearModalData() {
            this.relatedid = [], this.transferOwnerId = "", this.allowclosed = !1, "function" == typeof this.reloadList && this.reloadList({massAction: !0})
        }, transferOwnership() {
            this.$validator.validate().then(e => {
                e && this.appStore.request("api_post", {
                    url: "/records/transferownership",
                    params: {
                        module: this.modulename,
                        relatedid: this.relatedid,
                        transferownerid: this.transferOwnerId,
                        id: _.isArray(this.recordIds) ? this.recordIds : [this.recordIds],
                        allowclosed: this.allowClosed
                    },
                    key: "recent_emails"
                }).then(e => {
                    this.clearRecordCache(this.recordIds), _.isArray(this.selectedRecords) && this.selectedRecords.splice(0), this.showSuccessNotification(this.translate("JS_RECORDS_TRANSFERRED_SUCCESSFULLY")), this.clearModalData(), this.visible = !1
                }, ({message: e}) => {
                    e && this.showErrorNotification(e)
                })
            })
        }, clearRecordCache(e) {
            if (_.isArray(e)) {
                let t = e;
                for (let e in t) {
                    let r = t[e];
                    var s = this.appStore.get(`Record_${r}_recordDetails`);
                    _.isEmpty(s) || this.appStore.set({key: `Record_${r}_recordDetails`, data: !1})
                }
            }
            _.isArray(e) || (this.appStore.set({
                key: `Record_${e}_recordDetails`,
                data: !1
            }), this.retrieveRecord(e, this.modulename).then(s => {
                let t = this.transformRecordToUserFormat(s, this.$_currentModuleModel);
                this.isPreview && "List" == App.view() && this.$bubble("vds::detail::preview::updated", e), this.appStore.set({
                    key: "Detail_Record_Model",
                    data: t
                })
            }))
        }
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_TrialMessage = App.vtComponent.extend({
    name: "vds-trial-message",
    mixins: [Vtiger_Mixins_ShowModal],
    data: () => ({
        message: "",
        isActive: !1,
        showExtendTrialButtonDaysCutoff: 4,
        showTrialMessageDaysCutoff: 9,
        getTrialMessageHoursCutoff: 6
    }),
    created() {
        this.init(), "true" == __login && AppStorage.set("showTrialMessage", !0)
    },
    methods: {
        init() {
            let e = this.$watch("$currentUser", (t, s) => {
                e(), t && t.isAdmin && this.getTrialMessage(t)
            })
        }, getTrialMessage(e) {
            if (e || (e = this.$currentUser), e && e.isAdmin) {
                var t = Math.round(((new Date).getTime() - AppStorage.get("lastNotificationMessageReq")) / 36e5);
                if (AppStorage.get("notificationMessage") && t < this.getTrialMessageHoursCutoff) {
                    var s = JSON.parse(AppStorage.get("notificationMessage"));
                    s.label && (this.message = s, s.days_left < this.showTrialMessageDaysCutoff && (this.isActive = "undefined" == AppStorage.get("showTrialMessage") || AppStorage.get("showTrialMessage")))
                } else this.getTrialDaysLeft()
            }
        }, getTrialDaysLeft() {
            this.appStore.request("api_get", {
                url: "accountinfo",
                params: {module: "Ondemand", mode: "numberOfDaysLeft"}
            }).then(e => {
                e && e.result && e.result.label && (this.message = e.result, e.result.days_left < this.showTrialMessageDaysCutoff && (this.isActive = "undefined" == AppStorage.get("showTrialMessage") || AppStorage.get("showTrialMessage"))), e && e.result && (AppStorage.set("notificationMessage", JSON.stringify(e.result)), AppStorage.set("lastNotificationMessageReq", (new Date).getTime()))
            })
        }, extendTrial() {
            this.showModal({componentName: "TrialExtendFeedback", componentData: {module: this.$module}})
        }, close() {
            AppStorage.set("showTrialMessage", !1), this.isActive = !1
        }
    },
    computed: {
        showExtendTrial() {
            let e = !1;
            return this.message && this.message.days_left < this.showExtendTrialButtonDaysCutoff && 0 == this.message.is_trial_extended && (e = !0), e
        }
    },
    render: function anonymous() {
        with (this) return isActive ? _c("div", {
            staticClass: "align-items-center",
            class: [isActive ? "d-flex d-block" : "d-none"],
            attrs: {id: "trialmessage"}
        }, ["trial" == message.type ? _c("span", {staticClass: "d-flex justify-content-center align-items-center flex-grow-1"}, [_c("i", {staticClass: "fa fa-exclamation-triangle text-danger"}), _v(" "), _c("span", {staticClass: "px-2"}, [_v(_s(translate("LBL_FREE_TRIAL_ENDS_IN", "Ondemand")) + " " + _s(message.days_left + 1) + " " + _s(translate("LBL_DAYS", "Ondemand")) + ".")]), _v(" "), _c("span", [_c("button", {
            staticClass: "btn btn-success py-1",
            attrs: {type: "button"}
        }, [_c("a", {
            staticClass: "text-white",
            staticStyle: {"text-decoration": "none"},
            attrs: {href: message.url}
        }, [_v(_s(translate("LBL_BUY_NOW", "Ondemand")))])]), _v("    \n                    "), showExtendTrial ? _c("button", {
            staticClass: "btn btn-secondary py-1",
            attrs: {type: "button"},
            on: {click: extendTrial}
        }, [_v(_s(translate("LBL_EXTEND_TRIAL", "Ondemand")))]) : _e()])]) : _c("span", {staticClass: "d-flex justify-content-center align-items-center flex-grow-1"}, [_c("i", {staticClass: "fa fa-exclamation-triangle text-danger"}), _v(" "), _c("span", {staticClass: "px-2"}, [_v(_s(message.label) + " " + _s(message.message))]), _v(" "), _c("span", [_c("button", {
            staticClass: "btn btn-success py-1",
            attrs: {type: "button"}
        }, [_c("a", {
            staticClass: "text-white",
            staticStyle: {"text-decoration": "none"},
            attrs: {href: message.url}
        }, [_v(_s(translate("LBL_PAY_NOW", "Ondemand")))])]), _v("    \n                ")])]), _v(" "), _c("span", {
            staticClass: "fa fa-times px-2 c-pointer",
            attrs: {"aria-label": "Close"},
            on: {
                click: function (e) {
                    return close()
                }
            }
        })]) : _e()
    }
}), Vtiger_Component_TrialExtendFeedback = App.vtComponent.extend({
    data: () => ({feedback: ""}), methods: {
        extendTrial(e) {
            if (this.feedback) {
                var t = {
                    url: "admin/accountinfo",
                    params: {module: "Ondemand", mode: "extendTrial", feedback: this.feedback}
                };
                this.appStore.request("api_post", t).then(e => {
                    e ? (this.showSuccessNotification(this.translate("LBL_TRIAL_EXTENDED_MSG", "Ondemand", "7")), this.getTrialDaysLeft()) : this.showErrorNotification(this.translate("LBL_SOMETHING_WENT_WRONG_CONTACT_SUPPORT", "Ondemand"))
                }, e => {
                    this.showErrorNotification(this.translate("LBL_SOMETHING_WENT_WRONG_CONTACT_SUPPORT", "Ondemand"))
                })
            } else this.showErrorNotification(this.translate("LBL_ANY_FEEDBACK", "Ondemand")), e.cancel()
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "feedback",
            attrs: {
                id: "feedback",
                size: "md",
                "body-class": "p-0",
                "header-class": "bg-grey-hue-4",
                "ok-only": "",
                "ok-title": translate("LBL_EXTEND_TRIAL", "Ondemand")
            },
            on: {
                ok: function (e) {
                    return extendTrial(e)
                }
            }
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", [_v(_s(translate("LBL_FEEDBACK")))])]), _v(" "), _c("div", {staticClass: "p-3"}, [_c("div", {staticClass: "d-flex justify-content-center"}, [_c("div", {staticClass: "row col-10"}, [_c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: feedback,
                expression: "feedback"
            }],
            staticClass: "col-12 extensionReason",
            staticStyle: {
                width: "100%",
                resize: "vertical",
                "background-color": "#f0f1f3",
                padding: "10px",
                border: "0"
            },
            attrs: {rows: "6", placeholder: translate("LBL_ANY_FEEDBACK", "Ondemand")},
            domProps: {value: feedback},
            on: {
                input: function (e) {
                    e.target.composing || (feedback = e.target.value)
                }
            }
        })])])])])
    }
});
var Vtiger_Component_UpdateUserImageModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Record],
    data: () => ({
        module: "Users",
        imageFieldName: "",
        imageData: null,
        configurationModel: new Configuration,
        dragging: !1,
        loading: !1,
        acceptFormats: ["jpeg", "png", "jpg", "pjpeg", "x-png", "gif", "bmp", "vndadobephotoshop", "tiff", "svg+xml", "webp", "x-ms-bmp"]
    }),
    created() {
        this.init()
    },
    methods: {
        init() {
            this.$watch("$_currentModuleModel", t => {
                t.isLoaded && (this.imageFieldName = _.first(Object.keys(this.$_currentModuleModel.getFieldsOfType(["image"]))))
            })
        }, getAcceptedFormats() {
            return this.acceptFormats.map(t => "." + t).join()
        }, handleDrop(t) {
            this.dragging = !1;
            let e = t.dataTransfer.files[0];
            "" != e.type && this.acceptFormats.includes(e.type.split("/")[1]) ? (this.$refs.imageInput.files = t.dataTransfer.files, this.imageData = this.$refs.imageInput.files[0], t.preventDefault()) : (this.showErrorNotification(this.translate("LBL_INVALID_IMAGE")), t.preventDefault())
        }, saveImage() {
            this.$validator.validate().then(t => {
                if (t) {
                    let t = Vtiger_Record_Model.getCleanInstance("Users", {id: this.$currentUser.id});
                    t[this.imageFieldName] = this.imageData, this.loading = !0, this.saveRecord(t, this.$_currentModuleModel).then(t => {
                        this.$store.commit("_set", {
                            key: "CurrentUser",
                            data: t
                        }), AppStorage.set("user_info", $.extend(!0, {}, t)), this.$root.$emit("bv::hide::modal", "updateUserImageModal")
                    }, t => {
                        this.showErrorNotification(t)
                    }).finally(() => {
                        this.loading = !1
                    })
                } else this.showErrorNotification(this.translate("JS_PLEASE_SELECT_IMAGE"))
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                title: translate("LBL_CHANGE_USER_IMAGE"),
                id: "updateUserImageModal",
                "ok-only": "",
                "ok-title": translate("LBL_SAVE")
            }, on: {
                ok: function (t) {
                    return t.preventDefault(), saveImage(t)
                }
            }
        }, [_c("div", {
            staticClass: "dragdrop-dotted rounded-6",
            class: {"dragdrop-solid": dragging},
            on: {
                drop: handleDrop, dragenter: function (t) {
                    t.preventDefault(), dragging = !0
                }, dragover: function (t) {
                    t.preventDefault(), dragging = !1
                }
            }
        }, [null == imageData ? _c("div", [_c("div", {staticClass: "h3"}, [_c("span", {staticClass: "fa fa-upload mr-2"}), _v("\n                        " + _s(translate("LBL_DRAG_&_DROP_FILE_HERE", "Documents")) + "\n                    ")]), _v(" "), _c("div", {staticClass: "my-1 text-uppercase"}, [_v("\n                        " + _s(translate("LBL_OR")) + "\n                    ")]), _v(" "), _c("div", {staticClass: "mb-2"}, [_c("div", {staticClass: "btn btn-primary inline-block position-relative"}, [_c("span", [_c("i", {staticClass: "fa fa-laptop"}), _v(" " + _s(translate("LBL_SELECT_FILE_FROM_COMPUTER", "Documents")))]), _v(" "), _c("b-file", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            ref: "imageInput",
            staticClass: "custom-file-upload",
            attrs: {name: "userImage", id: "userImageInput", accept: getAcceptedFormats()},
            model: {
                value: imageData, callback: function (t) {
                    imageData = t
                }, expression: "imageData"
            }
        })], 1), _v(" "), _c("i", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover",
                modifiers: {hover: !0}
            }],
            staticClass: "fa fa-info-circle align-self-center ml-2",
            attrs: {title: translate("LBL_MAX_UPLOAD_SIZE") + " " + configurationModel.get("IMAGE_MAX_UPLOAD_SIZE") + " " + translate("LBL_MB")}
        })])]) : _c("div", {staticClass: "p-2"}, [_c("div", {staticClass: "h4 text-nowrap"}, [_c("span", {staticClass: "d-inline-block mw-col-10 text-truncate"}, [_v(_s(imageData.name))]), _v(" "), _c("i", {
            staticClass: "fa fa-times ml-2 align-text-top",
            on: {
                click: function (t) {
                    imageData = null
                }
            }
        })])])])])
    },
    $_veeValidate: {validator: "new"}
});

class VTHelper {
    static extractData(e) {
        let t = !!e.componentOptions,
            r = _.pick(e.data, ["class", "staticClass", "style", "attrs", "props", "domProps", "on", "nativeOn", "directives", "scopesSlots", "slot", "ref", "key"]);
        if (t) {
            const t = e.componentOptions;
            _.assign(r, {props: t.propsData, on: t.listeners})
        }
        return r.key && (r.key = r.key + "-cloned-cid"), r
    }

    static cloneVNode(e, t = {}) {
        let r = ["class", "staticClass", "style", "attrs", "props", "domProps", "on", "nativeOn", "directives", "scopesSlots", "slot", "ref", "key"];
        let a = e.context && e.context.$createElement, n = !!e.componentOptions, s = !e.tag,
            i = n ? e.componentOptions.children : e.children;
        if (s) return e.text;
        let o = function (e, t) {
            const a = _.pick(e.data, r);
            if (t) {
                const t = e.componentOptions;
                _.assign(a, {props: t.propsData, on: t.listeners})
            }
            return a.key && (a.key = function (e) {
                return e + "-cloned-cid"
            }(a.key)), a
        }(e, n);
        for (var l in t) o[l] = o[l] || {}, o[l] = _.extend(o[l], t[l]);
        return a(n ? e.componentOptions.Ctor : e.tag, o, i ? i.map(e => VTHelper.cloneVNode(e)) : void 0)
    }

    static getCurrentDate(e) {
        var t = new Date, r = t.getDate(), a = t.getMonth() + 1;
        r < 10 && (r = "0" + r), a < 10 && (a = "0" + a);
        var n = r + "/" + a + "/" + t.getFullYear();
        return n = this.getDateInRequiredFormat(n, "dd/mm/yyyy", e)
    }

    static getCurrentTime() {
        var e = new Date, t = e.getHours(), r = e.getMinutes(), a = e.getSeconds();
        return r < 10 && (r = "0" + r), a < 10 && (a = "0" + a), e = t + ":" + r + ":" + a
    }

    static checkTimeUp(e) {
        var t = new Date, r = t.getHours(), a = t.getMinutes(), n = !0;
        return r >= e && a >= 1 && (n = !1), n
    }

    static getFutureDate(e, t) {
        t = t.toString();
        var r = new Date, a = new Date(r.getTime() + 864e5 * e).toLocaleString().split(",");
        return this.getDateInRequiredFormat(a[0], "dd/mm/yyyy", t)
    }

    static getDateInRequiredFormat(e, t, r) {
        for (var a = "<>@!#$%^&*()_+[]{}?:;|'\"\\,./~`-=", n = "", s = 0; s < a.length; s++) e.toString().indexOf(a[s]) > -1 && (n = a[s]);
        var i = e.split(n), o = i[(u = t.split(n)).indexOf("yyyy")], l = i[u.indexOf("mm")], c = i[u.indexOf("dd")],
            p = "";
        for (s = 0; s < a.length; s++) r.toString().indexOf(a[s]) > -1 && (p = a[s]);
        var u;
        return (e = [])[(u = r.split(p)).indexOf("yyyy")] = o, e[u.indexOf("mm")] = l, e[u.indexOf("dd")] = c, e[0] + p + e[1] + p + e[2]
    }

    static toPascalCase(e) {
        return e.charAt(0).toUpperCase() + e.slice(1)
    }

    static pushDataToUrl(e, t = !1) {
        let r = {};
        t && (r = url("?")), e = jQuery.extend(r, e);
        let a = jQuery.extend({module: e.module}, e), n = "";
        "admin" === url("-3") && (n = "admin/");
        let s = n + url("-2") + "/" + url("-1") + "?" + jQuery.param(a, !0);
        History.pushState({fromcode: !0}, VTHelper.translate(e.module, e.module), s)
    }

    static convertUrlToDataParams(e) {
        var t = new URL(e);
        let r = {};
        return r = new URLSearchParams(t.search), r
    }

    static getDecodedValue(e) {
        return jQuery("<div></div>").html(e).text()
    }

    static translate(e, t, r = "") {
        var a = e, n = [];
        if (r) for (var s = 2; s < r.length; s++) n.push(r[s]);
        if (n.length > 0 && (a = a + "_" + n.join("_")), !t && VTHelper.translatedStrings.Vtiger && VTHelper.translatedStrings.Vtiger[a]) return VTHelper.translatedStrings.Vtiger[a];
        if (VTHelper.translatedStrings[t] && VTHelper.translatedStrings[t][a]) return VTHelper.translatedStrings[t][a];
        if ("Tasks" == t && VTHelper.translatedStrings.Calendar && VTHelper.translatedStrings.Calendar[a]) return VTHelper.translatedStrings.Calendar[a];
        let i = "";
        if (t && 0 === t.indexOf("Settings") ? (null != lang[t] && (i = lang[t][e]), void 0 !== i && "" != i || (i = lang["Settings:Vtiger"][e])) : null != lang[t] && (i = lang[t][e]), void 0 !== i && "" != i || (i = lang.Vtiger[e]), void 0 !== i && "" != i || (i = e), r) for (s = 2; s < r.length; s++) i = i.replace("%s", r[s], 1);
        return t ? (VTHelper.translatedStrings[t] || (VTHelper.translatedStrings[t] = {}), VTHelper.translatedStrings[t][a] = i) : (VTHelper.translatedStrings.Vtiger || (VTHelper.translatedStrings.Vtiger = {}), VTHelper.translatedStrings.Vtiger[a] = i), i
    }

    static pickTextColorBasedOnBgColorSimple(e) {
        var t = "#" === e.charAt(0) ? e.substring(1, 7) : e,
            r = [parseInt(t.substring(0, 2), 16) / 255, parseInt(t.substring(2, 4), 16) / 255, parseInt(t.substring(4, 6), 16) / 255].map(e => e <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4));
        return .2126 * r[0] + .7152 * r[1] + .0722 * r[2] > .179 ? "#000000" : "#FFFFFF"
    }

    static getAlphabetsColorCodes() {
        return {
            A: "#E57373",
            B: "#F06292",
            C: "#BA68C8",
            D: "#876ad0",
            E: "#26C6DA",
            F: "#58CD7E",
            G: "#8D6E63",
            H: "#9575CD",
            I: "#00CED1",
            J: "#26A69A",
            K: "#9CCC65",
            L: "#F2C241",
            M: "#877CFF",
            N: "#A9A9A9",
            O: "#A4C400",
            P: "#F472D0",
            Q: "#00BFFF",
            R: "#00CC6A",
            S: "#FE8D49",
            T: "#97ADC3",
            U: "#F4A460",
            V: "#F0A30A",
            W: "#5F9EA0",
            X: "#F08080",
            Y: "#3AAF85",
            Z: "#0077B5"
        }
    }

    static getColorCode(e) {
        var t = "#876ad0";
        if (e) {
            var r = e.charAt(0);
            t = this.getAlphabetsColorCodes()[r.toUpperCase()]
        }
        return t
    }

    static getCalendarSpecificModule(e) {
        if (e && e.hasOwnProperty("activitytype")) {
            return "Task" == e.activitytype ? "Tasks" : "Events"
        }
    }

    static readableBytes(e) {
        var t = Math.floor(Math.log(e) / Math.log(1024));
        return 1 * (e / Math.pow(1024, t)).toFixed(2) + " " + ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"][t]
    }

    static capitalizeFirstLetter(e) {
        return e.charAt(0).toUpperCase() + e.slice(1)
    }

    static getHtmlDiff(e, t) {
        return htmldiff(e, t)
    }

    static linkify(e) {
        let t, r = {}, a = new Array, n = jQuery("<div>" + e + "</div>");
        n.find("a").length && n.find("a").each((function (e, n) {
            t = Math.round(1e7 * Math.random()) + "Id", r[t] = jQuery(n)[0].outerHTML, jQuery(n).replaceWith(t), a.push(t)
        }));
        let s = n.html();
        s = s.replace(/\r\n/g, "\n"), s = s.replace(/&nbsp;/g, " ");
        let i = anchorme.js(s, {TLDs: 267});
        for (let e = 0; e < a.length; e++) i = i.replace(a[e], r[a[e]]);
        return n = jQuery("<div>" + i + "</div>"), n.find("a").length && n.find("a").each((function (e, t) {
            let r = jQuery(t).attr("href");
            r && "javascript:void(0);" !== r && -1 === r.search("mailto:") && -1 === r.search("tel:") && jQuery(t).attr("target", "_blank")
        })), n.html()
    }

    static convertLongNumberToString(e) {
        var t = e;
        if (e >= 1e3) {
            for (var r = Math.floor(("" + e).length / 3), a = "", n = 2; n >= 1; n--) {
                if (((a = parseFloat((0 != r ? e / Math.pow(1e3, r) : e).toPrecision(n))) + "").replace(/[^a-zA-Z 0-9]+/g, "").length <= 2) break
            }
            if (a % 1 != 0) {
                a.toFixed(1);
                t = a + ["", "k", "m", "b", "t"][r] + "+"
            }
        }
        return t
    }

    static isElementInViewport(e) {
        let t = jQuery(window).width(), r = jQuery(window).height(), a = jQuery(document).scrollTop(),
            n = jQuery(document).scrollLeft(), s = a, i = a + r, o = n, l = n + t, c = e.offset();
        return c.top > s && c.top < i && c.left > o && c.left < l
    }

    static getInstanceUrl() {
        return $("base").attr("href")
    }

    static getInventoryModules() {
        return ["Quotes", "Invoice", "PurchaseOrder", "SalesOrder", "Subscription", "CreditNotes", "ReceiptNotes", "DeliveryNotes", "Bills", "WorkOrders"]
    }

    static strip_tags(e) {
        return e ? (e = e.replace(/<img[^>]*>/g, ""), jQuery("<div></div>").html(e).text()) : ""
    }

    static getPersonModules() {
        return ["Contacts", "Accounts", "Leads", "Vendors"]
    }

    static getCallingAllowedModules() {
        return ["Contacts", "Accounts", "Leads", "Potentials"]
    }

    static formatCurrencyToUserFormat(e, t) {
        if (0 == e) return 0;
        if (_.isUndefined(e) || "" == e) return "";
        if (_.isUndefined(t) && (t = App.root.$currentUser), t) {
            let d = t;
            var r = isNaN(d.no_of_currency_decimals) ? 2 : Math.abs(d.no_of_currency_decimals),
                a = unescape(d.currency_decimal_separator) || ".",
                n = void 0 === d.currency_grouping_separator ? "," : unescape(d.currency_grouping_separator),
                s = e < 0 ? "-" : "";
            e = Math.abs(e).toFixed(r);
            var i = parseInt(e), o = d.currency_grouping_pattern, l = "";
            "123456,789" === o ? (l = i.toString()).length > 3 && (l = l.slice(0, -3) + "," + l.slice(-3)) : l = "123,456,789" === o ? i.toLocaleString("en-US") : "12,34,56,789" === o ? i.toLocaleString("en-IN") : i.toString(), "," !== n && (l = l.replace(/,/g, n));
            var c = "1" == d.truncate_trailing_zeros || !1, p = "";
            if (r) {
                var u = Math.abs(e - i).toFixed(r);
                c ? 0 !== parseFloat(u) && (p = a + (u = parseFloat(u).toString()).slice(2)) : p = a + u.slice(2)
            }
            return s + l + p
        }
    }

    static appendCurrencySymbol(e, t) {
        if (void 0 === e || "" === e || null === e) return "";
        var r = App.root.$currentUser;
        void 0 === t && r && (t = r.currencySymbol);
        let a = "$1.0";
        return r && !_.isUndefined(r) && (a = r.currency_symbol_placement), "$1.0" === a ? t + e : "$ 1.0" === a ? t + " " + e : "1.0$" === a ? e + t : e + " " + t
    }

    static getDateYear(e, t) {
        return _.isEmpty(e) ? e : (_.isEmpty(t) && (t = App.root.$currentUser.get("date_format").toUpperCase()), moment(e, t).format("YYYY"))
    }

    static getDateMonthYear(e, t) {
        return _.isEmpty(e) ? e : (_.isEmpty(t) && (t = App.root.$currentUser.get("date_format").toUpperCase()), moment(e, t).format("MMMM YYYY"))
    }

    static getDateWeek(e, t) {
        return _.isEmpty(e) ? e : (_.isEmpty(t) && (t = App.root.$currentUser.get("date_format").toUpperCase()), "Week " + moment(e, t).week().toString())
    }

    static isEncryptedValue(e) {
        if (e && -1 != e.indexOf("********")) return !0;
        for (var t = 0, r = 0; r < e.length; r++) t += e.charCodeAt(r) < 0 || e.charCodeAt(r) > 255 ? 2 : 1;
        return t > 100
    }

    static getEncryptedDisplayValue(e, t, r) {
        return e.substring(0, t) + "********" + e.substring(e.length, e.length - r)
    }

    static purifyContent(e) {
        return DOMPurify.sanitize(e)
    }

    static toggleBlockquoteElement(e, t, r) {
        if (e) {
            for (; t && e.className != t;) if (!(e = e.nextSibling)) return;
            e.style.display = "none" == e.style.display ? "block" : "none";
            var a = $(r).find("div.v_content")[0];
            "none" == e.style.display ? a.getElementsByClassName("blockquote-wrap-handler")[0].setAttribute("title", this.translate("JS_SHOW_HIDDEN_CONTENT")) : a.getElementsByClassName("blockquote-wrap-handler")[0].setAttribute("title", this.translate("JS_HIDE_EXPANDED_CONTENT"))
        }
    }

    static playSound(e) {
        _.isEmpty(e) && (e = "layouts/v9/assets/bower_components/jquery-play-sound/Notification_Sound"), jQuery.playSound(e)
    }

    static humanizeEstimate(e) {
        e = parseInt(e);
        let t = Math.floor(e / 480), r = Math.floor((e - 480 * t) / 60), a = e - 480 * t - 60 * r, n = "";
        return t && t > 0 && (n = n + t + " days "), r && r > 0 && (n = n + " " + r + " hours "), a && a > 0 && (n = n + " " + a + " mins"), n
    }

    static convertEstimateStringToMins(e) {
        if (e && e.trim().length) {
            let r = /(\d+(\.\d+)?)\s*(min)/gi, a = /(\d+(\.\d+)?)\s*(hour)/gi, n = /(\d+(\.\d+)?)\s*(day)/gi, s = 8,
                i = 0, o = e.matchAll(r), l = Array.from(o);
            l && l[0] && l[0].length > 0 && (i += parseInt(l[0][1]));
            let c = e.matchAll(a), p = Array.from(c);
            if (p && p[0] && p[0].length > 0) {
                let e = parseInt(p[0][1]);
                var t = Math.floor(60 * e);
                i += parseInt(t)
            }
            let u = e.matchAll(n), d = Array.from(u);
            if (d && d[0] && d[0].length > 0) {
                let e = parseInt(d[0][1]);
                if (e) {
                    let r = e * s;
                    t = Math.floor(60 * r);
                    i += parseInt(t)
                }
            }
            return i
        }
    }

    static getFileIconByFileName(e) {
        switch (e.slice(2 + (e.lastIndexOf(".") - 1 >>> 0))) {
            case"txt":
                return "fa-file-alt";
            case"pdf":
                return "fa-file-pdf";
            case"doc":
            case"docx":
                return "fa-file-word";
            case"ppt":
            case"pptx":
                return "fa-file-powerpoint";
            case"zip":
            case"tar":
            case"7z":
            case"apk":
            case"bin":
            case"bzip":
            case"bzip2":
            case"gz":
            case"jar":
            case"rar":
            case"xz":
                return "fa-file-archive";
            case"jpeg":
            case"jfif":
            case"rif":
            case"gif":
            case"bmp":
            case"jpg":
            case"png":
                return "fa-file-image";
            case"mp3":
            case"wma":
            case"wav":
            case"ogg":
                return "fa-file-audio";
            case"xls":
            case"xlsx":
                return "fa-file-excel";
            case"webm":
            case"mkv":
            case"flv":
            case"vob":
            case"ogv":
            case"ogg":
            case"avi":
            case"mov":
            case"mp4":
            case"mpg":
            case"mpeg":
            case"3gp":
                return "fa-file-video";
            default:
                return "fa-file"
        }
    }
}

VTHelper.translatedStrings = {};
Vue.component("vds-value-progress", App.vtComponent.extend({
    functional: !0,
    props: {minWidth: {type: [String, Number], default: "40"}},
    render: (e, {props: t}) => e("span", {
        class: ["d-inline-block", "w-100", "emptyStateHolder"], style: (() => {
            let e = {height: "6px", "background-color": "#f2f2f3"};
            return t.minWidth && (e["min-width"] = t.minWidth + "px"), e
        })()
    })
}));
var Vtiger_Component_VariableTaxModal = App.vtComponent.extend({
    props: {tax: {type: [Array, Object]}, taxRegions: {type: [Array, Object]}}, render: function anonymous() {
        with (this) return _c("b-modal", {
            staticClass: "m-d",
            attrs: {id: "variableTaxModal", size: "lg", lazy: !0, "hide-footer": ""}
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("span", {staticClass: "d-inline h4 mb-0"}, [_v(_s(translate("LBL_VARIABLE", "Settings:Vtiger")) + " " + _s(translate("LBL_TAX")))]), _v(" "), _c("i", {
            staticClass: "fa fa-times h4 float-right c-pointer mb-0",
            on: {
                click: function (e) {
                    return $root.$emit("bv::hide::modal", "variableTaxModal")
                }
            }
        })]), _v(" "), _c("div", {staticClass: "d-flex flex-wrap justify-content-between variableTaxContents"}, [_c("div", {staticClass: "d-flex w-50  align-items-center justify-content-right px-2"}, [_c("div", {staticClass: "d-flex align-items-center w-100 mb-2 border rounded bg-grey-hue-8"}, [_c("span", {staticClass: "w-75 p-2 justify-content-center deepDiveFieldLbl"}, [_c("label", {staticClass: "mb-0 pl-2 w-100 text-truncate align-middle"}, [_v(_s(translate("LBL_DEFAULT")))])]), _v(" "), _c("span", {staticClass: "w-25 d-flex deepDiveFieldVal border-0 align-items-center"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: tax.percentage,
                expression: "tax.percentage"
            }],
            staticClass: "form-control border-top-0 border-bottom-0 variableTaxInput",
            attrs: {type: "number", disabled: !tax.check_value},
            domProps: {value: tax.percentage},
            on: {
                change: function (e) {
                    return $emit("vds::event::tax::toggleEdit")
                }, input: function (e) {
                    e.target.composing || $set(tax, "percentage", e.target.value)
                }
            }
        })])])]), _v(" "), _l(tax.regions, (function (e, t) {
            return [_l(e.list, (function (t, a) {
                return [_c("div", {staticClass: "d-flex  w-50  align-items-center justify-content-right px-2"}, [_c("div", {staticClass: "d-flex align-items-center w-100 mb-2 border rounded bg-grey-hue-8"}, [_c("span", {staticClass: "w-75 p-2 justify-content-center deepDiveFieldLbl"}, [_c("label", {staticClass: "mb-0 pl-2 w-100 text-truncate align-middle"}, [_v(_s(taxRegions[e.list[a]]))])]), _v(" "), _c("span", {staticClass: "w-25 d-flex deepDiveFieldVal border-0 align-items-center"}, [_c("input", {
                    directives: [{
                        name: "model",
                        rawName: "v-model",
                        value: e.value,
                        expression: "region.value"
                    }],
                    staticClass: "form-control border-top-0 border-bottom-0 variableTaxInput",
                    attrs: {type: "number", disabled: !tax.check_value},
                    domProps: {value: e.value},
                    on: {
                        change: function (e) {
                            return $emit("vds::event::tax::toggleEdit")
                        }, input: function (t) {
                            t.target.composing || $set(e, "value", t.target.value)
                        }
                    }
                })])])])]
            }))]
        }))], 2)])
    }
});
var Vtiger_Component_ViewAvailableConnectors = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Oauth],
    props: {
        availableConnectors: {type: Array},
        connectors: {type: Object},
        userLevelConnectors: {type: Array},
        excludedExtension: {type: Array},
        labels: {}
    },
    mounted() {
        this.$root.$on("vds::authorised", t => {
            this.syncSettings(t)
        })
    },
    methods: {
        syncSettings(t) {
            this.redirectUrl("view/config?module=" + t + "&parentModule=" + this.$module, !1)
        }, syncLog(t) {
            this.redirectUrl("view/extension?module=" + t + "&parentModule=" + this.$module, !1)
        }, configure(t) {
            this.redirectUrl(t, !1, "_blank")
        }, getImage: t => "layouts/v9/assets/images/" + t + ".png", install(t, e) {
            this.appStore.request("api_put", {url: "/extensions/install", params: {module: t}}).then(n => {
                if (n.installed_status) {
                    let s = n.extension_settings_url;
                    s = s.replace(t, this.$module), Vue.set(this.connectors[e][t], "installed_status", 1), Vue.set(this.connectors[e][t], "extension_settings_url", s)
                }
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "viewAvailableConnectors",
                size: "lg",
                "header-class": "p-0",
                lazy: !0,
                "hide-footer": "",
                "body-class": "p-4",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            staticClass: "modal-header d-flex w-100 bgLtGrey py-3 px-4 rounded align-items-center",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("span", {staticClass: "h5 mb-0"}, [_v(_s(translate("LBL_EXTENSIONS")))]), _v(" "), _c("button", {
            staticClass: "close align-right py-3",
            staticStyle: {outline: "none"},
            attrs: {type: "button", "aria-label": "close"}
        }, [_c("i", {
            staticClass: "fa fa-times float-right c-pointer", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "viewAvailableConnectors")
                }
            }
        })])]), _v(" "), _c("div", [_l(connectors, (function (t, e) {
            return [_.size(t) > 0 ? _c("div", [_c("div", {staticClass: "font-weight-bold mb-2"}, [_v(_s(translate(labels[e])))]), _v(" "), _c("div", {staticClass: "mb-3"}, [_v(_s(translate(labels[e] + "_INFO")))])]) : _e(), _v(" "), _l(t, (function (t, n) {
                return [_c("div", {staticClass: "mb-3 bg-grey-hue-9 rounded d-flex align-items-center justify-content-between py-2 px-4"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "circle-icon-widget bg-white rounded-circle d-flex mr-2"}, [_c("img", {
                    staticClass: "h-inherit w-inherit p-2",
                    attrs: {src: getImage(n)}
                })]), _v(" "), _c("span", [_v(_s(n))])]), _v(" "), excludedExtension.includes(n) ? _e() : _c("div", {staticClass: "d-flex"}, [t.installed_status && t.sync_ready_status ? [_c("button", {
                    staticClass: "btn btn-secondary d-flex align-items-center mr-3",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return syncLog(n)
                        }
                    }
                }, [_v("\n                                                " + _s(translate("LBL_SYNC_LOG")) + "\n                                            ")]), _v(" "), _c("button", {
                    staticClass: "btn btn-secondary d-flex align-items-center",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return syncSettings(n)
                        }
                    }
                }, [_v("\n                                                " + _s(translate("LBL_SETTINGS")) + "\n                                            ")])] : [_.isUndefined(t.installed_status) || "" == t.installed_status ? ["off" != $currentUser.is_admin ? _c("button", {
                    staticClass: "btn btn-primary d-flex align-items-center",
                    attrs: {id: "install", type: "button"},
                    on: {
                        click: function (t) {
                            return install(n, e)
                        }
                    }
                }, [_v("\n                                                    " + _s(translate("LBL_ADD")) + "\n                                                ")]) : _e()] : [userLevelConnectors.includes(n) ? _c("button", {
                    staticClass: "btn btn-primary d-flex align-items-center",
                    attrs: {id: "signIn", type: "button"},
                    on: {
                        click: function (t) {
                            return authorize(n)
                        }
                    }
                }, [_v("\n                                                    " + _s(translate("LBL_SIGN_IN")) + "\n                                                ")]) : _c("button", {
                    staticClass: "btn btn-primary d-flex align-items-center",
                    attrs: {id: "configure", type: "button"},
                    on: {
                        click: function (e) {
                            return configure(t.extension_settings_url)
                        }
                    }
                }, [_v("\n                                                    " + _s(translate("LBL_CONFIGURE")) + "\n                                                ")])]]], 2)])]
            }))]
        }))], 2)])
    }
});
var Vtiger_Component_WhatsNew = App.vtComponent.extend({
    props: {data: ""}, created() {
        let t = {
            "Vtiger Surveys": "fa fa-surveys",
            "Global Picklist Values": "fa fa-globalpicklist",
            "2-way sync between Vtiger and Gmail": "fa fa-gmailvtigersync",
            "Vtiger Inventory Add-on": "fa fa-puzzle-piece",
            "SMS Campaign": "fa fa-smscampaigns",
            "Vtiger Privacy Guard": "fa fa-gdpr",
            "Work Order Management": "fa fa-workorders",
            "Opportunity Line Item": "fa fa-lineitem",
            "Forecast and Quota": "fa fa-forecast",
            "Vtiger Buzz": "fa fa-notifications",
            "Internal Ticket": "fa fa-ticket-alt",
            "Employees Module": "fa fa-id-card-alt",
            "Credit Notes": "fa fa-creditnotes",
            "Multipath Workflow": "fa fa-multipathworkflow",
            Approvals: "fa fa-approvals",
            "Multiple Pipelines": "fa fa-multiplepipeline",
            "Real time email alerts": "fa fa-realtimeemailalerts",
            "Document Tracking": "fa fa-file-search",
            "Vtiger 360 for Field Sales": "fa fa-mobile alt",
            "Closed States": "fa fa-closedstates",
            "Storage Guard": "fa fa-storageguard",
            "Vtiger 360 Offline": "fa fa-vtiger360offline",
            "Reminder For Inbox": "fa fa-reminderforinbox",
            "Sales Quota": "fa fa-salesquota",
            "Profile Scoring": "fa fa-profilescoring",
            "Vtiger Support Access": "fa fa-vtigersupportaccess",
            Reminder: "fa fa-reminder",
            Webhooks: "fa fa-webhooks",
            "Record currency": "fa fa-recordcurrency",
            "Internal Chat": "fa fa-comments-alt",
            "Assignment Rules": "fa fa-assignmentrules",
            "Vtiger Inbox": "fa fa-inbox",
            "Email Designer": "fa fa-emaildesign",
            "Time Tracking": "fa fa-stopwatch",
            "Sales Insights": "fa fa-salesinsights",
            Appointments: "fa fa-calendar-check",
            "Case Satisfaction Survey": "fa fa-smile-beam",
            "Contact Management simplified": "fa fa-contacts",
            "Kanban View": "fa fa-kanban",
            "Vtiger 360": "fa fa-mobile",
            "Dynamic Fields": "fa fa-dynamicfields"
        };
        for (let a in this.data) this.data[a].icon = t[this.data[a].title]
    }, methods: {
        redirectURL(t) {
            this.redirectUrl(t, !1, "_blank")
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "whatsnew",
                size: "xl",
                "header-class": "p-0",
                lazy: !0,
                "hide-footer": "",
                "body-class": "previewModal p-4",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            staticClass: "modal-header d-flex w-100 bgLtGrey p-3 px-4 rounded align-items-center",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("div", {staticClass: "d-flex align-items-center w-85"}, [_c("div", {staticClass: "h3 mb-0 ml-2 d-flex w-100"}, [_c("div", [_v(_s(translate("LBL_WHATS_NEW", "Ondemand", "Vtiger")))])])]), _v(" "), _c("div", {staticClass: "btn-group"}, [_c("button", {
            staticClass: "close align-right py-3",
            staticStyle: {outline: "none"},
            attrs: {type: "button", "aria-label": "close"}
        }, [_c("i", {
            staticClass: "fa fa-times float-right c-pointer", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "whatsnew")
                }
            }
        })])])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-between mb-4"}, [_c("div", {attrs: {id: "whatsnew_content"}}, [_c("div", {staticClass: "row"}, [_c("div", {staticClass: "wizardtiles-rectangle d-flex align-content-start flex-wrap justify-content-around"}, _l(data, (function (t) {
            return _c("div", {
                attrs: {target: "_blank"}, on: {
                    click: function (a) {
                        return redirectURL(t.link)
                    }
                }
            }, [_c("div", {staticClass: "tile d-flex flex-column align-content-center align-items-stretch mb-4 p-0"}, [_c("div", {
                staticClass: "icon tile-content px-2 py-4 d-flex flex-column",
                staticStyle: {height: "250px"}
            }, [_c("div", {
                staticClass: "container d-flex align-items-center justify-content-center",
                staticStyle: {width: "64px", height: "64px", "border-radius": "50%"}
            }, [t.icon ? _e() : _c("img", {
                attrs: {
                    src: t.image,
                    alt: "link['title']",
                    width: "100px"
                }
            }), _v(" "), t.icon ? _c("i", {
                staticClass: "text-grey-4",
                class: t.icon,
                staticStyle: {"font-size": "32px"}
            }) : _e()]), _v(" "), _c("div", {staticClass: "d-flex justify-content-center px-3 py-4"}, [_v(_s(t.description))])]), _v(" "), _c("div", {staticClass: "tile-footer d-flex justify-content-center align-items-center"}, [_c("div", {
                staticClass: "h5 mb-0 text-dark text-truncate p-1",
                attrs: {title: t.title}
            }, [_c("b", [_v(_s(t.title))])])])])])
        })), 0)])])]), _v(" "), _c("div", {staticClass: "col-lg-12 col-md-12 col-sm-12 m-t-8"}, [_c("div", {staticClass: "text-center"}, [_c("a", {
            staticClass: "showMoreButton",
            attrs: {href: "https://www.vtiger.com/docs/recent-updates", target: "__blank"}
        }, [_v(_s(translate("LBL_VIEW_UPDATES_IN_DETAIL", "Vtiger")))])])])])
    }
});

Vue.component("ui-field-edit-type", App.vtComponent.extend({
    inject: ["$validator"],
    mixins: [Vtiger_Mixin_EditComponents, App.loadMixin("DependencyValidateUtils")],
    provide() {
        return {updateValue: this.updateValue}
    },
    props: {
        field: {type: Object},
        record: {type: Object},
        fieldName: {type: String},
        ignoreCompositeGrouping: {type: Boolean, default: !1},
        validateEvent: {type: String, default: "vds::form::validate"},
        placeHolder: {type: String, default: ""}
    },
    computed: {
        getFieldType() {
            if (!_.isUndefined(this.field)) {
                if (this.field.isCompositeParent && !this.ignoreCompositeGrouping) return "vds-composite-edit-template";
                let e = App.loadComponent(this.field.editTemplate, this.field._moduleName, !1);
                return e || this.field.editTemplate
            }
        }, recordFieldName() {
            return this.fieldName ? this.fieldName : _.isUndefined(this.field) ? void 0 : this.field.name
        }, fieldModel() {
            return this.field
        }
    },
    created() {
        let e = this, t = this.field.validateRules;
        for (var i in t) if (_.isString(t[i])) {
            let a = t[i];
            Object.defineProperty(this.$refs, a, {
                get: () => e.$parent.$refs[a], set(e) {
                }, configurable: !0, enumerable: !0
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c(getFieldType, _b({
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: field.validateRules,
                expression: "field.validateRules"
            }],
            key: field.name,
            ref: field.name,
            tag: "component",
            attrs: {
                "data-vv-validate-on": validateEvent,
                name: recordFieldName,
                field: field,
                "field-name": recordFieldName,
                record: record,
                "place-holder": placeHolder
            }
        }, "component", $attrs, !1))], 1)
    },
    methods: {
        updateValue(e) {
            Vue.set(this.record, this.recordFieldName, e)
        }
    }
})), Vue.component("vds-composite-edit-template", App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    props: {field: {type: Object}, record: {type: Object}},
    data: () => ({userSelectedFields: []}),
    computed: {
        compositeFields() {
            let e = {};
            this.field.isEditable && (e[this.field.name] = this.field);
            let t = this.field.getCompositeChilds();
            for (let i in t) {
                let a = t[i];
                a.isEditable && (e[a.name] = a)
            }
            return e
        }, getPrimaryField() {
            let e = this.record.getParentFieldForCompositeType(this.field.fieldType);
            var t = [];
            let i = this.field.getCompositeChilds();
            for (let e in i) {
                let a = i[e];
                a.isEditable && t.push(a.name)
            }
            return !this.field.editable && t.length > 0 && !_.contains(t, e) && (e = t[0]), e && this.field.getCompositeChilds()[e] ? this.field.getCompositeChilds()[e] : this.field
        }, selectedFields() {
            let e = this.getPrimaryField, t = [];
            var i = function (e, i = !1) {
                _.find(t, t => t.name == e.name) || (i ? t.unshift(e) : t.push(e))
            };
            let a = this.compositeFields, r = Object.keys(a);
            for (let e in this.userSelectedFields) {
                let t = this.userSelectedFields[e];
                t && jQuery.inArray(t.name, r) < 0 || i(t)
            }
            for (let e in a) {
                let t = a[e];
                (this.record.get(t.name) || t.isMandatory) && (_.find(this.userSelectedFields, e => e.name == t.name) || this.userSelectedFields.push(t), i(t))
            }
            return t.length <= 0 && (i(e, !0), this.userSelectedFields.push(e)), t
        }, haveMoreCompositeFields() {
            return this.selectedFields.length < Object.keys(this.compositeFields).length
        }
    },
    methods: {
        addCompositeField() {
            for (var e in this.compositeFields) if (!_.find(this.selectedFields, t => t.name == e)) {
                let t = this.compositeFields[e];
                this.userSelectedFields.push(t);
                break
            }
        }, fieldChange({oldField: e, newField: t}) {
            _.isUndefined(this.$_currentModuleModel.getField(t).defaultvalue) ? this.record.set(t, this.record.get(e)) : this.record.set(t, this.$_currentModuleModel.getField(t).defaultvalue), this.record.set(e, "");
            let i = this.userSelectedFields.indexOf(_.find(this.userSelectedFields, t => t.name == e));
            i >= 0 && (this.userSelectedFields.splice(i, 1), this.userSelectedFields.splice(i, 0, this.compositeFields[t]))
        }, removeCompositeField(e) {
            this.userSelectedFields = _.without(this.userSelectedFields, _.findWhere(this.userSelectedFields, {fieldname: e})), Vue.set(this.record, e, "")
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", [_l(selectedFields, (function (e) {
            return [_c("vds-composite-edit-field-template", {
                key: e.name,
                attrs: {
                    field: e,
                    record: record,
                    compositeFieldList: compositeFields,
                    allSelectedFields: selectedFields
                },
                on: {"vds::compositefield::change": fieldChange, "vds::remove::composite::field": removeCompositeField}
            })]
        })), _v(" "), haveMoreCompositeFields ? _c("a", {
            attrs: {href: "javascript:void(0);"},
            on: {click: addCompositeField}
        }, [_v("+ Add ")]) : _e()], 2)])
    },
    $_veeValidate: {
        value() {
            return this.record[this.field.name]
        }, name() {
            return this.field.name
        }, alias() {
            return this.field ? this.field.label : this.field.name
        }
    }
})), Vue.component("vds-composite-edit-field-template", App.vtComponent.extend({
    inject: ["$validator"],
    props: {
        record: {type: Object},
        field: {type: Object},
        compositeFieldList: {type: Object},
        allSelectedFields: {type: Array}
    },
    computed: {
        formatedCompositeFields() {
            let e = [];
            for (var t in this.compositeFieldList) _.find(this.allSelectedFields, e => e.name == t) && t != this.field.name || e.push({
                value: t,
                label: this.compositeFieldList[t].label
            });
            return e
        }, selectedField: {
            get() {
                return this.field.name
            }, set(e) {
                this.$emit("vds::compositefield::change", {oldField: this.field.name, newField: e})
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "row d-flex align-items-center mb-1 compositeFieldEdit"}, [_c("div", {staticClass: "col-4 pr-0"}, [_c("v-select2", {
            attrs: {
                options: formatedCompositeFields,
                emptyOption: !1,
                disabled: field.isMandatory,
                width: "100%"
            }, model: {
                value: selectedField, callback: function (e) {
                    selectedField = e
                }, expression: "selectedField"
            }
        })], 1), _v(" "), _c("div", {staticClass: "col-8 d-flex align-items-center pl-1"}, [_c("ui-field-edit-type", {
            staticClass: "d-flex",
            attrs: {field: field, record: record, ignoreCompositeGrouping: !0}
        }), _v(" "), allSelectedFields.length > 1 && !field.isMandatory ? _c("span", {
            staticClass: "c-pointer px-2 d-flex",
            staticStyle: {right: "1rem"},
            on: {
                click: function (e) {
                    return $emit("vds::remove::composite::field", field.fieldname)
                }
            }
        }, [_c("i", {staticClass: "fas fa-trash text-grey-4 compositeFieldDeleteIcon"})]) : _e()], 1), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "d-flex ml-3 text-danger text-truncate position-relative"
        }, [_v(_s(errors.first(field.name)))])])
    }
})), Vue.component("vds-datepicker", App.vtComponent.extend({
    model: {prop: "value", event: "update::date::value"},
    inject: ["$validator"],
    mixins: [Vtiger_Mixin_DateUtils, Vtiger_Mixin_Validators],
    inheritAttrs: !1,
    props: {
        dateFormat: String,
        value: String,
        minDate: [Date, String],
        name: String,
        className: String,
        validators: {type: Object},
        placeHolder: {type: String, default: ""},
        field: {type: Object, default: () => ({validateRules: {}})},
        showFieldError: {type: Boolean, default: !0},
        readonly: {type: Boolean, default: !1}
    },
    data: () => ({localValue: {type: String}, minmumDateValue: ""}),
    computed: {
        validationRule() {
            let e = {};
            e = this.validators ? this.validators : this.field.validateRules;
            var t = this.dateFormat;
            return t && t.split(" ").length > 1 ? e.datetime = !0 : e.date = !0, e
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "input-group dateField"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model.lazy",
                value: value,
                expression: "value",
                modifiers: {lazy: !0}
            }, {
                name: "validate",
                rawName: "v-validate:value",
                value: validationRule,
                expression: "validationRule",
                arg: "value"
            }],
            staticClass: "dateFieldInput form-control",
            class: className,
            attrs: {
                type: "text",
                disabled: readonly,
                "data-vv-as": field.label,
                name: field.name,
                placeholder: placeHolder
            },
            domProps: {value: value},
            on: {
                change: [function (e) {
                    value = e.target.value
                }, function (e) {
                    return $emit("input", e.target.value)
                }]
            }
        }), _v(" "), _m(0)]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showFieldError && errors.has(field.name),
                expression: "showFieldError && errors.has(field.name)"
            }], staticClass: "text-danger text-truncate", attrs: {title: errors.first(field.name)}
        }, [_v(_s(errors.first(field.name)))])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "input-group-append input-group-addon"}, [_c("span", {staticClass: "input-group-text"}, [_c("i", {staticClass: "fa fa-calendar"})])])
    }],
    mounted() {
        if (this.$currentUser) this.setDefaultDate(), this.init(); else var e = this.$watch("$currentUser", () => {
            this.init(), e()
        })
    },
    methods: {
        init() {
            var e = this.dateFormat ? this.dateFormat : this.getUserDateFormat();
            jQuery(this.$el).find(".input-group.dateField").datetimepicker({
                format: e,
                allowInputToggle: !0,
                icons: {time: "fa-clock", clear: "fa-trash"},
                showTodayButton: !0,
                showClear: !0
            }).on("dp.change", t => {
                var i = t.date, a = "";
                i && (a = i.format(e)), this.$emit("update::date::value", a), this.$root.$emit("vds::datepicker::field::change", this.name, t.date ? t.date.format(e) : "")
            })
        }, setDefaultDate() {
            if (this.$currentUser) {
                var e = new moment(new Date);
                this.minmumDateValue = e.tz(this.$currentUser.get("time_zone")).format("YYYY-MM-DD")
            }
        }
    }
})), Vue.component("vds-daterange-picker", App.vtComponent.extend({
    props: {value: String, dateFormat: String, minDate: Date, name: String, className: String},
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "input-group date"}, [_c("input", {
            staticClass: "dateRangeField form-control",
            class: className,
            attrs: {name: name, type: "text"}
        }), _v(" "), _m(0)])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "input-group-append"}, [_c("span", {staticClass: "input-group-text"}, [_c("i", {staticClass: "fa fa-calendar"})])])
    }],
    mounted() {
        if (this.$currentUser) this.init(); else var e = this.$watch("$currentUser", () => {
            this.init(), e()
        })
    },
    methods: {
        init() {
            let e = this.dateFormat ? this.dateFormat : this.$currentUser.get("date_format").toUpperCase(),
                t = moment().format(e), i = moment().add("1", "days").format(e);
            if (this.value) {
                let e = this.value.split(",");
                t = e[0], i = e[1]
            }
            var a = jQuery(this.$el).find(".dateRangeField");
            a.daterangepicker({startDate: t, endDate: i, locale: {format: e}, autoApply: !0});
            var r = this;
            a.on("apply.daterangepicker", (function (t, i) {
                r.$emit("input", i.startDate.format(e) + "," + i.endDate.format(e))
            }))
        }
    }
})), Vue.component("vds-datepicker-inline", App.vtComponent.extend({
    inheritAttrs: !1,
    mixins: [Vtiger_Mixin_DateUtils],
    props: ["dateFormat", "value"],
    render: function anonymous() {
        with (this) return _c("div", {
            on: {
                change: function (e) {
                    return $emit("input", e.target.value)
                }
            }
        })
    },
    mounted() {
        var e = this.dateFormat ? this.dateFormat : this.getUserDateFormat();
        jQuery(this.$el).datetimepicker({format: "L", inline: !0, format: e}).on("dp.change", t => {
            var i = t.date, a = "";
            i && (a = i.format(e)), this.$emit("input", a)
        })
    }
})), Vue.component("vds-timepicker", App.vtComponent.extend({
    inject: ["$validator"],
    props: {
        timeFormat: {type: [String, Number]},
        value: {type: String, default: ""},
        field: {type: Object, default: () => ({validateRules: {}})},
        disabled: {type: Boolean, default: !1}
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "input-group time"}, [_c("input", {
            staticClass: "form-control timepicker-default",
            attrs: {name: field.name, type: "text", placeholder: "", disabled: disabled},
            domProps: {value: value}
        }), _v(" "), _m(0)]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "input-group-append"}, [_c("span", {
            staticClass: "input-group-text",
            attrs: {id: ""}
        }, [_c("i", {staticClass: "far fa-clock"})])])
    }],
    computed: {
        currentTimeFormat() {
            if (this.timeFormat) return this.timeFormat;
            if (this.$currentUser) return this.$currentUser.hour_format;
            this.$watch("$currentUser", (e, t) => {
                if (e) return this.$currentUser.hour_format
            })
        }, convertedTimeFormat() {
            return "24" == this.currentTimeFormat ? "H:i" : "h:i A"
        }
    },
    mounted() {
        var e = jQuery(this.$el).find("input");
        jQuery(this.$el).find(".input-group-append").on("click", () => {
            e.focus()
        }), e.timepicker({
            timeFormat: this.convertedTimeFormat,
            className: "timePicker",
            scrollDefault: "now"
        }).on("change", () => {
            this.$emit("input", e.val())
        }).on("showTimepicker", () => {
            e.scrollParent().on("scroll.ui-timepicker.scroller", () => {
                e.timepicker("hide")
            })
        }).on("hideTimepicker", () => {
            e.scrollParent().off("scroll.ui-timepicker.scroller")
        })
    }
})), Vue.component("vds-rte", App.vtComponent.extend({
    components: {VueCkeditor: VueCkeditor},
    model: {prop: "content", event: "update:content"},
    props: {
        content: "",
        extraConfig: {type: Object, default: () => ({})},
        disabled: {type: Boolean, default: !1},
        name: {type: String, default: "vdsRte"},
        focus: {type: Boolean, default: !1},
        cursorPosition: {type: String, default: "end"},
        isAdvanced: {type: Boolean, default: !1},
        extraPlugins: {type: String, default: ""}
    },
    data() {
        return {
            editorType: "classic",
            configVersion: 0,
            editorInstance: !1,
            basicConfig: {
                toolbar: [{
                    name: "basicstyles",
                    items: ["Bold", "Italic", "Underline", "Strike"]
                }, {name: "styles", items: ["FontSize"]}, {
                    name: "paragraph",
                    items: ["NumberedList", "BulletedList", "Outdent", "Indent"]
                }, {name: "insert", items: ["Image", "Table"]}, {
                    name: "links",
                    items: ["Link", "Unlink"]
                }, {name: "format", items: ["RemoveFormat"]}, {name: "emojis", items: ["EmojiPanel"]}],
                uiColor: "#FFFFFF",
                readOnly: this.disabled,
                startupFocus: this.focus && this.cursorPosition,
                contentsCss: CKEDITOR.getUrl("custom.css"),
                filebrowserImageBrowseUrl: VTHelper.getInstanceUrl() + "kcfinder/browse.php?type=images",
                filebrowserImageUploadUrl: VTHelper.getInstanceUrl() + "kcfinder/upload.php?type=images",
                filebrowserUploadMethod: "form",
                removePlugins: "image,save,maximize,magicline,elementspath",
                extraPlugins: "image2,emoji",
                baseFloatZIndex: 2e3,
                disableNativeSpellChecker: !1,
                allowedContent: !0,
                enterMode: CKEDITOR.ENTER_BR,
                shiftEnterMode: CKEDITOR.ENTER_P
            },
            advancedConfig: {
                toolbarGroups: [{name: "clipboard", groups: ["clipboard", "undo"]}, {
                    name: "editing",
                    groups: ["find", "selection", "spellchecker"]
                }, {name: "insert", groups: ["blocks"]}, {name: "links"}, {
                    name: "document",
                    groups: ["mode", "document", "doctools"]
                }, {name: "styles"}, {name: "colors"}, {name: "tools"}, {name: "others"}, {
                    name: "basicstyles",
                    groups: ["basicstyles", "cleanup"]
                }, {name: "align"}, {name: "paragraph", groups: ["list", "indent"]}],
                extraPlugins: "lineheight, image2, emoji, docprops, wysiwygarea, clipboard, pastetools, pastefromgdocs",
                removeButtons: "Flash,About,Templates,NewPage,Save,Iframe,Smiley,Print",
                fullPage: !0,
                allowedContent: !0,
                fillEmptyBlocks: !1,
                autoParagraph: !1
            }
        }
    },
    computed: {
        editorContent: {
            get() {
                return this.content
            }, set(e) {
                this.$emit("update:content", e), this.$root.$emit("vds::rte::update", e)
            }
        }, config() {
            let e = this.basicConfig;
            return this.isAdvanced && (delete e.toolbar, e = Object.assign(e, this.advancedConfig)), _.isEmpty(this.extraPlugins) || (e.extraPlugins = e.extraPlugins + ", " + this.extraPlugins), Object.assign(e, this.extraConfig)
        }, id() {
            return this.name + "_" + Math.random().toString(36).substring(9)
        }
    },
    watch: {
        config() {
            this.configVersion++
        }, focus() {
            this.setEditorFocus()
        }, content() {
            if (this.editorInstance) {
                var e = this.editorInstance.editable();
                (e = jQuery(e.$)).find('a[data-linktype="shareUrl"]').click(() => {
                    this.$emit("vds::sharelink::clicked")
                })
            }
        }
    },
    methods: {
        onEditorReady(e) {
            this.editorInstance = e.editor, this.editorInstance.document.on("keydown", e => {
                let t = e.data.$;
                if (27 == t.keyCode) t.stopPropagation(); else if (t.shiftKey && 9 == t.keyCode) {
                    t.preventDefault();
                    let e = jQuery("#cke_" + this.editorInstance.name).find(".cke_button__outdent");
                    e.length && e.click()
                } else if (9 == t.keyCode) {
                    t.preventDefault();
                    let e = jQuery("#cke_" + this.editorInstance.name).find(".cke_button__indent");
                    e.length && e.click()
                }
            }), setTimeout(() => {
                this.$root.$emit("vds::rte::ready", e.editor)
            }, 500)
        }, onEditorDomReady(e) {
            setTimeout(() => {
                this.setEditorFocus()
            }, 100)
        }, onEditorBlur(e) {
            this.$emit("vds::rte::blurred")
        }, onEditorFocus(e) {
            this.$emit("vds::rte::focused")
        }, setEditorFocus() {
            if (this.focus) {
                if ("start" == this.cursorPosition) return;
                if (this.editorInstance) {
                    "" == this.editorInstance.getData() && (this.editorContent = "");
                    let i = this.editorInstance.createRange();
                    if ("end" == this.cursorPosition) i.moveToElementEditEnd(i.root); else if ("after" == this.cursorPosition) {
                        let e = i.root.getChild(0);
                        i.moveToPosition(e, CKEDITOR.POSITION_BEFORE_END)
                    }
                    this.editorInstance.getSelection().selectRanges([i]), this.editorInstance.focus();
                    var e = $(this.editorInstance.document.$), t = e.height();
                    e.scrollTop(t)
                }
            }
        }, addLinkListener() {
            this.editorInstance.plugins.get("LinkUI").formView.once("render", e => {
            })
        }, onDialogDefinition() {
        }, onFileUploadRequest() {
        }, onFileUploadResponse() {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("vue-ckeditor", {
            attrs: {
                name: name,
                id: id,
                config: config,
                types: editorType,
                instanceReadyCallback: onEditorReady,
                readOnlyMode: disabled
            },
            on: {
                blur: onEditorBlur,
                focus: onEditorFocus,
                contentDom: onEditorDomReady,
                dialogDefinition: function (e) {
                    return onDialogDefinition(e)
                },
                fileUploadRequest: function (e) {
                    return onFileUploadRequest(e)
                },
                fileUploadResponse: function (e) {
                    return onFileUploadResponse(e)
                }
            },
            model: {
                value: editorContent, callback: function (e) {
                    editorContent = e
                }, expression: "editorContent"
            }
        })], 1)
    }
})), Vue.component("vds-rte-multiple", App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal], props: {content: "", templateProperties: {}}, data: () => ({
        editorContent: "", config: {
            toolbar: [{name: "clipboard", items: ["Undo", "Redo", "-"]}, {
                name: "editing",
                items: ["Cut", "Copy", "Paste", "PasteText", "PasteFromWord", "-", "JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock", "-", "Outdent", "Indent", "-", "NumberedList", "BulletedList", "-", "Link", "Unlink", "Image"]
            }, {name: "document", items: [null, "-", "Preview", "-", "Templates", "Undo", "Redo"]}, {
                name: "insert",
                items: ["Flash", "Table", "HorizontalRule", "EmojiPanel", "SpecialChar", "Iframe", "-", "RemoveFormat"]
            }, "/", {name: "document", items: ["NewPage", "DocProps", "Preview"]}, {
                name: "styles",
                items: ["Font", "FontSize", "lineheight"]
            }, {
                name: "basicstyles",
                groups: ["basicstyles", "cleanup", "align", "list", "indent", "colors", "links"],
                items: ["Bold", "Italic", "Underline", "-", "Strike", "Subscript", "Superscript", "Blockquote", "-", "TextColor", "BGColor", "-"]
            }],
            contentsCss: CKEDITOR.getUrl("custom.css"),
            filebrowserImageBrowseUrl: VTHelper.getInstanceUrl() + "kcfinder/browse.php?type=images",
            filebrowserImageUploadUrl: VTHelper.getInstanceUrl() + "kcfinder/upload.php?type=images",
            filebrowserUploadMethod: "form",
            extraPlugins: "lineheight,image2,emoji,docprops, wysiwygarea",
            removePlugins: "image",
            removeButtons: "Flash,About,Templates,div,NewPage,Source,Save,Find,Replace,SelectAll,PasteText,HorizontalRule,Anchor,Styles,PageBreak,Iframe,Smiley",
            inlineEditor: !0,
            font_names: "Arial/Arial,Helvetica,sans-serif;Lucida Sans Unicode/Lucida Sans Unicode,lucida grande,sans-serif;Trebuchet MS/Trebuchet MS,helvetica,sans-serif;Tahoma/Tahoma,geneva,sans-serif;Verdana/Verdana,geneva,sans-serif;Times New Roman/Times New Roman,Times,serif;Georgia/Georgia,serif;Courier New/Courier New,courier,monospace;Lucida Console/Lucida Console,Lucida Sans Typewriter,monaco,Bitstream Vera Sans Mono,monospace;Comic Sans MS/Comic Sans MS,cursive,sans-serif;Calibri light/Calibri light,sans-serif;Allura/Allura Regular,serif;Roboto/Roboto Regular,sans-serif;Prata/Prata Regular,serif;Raleway/Raleway Regular,sans-serif;Cinzel/Cinzel Regular,serif;CinzelDecorative/CinzelDecorative Regular,serif;OpenSans/OpenSans-Regular,sans-serif;FiraSans/FiraSans Regular,sans-serif;FiraSansCondensed/FiraSansCondensed Regular,sans-serif;Montserrat/Montserrat Regular,sans-serif;Ailerons/Ailerons,sans-serif;Mincho Japanese/Mincho Japanese;Gothic Japanese/Gothic Japanese;Sans Serif/sans-serif;Serif/serif;",
            baseFloatZIndex: 2e3,
            disableNativeSpellChecker: !1,
            allowedContent: !0,
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P
        }
    }), created() {
        this.editorContent = this.content, this.$root.$off("vds::on::mergetag::selection"), this.$root.$on("vds::on::mergetag::selection", e => {
            this.showErrorNotification(this.translate("JS_CURSOR_AT_DESIRED_PLACE"))
        }), this.$root.$on("vds-rte-multiple-update", () => {
            this.$emit("update:content", jQuery("#edit-area").html())
        }), this.$root.$on("vds-register-sort", e => {
            this.registerSortableDraggableEvent(e)
        }), this.$root.$on("vds::on::content::updated", e => {
            this.editorContent = e, setTimeout(() => {
                this.init()
            }, 1e3)
        })
    }, mounted() {
        setTimeout(() => {
            this.init()
        }, 1e3)
    }, methods: {
        init() {
            this.removeBlockEvent(), this.getCKEdtiorInstance(), this.getOnHoverIcons(), this.registerDuplicateBlockEvent(), this.registerContentSync(), this.registerTemplateCSSstyle(), this.registerBlockStyleEvent()
        }, registerTemplateCSSstyle: function () {
            if (jQuery("#templateContainer")) {
                var e = jQuery("#templateContainer").css("background-color"), t = this.hasBackground(e),
                    i = this.registerConvertRgbtoHex(e), a = jQuery("#templateContainer").css("width"),
                    r = jQuery("#templateContainer").css("padding-left"),
                    s = jQuery("#templateContainer").css("padding-right"),
                    n = jQuery("#templateContainer").css("padding-top"),
                    o = jQuery("#templateContainer").css("padding-bottom"),
                    l = jQuery("#templateContainer").css("border-color");
                l = this.registerConvertRgbtoHex(l);
                var d = jQuery("#templateContainer").css("border-style"),
                    c = jQuery("#templateContainer").css("border-width"),
                    u = jQuery(".content-start").css("background-color"), p = this.registerConvertRgbtoHex(u),
                    m = this.hasBackground(u), h = jQuery.extend({}, !0, this.templateProperties);
                h["Template Styles"].background.value = t ? i : "transparent", h["Template Styles"].backgroundcolor.value = m ? p : "transparent", h["Template Styles"].width.value = a ? a.replace("px", "") : 0, h["Template Styles"].padding.value.left = r ? r.replace("px", "") : 0, h["Template Styles"].padding.value.right = s ? s.replace("px", "") : 0, h["Template Styles"].padding.value.top = n ? n.replace("px", "") : 0, h["Template Styles"].padding.value.bottom = o ? o.replace("px", "") : 0, h["Template Styles"].border.value.size = c, h["Template Styles"].border.value.type = d, h["Template Styles"].border.value.color = l, this.$emit("update:templateProperties", h)
            }
        }, registerBlockStyleEvent: function () {
            var e = this;
            jQuery("#edit-area").on("click", "tr.srt-block", (function (t) {
                jQuery("tr.srt-block").removeClass("active"), jQuery(this).addClass("active"), e.loadBlockCSSstyle(jQuery(this))
            }))
        }, loadBlockCSSstyle: function (e) {
            var t = e.find(".block-table").css("background-color"), i = this.hasBackground(t),
                a = this.registerConvertRgbtoHex(t), r = e.find(".block-table").css("width"),
                s = e.find(".block-table").css("border-color");
            s = this.registerConvertRgbtoHex(s);
            var n = e.find(".block-table").css("border-width"), o = e.find(".block-table").css("border-style"),
                l = e.find(".block-table").find("td").first().css("padding-left"),
                d = e.find(".block-table").find("td").first().css("padding-right"),
                c = e.find(".block-table").find("td").first().css("padding-top"),
                u = e.find(".block-table").find("td").first().css("padding-bottom"),
                p = jQuery.extend({}, !0, this.templateProperties);
            p["Block Styles"].background.value = i ? a : "transparent", p["Block Styles"].width.value = r ? r.replace("px", "") : 0, p["Block Styles"].padding.value.left = l ? l.replace("px", "") : 0, p["Block Styles"].padding.value.right = d ? d.replace("px", "") : 0, p["Block Styles"].padding.value.top = c ? c.replace("px", "") : 0, p["Block Styles"].padding.value.bottom = u ? u.replace("px", "") : 0, p["Block Styles"].border.value.size = n, p["Block Styles"].border.value.type = o, p["Block Styles"].border.value.color = s, this.$emit("update:templateProperties", p)
        }, hasBackground: function (e) {
            return !!e && ("transparent" != e && "0" != e.toLowerCase().match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/)[4])
        }, registerConvertRgbtoHex: function (e) {
            if (e) return (e = e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === e.length ? "#" + ("0" + parseInt(e[1], 10).toString(16)).slice(-2) + ("0" + parseInt(e[2], 10).toString(16)).slice(-2) + ("0" + parseInt(e[3], 10).toString(16)).slice(-2) : ""
        }, registerContentSync() {
            var e = this;
            jQuery("#edit-area").focusout((function () {
                var t = (new DOMParser).parseFromString(this.content, "text/html"), i = jQuery(t).find("head").html(),
                    a = jQuery("#edit-area").find("center").clone();
                a.find(".cke_reset.cke_widget_drag_handler_container").length && a.find(".cke_reset.cke_widget_drag_handler_container").remove(), a.find("[data-cke-temp]").length && a.find("[data-cke-temp]").remove(), a.find(".block-actions").remove(), a.find(".ckedit").each((function () {
                    jQuery(this).removeAttr("contenteditable").find("table").removeClass("cke_show_border")
                }));
                var r = a.html(),
                    s = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"\nxmlns:v="urn:schemas-microsoft-com:vml"\nxmlns:o="urn:schemas-microsoft-com:office:office"><head>' + i + '</head><body><center class="content-start" style="background-color:' + jQuery("#edit-area").find(".content-start").css("background-color") + '">' + r + "</center></body></html>";
                e.$emit("update:content", s)
            }))
        }, removeBlockEvent() {
            var e = jQuery("#edit-area"), t = this;
            e.on("click", ".srt-close", (function (i) {
                var a = jQuery(i.currentTarget).closest("tr.srt-block");
                if (1 == e.find("tr.srt-block").length) jQuery(".srt-close .fa-times").css("cursor", "not-allowed"); else {
                    var r = t.translate("JS_DELETE_BLOCK_CONFIRMATION");
                    t.showConfirmationBox({message: r}).then(() => {
                        a.fadeOut("normal", (function () {
                            jQuery(this).remove(), t.$root.$emit("vds::rte::update")
                        }))
                    }, () => {
                    })
                }
            }))
        }, registerDuplicateBlockEvent() {
            var e = this;
            jQuery("#edit-area").on("click", ".srt-duplicate", (function (t) {
                var i = jQuery(this).closest("tr.srt-block"), a = '<tr class="srt-block">' + i.html() + "</tr>";
                jQuery(a).hide().insertAfter(i).fadeIn(600).find(".ckedit").each((function () {
                    jQuery(this).attr("contenteditable", "true"), CKEDITOR.inline(this, this.config), e.$root.$emit("vds::rte::update")
                }))
            }))
        }, getOnHoverTemplateIcons() {
            return '<div class="block-actions d-flex" style="left:-90px;top: 4px;background: black;padding: 5px 12px;color: white;border-radius: 20px;font-size:16px; height:33px; width:90px">\n                                <span class="mr-2">\n                                    <span  title=' + this.translate("JS_DRAG") + ' class="fa fa-arrows srt-dragger c-pointer" aria-hidden="true"></span>\n                                </span>\n                                <span class="mr-2">\n                                    <span  title=' + this.translate("JS_DUPLICATE") + ' class="fa fa-clone srt-duplicate c-pointer" aria-hidden="true"></span>\n                                </span>\n                                <span>\n                                    <span  title=' + this.translate("JS_REMOVE") + ' class="srt-close fa fa-trash c-pointer" aria-hidden="true"></span>\n                                </span>\n                            </div>'
        }, getOnHoverIcons() {
            var e = this.getOnHoverTemplateIcons();
            jQuery("#edit-area").on("mouseenter", "tr.srt-block", (function () {
                jQuery(this).children("td").addClass("position-relative"), jQuery(this).children("td").append(e)
            })).on("mouseleave", "tr.srt-block", (function () {
                jQuery(this).children("td").removeClass("position-relative"), jQuery(this).children("td").find(".block-actions").remove()
            }))
        }, getCKEdtiorInstance() {
            var e = jQuery("#edit-area").find("#templateContainer > tbody"), t = this;
            e.children("tr.srt-block").each((function () {
                jQuery(this).find(".ckedit").each((function () {
                    for (var e in CKEDITOR.instances) {
                        var i = CKEDITOR.instances[e];
                        CKEDITOR.disableAutoInline = !0, this && this == i.element.$ && (CKEDITOR.instances[e].removeAllListeners(), delete CKEDITOR.instances[e])
                    }
                    jQuery(this).attr("contenteditable", "true"), CKEDITOR.inline(this, t.config), CKEDITOR.on("instanceReady", (function (e) {
                        jQuery(e.editor.element.$).removeAttr("title"), e.editor.on("focus", (function () {
                            window.curEditor = this, t.$root.$off("vds::on::mergetag::selection"), t.$root.$on("vds::on::mergetag::selection", e => {
                                window.curEditor.insertHtml(e), t.$root.$emit("vds::rte::update")
                            })
                        })), e.editor.on("change", (function () {
                            t.$root.$emit("vds::rte::update")
                        }))
                    }))
                }))
            })), this.registerSortableDraggableEvent(e)
        }, registerSortableDraggableEvent(e) {
            var t = this, i = jQuery("#edit-area");
            "undefined" == e && (e = i.find("#templateContainer > tbody")), e.sortable({
                appendTo: ".template-edit-container",
                items: "> .srt-block",
                cursor: "move",
                handle: ".srt-dragger",
                placeholder: "ui-sortable-placeholder",
                tolerance: "pointer",
                update: function (i, a) {
                    var r = jQuery(a.item);
                    if (a.item.hasClass("drg-block")) {
                        var s = r.data("id");
                        t.appStore.request("api_get", {
                            url: "/TemplateContent",
                            params: {module: "EmailTemplates", templateid: s}
                        }).then(e => {
                            var i = jQuery(e.blockcontent);
                            i.addClass("srt-block"), r.replaceWith(i), i.find(".ckedit").each((function () {
                                jQuery(this).attr("contenteditable", "true"), CKEDITOR.inline(this, t.config)
                            }))
                        })
                    }
                    e.sortable("refresh")
                },
                start: function (t, i) {
                    $(".cke").hide();
                    var a = i.item.height();
                    i.placeholder.append('<div class="ph-pointer" > Drop here </div>'), e.append('<tr class="fake-row srt-block"> <td style="height:' + (a + 100) + 'px"></td></tr>'), i.helper.addClass("set-temp-background")
                },
                over: function (e, t) {
                    t.item.height();
                    var i = t.item.width();
                    t.helper.children("td").width(i)
                },
                stop: function (i, a) {
                    a.item.removeClass("set-temp-background"), e.children(".fake-row").remove(), a.item.children("td").width("100%"), a.item.children("td").find(".cke_editable_inline").focus(), t.$root.$emit("vds::rte::update")
                }
            }), e = jQuery("#edit-area").find("#templateContainer > tbody"), jQuery(".drg-block").draggable({
                appendTo: ".template-edit-container",
                cursor: "pointer",
                snap: !0,
                helper: "clone",
                zIndex: 1e3,
                tolerance: "pointer",
                connectToSortable: e,
                start: function (e, t) {
                    jQuery(t.helper).css({
                        width: jQuery(e.target).width(),
                        height: jQuery(e.target).height(),
                        "min-height": "10px",
                        padding: 0,
                        "line-height": "100px",
                        background: "#fff"
                    })
                }
            })
        }
    }, watch: {
        templateProperties: {
            handler() {
                var e = jQuery("#edit-area"), t = this.templateProperties["Template Styles"], i = t.width.value,
                    a = t.padding.value.left, r = t.padding.value.right, s = t.padding.value.top,
                    n = t.padding.value.bottom, o = t.border.value.size, l = t.border.value.type,
                    d = t.border.value.color, c = t.background.value, u = t.backgroundcolor.value;
                jQuery.each(jQuery(".srt-block"), (function (e, t) {
                    jQuery(t).find(".block-table").css("width", i)
                })), jQuery("#templateContainer")[0].style.backgroundColor = u, jQuery(".content-start")[0].style.backgroundColor = c, e.find("#templateContainer").css("width", i + "px"), e.find("#templateContainer").css("padding-left", a + "px"), e.find("#templateContainer").css("padding-right", r + "px"), e.find("#templateContainer").css("padding-top", s + "px"), e.find("#templateContainer").css("padding-bottom", n + "px"), e.find("#templateContainer").css("border-width", o + "px"), e.find("#templateContainer").css("border-style", l), e.find("#templateContainer").css("border-color", d);
                var p = this.templateProperties["Block Styles"], m = p.background.value, h = p.width.value,
                    f = p.padding.value.left, g = p.padding.value.right, v = p.padding.value.top,
                    _ = p.padding.value.bottom, b = p.border.value.size, y = p.border.value.type,
                    C = p.border.value.color;
                e.find("tr.srt-block.active").find(".block-table").css("background-color", m), e.find("tr.srt-block.active").find(".block-table").css("width", h + "px"), e.find("tr.srt-block.active").find(".block-table").find("td").first().css("padding-left", f + "px"), e.find("tr.srt-block.active").find(".block-table").find("td").first().css("padding-right", g + "px"), e.find("tr.srt-block.active").find(".block-table").find("td").first().css("padding-top", v + "px"), e.find("tr.srt-block.active").find(".block-table").find("td").first().css("padding-bottom", _ + "px"), e.find("tr.srt-block.active").find(".block-table").css("border-style", y), e.find("tr.srt-block.active").find(".block-table").css("border-width", b + "px"), e.find("tr.srt-block.active").find(".block-table").css("border-color", C)
            }, deep: !0
        }
    }, render: function anonymous() {
        with (this) return _c("div", {attrs: {id: "edit-area"}}, [_c("div", {domProps: {innerHTML: _s(editorContent)}})])
    }
}));
let Vt_Reference_Wrapper = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleModel],
    model: {prop: "record", event: "vds::reference::selected"},
    props: {
        module: {type: String, required: !0},
        record: {type: [Object, Array], default: () => Vtiger_Record_Model.getCleanInstance(this.module)},
        selectMultiple: {type: Boolean, default: !1},
        fieldName: {type: String},
        parentModule: {type: String, default: ""},
        extraFields: {default: () => []},
        ignoreids: {default: () => []},
        lookupSearchFields: {default: () => []},
        ignoreLinkedRecords: {type: Boolean, default: !0},
        createAllowed: {type: Boolean, default: !0},
        isMultiReference: !1,
        typeSearchAllowed: {type: Boolean, default: !0},
        showAjaxAdd: {type: Boolean, default: !0}
    },
    data() {
        return {
            searchString: "",
            ajax_url: "search",
            ajax_data: this.formatRequest,
            ajax_response: this.formatResult,
            ajax_add_callback: this.ajaxAddCallback
        }
    },
    mounted() {
        this.init()
    },
    computed: {
        referencePopupComponent() {
            return App.loadComponent("PopupReferenceList", this.$module)
        }, referenceRecord() {
            return this.record
        }, allowReferenceAddRecord() {
            return !!(this.createAllowed && "Users" != this.module && this.$_currentModuleModel && this.$_currentModuleModel.isLoaded && this.$_currentModuleModel.isCreateable && this.$_currentModuleModel.isQuickCreateSupported)
        }
    },
    watch: {
        module: {
            handler(e) {
                this.$_moduleModel_init(e)
            }
        }
    },
    methods: {
        init() {
            jQuery("[name='" + this.fieldName + "']").on("select2:open", (function (e) {
                const t = "scroll.select2";
                jQuery(e.target).parents().off(t), jQuery(window).off(t)
            }))
        }, referenceParams() {
            var e = jQuery.extend({
                module: this.module,
                multiple: this.selectMultiple,
                fieldname: this.fieldName,
                parentModule: this.parentModule,
                ignoreLinkedRecords: this.ignoreLinkedRecords
            }, this.$attrs);
            return this.extraFields && (e.extraFields = this.extraFields), e
        }, addPopupListener() {
            var e = jQuery.Event("pre.referencemodal.show");
            if (App.event.trigger(e, {triggerer: this, fieldName: this.fieldName}), e.isDefaultPrevented()) return !1;
            this.$off("vds::popup:record::selected"), this.$on("vds::popup:record::selected", (e, t) => {
                this.$emit("vds::reference::selected", t)
            }), this.$emit("vds::referenceModal::show"), this.triggerRecordChangeToSelect2()
        }, triggerRecordChangeToSelect2() {
            this.$watch("record", (e, t) => {
                this.isMultiReference && e && e.length && !_.isEqual(e, t) && (this.$refs.select2.clear(), this.$refs.select2.markSelected(e))
            })
        }, clearField() {
            this.$emit("vds::reference::selected", Vtiger_Record_Model.getCleanInstance(this.module))
        }, formatRequest({term: e}) {
            this.searchString = e;
            var t = {
                module: _.isUndefined(this.parentModule) ? "" : this.parentModule,
                search_module: this.module,
                search_value: e,
                parent_record: _.isUndefined(this.$id) ? "" : this.$id
            };
            return this.extraFields && (t.extraFields = this.extraFields), this.lookupSearchFields && (t.lookup_filter_params = this.lookupSearchFields), this.parentModule == this.module && this.$id && (t.base_record = this.$id, t.ignore_ids = this.ignoreids), t
        }, formatResult(e, t) {
            let i = [];
            if (_.isEmpty(e.error)) for (let t in e) {
                var a = e[t];
                a.id = a.id, a.text = a.label, i.push(a)
            }
            return {results: i}
        }, selectedValue(e) {
            e = BaseModel.getModuleSpecificModel(this.module, "Record", e), this.$emit("vds::reference::selected", e)
        }, unselectedValue(e) {
            this.$emit("vds::reference::unselected", e)
        }, showQuickCreateModal(e) {
            this._getModuleDescribe(e).then(t => {
                if (t && t.createable) {
                    var i = Vtiger_Record_Model.getCleanInstance(e);
                    this.showModal({
                        componentName: App.loadComponent("QuickCreateModal", e),
                        componentData: {
                            module: e,
                            record: i,
                            showSaveAndContinueBtn: !1,
                            postQuickCreateSave: this.postQuickCreateSave,
                            sendEmailAllowed: !1
                        },
                        modalOnModalMode: !0
                    })
                } else this.showErrorNotification(this.translate("JS_NO_CREATE_OR_NOT_QUICK_CREATE_ENABLED", "Vtiger"))
            }), this.triggerRecordChangeToSelect2()
        }, postQuickCreateSave(e) {
            this.$emit("vds::reference::selected", e)
        }, ajaxAddCallback() {
            this._getModuleDescribe(this.module).then(e => {
                if (e && e.createable) {
                    let t = e.labelFields, i = {};
                    if (1 === t.length) i[t[0]] = this.searchString; else if (t.length > 1) for (let a of t) {
                        let t = e.getField(a);
                        !_.isEmpty(t) && t.isMandatory && (i[a] = this.searchString)
                    }
                    this.showModal({
                        componentName: App.loadComponent("QuickCreateModal", this.module),
                        componentData: {
                            module: this.module,
                            showSaveAndContinueBtn: !1,
                            postQuickCreateSave: this.postQuickCreateSave,
                            caseSendEmailAllowed: !1,
                            recordData: i
                        },
                        modalOnModalMode: !0
                    })
                } else this.showErrorNotification(this.translate("JS_NO_CREATE_OR_NOT_QUICK_CREATE_ENABLED", "Vtiger"))
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "input-group reference-input",
            class: {appendCreateBlock: allowReferenceAddRecord}
        }, [isMultiReference || !_.isUndefined(this.referenceRecord.id) && 0 != this.referenceRecord.id ? _c("div", {
            key: fieldName + "_HasValue",
            staticClass: "d-flex flex-grow-1"
        }, [isMultiReference ? [_c("v-select2", {
            key: fieldName + "_" + $_currentModuleModel.isLoaded,
            ref: "select2",
            attrs: {
                disabled: !typeSearchAllowed,
                placeholder: translate("LBL_TYPE_SEARCH"),
                name: fieldName,
                "empty-option": !1,
                ajax_url: ajax_url,
                ajax_data: ajax_data,
                ajax_response: ajax_response,
                selected: referenceRecord,
                multiple: !0
            },
            on: {vt_select2_selected: selectedValue, vt_select2_unselected: unselectedValue}
        }), _v(" "), _c("div", {staticClass: "input-group-append height-35px"}, [_c("span", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.referencePopupComponent.vds::referenceModal::show.true",
                value: referenceParams,
                expression: "referenceParams",
                modifiers: {referencePopupComponent: !0, "vds::referenceModal::show": !0, true: !0}
            }], staticClass: "input-group-text c-pointer", on: {click: addPopupListener}
        }, [_c("i", {class: getModuleIconClass(module)})]), _v(" "), allowReferenceAddRecord ? _c("span", {
            staticClass: "input-group-text c-pointer",
            on: {
                click: function (e) {
                    return showQuickCreateModal(module)
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus"})]) : _e()])] : [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: referenceRecord.recordLabel,
                expression: "referenceRecord.recordLabel"
            }],
            staticClass: "form-control bg-white height-35px textOverflowEllipsis pr-4",
            attrs: {type: "text", readonly: ""},
            domProps: {value: referenceRecord.recordLabel},
            on: {
                input: function (e) {
                    e.target.composing || $set(referenceRecord, "recordLabel", e.target.value)
                }
            }
        }), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: referenceRecord.getId,
                expression: "referenceRecord.getId"
            }],
            staticClass: "form-control",
            attrs: {name: fieldName, type: "hidden"},
            domProps: {value: referenceRecord.getId},
            on: {
                input: function (e) {
                    e.target.composing || $set(referenceRecord, "getId", e.target.value)
                }
            }
        }), _v(" "), _c("h5", {
            staticClass: "searchClearIcon position-absolute mr-3 c-pointer",
            on: {click: clearField}
        }, [_c("i", {staticClass: "fa fa-times-circle text-secondary"})]), _v(" "), _c("div", {staticClass: "input-group-append height-35px"}, [_c("span", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.referencePopupComponent.vds::referenceModal::show.true",
                value: referenceParams,
                expression: "referenceParams",
                modifiers: {referencePopupComponent: !0, "vds::referenceModal::show": !0, true: !0}
            }], staticClass: "input-group-text c-pointer", on: {click: addPopupListener}
        }, [_c("i", {class: getModuleIconClass(module)})]), _v(" "), allowReferenceAddRecord ? _c("span", {
            staticClass: "input-group-text c-pointer",
            on: {
                click: function (e) {
                    return showQuickCreateModal(module)
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus"})]) : _e()])]], 2) : _c("div", {
            key: fieldName + "_Empty",
            staticClass: "d-flex flex-grow-1"
        }, [_c("v-select2", {
            key: fieldName + "_" + $_currentModuleModel.isLoaded,
            ref: "select2",
            attrs: {
                disabled: !typeSearchAllowed,
                placeholder: translate("LBL_TYPE_SEARCH"),
                name: fieldName,
                "empty-option": !1,
                ajax_url: ajax_url,
                ajax_data: ajax_data,
                ajax_response: ajax_response,
                selected: referenceRecord.recordLabel,
                "show-ajax-add": showAjaxAdd,
                "ajax-search-module": module,
                "ajax-search-string": searchString,
                "ajax-add-callback": ajax_add_callback
            },
            on: {
                "select2-loaded": function (e) {
                    return $emit("select2-loaded")
                }, vt_select2_selected: selectedValue
            }
        }), _v(" "), _c("div", {staticClass: "input-group-append height-35px"}, [_c("span", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.referencePopupComponent.vds::referenceModal::show.true",
                value: referenceParams,
                expression: "referenceParams",
                modifiers: {referencePopupComponent: !0, "vds::referenceModal::show": !0, true: !0}
            }], staticClass: "input-group-text c-pointer", on: {click: addPopupListener}
        }, [_c("i", {class: getModuleIconClass(module)})]), _v(" "), allowReferenceAddRecord ? _c("span", {
            staticClass: "input-group-text c-pointer",
            on: {
                click: function (e) {
                    return showQuickCreateModal(module)
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus"})]) : _e()])], 1)])
    }
});
Vue.component("vds-reference", Vt_Reference_Wrapper), Vue.component("vds-user-reference", Vt_Reference_Wrapper.extend({
    methods: {
        formatRequest({term: e}) {
            return {module: this.module, text: e, field: this.fieldName, type: "referencesearch", src_record: this.$id}
        }
    }
})), Vue.component("vds-custom-input", {
    props: ["value"], render: function anonymous() {
        with (this) return _c("input", {
            attrs: {type: "text"}, domProps: {value: value}, on: {
                input: function (e) {
                    return $emit("input", e.target.value)
                }
            }
        })
    }
}), Vue.component("vds-tax-edit", {
    mixins: [Vtiger_Mixins_ShowModal],
    props: {editable: {type: Boolean, default: !0}, tax: {type: [Array, Object]}, taxRegions: {type: [Array, Object]}},
    computed: {
        variableTax() {
            return "Variable" == this.tax.type
        }
    },
    watch: {
        "tax.check_value"(e, t) {
            Boolean(t) != Boolean(e) && this.$emit("vds::event::tax::toggleEdit")
        }, "tax.percentage"(e, t) {
            parseFloat(t) != parseFloat(e) && this.$emit("vds::event::tax::toggleEdit")
        }
    },
    methods: {
        showVariableTaxModal() {
            this.showModal({
                componentName: App.loadComponent("VariableTaxModal", "Vtiger"),
                componentData: {tax: this.tax, taxRegions: this.taxRegions, module: "Vtiger"},
                modalOnModalMode: !1
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex w-75 mr-5 deepDiveFieldVal border-0 taxFieldEdit",
            class: variableTax ? "flex-column" : "align-items-center"
        }, [_c("div", {staticClass: "flex-grow-1"}, [variableTax ? [_c("div", {staticClass: "variableTaxes d-flex flex-column variableTaxContents"}, [_c("div", {staticClass: "d-flex align-items-center justify-content-right mb-2 border rounded bg-grey-hue-8"}, [_c("span", {staticClass: "w-75 p-2"}, [_c("label", {staticClass: "mb-0 pl-2 w-100 text-truncate align-middle"}, [_v(_s(translate("LBL_DEFAULT")))])]), _v(" "), _c("span", {staticClass: "w-25"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: tax.percentage,
                expression: "tax.percentage"
            }],
            staticClass: "form-control variableTaxInput",
            attrs: {type: "number", disabled: !tax.check_value || !editable},
            domProps: {value: tax.percentage},
            on: {
                input: function (e) {
                    e.target.composing || $set(tax, "percentage", e.target.value)
                }
            }
        })])]), _v(" "), _l(tax.regions, (function (e, t) {
            return t <= 1 ? [_l(e.list, (function (t, i) {
                return [_c("div", {staticClass: "d-flex align-items-center justify-content-right mb-2 border rounded bg-grey-hue-8"}, [_c("span", {staticClass: "w-75 p-2"}, [_c("label", {staticClass: "mb-0 pl-2 w-100 text-truncate align-middle"}, [_v(_s(taxRegions[e.list[i]]))])]), _v(" "), _c("span", {staticClass: "w-25"}, [_c("input", {
                    directives: [{
                        name: "model",
                        rawName: "v-model",
                        value: e.value,
                        expression: "region.value"
                    }],
                    staticClass: "form-control variableTaxInput",
                    attrs: {type: "number", disabled: !tax.check_value || !editable},
                    domProps: {value: e.value},
                    on: {
                        change: function (e) {
                            return $emit("vds::event::tax::toggleEdit")
                        }, input: function (t) {
                            t.target.composing || $set(e, "value", t.target.value)
                        }
                    }
                })])])]
            }))] : _e()
        })), _v(" "), _c("div", {staticClass: "d-flex justify-content-end mt-1"}, [tax.regions && tax.regions.length > 2 ? _c("div", {
            staticClass: "flex-grow-1 c-pointer",
            on: {
                click: function (e) {
                    return showVariableTaxModal()
                }
            }
        }, [_v(_s(translate("LBL_VIEW")) + " " + _s(translate("LBL_MORE")))]) : _e(), _v(" "), variableTax ? _c("div", [_c("vds-switch", {
            attrs: {disabled: !editable},
            model: {
                value: tax.check_value, callback: function (e) {
                    $set(tax, "check_value", e)
                }, expression: "tax.check_value"
            }
        })], 1) : _e()])], 2)] : [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: tax.percentage,
                expression: "tax.percentage"
            }],
            staticClass: "form-control",
            staticStyle: {height: "40px"},
            attrs: {type: "number", disabled: !tax.check_value || !editable},
            domProps: {value: tax.percentage},
            on: {
                input: function (e) {
                    e.target.composing || $set(tax, "percentage", e.target.value)
                }
            }
        })]], 2), _v(" "), variableTax ? _e() : _c("div", {
            staticClass: "mr-3 position-absolute toggle",
            staticStyle: {right: "3rem"}
        }, [_c("div", {staticClass: "w-100"}, [_c("vds-switch", {
            attrs: {disabled: !editable},
            model: {
                value: tax.check_value, callback: function (e) {
                    $set(tax, "check_value", e)
                }, expression: "tax.check_value"
            }
        })], 1)])])
    }
}), Vue.component("vds-rating", App.vtComponent.extend({
    model: {prop: "rating", event: "update:rating"},
    props: {rating: {type: [String, Number], default: 0}, editable: {type: Boolean, default: !0}},
    data() {
        return {value: this.rating ? parseInt(this.rating) : 0, maxRating: 5, ratingMap: {}}
    },
    watch: {
        rating() {
            this.value = parseInt(this.rating), this.setRateMap(this.value)
        }
    },
    created() {
        this.setRateMap(this.value)
    },
    methods: {
        setRateMap(e) {
            if (e = parseInt(e), !this.editable && e !== this.value) return;
            let t = {};
            for (var i = 1; i <= e; i++) t[i] = !0;
            for (i = e + 1; i <= this.maxRating; i++) t[i] = !1;
            this.ratingMap = t
        }, updateRating(e) {
            (this.editable || parseInt(e) === this.value) && (this.value = parseInt(e), this.setRateMap(this.value), this.$emit("update:rating", this.value))
        }
    },
    render: function anonymous() {
        with (this) return _c("span", _l(ratingMap, (function (e, t) {
            return _c("span", {
                key: t,
                staticClass: "fa fa-star font-16 pr-1",
                class: {"c-pointer": editable},
                style: {color: e ? "#F29C2E" : "#D5D7D9"},
                on: {
                    mouseover: function (e) {
                        return setRateMap(t)
                    }, mouseout: function (e) {
                        return setRateMap(value)
                    }, click: function (e) {
                        return updateRating(t)
                    }
                }
            })
        })), 0)
    }
})), Vue.component("vds-typing-progress", App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _m(0)
    }, staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "typing-progress"}, [_c("span"), _v(" "), _c("span"), _v(" "), _c("span")])
    }]
}));
var Tasks_Component_AddNewTaskSection = App.vtComponent.extend({
    components: {"vds-inline-add-task": App.loadComponent("InlineAddTask", "Tasks")},
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "border rounded border-grey-1 mb-4"}, [_c("div", {staticClass: "subtaskSectionName d-flex justify-content-between align-items-center px-3 py-1 subTasksSectionBgClr border-bottom border-grey-1 rounded-top row-height-39"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: sectionName,
                expression: "sectionName"
            }],
            staticClass: "form-control border-0 p-0 subTasksSectionBgClr",
            attrs: {type: "text", name: "section", placeholder: translate("JS_ENTER_SECTION_NAME")},
            domProps: {value: sectionName},
            on: {
                input: function (e) {
                    e.target.composing || (sectionName = e.target.value)
                }
            }
        }), _v(" "), _c("span", {
            staticClass: "c-pointer", on: {
                click: function (e) {
                    return deleteSection()
                }
            }
        }, [_c("i", {staticClass: "fa fa-trash text-muted pl-2"})])]), _v(" "), _c("vds-inline-add-task", {
            attrs: {
                "section-name": sectionName,
                "section-key": sectionKey
            }
        })], 1)
    },
    data: () => ({sectionName: ""}),
    props: {sectionKey: {type: [String, Number], default: !1}},
    methods: {
        deleteSection() {
            this.$emit("vds::tasks::section::delete", this.sectionKey)
        }
    },
    mounted() {
    }
});
var Tasks_Component_ConvertTask = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record")], render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "lg",
                lazy: !0,
                id: "ConvertTask",
                title: translate("LBL_CONVERT_SUBTASK_TO_TASK", $module),
                "hide-footer": ""
            }
        }, [_c("form", {staticClass: "m-3"}, [defaultMandatoryFields.subject ? _c("div", {staticClass: "form-group"}, [_c("label", {attrs: {for: defaultMandatoryFields.subject.label}}, [_v(_s(defaultMandatoryFields.subject.label))]), _v(" "), _c("ui-field-edit-type", {
            attrs: {
                field: defaultMandatoryFields.subject,
                record: recordModel
            }
        })], 1) : _e(), _v(" "), _c("div", {staticClass: "form-group"}, [_c("label", {attrs: {for: translate("LBL_DESCRIPTION")}}, [_v(_s(translate("LBL_DESCRIPTION")))]), _v(" "), _c("vds-rte", {
            model: {
                value: recordModel.description,
                callback: function (e) {
                    $set(recordModel, "description", e)
                },
                expression: "recordModel['description']"
            }
        })], 1), _v(" "), showMoreFields ? _e() : _c("button", {
            staticClass: "btn btn-link p-0 form-group",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    showMoreFields = !showMoreFields
                }
            }
        }, [_v(_s(translate("LBL_ADD_MORE_FIELDS", $module)) + " >")]), _v(" "), _l(requiredFields, (function (e) {
            return _c("div", {
                staticClass: "form-group",
                attrs: {id: "formFields"}
            }, [_c("label", {attrs: {for: e.label}}, [_v(_s(e.label))]), _v(" "), _c("div", {staticClass: "fieldName"}, [_c("ui-field-edit-type", {
                attrs: {
                    field: e,
                    record: recordModel
                }
            })], 1)])
        })), _v(" "), _c("div", {staticClass: "modal-footer"}, [_c("button", {
            staticClass: "btn btn-primary justify-content-right",
            attrs: {type: "button"},
            on: {click: convertToTask}
        }, [_v(_s(translate("LBL_SAVE")))])])], 2)])
    }, props: {record: {type: Object, required: !0}}, data() {
        return {
            recordModel: Vtiger_Record_Model.getCleanInstance(this.$module, this.record),
            defaultFields: ["subject", "description"],
            showMoreFields: ""
        }
    }, computed: {
        $_moduleModel_Name: () => "Tasks", moduleModel() {
            return this.$_currentModuleModel
        }, requiredFields() {
            let e = {};
            if (this.showMoreFields) {
                var t = this.moduleModel.getMandatoryFields();
                for (let o in t) {
                    t[o].isEditable && (this.defaultFields.includes(o) || (e[o] = t[o]))
                }
            }
            return e
        }, defaultMandatoryFields() {
            let e = {};
            var t = this.moduleModel.getMandatoryFields();
            for (let o in t) this.defaultFields.includes(o) && (e[o] = t[o]);
            return e
        }
    }, methods: {
        convertToTask() {
            this.recordModel.section_name = "", this.recordModel.parent_task = "", this.$validator.validate().then(e => {
                e && this.saveRecord(this.recordModel, this.moduleModel).then(e => {
                    e && (this.$root.$emit("bv::hide::modal", "ConvertTask"), this.$root.$emit("vds::widgets::refresh"))
                })
            })
        }
    }, $_veeValidate: {validator: "new"}
});
var Vtiger_Component_DeleteSubTaskSection = App.vtComponent.extend({
    components: {"vds-delete-confirmation": App.loadComponent("DeleteConfirmation", this.$module, !1)},
    render: function anonymous() {
        with (this) return _c("vds-delete-confirmation", {
            attrs: {"modal-id": "deleteSubtask"},
            on: {ok: ok, cancel: cancel}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_DELETE_SECTION")))]), _v(" "), _c("div", {
            attrs: {slot: "message"},
            slot: "message"
        }, [_v(_s(translate("LBL_DELETE_SECTION_WITH_SUBTASKS", $module)))]), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_NO_ONLY_SECTION", $module)))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_YES_DELETE_SUBTASKS", $module)))])])
    },
    props: {records: {type: [Object, Array]}, moduleName: {type: String}, sectionName: {type: String}},
    methods: {
        ok() {
            let e = {}, t = {type: "delete", api: "records", parameters: {module: this.moduleName, id: ""}};
            for (let s of this.records) if (t.parameters.id = s.getId(), e[s.getId()] = jQuery.extend(!0, {}, t), s.isClosed) return this.showErrorNotification(this.translate("LBL_CANNOT_DELETE_THE_SECTION_IF_TASK_IS_CLOSED", this.$module)), this.$root.$emit("bv::hide::modal", "deleteSubtask"), !1;
            let s = [];
            this.appStore.request("api_batch", {requests: e}).then(e => {
                for (let t in e) {
                    let e = t.split("-")[0];
                    s.push(e)
                }
                this.$root.$emit("bv::hide::modal", "deleteSubtask"), this.$root.$emit("vds::delete::subtasks::section", s)
            })
        }, cancel() {
            let e = [], t = {type: "put", api: "records", parameters: {module: this.moduleName, id: ""}};
            for (let s of this.records) {
                if (s.isClosed) {
                    this.showErrorNotification(this.translate("LBL_CANNOT_DELETE_THE_SECTION_IF_TASK_IS_CLOSED", this.$module));
                    break
                }
                t.parameters.id = s.getId(), t.parameters.section_name = "", e.push(jQuery.extend(!0, {}, t))
            }
            if (_.size(e)) {
                let t = [];
                this.appStore.request("api_batch", {requests: e}).then(e => {
                    Object.values(e).map(e => {
                        t.push(BaseModel.getModuleSpecificModel(this.$module, "Record", JSON.parse(e)))
                    });
                    this.$root.$emit("vds::delete::subtasks::section", t)
                })
            }
        }
    }
});
var Tasks_Component_InlineAddTask = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    components: {"vds-load-sub-task-row": App.loadComponent("LoadSubTaskRow", "Tasks")},
    props: {sectionName: {type: String}, sectionKey: {type: [String, Number]}},
    render: function anonymous() {
        with (this) return _c("div", _l(lineTask, (function (e, s) {
            return _c("div", {key: e}, [_c("vds-load-sub-task-row", {
                ref: "addTask",
                refInFor: !0,
                attrs: {
                    "line-key": s,
                    "section-name": sectionName,
                    "section-key": sectionKey,
                    saveInProgress: saveInProgress
                },
                on: {
                    "update:saveInProgress": function (e) {
                        saveInProgress = e
                    }, "update:save-in-progress": function (e) {
                        saveInProgress = e
                    }
                }
            })], 1)
        })), 0)
    },
    data: () => ({lineTask: [], saveInProgress: !1}),
    methods: {
        incrementAddTask() {
            var e = "inline_task_" + parseInt(1e3 * Math.random(1e3, 1e5));
            this.lineTask.push(e)
        }, postSave(e, s) {
            this.lineTask.splice(s, 1), this.incrementAddTask(), this.$nextTick(() => {
                this.$refs.addTask && this.$refs.addTask[0] && this.$refs.addTask[0].focusOnTextArea()
            })
        }
    },
    mounted() {
        this.incrementAddTask()
    }
});
var Tasks_Component_LoadSubTaskRow = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    data() {
        return {recordModel: Vtiger_Record_Model.getCleanInstance(this.$module, {})}
    },
    props: {
        lineKey: {type: [String, Number]},
        sectionName: {type: String},
        sectionKey: {type: [String, Number]},
        saveInProgress: {type: Boolean, default: !1}
    },
    computed: {
        $_moduleModel_Name: () => "Tasks", taskTitleField() {
            let e = this.$_currentModuleModel.getField("subject");
            if (e) return e
        }
    },
    methods: {
        getFieldSpecificProperties(e) {
            return {
                placeHolder: this.translate("LBL_ADD_SUBTASK_AND_PRESS_ENTER", "Tasks"),
                classAttrs: "w-100 p-2 border row-height-39 border-0 rounded",
                class: "w-100 subTaskInputContainer"
            }
        }, focusOnTextArea() {
            setTimeout(() => {
                jQuery(this.$el).find("input[name='subject']").focus()
            }, 0)
        }, clearInput() {
            this.recordModel.subject = "", jQuery(this.$el).find("input[name='subject']").blur()
        }, saveAction(e, t) {
            this.$validator.validate().then(e => {
                e && this.$bubble("vds::inline::addtask::enter", t, this.lineKey, this.sectionName, this.sectionKey)
            })
        }
    },
    render: function anonymous() {
        with (this) return taskTitleField ? _c("div", {
            staticClass: "d-flex bg-white rounded-bottom",
            class: {taskSubject: !recordModel.subject}
        }, [recordModel.subject ? _e() : _c("span", {staticClass: "position-relative c-pointer"}, [_c("i", {staticClass: "fa fa-plus text-muted subTasksPlusIcon"})]), _v(" "), _c("ui-field-edit-type", _b({
            attrs: {
                field: taskTitleField,
                record: recordModel,
                validateEvent: ""
            }, nativeOn: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : saveAction(e, recordModel)
                }
            }
        }, "ui-field-edit-type", getFieldSpecificProperties(taskTitleField), !1)), _v(" "), _c("span", {
            staticClass: "subTasksCloseIcon c-pointer pl-4",
            on: {click: clearInput}
        }, [recordModel.subject ? _c("i", {staticClass: "fa fa-times text-muted"}) : _e()])], 1) : _e()
    },
    $_veeValidate: {validator: "new"}
});
var Tasks_Component_LoadSubTasksView = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, Tasks_Mixin_Record, Vtiger_Mixin_DateUtils],
    components: {
        "vds-inline-add-task": App.loadComponent("InlineAddTask", "Tasks"),
        "vds-add-new-task-section": App.loadComponent("AddNewTaskSection", "Tasks"),
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-subtask-fields-display": App.loadComponent("SubtaskFieldsDisplay")
    },
    props: {
        relatedRecords: {default: () => []},
        id: {type: [String, Number]},
        relationId: {type: [String, Number]},
        isTaskPreviewModal: {default: !1},
        parentRecordModel: {type: Object},
        showSubTasksHeader: {type: Boolean, default: !0},
        showEditableFields: {type: Boolean, default: !0}
    },
    data() {
        return {
            sectionName: "",
            updatedSection: this.section,
            showActions: "",
            completedTaskIds: [],
            relRecords: this.relatedRecords,
            formattedSubTaskTitle: "",
            section: [],
            subTaskloading: !1,
            showAllRecords: !0
        }
    },
    mounted() {
        this.$root.$on("vds::delete::subtasks::section", e => {
            var t = [];
            for (var s in e) {
                let d = e[s];
                if ("string" == typeof d) {
                    for (var i in this.relRecords) parseInt(this.relRecords[i].getId()) == parseInt(d) && this.relRecords.splice(i, 1);
                    t.push(d)
                } else {
                    let e = _.findWhere(this.relRecords, {id: parseInt(d.getId())});
                    e || (e = _.findWhere(this.relRecords, {id: d.getId()})), e && _.extend(e, d)
                }
            }
            t && t.length > 0 && this.$emit("vds::subtask::deleted", t)
        }), this.$off("vds::inline::addtask::enter"), this.$on("vds::inline::addtask::enter", (e, t, s, i) => {
            this.addTask(s, e, t, i)
        }), this.$on("vds::task::closed", e => {
            if (this.relRecords) {
                let t = _.findWhere(this.relRecords, {id: e.getId()});
                t && (this.relRecords = _.without(this.relRecords, t), this.relRecords.push(e))
            }
        }), this.$on("vds::list::record::update", e => {
            let t = Vtiger_Record_Model.getCleanInstance(this.$module, e),
                s = this.transformRecordToUserFormat(t, this.$_currentModuleModel);
            this.updateSubTaskRecord(s)
        })
    },
    computed: {
        $_moduleModel_Name: () => "Tasks", tasksBySection() {
            if (!this.relRecords.length) return [];
            let e = this.relRecords ? _.sortBy(this.relRecords, ["createdtime"]) : this.relRecords, t = {};
            for (let i of e) if (!i._isEmpty) {
                var s = i.get("section_name");
                (_.isUndefined(s) || null === s) && (s = ""), t[s] || (t[s] = []), t[s].push(i), i.isClosed && (this.completedTaskIds.includes(i.getId()) || this.completedTaskIds.push(i.getId()))
            }
            const i = {};
            return Object.keys(t).sort().forEach((function (e) {
                i[e] = t[e]
            })), i
        }, disableReopen() {
            return !(!this.parentRecordModel || 1 != this.parentRecordModel.isClosed)
        }
    },
    methods: {
        getSectionName: () => "", openDetailView(e) {
            this.redirectUrl("view/detail?id=" + e.getId() + "&module=" + this.$module, !1, "_blank")
        }, onAdd(e, t) {
            let s = jQuery(e.item).data("id"), i = {module: "Tasks", field: "section_name"};
            i.value = t, i.id = s, this.reviseField(i).then(e => {
            }, e => {
                this.showErrorNotification(e)
            })
        }, addTask(e, t, s, i) {
            if (this.subTaskloading = !0, t.module = this.$module, t.assigned_user_id = this.$currentUser.id, this.parentRecordModel && this.parentRecordModel.id && (t.parent_task = this.parentRecordModel.id), this.parentRecordModel && this.parentRecordModel.parent_id && (t.parent_id = this.parentRecordModel.parent_id.id), this.parentRecordModel && this.parentRecordModel.related_project && (t.related_project = this.parentRecordModel.related_project.id, this.parentRecordModel.milestone && this.parentRecordModel.milestone.id && (t.milestone = this.parentRecordModel.milestone.id)), e && "undefined" !== e && (t.section_name = e), t.subject) {
                t = this.fillMandatoryDefaultValues(t, this.$_currentModuleModel);
                let d = Vtiger_Record_Model.getCleanInstance(this.$module, t);
                d.dummyTask = !0, this.relRecords.push(d), this.refreshTaskCounter(e, t, s), this.deleteSelectedSection(i), this.saveRecord(t, this.$_currentModuleModel, !0).then(t => {
                    if (this.subTaskloading = !1, this.markSaveReqCompleted(e), this.parentRecordModel.subTasksExists = !0, t) {
                        let r = Vtiger_Record_Model.getCleanInstance(this.$module, t);
                        if (e && void 0 !== e) _.has(this.tasksBySection, e) || this.deleteSelectedSection(i);
                        let o = this.relRecords.findIndex(e => e.subject == d.subject && 1 == e.dummyTask);
                        Vue.set(this.relRecords, o, r), this.refreshTaskCounter(e, r, s), this.$bubble("vds::subtask::added", r, r.parent_task.id)
                    }
                }, t => {
                    this.relRecords = _.without(this.relRecords, _.findWhere(this.relRecords, {dummyTask: !0})), this.showErrorNotification(t), this.markSaveReqCompleted(e)
                })
            }
        }, refreshTaskCounter(e, t, s) {
            this.$nextTick(() => {
                let i = e ? "addTask" + e : "addTask";
                (Array.isArray(this.$refs[i]) ? this.$refs[i][0] : this.$refs[i]).postSave(t, s)
            })
        }, markSaveReqCompleted(e) {
            let t = e ? "addTask" + e : "addTask", s = Array.isArray(this.$refs[t]) ? this.$refs[t][0] : this.$refs[t];
            s && (s.saveInProgress = !1)
        }, onTaskDrag(e, t) {
            var s = "";
            if (e && (s = e.dragged.dataset.isClosed), s && 0 != s) return !1
        }, onTaskDragEnd: function (e) {
            var t = "";
            e && (t = e.clone.dataset.isClosed), t && 0 != t && this.showErrorNotification({message: this.translate("LBL_CLOSED_RECORD_NOT_DRAGGABLE")})
        }, linkRecord(e) {
            var t = {
                module: "Calendar",
                id: this.id,
                relation_id: this.relationId,
                related_module: "Calendar",
                related_record_id: e
            };
            this.appStore.request("api_post", {url: "records/relationrecords", params: t}).then(e => {
                this.parentRecordModel && !this.parentRecordModel.subTasksExists && this.relRecords && this.relRecords.length && (this.parentRecordModel.subTasksExists = !0)
            })
        }, deleteSubtask(e) {
            if (this.subTaskloading) return;
            let t = {module: this.$module, id: e.getId()};
            this.appStore.request("api_delete", {url: "records", params: t}).then(t => {
                for (var s in this.relRecords) this.relRecords[s].getId() === e.getId() && this.relRecords.splice(s, 1);
                this.parentRecordModel && this.relRecords && !this.relRecords.length && (this.parentRecordModel.subTasksExists = !1), this.$emit("vds::subtask::deleted", [e.getId()]), this.$root.$emit("vds::actions::reload::root", e.date_start)
            })
        }, deleteSelectedSection(e) {
            this.section.splice(e, 1)
        }, markAsComplete(e, t) {
            t ? this.markTaskAsCompleted(e, t).then(e => {
                if (e) {
                    let i = e.getId();
                    this.appStore.set({key: "recently_completed_task", data: e});
                    var t = _.findWhere(this.relRecords, {id: parseInt(e.getId())});
                    t || (t = _.findWhere(this.relRecords, {id: e.getId()}));
                    var s = _.indexOf(this.relRecords, t);
                    -1 != s && Vue.set(this.relRecords, s, e), this.clearRecordFromCache(i), this.$root.$emit("vds::tasks::preview::modal::post::completed", e)
                }
            }, t => {
                this.showErrorNotification(t), _.findWhere(this.relRecords, {id: e}).set("isClosed", !1)
            }) : (this.completedTaskIds.splice(e, 1), this.reOpenRecord(e, this.$module).then(t => {
                t && this.retrieveRecord(e, this.$module).then(e => {
                    var t = _.findWhere(this.relRecords, {id: e.getId()});
                    t || (t = _.findWhere(this.relRecords, {id: parseInt(e.getId())}));
                    var s = _.indexOf(this.relRecords, t);
                    Vue.set(this.relRecords, s, e), this.appStore.set({
                        key: "recently_reopened_task",
                        data: e
                    }), this.$root.$emit("vds::tasks::preview::modal::post::completed", e)
                })
            }, e => {
                this.showErrorNotification(e), closedRecord.set("isclosed", !0)
            }))
        }, getDisplayStartDateTime(e) {
            if (e) {
                e.id && (this.formattedSubTaskTitle = "");
                var t = e.date_start, s = e.time_start, i = t + " " + s;
                if (t && t.isUserFormat() && s && t.isUserFormat()) this.formattedSubTaskTitle = this.translate("Start Date & Time") + "\n" + i; else if (t && s) {
                    var d = this.getDisplayDateTime(i);
                    this.formattedSubTaskTitle = this.translate("Start Date & Time") + "\n" + d
                } else e.id || (this.formattedSubTaskTitle = this.translate("Start Date & Time") + "\n" + this.translate("JS_SAVING_PLEASE_WAIT"))
            }
        }, incrementSection() {
            var e = "section_" + parseInt(1e3 * Math.random(1e3, 1e5));
            this.section.push(e), setTimeout(() => {
                var e = document.getElementsByClassName("subtaskSectionName").length;
                document.getElementsByClassName("subtaskSectionName")[e - 1].scrollIntoView({
                    behavior: "smooth",
                    block: "center"
                })
            }, 500)
        }, getTitle(e) {
            var t = "";
            return _.isEmpty(e) || (e.isClosed ? t = "JS_REOPEN" : e.activitytype && (t = "Task" != e.activitytype ? "LBL_MARK_AS_HELD" : "LBL_MARK_AS_COMPLETED")), t
        }, isRecordDisplayable(e) {
            return !(!this.showAllRecords && e.isClosed)
        }, isSectionDisplayable(e, t) {
            if (!this.showAllRecords) {
                let e = t.filter(e => 0 == e.isClosed);
                if (_.size(e) <= 0) return !1
            }
            return !0
        }, updateSubTaskRecord(e) {
            var t = _.findWhere(this.relRecords, {id: parseInt(e.getId())});
            t || (t = _.findWhere(this.relRecords, {id: e.getId()}));
            var s = _.indexOf(this.relRecords, t);
            -1 != s && (Vue.set(this.relRecords, s, e), this.$bubble("vds::subtask::added", e, e.parent_task.id))
        }
    },
    watch: {
        relatedRecords: {
            handler() {
                Vue.set(this, "relRecords", this.relatedRecords)
            }, deep: !0
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {
            staticClass: "w-100 d-flex mb-2 align-items-center",
            class: [showSubTasksHeader ? "justify-content-between" : "justify-content-end"]
        }, [showSubTasksHeader ? _c("div", [_c("h5", {staticClass: "mb-0 subTaskTitle"}, [_v(_s(translate("JS_SUBTASKS")))])]) : _e(), _v(" "), 1 == parentRecordModel.isClosed || parentRecordModel.isRecordLocked ? _e() : _c("div", {staticClass: "d-flex"}, [$_currentModuleModel.isCreateable ? _c("div", {
            staticClass: "mr-4 c-pointer",
            on: {
                click: function (e) {
                    return incrementSection()
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus py-1 font-weight-bold c-pointer"}), _v("  " + _s(translate("LBL_ADD_SECTION", "Invoices")))]) : _e(), _v(" "), _c("div", {
            staticClass: "border-right px-2",
            class: [showAllRecords ? "text-primary c-pointer" : "text-dark"],
            on: {
                click: function (e) {
                    showAllRecords = !0
                }
            }
        }, [_v(_s(translate("All")))]), _v(" "), _c("div", {
            staticClass: "px-2",
            class: [showAllRecords ? "text-dark" : "text-primary c-pointer"],
            on: {
                click: function (e) {
                    showAllRecords = !1
                }
            }
        }, [_v("Open")])])]), _v(" "), !parentRecordModel || parentRecordModel.isClosed || parentRecordModel.isRecordLocked ? _e() : [tasksBySection[""] && tasksBySection[""].length || !$_currentModuleModel.isCreateable ? _e() : _c("vds-inline-add-task", {
            ref: "addTask",
            staticClass: "border rounded border-grey-1 mb-4"
        })], _v(" "), _l(tasksBySection, (function (e, t) {
            return isSectionDisplayable(t, e) ? _c("div", {staticClass: "rounded border-grey-1 border mb-4"}, [t ? _c("div", {staticClass: "d-flex justify-content-between align-items-center subTasksSectionBgClr p-3 rounded-top row-height-39"}, [_c("h6", {staticClass: "textOverflowEllipsis mb-0"}, [_v(_s(t))]), _v(" "), $_currentModuleModel.isDeleteable ? _c("span", {
                directives: [{
                    name: "showModal",
                    rawName: "v-showModal.DeleteSubTaskSection",
                    value: {records: e, moduleName: $module, sectionName: t},
                    expression: "{records:records,moduleName:$module,sectionName:section}",
                    modifiers: {DeleteSubTaskSection: !0}
                }], staticClass: "c-pointer"
            }, [_c("i", {staticClass: "fa fa-trash text-muted"})]) : _e()]) : _e(), _v(" "), _c("div", {staticClass: "w-100 p-0"}, [_c("draggable", {
                staticClass: "container dragArea p-0",
                attrs: {list: e, options: {group: "taskRecords"}, move: onTaskDrag},
                on: {
                    add: function (e) {
                        return onAdd(e, t)
                    }, end: onTaskDragEnd
                }
            }, _l(e, (function (e, s) {
                return isRecordDisplayable(e) ? _c("div", {
                    staticClass: "d-flex align-items-center py-2 bg-grey-hue-2 border-bottom border-grey-1 row-height-39",
                    attrs: {"data-id": e.id, "data-is-closed": e.isClosed},
                    on: {
                        mouseover: function (s) {
                            showActions = t + e.id
                        }, mouseout: function (e) {
                            showActions = null
                        }
                    }
                }, [_c("div", {
                    staticClass: "p-0 d-flex align-items-center",
                    class: showEditableFields ? "col-6" : "flex-grow-1"
                }, [_c("vds-checkbox", {
                    staticClass: "col-auto ml-3",
                    attrs: {
                        disabled: disableReopen || subTaskloading,
                        completed: e.isClosed,
                        id: "checkbox_" + e.id,
                        title: translate(getTitle(e))
                    },
                    on: {
                        change: function (t) {
                            return markAsComplete(e.id, ...arguments)
                        }
                    },
                    model: {
                        value: e.isClosed, callback: function (t) {
                            $set(e, "isClosed", t)
                        }, expression: "record.isClosed"
                    }
                }), _v(" "), _c("div", {
                    directives: [{
                        name: "showModal",
                        rawName: "v-showModal.DetailPreview",
                        value: {module: $module, id: e.getId()},
                        expression: "{module : $module, id : record.getId()}",
                        modifiers: {DetailPreview: !0}
                    }], staticClass: "flex-grow-1 pl-0 c-pointer bg-grey-hue-2 text-truncate mr-2"
                }, [_c("div", {
                    attrs: {title: formattedSubTaskTitle}, on: {
                        mouseover: function (t) {
                            return getDisplayStartDateTime(e)
                        }
                    }
                }, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {
                    staticClass: "mr-3 text-truncate",
                    attrs: {title: e.get("subject")}
                }, [_v(_s(e.get("subject")))]), _v(" "), _c("span", {staticClass: "priorityFlag"}, [_c("vds-field-display", {
                    attrs: {
                        record: e,
                        field: "taskpriority",
                        modulemodel: $_currentModuleModel
                    }
                })], 1)])])])], 1), _v(" "), showEditableFields ? _c("div", {
                    staticClass: "col-5 p-0  align-items-center",
                    class: showEditableFields ? "d-flex" : "d-none"
                }, [_c("vds-subtask-fields-display", {
                    attrs: {
                        subTaskloading: subTaskloading,
                        record: e,
                        moduleModel: $_currentModuleModel
                    }, on: {"vds::update::subtask::record": updateSubTaskRecord}
                })], 1) : _e(), _v(" "), _c("span", {
                    directives: [{
                        name: "visible",
                        rawName: "v-visible",
                        value: e && !e.isClosed && $_currentModuleModel.isDeleteable && showActions == t + e.id,
                        expression: "record && !record.isClosed && $_currentModuleModel.isDeleteable && (showActions == section+record.id)"
                    }],
                    staticClass: "fa fa-thrash",
                    class: [subTaskloading ? "cursorPointerNotAllowed" : "c-pointer", showEditableFields ? "col-1" : ""],
                    attrs: {title: translate("LBL_DELETE")},
                    on: {
                        click: function (t) {
                            return deleteSubtask(e)
                        }
                    }
                }, [_c("i", {staticClass: " fa far fa-trash text-muted px-3"})])]) : _e()
            })), 0)], 1), _v(" "), !parentRecordModel || parentRecordModel.isClosed || parentRecordModel.isRecordLocked ? _e() : [$_currentModuleModel.isCreateable ? _c("vds-inline-add-task", {
                ref: t ? "addTask" + t : "addTask",
                refInFor: !0,
                attrs: {"section-name": t}
            }) : _e()]], 2) : _e()
        })), _v(" "), _l(section, (function (e, t) {
            return _c("div", {key: e}, [$_currentModuleModel.isCreateable ? _c("vds-add-new-task-section", {
                attrs: {"section-key": t},
                on: {"vds::tasks::section::delete": deleteSelectedSection}
            }) : _e()], 1)
        })), _v(" "), parentRecordModel && parentRecordModel.isClosed && 0 == _.size(tasksBySection) ? [_c("div", {staticClass: "d-flex justify-content-center"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])] : _e()], 2)
    }
});
var Tasks_Component_SubtaskFieldsDisplay = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_ShowDependentFieldsModal, Vtiger_Mixin_DependentFields, Vtiger_Mixins_ShowModal, App.loadMixin("Record", "Tasks"), Vtiger_Mixin_Validators, Vtiger_Mixin_UsersUtils, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_DateUtils],
    components: {
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-field-edit-popover": App.loadComponent("FieldEditPopover")
    },
    props: {record: {type: Object}, moduleModel: {type: Object}, subTaskloading: {type: Boolean}},
    mounted() {
        this.userFormattedRecordModel = this.transformRecordToUserFormat(this.record, this.moduleModel);
        let e = AppStorage.get("app_module_permissions");
        e && e.Calendar && (this.calendarEditEnabled = e.Calendar.editable)
    },
    computed: {
        masterModuleModel() {
            return this.moduleModel
        }, masterRecordModel() {
            return this.recordModel
        }, popoverId() {
            var e = this.recordModel.id + "_dueDate";
            return this.$namespaceStore && (e += this.$namespaceStore), e
        }
    },
    watch: {
        record(e) {
            Vue.set(this, "recordModel", e), Vue.set(this, "userFormattedRecordModel", this.transformRecordToUserFormat(e, this.moduleModel))
        }
    },
    data() {
        return {
            recordModel: this.record,
            defaultFields: ["taskstatus", "date_start", "due_date", "assigned_user_id"],
            fieldEdit: {},
            unwatch: Function,
            clonedRecord: jQuery.extend(!0, {}, this.record),
            disableFocusOutEvent: !1,
            calendarEditEnabled: !0,
            loader: !1,
            userFormattedRecordModel: {},
            targetFields: {}
        }
    },
    methods: {
        toggleEdit(e) {
            if (!this.recordModel.isClosed && this.calendarEditEnabled && !this.subTaskloading && (_.isUndefined(this.fieldEdit[e]) || 0 == this.fieldEdit[e])) {
                for (let t in this.defaultFields) this.defaultFields[t] == e ? Vue.set(this.fieldEdit, this.defaultFields[t], !0) : Vue.set(this.fieldEdit, this.defaultFields[t], !1);
                this.$nextTick(() => {
                    setTimeout(() => {
                        jQuery(this.$refs[e][0].$el) && jQuery(this.$refs[e][0].$el).find(".select2-container").siblings("select:enabled").select2("open")
                    }, 100), setTimeout(() => {
                        jQuery(this.$refs[e][0]).length && jQuery(this.$refs[e][0].$el).find("input,textarea").focus()
                    }, 100)
                }), this.$root.$off("vds::dependentfields::save::record"), this.$root.$on("vds::dependentfields::save::record", (e, t) => {
                    Vue.set(this.fieldEdit, e, !0), this.targetFields = t, this.save(), this.unwatch()
                }), this.$root.$on("vds::cancel::dependentfields::modal", e => {
                    this.unwatch(), this.fieldEdit[e] = !1, Vue.set(this.recordModel, e, this.clonedRecord[e])
                }), this.registerFocusoutEvent(e), this.moduleModel.dependentTriggererFields.includes(e) ? this.handleDependentFields(this.moduleModel.getField(e)) : (this.unwatch(), this.registerWatcher(e))
            }
        },
        registerWatcher(e) {
            this.unwatch = this.$watch(() => {
                let t = this.recordModel;
                return {recordModel: t, fieldValue: t[e]}
            }, ({recordModel: t, fieldValue: d}) => {
                this.disableFocusOutEvent = !0, this.moduleModel.dependentTriggererFields.includes(e) || this.save(e)
            }, {deep: !0})
        },
        registerFocusoutEvent(e) {
            let t = "#fieldsDisplay" + this.recordModel.id;
            $(t).off("focusout"), $(t).on("focusout", () => {
                setTimeout(() => {
                    this.disableFocusOutEvent || Vue.set(this.fieldEdit, e, !1), this.unwatch()
                }, 100)
            })
        },
        prepareRecordToSave() {
            let e = Vtiger_Record_Model.getCleanInstance("Tasks");
            if (e.id = this.recordModel.id, _.size(this.targetFields) > 0) for (let t in this.targetFields) e.set(t, this.recordModel[t]);
            for (let t in this.fieldEdit) this.fieldEdit[t] && e.set(t, this.recordModel[t]);
            e && e.hasOwnProperty("date_start") && (e.time_start = this.recordModel.time_start), e && e.hasOwnProperty("due_date") && (e.time_end = this.recordModel.time_end);
            let t = ["assigned_user_id"];
            for (var d in t) if (!e.get(s)) {
                var s = t[d];
                e.set(s, this.recordModel[s])
            }
            return e
        },
        save(e) {
            this.$validator.validate().then(t => {
                if (t) {
                    let t = this.prepareRecordToSave();
                    this.saveRecord(t, this.moduleModel).then(e => {
                        this.clonedRecord = JSON.parse(JSON.stringify(e)), this.$emit("vds::update::subtask::record", e);
                        for (let e in this.fieldEdit) this.fieldEdit[e] = !1;
                        this.unwatch(), this.$root.$off("vds::dependentfields::save::record"), this.$root.$off("vds::close::dependentfields::modal"), this.disableFocusOutEvent = !1, this.loader = !1
                    }, t => {
                        this.showErrorNotification(t.message), Vue.set(this.recordModel, e, this.clonedRecord[e]), Vue.set(this.fieldEdit, e, !1), this.loader = !1
                    })
                }
            })
        },
        getIcon: e => "taskstatus" == e ? "fa-status" : "due_date" == e ? "fa-calendar" : void 0,
        saveFieldFromPopover(e, t) {
            this.loader = !0, Vue.set(this.fieldEdit, e, !0), this.save(e)
        },
        cancelSaveFromPopover(e, t) {
            Vue.set(this.fieldEdit, e, !1), _.isUndefined(this.clonedRecord[e]) || (Vue.set(this.recordModel, e, this.clonedRecord[e]), "due_date" == e && Vue.set(this.recordModel, "time_end", this.clonedRecord.time_end))
        },
        getDueDateDisplay(e) {
            var t = this.recordModel.due_date;
            return t = t && t.isUserFormat() ? t.toString() : this.convertDateToUserFormat(t)
        }
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex align-items-center w-100",
            attrs: {id: "fieldsDisplay" + recordModel.id}
        }, [_l(defaultFields, (function (e) {
            return ["due_date" == e ? _c("div", {staticClass: "col-5 p-0 d-flex align-items-center justify-content-start pl-2 text-truncate"}, [_c("a", {
                staticClass: "mr-2 d-flex my-2  text-decoration-none outline-none text-dark align-items-center ",
                class: [subTaskloading ? "cursorPointerNotAllowed" : "c-pointer"],
                attrs: {tabindex: "0", id: popoverId}
            }, [_c("i", {
                staticClass: "text-grey-4 mr-2 fa",
                class: getIcon(e),
                attrs: {title: translate("Due Date")}
            }), _v(" "), loader ? _c("div", [_c("vds-value-progress")], 1) : [recordModel.due_date ? _e() : _c("div", {staticClass: "px-0 d-flex align-items-center"}, [_c("span", {
                staticClass: "text-truncate rounded border w-80 px-1",
                attrs: {title: translate("LBL_SET_DUE_DATE")}
            }, [_v(_s(translate("LBL_SET_DUE_DATE")))])]), _v(" "), _c("div", {attrs: {title: getDueDateDisplay(recordModel)}}, [_v(_s(getDueDateDisplay(recordModel)))])]], 2), _v(" "), recordModel.isClosed || subTaskloading ? _e() : _c("vds-field-edit-popover", {
                attrs: {
                    recordModel: recordModel,
                    moduleModel: moduleModel,
                    fieldName: e,
                    dependentField: "date_start"
                }, on: {"vds::save::field": saveFieldFromPopover, "vds::cancel::field::save": cancelSaveFromPopover}
            })], 1) : "date_start" != e ? _c("div", {
                staticClass: "d-flex align-items-center justify-content-start",
                class: ["assigned_user_id" !== e ? "col-5 p-0" : ""]
            }, [_c("div", {staticClass: "p-1 text-truncate subTaskEdit ml-2"}, [_c("div", {
                staticClass: "d-flex align-items-center justify-content-start",
                class: [subTaskloading ? "cursorPointerNotAllowed" : "c-pointer"],
                on: {
                    click: function (t) {
                        return toggleEdit(e)
                    }
                }
            }, [_c("i", {
                staticClass: "text-grey-4 mr-2 fa",
                class: getIcon(e),
                attrs: {title: masterModuleModel.getField(e).label}
            }), _v(" "), _c("div", {
                staticClass: "text-truncate",
                attrs: {title: recordModel.getDisplayValue(e)}
            }, [_c("vds-field-display", {
                attrs: {
                    view: "list",
                    record: recordModel,
                    field: e,
                    modulemodel: moduleModel
                }
            })], 1)]), _v(" "), fieldEdit[e] ? _c("div", {
                staticClass: "editField position-absolute pt-2",
                class: {"r-16": "assigned_user_id" == e}
            }, [_c("ui-field-edit-type", {
                ref: e,
                refInFor: !0,
                attrs: {field: moduleModel.getField(e), record: recordModel}
            })], 1) : _e()])]) : _e()]
        }))], 2)
    }
});
var Vtiger_Component_CalendarAgendaView = Vtiger_Component_CalendarBaseView.extend({
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Module, Vtiger_Mixin_DateUtils, App.loadMixin("Record", "Events"), Vtiger_Mixin_DateUtils],
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "agendaViewContainer"}, [_c("div", {
            staticClass: "rounded mx-3 mt-3 mb-4",
            style: {border: "1px solid #d5d7d9"}
        }, [_c("div", {staticClass: "agendaListView"}, [_l(requiredDates, (function (e, t) {
            return _c("div", {}, [_c("div", {staticClass: "p-3 font-weight-bold bg-grey-hue-9"}, [_v(_s(e))]), _v(" "), _c("hr", {staticClass: "m-0"}), _v(" "), computedEventRecordModels[t] ? _c("div", _l(computedEventRecordModels[t], (function (e) {
                return _c("div", {staticClass: "border-bottom px-3 py-2"}, [_c("div", {
                    staticClass: "c-pointer p-1",
                    attrs: {id: e.id + "_card"},
                    on: {
                        click: function (t) {
                            return loadEventDetails(e)
                        }
                    }
                }, [_c("div", [_c("div", {staticClass: "h6  mb-0 d-flex"}, [_c("div", {
                    staticClass: "d-flex align-items-center",
                    staticStyle: {width: "225px"}
                }, [_c("div", {
                    on: {
                        click: function (e) {
                            e.stopPropagation()
                        }
                    }
                }, [_c("vds-checkbox", {
                    attrs: {completed: e.isClosed, disabled: e.isClosed, id: "checkbox_" + e.id},
                    on: {
                        change: function (s) {
                            return markAsCompleted(e, t)
                        }
                    },
                    model: {
                        value: e.isClosed, callback: function (t) {
                            $set(e, "isClosed", t)
                        }, expression: "card.isClosed"
                    }
                })], 1), _v(" "), _c("div", {staticClass: "pl-4 ml-2 defaultLightFontColor"}, [_v(_s(getStartTime(e)) + " - " + _s(getEndTime(e)))])]), _v(" "), _c("div", {staticClass: "w-50  d-flex align-items-center text-truncate mr-3"}, [_c("div", [_c("i", {
                    staticClass: "font-weight-bold mx-2 fa",
                    class: getActivityIcon(e.activitytype)
                }), _v(_s(e.subject))])]), _v(" "), _c("div", {staticClass: "w-25 d-flex d-flex align-items-center"}, [_c("div", {staticClass: "w-50 mr-2 text-truncate agendaViewBadge"}, [_c("vds-field-display", {
                    attrs: {
                        record: e,
                        field: "eventstatus",
                        modulemodel: moduleModel
                    }
                })], 1), _v(" "), _c("div", {staticClass: "w-50 text-truncate"}, [_c("vds-field-display", {
                    attrs: {
                        view: "list",
                        record: e,
                        field: "assigned_user_id",
                        modulemodel: moduleModel
                    }
                })], 1)])])])])])
            })), 0) : _c("div", {staticClass: "border-bottom"}, [_c("div", {staticClass: "py-3 pr-3 pl-5 ml-3 defaultLightFontColor"}, [_v(_s(translate("JS_NO_EVENTS_F0R_THE_DAY", "Calendar")))])])])
        })), _v(" "), 0 == computedEventRecordModels.length ? _c("span", [_v(_s(translate("JS_NO_EVENTS_F0R_THE_DAY", "Calendar")))]) : _e()], 2)])])
    },
    data: function () {
        return {eventRecords: "", vtDateFormat: "YYYY-MM-DD", requiredDates: [], today: ""}
    },
    props: {height: {type: Number}},
    watch: {},
    computed: {
        computedEventRecordModels: function () {
            return _.groupBy(this.eventRecords, (function (e) {
                return e.userFormatStartDate
            }))
        }, moduleModel() {
            return this.$_currentModuleModel
        }
    },
    mounted() {
        this.$root.$on("vds::list::force::reload", () => {
            this.loadEvents(), this.$root.$emit("vds::list::force::reloaded", !1)
        })
    },
    destroyed() {
        this.$root.$emit("vds::fullcalendar::rerender::events")
    },
    methods: {
        markAsCompleted(e, t) {
            let s = e.getId();
            this.markEventAsHeld(e).then(e => {
                this.$root.$emit("vds::event::held", e);
                this.computedEventRecordModels[t].find(e => e.id == s);
                for (let t in this.eventRecords) this.eventRecords[t].id == s && Object.assign(this.eventRecords[t], e)
            }, e => {
                this.showErrorNotification(e);
                let i = this.computedEventRecordModels[t].find(e => e.id == s);
                this.$nextTick(() => {
                    i.set("isclosed", !1)
                })
            })
        },
        init() {
            this.$root.$on("vds::fullcalendar::title::event", e => {
                this.loadEvents()
            }), this.$off("vds::tasks::preview::modal::post::delete"), this.$on("vds::tasks::preview::modal::post::delete", e => {
                for (var t in e && !_.isArray(e) && (e = [e]), e) {
                    let s = e[t];
                    this.eventRecords = _.without(this.eventRecords, _.findWhere(this.eventRecords, {id: parseInt(s)}))
                }
            }), this.loadEvents()
        },
        loadEvents() {
            var e = jQuery("#fullCalendarContainer").fullCalendar("getDate");
            this.generateRequiredDates(e);
            var t = parseInt(this.filterid);
            var s = jQuery.extend(!0, {}, this.listSearchParams).data, i = new SearchParams(s);
            i.pushAll("date_start", "between", this.startDate + "," + this.endDate);
            var a;
            a = JSON.stringify(i.data);
            var d = this.$module, r = this.defaultCalendarMandatoryFields();
            var o = {
                url: "records",
                params: {module: d, pagelimit: 5e3, q: a, filterid: t, extrafields: r},
                key: "task_records"
            };
            this.appStore.request("api_get", o).then(e => {
                let t = [];
                var s = this.$currentUser.hidecompletedevents;
                for (var i of e) {
                    if (s && 0 != s && 1 == i.isclosed) continue;
                    let e = i.date_start + " " + i.time_start;
                    var a = this.getDisplayDateTime(e, !0);
                    let o = i.due_date + " " + i.time_end;
                    var r = this.getDisplayDateTime(o, !0);
                    let n = this.splitDateTimeBasedOnUserFormat(a), l = this.splitDateTimeBasedOnUserFormat(r);
                    i.userFormatStartDate = n[0], i.userFormatStartTime = n[1], i.userFormatEndDate = l[0], i.userFormatEndTime = l[1], t.push(BaseModel.getModuleSpecificModel(d, "Record", i))
                }
                this.eventRecords = t, this.removeCalendarSpecificFilterCondition()
            }, e => {
                this.showErrorNotification(e.message)
            })
        },
        getCourseDay(e) {
            var t = moment(), s = this.vtDateFormat;
            return moment().format(s) === e.format(s) ? "Today " + e.format("LL") : t.add(1, "days").format(s) === e.format(s) ? "Tomorrow " + e.format("LL") : e.format("LL")
        },
        generateRequiredDates(e) {
            this.startDate = "", this.endDate = "", this.requiredDates = {};
            for (var t = 0; t < 7; t++) {
                var s = t ? 1 : 0, i = e.add(s, "days").format(this.vtDateFormat);
                0 == t ? this.startDate = i : 6 == t && (this.endDate = i);
                var a = this.getCourseDay(e);
                this.requiredDates[i] = a
            }
        },
        defaultCalendarMandatoryFields: () => ["subject", "date_start", "due_date", "time_end", "time_start", "eventstatus", "activitytype", "allday", "assigned_user_id", "description"],
        loadEventDetails(e) {
            this.showModal({
                componentName: App.loadComponent("PreviewModal", "Events"),
                componentData: {module: "Events", activityRecord: e},
                modalOnModalMode: !0
            })
        },
        getActivityIcon: e => "Meeting" === e || "Onsite meeting" === e ? "fa-users" : "Call" === e || "Mobile Call" === e ? "fa-phone-alt" : "fa-calendar",
        getStartTime(e) {
            let t = this.getDisplayDateTime(e.date_start + " " + e.time_start);
            return this.getUserFormattedTime(t)
        },
        getEndTime(e) {
            let t = this.getDisplayDateTime(e.due_date + " " + e.time_end);
            return this.getUserFormattedTime(t)
        }
    }
});
var Vtiger_Component_CalendarView = Vtiger_Component_CalendarBaseView.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DateUtils, App.loadMixin("Record")],
    props: {height: {type: Number}},
    data: function () {
        return {
            taskRecords: [],
            startDate: "",
            endDate: "",
            defaultFilterId: "",
            showFullCalendar: !0,
            showAgendaView: !1
        }
    },
    computed: {
        moduleInfo() {
            return this.$_currentModuleModel
        }
    },
    mounted: function () {
        this.init()
    },
    methods: {
        loadRecords(e) {
            this.startDate = e.start, this.endDate = e.end, this.filterid && this.loadEvents()
        }, loadEventDetails(e) {
            this.showModal({
                componentName: App.loadComponent("PreviewModal", "Tasks"),
                componentData: {module: "Tasks", record: e},
                modalOnModalMode: !0
            })
        }, loadMoreEventsModal(e, t) {
            this.showModal({
                componentName: "CalendarMoreTaskModal",
                componentData: {moreTaskLinkRecordModels: e, selectedDate: t},
                modalOnModalMode: !1
            })
        }, loadGroupEventModal() {
        }, init() {
            this.$off("vds::fullcalendar::event::click"), this.$on("vds::fullcalendar::event::click", (function (e) {
                this.loadEventDetails(e)
            })), this.$off("vds::tasks::preview::modal::post::delete"), this.$on("vds::tasks::preview::modal::post::delete", e => {
                for (var t in e && !_.isArray(e) && (e = [e]), e) {
                    let a = e[t];
                    this.taskRecords = _.without(this.taskRecords, _.findWhere(this.taskRecords, {id: parseInt(a)}))
                }
            }), this.$root.$off("vds::tasks::preview::modal::post::completed"), this.$root.$on("vds::tasks::preview::modal::post::completed", e => {
                if (e && e.hasOwnProperty("isclosed")) {
                    e.id = parseInt(e.id), "Events" == this.$module && (e.activityid = parseInt(e.id));
                    let t = _.findWhere(this.taskRecords, {id: parseInt(e.id)});
                    t && (this.taskRecords = _.without(this.taskRecords, t), this.taskRecords.push(e))
                }
            }), this.$off("vds::subtask::added"), this.$on("vds::subtask::added", (e, t) => {
                if (this.taskRecords.push(e), t) {
                    let e = this.taskRecords.find(e => e.id == t);
                    e && this.retrieveRecord(t, "Tasks").then(t => {
                        this.taskRecords = _.without(this.taskRecords, e), this.taskRecords.push(t)
                    })
                }
            })
        }, performDayClick(e, t, a) {
            if (e || "month" == a.type) {
                this.moduleInfo && this.moduleInfo.getField("time_end");
                var s = e.format(this.getUserDateFormat());
                if ("month" == a.type) {
                    var r = this.$currentUser.time_zone, i = moment().tz(r);
                    i.subtract(i.isDST() ? 1 : 0, "hours");
                    let e = i.add(30, "minutes");
                    e.minutes(30 * Math.floor(e.minutes() / 30));
                    var o = e.format("HH:mm")
                } else o = e.format("H:mm");
                var d = {}, n = this.convertTimeToUserFormat(o), l = this.$currentUser.callduration;
                if ("Tasks" == this.$module) {
                    d.calendarViewCreate = !0;
                    let e = this.$currentUser.get("taskduration");
                    if (e) {
                        let t = e.split("::");
                        l = t[0], "duration_days" == t[1] ? l = 8 * parseInt(t[0]) * 60 : "duration_hours" == t[1] && (l = 60 * parseInt(t[0]))
                    }
                }
                var h = this.getUserDateTimeFormat(), m = moment(s + " " + n, h);
                m.add(parseInt(l), "minutes");
                var c = m.format(this.getUserDateFormat()), u = m.format(this.getUserTimeFormat());
                let t = new String(s);
                t.markAsUserFormat(!0);
                let p = new String(c);
                if (p.markAsUserFormat(!0), d.date_start = t, d.time_start = n, d.due_date = p, d.time_end = u, this.$currentUser && this.$currentUser.get("taskduration")) {
                    let e = this.$currentUser.get("taskduration").split("::");
                    d[e[1]] = e[0]
                } else d.duration_days = 1;
                var _ = Vtiger_Record_Model.getCleanInstance(this.$module, {}), v = jQuery.extend(d, {});
                v.module = this.$module, v.record = _, v.postQuickCreateSave = this.postQuickCreateSave, this.showModal({
                    componentName: "QuickCreateModal",
                    componentData: v,
                    modalOnModalMode: !0
                })
            }
        }, updateEventOnDropOrResize(e, t, a, s, r, i, o) {
            var d = e.recordData;
            return e && "groupEvent" == e.eventType ? (this.showErrorNotification(this.translate("LBL_GROUP_EVENT_DRAG_NOT_ALLOWED", this.$module)), void a()) : e && 1 == e.recordData.isclosed ? (this.showErrorNotification(this.translate("LBL_CLOSED_EVENTS_DRAG_NOT_ALLOWED", this.$module, this.$module)), void a()) : e && 1 == e.vtAllDay ? (this.showErrorNotification(this.translate("LBL_NOT_ALLOWED_TO_DRAG_ALL_DAY_ACTIVITIES", this.$module, this.$module)), void a()) : void (e && "Task" == e.activityType && "Tasks" == e.module ? this.retrieveRecord(e.id, e.module).then(e => {
                e.subTasksExists ? (this.showErrorNotification(this.translate("JS_NOT_ALLOWED_TO_DRAG_TASK_WHEN_SUBTASK_EXISTS")), a()) : e.dependent_on && e.dependent_on.id > 0 && (!e.dependent_on.deleted || 0 == e.dependent_on.deleted) ? (this.showErrorNotification(this.translate("JS_NOT_ALLOWED_TO_DRAG_TASK_WHEN_PREVIOUS_TASK_EXISTS")), a()) : this.updateEvent(d, t, a, o)
            }) : this.updateEvent(d, t, a, o))
        }, updateEvent(e, t, a, s) {
            let r = e.date_start, i = e.due_date;
            e = this.updateRecordDateTimeWithUserFormat(e, "date_start", "time_start", r);
            var o = (e = this.updateRecordDateTimeWithUserFormat(e, "due_date", "time_end", i)).date_start + " " + e.time_start,
                d = e.due_date + " " + e.time_end, n = t.asMinutes(), l = this.getUserDateTimeFormat(),
                h = moment(o, l);
            h.add(parseInt(n), "minutes");
            var m = h.format(this.getUserDateFormat()), c = h.format(this.getUserTimeFormat()), u = moment(d, l);
            u.add(parseInt(n), "minutes");
            var _ = u.format(this.getUserDateFormat()), v = u.format(this.getUserTimeFormat());
            "drag" == s && (e.date_start = m, e.time_start = c, e.due_date = _, e.time_end = v, this.saveUpdatedRecord(e)), "resize" == s && ("Invalid date" == _ ? (this.showErrorNotification(this.translate("LBL_SET_DUE_DATE", this.$module, this.$module)), a()) : m != _ ? (this.showErrorNotification(this.translate("LBL_NOT_ALLOWED_TO_RESIZE", this.$module, this.$module)), a()) : (e.due_date = _, e.time_end = v, this.saveUpdatedRecord(e)))
        }, prepareRecordToSave(e) {
            let t = ["date_start", "time_start", "due_date", "time_end"],
                a = Vtiger_Record_Model.getCleanInstance(this.$module);
            a.id = e.id;
            for (let s in t) {
                let r = t[s];
                "Invalid date" != e[r] && a.set(r, e[r])
            }
            let s = ["assigned_user_id"];
            for (var r in s) if (!a.get(i)) {
                var i = s[r];
                a.set(i, e[i])
            }
            return a
        }, saveUpdatedRecord(e) {
            let t = this.prepareRecordToSave(e);
            this.saveRecord(t, this.$_currentModuleModel).then(e => {
                e && e.id && (this.showSuccessNotification(this.translate("JS_RECORD_UPDATED")), this.loadEvents())
            }, e => {
                "edit permission denied" == e.message ? this.showErrorNotification(this.translate("JS_NO_EDIT_PERMISSION")) : this.showErrorNotification(e.message), revertFunc()
            })
        }, postQuickCreateSave(e) {
            e && e.id && this.loadEvents()
        }, onCalendarViewLoad() {
        }, defaultCalendarMandatoryFields: () => [], loadEvents() {
            var e = parseInt(this.filterid);
            calendarSearchParams = jQuery.extend(!0, {}, this.listSearchParams);
            var t = calendarSearchParams.data, a = new SearchParams(t);
            a.pushAll("date_start", "between", this.startDate + "," + this.endDate);
            var s;
            s = JSON.stringify(a.data);
            var r = this.$module, i = this.defaultCalendarMandatoryFields();
            let o = {module: r, pagelimit: 5e3, q: s, filterid: e, extrafields: i, viewtype: "Calendar"};
            var d = {url: "records", params: o, key: "calendar_view_task_records"};
            NProgress.start(), this.appStore.request("api_pjax", d).then(e => {
                let t = [];
                for (var a of e) t.push(BaseModel.getModuleSpecificModel(r, "Record", a));
                this.taskRecords = t, this.removeCalendarSpecificFilterCondition(), NProgress.done(), NProgress.remove()
            }, e => {
                this.showErrorNotification(e.message), NProgress.done(), NProgress.remove()
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("vds-calendar", {
            attrs: {records: taskRecords, height: height},
            on: {
                ":fullcalendar::onload": onCalendarViewLoad,
                "vds::fullcalendar::event::load::records": loadRecords,
                "vds::fullcalendar::event::click": loadEventDetails,
                "vds::fullcalendar::group::event::click": loadGroupEventModal,
                "vds::fullcalendar::event::morelink::click": loadMoreEventsModal,
                "vds::fullcalendar::day::click": performDayClick,
                "vds::fullcalendar::event::drop::or::resize": updateEventOnDropOrResize
            }
        })], 1)
    }
});
var Vtiger_Component_CalendarViewHeader = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DateUtils], render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [_c("div", {
            staticClass: "btn-group rounded bg-grey-hue-4 mr-3",
            attrs: {role: "group"}
        }, [_c("button", {
            staticClass: "btn c-pointer",
            attrs: {type: "button"},
            on: {click: calendarPrev}
        }, [_c("i", {staticClass: "fa fa-angle-left"})]), _v(" "), _c("button", {
            staticClass: "btn border-top-0 border-bottom-0 calendarMonthHeader py-2",
            attrs: {type: "button", id: "calendarViewHeader"},
            on: {click: showDatePicker}
        }, [_c("span", {staticClass: "CalendarTitle font-weight-bold"}, [_v(" " + _s(calendarHeaderTitle) + " ")])]), _v(" "), _c("button", {
            staticClass: "btn c-pointer",
            attrs: {type: "button"},
            on: {click: calendarNext}
        }, [_c("i", {staticClass: "fa fa-angle-right"})]), _v(" "), _m(0)])])
    }, staticRenderFns: [function anonymous() {
        with (this) return _c("span", {staticClass: "calendarHeaderDatePicker"}, [_c("input", {
            attrs: {
                type: "hidden",
                id: "datetimepicker",
                name: "date"
            }
        })])
    }], data: function () {
        return {calendarHeaderTitle: ""}
    }, mounted: function () {
        this.$root.$on("vds::fullcalendar::title::event", e => {
            let t = e.type;
            this.calendarHeaderTitle = e.title;
            let a = this.getDateTimePickerViewMode(t);
            var r = jQuery("#datetimepicker").data("DateTimePicker");
            void 0 !== r ? (r.destroy(), setTimeout(() => {
                this.registerDatePicker(a)
            }, 50)) : this.registerDatePicker(a)
        }), jQuery("#calendarViewHeader").click((function (e) {
            void 0 !== jQuery("#datetimepicker").data("DateTimePicker") && jQuery("#datetimepicker").datetimepicker("show")
        })), jQuery("#calendarViewSelect").on("change", (function (e) {
            jQuery("#fullCalendarContainer").fullCalendar("changeView", this.value)
        }))
    }, computed: {}, methods: {
        calendarNext() {
            jQuery("#datetimepicker").datetimepicker().off("dp.change"), jQuery("#fullCalendarContainer").fullCalendar("next")
        }, calendarPrev() {
            jQuery("#datetimepicker").datetimepicker().off("dp.change"), jQuery("#fullCalendarContainer").fullCalendar("prev")
        }, showDatePicker() {
            jQuery(".bootstrap-datetimepicker-widget").show()
        }, registerDatePicker(e) {
            let t = {format: this.getUserDateFormat(), allowInputToggle: !0, viewMode: e};
            jQuery("#datetimepicker").datetimepicker(t).on("dp.change", e => {
                null == e.oldDate ? jQuery(".bootstrap-datetimepicker-widget").hide() : (jQuery(".bootstrap-datetimepicker-widget").hide(), jQuery("#fullCalendarContainer").fullCalendar("gotoDate", moment(e.date)))
            })
        }, getDateTimePickerViewMode(e) {
            switch (e) {
                case"month":
                    return "months";
                case"agendaWeek":
                case"agendaThreeDay":
                case"agendaDay":
                    return "days"
            }
        }
    }
});
var Vtiger_Component_CalendarViewMain = App.vtComponent.extend({
    data: function () {
        return {showFullCalendar: !0, showAgendaView: !1}
    },
    props: {
        filterid: {type: [String, Number]},
        listSearchParams: {type: Object},
        viewHeight: {type: Number},
        formatedFilterHeaders: "",
        masterModuleModel: ""
    },
    mounted: function () {
        this.init()
    },
    components: {
        "vds-list-view-interactive-search": App.loadComponent("ListViewInteractiveSearch"),
        "vds-full-calendar-view": App.loadComponent("CalendarView"),
        "vds-calendar-agenda-view": App.loadComponent("CalendarAgendaView")
    },
    watch: {},
    methods: {
        init() {
            this.$root.$on("vds::fullcalendar::agenda::view::click", e => {
                "vtAgendaList" != e ? (this.showFullCalendar = !0, this.showAgendaView = !1) : (this.showFullCalendar = !1, this.showAgendaView = !0)
            })
        }, loadEvents() {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "container-fluid p-lg-2"}, [_c("vds-full-calendar-view", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showFullCalendar,
                expression: "showFullCalendar"
            }], attrs: {filterid: filterid, listSearchParams: listSearchParams, height: viewHeight}
        }), _v(" "), showAgendaView ? _c("vds-calendar-agenda-view", {
            attrs: {
                filterid: filterid,
                listSearchParams: listSearchParams,
                height: viewHeight
            }
        }) : _e()], 1)
    }
});
var Vtiger_Component_ExtensionActions = App.vtComponent.extend({
    props: {module: {default: App.module()}, syncready: {type: [Boolean]}, parentModule: {type: String}},
    data: () => ({userEmail: ""}),
    mounted() {
        this.getConfigEmail()
    },
    methods: {
        settingsUrl(t) {
            this.redirectUrl("view/config?module=" + t + "&parentModule=" + this.parentModule, !1)
        }, sync() {
            this.$root.$emit("vds::extension::sync::log")
        }, getConfigEmail() {
            this.inProgress = !0, this.appStore.request("api_get", {
                url: "/settings",
                params: {module: this.module}
            }).then(t => {
                t.user_email && (this.userEmail = t.user_email)
            }, t => {
                "Module Permission denied" == t.message && this.redirectUrl("/restrict/accessdenied?module=Ondemand")
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex mx-0 align-items-center justify-content-between px-3"}, [_c("h4", {staticClass: "mb-0 text-primary"}, [_v(_s(module) + " "), userEmail ? [_v(" > " + _s(userEmail))] : _e()], 2), _v(" "), _c("div", {staticClass: "pl-2 d-flex"}, [syncready ? _c("button", {
            staticClass: "btn btn-primary py-2 px-3 mr-3",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return sync()
                }
            }
        }, [_c("i", {staticClass: "fa fa-sync mr-1"}), _v(_s(translate("LBL_SYNC_NOW", module)))]) : _e(), _v(" "), _c("button", {
            staticClass: "btn btn-secondary py-2 px-3 d-flex align-items-center",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return settingsUrl(module)
                }
            }
        }, [_c("i", {staticClass: "fa fa-cog mr-1"}), _v(_s(translate("LBL_SYNC_SETTINGS", module)))])])])
    }
});
var Vtiger_Component_ExtensionView = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DateUtils, Vtiger_Mixin_ListUtils, Vtiger_Mixin_ModuleCollection],
    components: {"vds-extension-actions": App.loadComponent("vds-extension-actions")},
    props: {module: {default: App.module()}, parentModule: {type: String}},
    data() {
        return {
            currentModule: "",
            pageparams: {pagelimit: 10, page: 1, totalcount: 0},
            syncready: !1,
            inProgress: !0,
            logs: [],
            types: ["vt_create_count", "vt_update_count", "vt_skip_count", "vt_delete_count", "app_create_count", "app_update_count", "app_skip_count", "app_delete_count"],
            fields: [{key: "sync_date", label: this.translate("LBL_DATE", this.module)}, {
                key: "sync_time",
                label: this.translate("LBL_TIME", this.module)
            }, {key: "module", label: this.translate("LBL_MODULE", this.module)}, {
                key: "vt_create_count",
                label: this.translate("Created", this.module)
            }, {key: "vt_update_count", label: this.translate("LBL_UPDATED", this.module)}, {
                key: "vt_skip_count",
                label: this.translate("LBL_SKIPPED", this.module)
            }, {key: "vt_delete_count", label: this.translate("LBL_DELETED", this.module)}, {
                key: "app_create_count",
                label: this.translate("Created", this.module)
            }, {key: "app_update_count", label: this.translate("LBL_UPDATED", this.module)}, {
                key: "app_skip_count",
                label: this.translate("LBL_SKIPPED", this.module)
            }, {key: "app_delete_count", label: this.translate("LBL_DELETED", this.module)}],
            moduleInstalled: !1
        }
    },
    created() {
        this.getMaxEntriesInList(), this.getSyncLogs(), this.getEnabledModules().then(t => {
            t.includes(this.module) && (this.moduleInstalled = !0)
        })
    },
    mounted() {
        this.$root.$off("vds::extension::sync::log"), this.$root.$on("vds::extension::sync::log", this.sync)
    },
    methods: {
        getSyncLogs() {
            this.appStore.request("api_get", {
                url: "/synclogs/list",
                params: {module: this.module, limit: this.pageparams.pagelimit, page: this.pageparams.page}
            }).then(t => {
                this.logs = t.logs, this.syncready = t.sync_ready, this.pageparams.totalcount = t.total_count, this.toggleProgress(!1)
            }, t => {
                "Module Permission denied" == t.message && this.redirectUrl("/restrict/accessdenied?module=Ondemand")
            })
        }, toggleProgress(t) {
            this.inProgress = t
        }, getSlot: t => t + "_count", getActiveClass(t, e) {
            return e.item[this.getSlot(t)] > 0 ? {
                vt_create: "text-success",
                vt_update: "text-success",
                vt_skip: "text-danger",
                vt_delete: "text-danger",
                app_create: "text-success",
                app_update: "text-success",
                app_skip: "text-danger",
                app_delete: "text-danger"
            }[t] : "text-primary"
        }, sync() {
            this.toggleProgress(!0), this.appStore.request("api_post", {
                url: "/sync",
                params: {module: this.module}
            }).then(t => {
                this.getSyncLogs()
            }, t => {
                "Module Permission denied" == t.message && this.redirectUrl("/restrict/accessdenied?module=Ondemand")
            })
        }, getTextColor(t) {
            switch (t) {
                case"vt_skip_count":
                case"vt_delete_count":
                case"app_skip_count":
                case"app_delete_count":
                    return "text-danger";
                default:
                    return "text-primary"
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [moduleInstalled ? _c("div", {
            staticClass: "container-fluid p-lg-2 bg-light",
            attrs: {id: "moduleHeader"}
        }, [_c("div", {staticClass: "col-auto px-0"}, [_c("vds-extension-actions", {
            attrs: {
                syncready: syncready,
                module: module,
                parentModule: parentModule
            }
        })], 1)]) : _e(), _v(" "), _c("div", {staticClass: "container-fluid px-3 extensionBody pb-3"}, [moduleInstalled ? [_c("div", {staticClass: "d-flex justify-content-between align-items-center p-2"}, [_c("h4", {staticClass: "mb-0"}, [_v(_s(module) + " -" + _s(translate("LBL_SYNC_LOG", module)))]), _v(" "), _c("div", {staticClass: "d-flex"}, [logs.length ? _c("div", {staticClass: "d-flex mr-2"}, [_c("div", {staticClass: "ml-auto"}, [_c("vds-nav", {
            attrs: {
                "page-limit": pageparams.pagelimit,
                "total-count": pageparams.totalcount,
                "current-page": pageparams.page
            }, on: {
                "update:currentPage": [function (t) {
                    return $set(pageparams, "page", t)
                }, getSyncLogs], "update:current-page": function (t) {
                    return $set(pageparams, "page", t)
                }
            }
        })], 1)]) : _e()])]), _v(" "), _c("div", {staticClass: "mx-2 mb-2"}, [_c("div", {staticClass: "listViewFrame position-relative border-bottom"}, [_c("table", {staticClass: "table fixed_header w-100 mb-0"}, [_c("thead", [_c("tr", {staticClass: "listViewContentHeader"}, [_c("th", {
            staticClass: "border-right align-middle",
            attrs: {rowspan: "2"}
        }, [_v(" " + _s(translate("LBL_DATE", module)) + " ")]), _v(" "), _c("th", {
            staticClass: "border-right align-middle",
            attrs: {rowspan: "2"}
        }, [_v(" " + _s(translate("LBL_TIME", module)) + " ")]), _v(" "), _c("th", {
            staticClass: "border-right align-middle",
            attrs: {rowspan: "2"}
        }, [_v(" " + _s(translate("LBL_MODULE", module)) + " ")]), _v(" "), _c("th", {
            staticClass: "border-right text-center",
            attrs: {colspan: "4"}
        }, [_v(" " + _s(translate("APPTITLE", module)) + " ")]), _v(" "), _c("th", {
            staticClass: "border-right text-center",
            attrs: {colspan: "4"}
        }, [_v(" " + _s(translate(module, module)) + " ")])]), _v(" "), _c("tr", {staticClass: "listViewContentHeader"}, [_c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("Created", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_UPDATED", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_SKIPPED", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_DELETED", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("Created", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_UPDATED", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_SKIPPED", module)) + " ")]), _v(" "), _c("th", {staticClass: "border-right"}, [_v(" " + _s(translate("LBL_DELETED", module)) + " ")])])]), _v(" "), _c("tbody", _l(logs, (function (t) {
            return _c("tr", [_c("td", {staticClass: "border-right"}, [_v(_s(t.sync_date))]), _v(" "), _c("td", {staticClass: "border-right"}, [_v(_s(convertTimeToUserFormat(t.sync_time)) + " ")]), _v(" "), _c("td", {staticClass: "border-right"}, [_v(_s(t.module))]), _v(" "), _l(types, (function (e) {
                return [_c("td", {staticClass: "border-right"}, [t[e] > 0 ? _c("span", {
                    directives: [{
                        name: "showModal",
                        rawName: "v-showModal.LogDetailsModal",
                        value: {logid: t.id, logtype: e.slice(0, -6), module: module},
                        expression: '{"logid" : data.id, "logtype" : type.slice(0, -6), "module" : module}',
                        modifiers: {LogDetailsModal: !0}
                    }], staticClass: "c-pointer", class: getTextColor(e)
                }, [_v(_s(t[e]))]) : _c("span", [_v("-")])])]
            }))], 2)
        })), 0)])]), _v(" "), logs && logs[0] && logs[0].sync_datetime ? _c("div", {staticClass: "d-flex justify-content-end mt-3 text-muted"}, [_c("div", {staticClass: "mr-1"}, [_v(_s(translate("LAST_SYNC")))]), _v(":\n                "), _c("div", {staticClass: "ml-1"}, [_c("vds-date-diff-string", {attrs: {utcTime: logs[0].sync_datetime}})], 1)]) : _e(), _v(" "), logs.length || inProgress ? _e() : _c("div", {staticClass: "text-center p-4"}, [_c("h4", {staticClass: "text-muted"}, [_v(_s(translate("LBL_NO")) + " " + _s(translate("LBL_SYNC_LOG", module)) + " " + _s(translate("LBL_FOUND")) + ".")]), _v(" "), syncready ? _c("button", {
            staticClass: "btn btn-primary py-2 px-3 mr-3",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return sync()
                }
            }
        }, [_c("i", {staticClass: "fa fa-sync mr-1"}), _v(_s(translate("LBL_SYNC_NOW", module)))]) : _e()])])] : [_c("div", {staticClass: "h4 text-center"}, [_v(_s(translate("EXTENSION_NOT_INSTALLED", module, translate(module, module))))])]], 2)])
    }
});
var Vtiger_Component_FieldMappingModal = App.vtComponent.extend({
    props: {sourcemodule: {type: [String]}, module: {type: [String]}}, data() {
        return {
            items: [],
            fields: [{key: "crm", label: this.translate("APPTITLE", this.module)}, {
                key: "extmodule",
                label: this.module
            }]
        }
    }, created() {
        this.getFieldMapping()
    }, methods: {
        getFieldMapping() {
            this.appStore.request("api_get", {
                url: "/settings/fieldmapping",
                params: {module: this.module, sourcemodule: this.sourcemodule}
            }).then(t => {
                for (i in t) this.items.push({crm: i, extmodule: t[i]})
            })
        }
    }, computed: {
        vtigerLogo: () => "layouts/v9/assets/images/VtigerLogo.png", moduleLogo() {
            return "layouts/v9/assets/images/" + this.module + ".png"
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "xl",
                lazy: !0,
                title: translate("LBL_FIELD_MAPPING", module),
                "hide-footer": "",
                scrollable: "",
                "header-class": "px-4 bgLtGrey",
                "body-class": "px-4 pt-4"
            }
        }, [_c("div", [_c("div", {staticClass: "d-flex flex-wrap"}, [_l(items, (function (t, e) {
            return [_c("div", {
                staticClass: "w-50 pb-3",
                class: [e % 2 == "0" ? "pr-4" : "pl-4"]
            }, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "w-40 font-14 d-flex"}, [_c("div", {staticClass: "smallImage mr-2"}, [_c("img", {
                staticClass: "w-inherit h-inherit",
                attrs: {src: vtigerLogo}
            })]), _v(" "), _c("div", {staticClass: "mt-1"}, [_v(_s(t.crm))])]), _v(" "), _c("i", {staticClass: "fas fa-exchange-alt w-15 text-grey-5"}), _v(" "), _c("div", {staticClass: "bg-grey-hue-8 rounded-6 border w-50 d-flex align-items-center justify-content-between height-30px"}, [_c("span", {staticClass: "py-1 px-3 flex-grow-1 border-right"}, [_v(_s(t.extmodule))]), _v(" "), _c("div", {staticClass: "smallImage mx-1"}, [_c("img", {
                staticClass: "w-inherit h-inherit p-1",
                attrs: {src: moduleLogo}
            })])])])])]
        }))], 2)])])
    }
});
var Vtiger_Component_LogDetailsModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    props: {logid: {type: [String]}, logtype: {type: [String]}, module: {default: App.module()}},
    data() {
        return {
            items: [],
            fields: [{
                key: "module",
                label: this.translate("LBL_SOURCE_MODULE", this.module),
                thClass: "bgLtGrey"
            }, {key: "name", label: this.translate("LBL_RECORD_NAME", this.module), thClass: "bgLtGrey"}]
        }
    },
    computed: {
        exportUrl() {
            return `ui-api/synclogs/download?module=${this.module}&logid=${this.logid}&type=${this.logtype}`
        }, linkifyRecords() {
            let t = !1;
            return -1 != _.indexOf(["app_create", "vt_create", "app_update", "vt_update"], this.logtype) && (t = !0), t
        }
    },
    created() {
        this.getLogDetails()
    },
    methods: {
        getLogDetails() {
            "vt_skip" != this.logtype && "app_skip" != this.logtype || this.fields.push({
                key: "error",
                label: this.translate("LBL_REASON", this.module),
                thClass: "bgLtGrey"
            }), this.appStore.request("api_get", {
                url: "/synclogs/detail",
                params: {module: this.module, logid: this.logid, logtype: this.logtype}
            }).then(t => {
                this.items = t
            })
        }, getDetailViewUrl(t) {
            "Emails" == t.module ? this.showModal({
                componentName: "EmailPreview",
                componentData: {recordid: t.id},
                modalOnModalMode: !0
            }) : this.redirectUrl("view/detail?id=" + t.id + "&module=" + t.module, !1, "_blank")
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "LogDetailsModal",
                size: "lg",
                thStyle: "bgLtGrey",
                lazy: !0,
                "hide-footer": "",
                "header-class": "bgLtGrey",
                scrollable: "",
                "body-class": "p-4"
            }
        }, [_c("div", {
            staticClass: "d-flex justify-content-between align-items-center w-100 px-2",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("span", {staticClass: "h5 mb-0"}, [_v(_s(translate(logtype, module, translate(module, module))))]), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_c("a", {
            staticClass: "btn btn-secondary py-1 px-2",
            attrs: {href: exportUrl}
        }, [_c("i", {staticClass: "fa fa-download mr-1"}), _v(_s(translate("LBL_DOWNLOAD_AS_CSV", module)) + "\n                ")]), _v(" "), _c("i", {
            staticClass: "fa fa-times c-pointer h5 mb-0 ml-4",
            on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "LogDetailsModal")
                }
            }
        })])]), _v(" "), _c("div", [_c("b-table", {
            attrs: {bordered: "", items: items, fields: fields},
            scopedSlots: _u([{
                key: "name", fn: function (t) {
                    return [linkifyRecords ? _c("span", {
                        staticClass: "c-pointer text-primary",
                        on: {
                            click: function (e) {
                                return getDetailViewUrl(t.item)
                            }
                        }
                    }, [_v(_s(t.value))]) : _c("span", [_v(_s(t.value))])]
                }
            }], null, !0)
        })], 1)])
    }
});
var Vtiger_Component_StringSearch = Vue.component("vds-search-string-component", App.vtComponent.extend({
    props: ["fieldName", "fieldModel", "selectedFilterFieldValues", "changedFilterFieldValues", "selectAll"],
    data: () => ({search: "", selectedValues: "", limit: 5, showMore: !1, actualCount: 0, partiallySelected: !1}),
    computed: {
        isSelectAllAllowedField() {
            return !!["picklist", "multipicklist", "metricpicklist", "owner", "ownergroup", "coowner", "date", "fileLocationType"].includes(this.fieldModel.fieldType)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "col-3 pl-0"}, [_c("span", [_v(_s(translate("LBL_CONTAINS", "Vtiger")))])]), _v(" "), _c("div", {staticClass: "col-9 pr-0"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: selectedValues,
                expression: "selectedValues"
            }],
            staticClass: "form-control form-control-sm",
            attrs: {type: "text", name: fieldName},
            domProps: {value: selectedValues},
            on: {
                input: function (e) {
                    e.target.composing || (selectedValues = e.target.value)
                }
            }
        })])])
    },
    mounted() {
        this.init(), this.$root.$on("vds::simple::filter::clear", this.init)
    },
    methods: {
        init() {
            null == this.selectedFilterFieldValues[this.fieldName] || (_.isArray(this.selectedFilterFieldValues[this.fieldName]) ? this.selectedValues = jQuery.extend(!0, [], this.selectedFilterFieldValues[this.fieldName]) : _.isNonPrimitiveObject(this.selectedFilterFieldValues[this.fieldName]) ? this.selectedValues = jQuery.extend({}, this.selectedFilterFieldValues[this.fieldName]) : this.selectedValues = this.selectedFilterFieldValues[this.fieldName])
        }, showMoreClicked() {
            this.limit = this.limit + this.limit, this.limit < this.fieldModel.type.picklistValues.length ? this.showMore = !1 : this.showMore = !0
        }, showLessClicked() {
            this.limit = 5, this.showMore = !1
        }, selectValueWatchHandler(e, t) {
            this.$root.$emit("vds::filter::condition::changed", this.fieldName, e)
        }
    },
    watch: {
        selectedValues: function (e, t) {
            this.selectValueWatchHandler(e, t)
        }, selectAll: function (e, t) {
            this.isSelectAllAllowedField && (e ? this.selectAllFields() : this.partiallySelected || (this.selectedValues = []))
        }, selectedFilterFieldValues() {
            this.init()
        }
    }
}));
var Vtiger_Components_BooleanSearch = Vue.component("vds-search-boolean-component", Vtiger_Component_StringSearch.extend({
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex"}, [_c("vds-checkbox", {
            staticClass: "col-3 p-0",
            attrs: {label: translate("LBL_NO")},
            model: {
                value: disabledStatus, callback: function (e) {
                    disabledStatus = e
                }, expression: "disabledStatus"
            }
        }), _v(" "), _c("vds-checkbox", {
            attrs: {label: translate("LBL_YES")},
            model: {
                value: enabledStatus, callback: function (e) {
                    enabledStatus = e
                }, expression: "enabledStatus"
            }
        })], 1)
    }, computed: {
        disabledStatus: {
            get() {
                return "" !== this.selectedValues && this.isDisabled
            }, set(e) {
                this.selectedValues = !e
            }
        }, enabledStatus: {
            get() {
                return "" !== this.selectedValues && this.isEnabled
            }, set(e) {
                this.selectedValues = e
            }
        }, isDisabled() {
            return "0" == this.selectedValues
        }, isEnabled() {
            return "1" == this.selectedValues
        }
    }, methods: {
        selectValueWatchHandler(e, t) {
            e && "0" != e ? this.$root.$emit("vds::filter::condition::changed", this.fieldName, "1") : this.$root.$emit("vds::filter::condition::changed", this.fieldName, "0")
        }
    }
}));
var Vtiger_Component_CurrencySearch = Vue.component("vds-search-currency-component", Vtiger_Component_StringSearch.extend({
    props: ["fieldName", "fieldModel", "selectedFilterFieldValues", "changedFilterFieldValues"], data() {
        return {
            fromCurrency: this.selectedFilterFieldValues[this.fieldName] ? this.selectedFilterFieldValues[this.fieldName].from : "",
            toCurrency: this.selectedFilterFieldValues[this.fieldName] ? this.selectedFilterFieldValues[this.fieldName].to : ""
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "col-3 pl-0"}, [_v(_s(translate("LBL_BETWEEN")))]), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "flex-grow-1 mr-3"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: fromCurrency,
                expression: "fromCurrency"
            }],
            staticClass: "form-control form-control-sm",
            attrs: {type: "text", name: "fieldName" + "_from"},
            domProps: {value: fromCurrency},
            on: {
                change: function (e) {
                    return change(fieldName + "_from", e.target.value)
                }, input: function (e) {
                    e.target.composing || (fromCurrency = e.target.value)
                }
            }
        })]), _v(" "), _c("div", {staticClass: "flex-grow-1 ml-3"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: toCurrency,
                expression: "toCurrency"
            }],
            staticClass: "form-control form-control-sm",
            attrs: {type: "text", name: "fieldName" + "_to"},
            domProps: {value: toCurrency},
            on: {
                change: function (e) {
                    return change(fieldName + "_to", e.target.value)
                }, input: function (e) {
                    e.target.composing || (toCurrency = e.target.value)
                }
            }
        })])])])
    }, methods: {
        change(e, t) {
            e.indexOf(this.fieldName) > -1 && (e.endsWith("_from") && this.__updateChangeFilterFieldValues("from", t), e.endsWith("_to") && this.__updateChangeFilterFieldValues("to", t))
        }, __updateChangeFilterFieldValues(e, t) {
            this.$root.$emit("vds::filter::condition::changed", this.fieldName, t, e)
        }
    }
}));
var Vtiger_Component_DateSearch = Vue.component("vds-search-date-component", Vtiger_Component_StringSearch.extend({
    mixins: [Vtiger_Mixin_DateUtils], data() {
        return {
            dateFormat: "YYYY-MM-DD",
            fromDate: this.selectedFilterFieldValues[this.fieldName] ? this.selectedFilterFieldValues[this.fieldName].from : "",
            toDate: this.selectedFilterFieldValues[this.fieldName] ? this.selectedFilterFieldValues[this.fieldName].to : ""
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "col-3 pl-0"}, [_v(_s(translate("LBL_BETWEEN")))]), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "flex-grow-1 mr-3"}, [_c("vds-datepicker", {
            attrs: {
                "class-name": "form-control-sm",
                name: fieldName + "_from",
                "date-format": dateFormat,
                validators: fromDateValidator,
                field: fieldModel,
                "show-field-error": !1
            },
            on: {"update::date::value": e => setFilterValue(fieldName + "_from", e)},
            model: {
                value: fromDate, callback: function (e) {
                    fromDate = e
                }, expression: "fromDate"
            }
        })], 1), _v(" "), _c("div", {staticClass: "flex-grow-1 ml-3"}, [_c("vds-datepicker", {
            attrs: {
                "class-name": "form-control-sm",
                name: fieldName + "_to",
                "date-format": dateFormat,
                validators: toDateValidator,
                field: fieldModel,
                "show-field-error": !1
            },
            on: {"update::date::value": e => setFilterValue(fieldName + "_to", e)},
            model: {
                value: toDate, callback: function (e) {
                    toDate = e
                }, expression: "toDate"
            }
        })], 1)])])
    }, created() {
        this.dateFormat = this.$currentUser.get("date_format").toUpperCase(), this.fromDate && (this.fromDate = this.convertDateToUserFormat(this.fromDate)), this.toDate && (this.toDate = this.convertDateToUserFormat(this.toDate))
    }, computed: {
        fromDateValidator() {
            let e = {};
            return "" != this.toDate && (e.lessthanOrEqualtoTargetDate = this.toDate), e
        }, toDateValidator() {
            let e = {};
            return "" != this.fromDate && (e.greaterthanOrEqualtoTargetDate = this.fromDate), e
        }
    }, methods: {
        __updateChangeFilterFieldValues(e, t) {
            this.$root.$emit("vds::filter::condition::changed", this.fieldName, t, e)
        }, setFilterValue(e, t) {
            if (e.indexOf(this.fieldName) > -1) if (t) {
                let a = moment(t, this.dateFormat);
                e.endsWith("_from") ? this.__updateChangeFilterFieldValues("from", a.format("YYYY-MM-DD")) : e.endsWith("_to") && this.__updateChangeFilterFieldValues("to", a.format("YYYY-MM-DD"))
            } else this.__updateChangeFilterFieldValues(e.endsWith("_from") ? "from" : "to", "")
        }
    }
}));
var Vtiger_Component_OwnerSearch = Vue.component("vds-search-owner-component", Vtiger_Component_StringSearch.extend({
    mixins: [Vtiger_Mixin_UsersUtils], data() {
        let e = {
            ownerCount: 0,
            filteredOwners: [],
            selectedValues: [],
            allOwners: {},
            onlyUsersAllowedModules: ["Cases", "InternalTickets", "Import"],
            valueKey: "label"
        };
        return this.fieldModel && (this.fieldModel.isCustomField || "coowner" == this.fieldModel.fieldType) && (e.valueKey = "value"), e
    }, render: function anonymous() {
        with (this) return _c("ul", {
            staticClass: "pl-0",
            staticStyle: {"min-width": "160px"}
        }, [ownerCount > 10 ? _c("div", {staticClass: "w-100 d-flex align-items-center mb-2"}, [_c("div", {staticClass: "form-inline has-search col px-0"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("div", {staticClass: "d-flex flex-grow-1"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: search,
                expression: "search"
            }],
            staticClass: "form-control w-100",
            attrs: {type: "text", placeholder: translate("LBL_SEARCH")},
            domProps: {value: search},
            on: {
                input: function (e) {
                    e.target.composing || (search = e.target.value)
                }
            }
        })])])]) : _e(), _v(" "), _l(displayableValues, (function (e, s) {
            return _c("li", {staticClass: "dropdown-item p-0"}, [_c("div", {
                staticClass: "form-check p-1 rounded my-1",
                class: [selectedValues.includes(e[valueKey]) ? "bg-light-blue-1" : ""]
            }, [_c("label", {staticClass: "form-check-label vt-checkbox-container d-flex align-items-center"}, [userImageInfo && userImageInfo[e.value] ? _c("img", {
                staticClass: "circle-icon circle-icon-lg p-0 mr-2",
                staticStyle: {width: "24px", height: "24px", border: "solid 1px #cccccc"},
                attrs: {src: userImageInfo[e.value].url}
            }) : _c("div", {
                staticClass: "mr-2 text-white border-grey-6 circle-icon d-flex align-items-center justify-content-center text-capitalize",
                staticStyle: {width: "24px", height: "24px"},
                style: {background: getColor(e.dynamicLabel ? e.dynamicLabel : e.label)}
            }, [_v(_s(e.dynamicLabel ? e.dynamicLabel.substring(0, 2) : e.label.substring(0, 2)))]), _v(" "), _c("input", {
                directives: [{
                    name: "model",
                    rawName: "v-model",
                    value: selectedValues,
                    expression: "selectedValues"
                }],
                key: e.label,
                staticClass: "form-check-input",
                attrs: {type: "checkbox"},
                domProps: {
                    value: e.valueKey ? e[e.valueKey] : e[valueKey],
                    checked: Array.isArray(selectedValues) ? _i(selectedValues, e.valueKey ? e[e.valueKey] : e[valueKey]) > -1 : selectedValues
                },
                on: {
                    change: function (s) {
                        var t = selectedValues, l = s.target, i = !!l.checked;
                        if (Array.isArray(t)) {
                            var a = e.valueKey ? e[e.valueKey] : e[valueKey], r = _i(t, a);
                            l.checked ? r < 0 && (selectedValues = t.concat([a])) : r > -1 && (selectedValues = t.slice(0, r).concat(t.slice(r + 1)))
                        } else selectedValues = i
                    }
                }
            }), _v(" "), _c("div", {staticClass: "textOverflowEllipsis pr-4"}, [_v(_s(e.dynamicLabel ? e.dynamicLabel : e.label))]), _v(" "), _c("span", {staticClass: "checkmark filter-checkmark"})])])])
        })), _v(" "), ownerCount > 5 && !showMore && actualCount >= 5 ? _c("div", [_c("span", {staticClass: "pl-1"}, [_c("a", {
            attrs: {href: "#"},
            on: {
                click: function (e) {
                    return e.preventDefault(), showMoreClicked(e)
                }
            }
        }, [_v(_s(translate("LBL_SHOW_MORE", "Vtiger")))])])]) : _e(), _v(" "), showMore && displayableValues.length > this.limit ? _c("div", [_c("span", {staticClass: "pl-1"}, [_c("a", {
            attrs: {href: "#"},
            on: {
                click: function (e) {
                    return e.preventDefault(), showLessClicked(e)
                }
            }
        }, [_v(_s(translate("JS_SHOW_LESS", "Vtiger")))])])]) : _e()], 2)
    }, created() {
        this.getUsersInfo(), this.initOwners()
    }, computed: {
        displayableValues() {
            return this.filteredOwners = this.allOwners.filter(e => e.label.toLowerCase().indexOf(this.search.toLowerCase()) > -1), this.actualCount = this.filteredOwners.length, this.filteredOwners.slice(0, this.limit)
        }, userImageInfo() {
            let e = this.appStore.get("users_info"), s = {};
            return e && e.forEach(e => {
                e.imagename && (s[e.id] = e.imagename[0])
            }), s
        }
    }, methods: {
        initOwners() {
            let e = this.getUsers(), s = this.getGroups(), t = [];
            this.fieldModel.fieldType && "owner" == this.fieldModel.fieldType && (t = s.length ? this.getUsersOfGroups(s) : _.isUndefined(this.fieldModel.allOwners.groups) ? [] : this.getUsersOfGroups(this.fieldModel.allOwners.groups));
            let l = _.union(e, s, t);
            this.allOwners = l, this.ownerCount = this.allOwners.length
        }, getUsers() {
            let e = {};
            e = this.fieldModel ? this.fieldModel.allOwners : this.appStore.get("users_groups_info", !1);
            let s = [];
            if (this.fieldModel && "ownergroup" != this.fieldModel.fieldType) if (_.isArray(e.users)) s = _.union(s, e.users); else for (let t in e.Users) {
                let l = {};
                l.value = t.split(":")[1], l.label = e.Users[t], s.push(l)
            }
            return s
        }, getGroups() {
            if (this.fieldModel && this.onlyUsersAllowedModules.includes(this.fieldModel.moduleModel.name) && this.fieldModel.isOwnerField && !this.fieldModel.isCustomField) return [];
            let e = {};
            e = this.fieldModel ? this.fieldModel.allOwners : this.appStore.get("users_groups_info", !1);
            let s = [];
            if (_.isArray(e.groups)) s = _.union(s, e.groups); else for (let t in e.Groups) {
                let l = {};
                l.value = t.split(":")[1], l.label = e.Groups[t], s.push(l)
            }
            return s
        }, selectAllFields() {
            for (let e in this.filteredOwners) this.selectedValues.includes(this.filteredOwners[e][this.valueKey]) || this.selectedValues.push(this.filteredOwners[e][this.valueKey])
        }, showMoreClicked() {
            this.limit = this.limit + this.limit, this.limit <= this.ownerCount ? this.showMore = !1 : this.showMore = !0
        }, showLessClicked() {
            this.limit = 5, this.showMore = !1
        }, getColor: e => VTHelper.getColorCode(e)
    }, watch: {
        selectedValues: function (e, s) {
            this.allOwners && this.filteredOwners.length != e.length ? this.partiallySelected = !0 : this.partiallySelected = !1, this.$emit("update:selectAll", !this.partiallySelected), this.$root.$emit("vds::filter::condition::changed", this.fieldName, e)
        }
    }
}));
var Vtiger_Component_OwnerGroupSearch = Vue.component("vds-search-ownergroup-component", Vtiger_Component_OwnerSearch.extend({methods: {getUsers: () => []}}));
var Vtiger_Component_OwnerReferenceSearch = Vue.component("vds-search-ownerreference-component", Vtiger_Component_OwnerSearch.extend({methods: {getGroups: () => []}}));
var Vtiger_Components_PicklistSearch = Vue.component("vds-search-picklist-component", Vtiger_Component_StringSearch.extend({
    data: () => ({selectedValues: []}), render: function anonymous() {
        with (this) return _c("ul", {
            staticClass: "pl-0 displayValue",
            staticStyle: {"min-width": "160px"}
        }, [_.size(picklistValues) > 10 ? _c("div", {staticClass: "w-100 d-flex align-items-center mb-2"}, [_c("div", {staticClass: "form-inline has-search col px-0"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("div", {staticClass: "d-flex flex-grow-1"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: search,
                expression: "search"
            }],
            staticClass: "form-control w-100",
            attrs: {type: "text", placeholder: translate("LBL_SEARCH")},
            domProps: {value: search},
            on: {
                input: function (e) {
                    e.target.composing || (search = e.target.value)
                }
            }
        })])])]) : _e(), _v(" "), _l(displayableValues, (function (e, t) {
            return _c("li", {staticClass: "dropdown-item p-0"}, [_c("div", {
                staticClass: "form-check p-1 rounded m-1",
                class: [selectedValues.includes(e.value) ? "bg-light-blue-1" : ""]
            }, [_c("label", {staticClass: "form-check-label vt-checkbox-container d-flex align-items-center"}, [_c("span", {
                staticClass: "smallbox",
                style: {backgroundColor: e.color && "#ffffff" != e.color ? e.color : "#8E9093"}
            }), _v(" "), _c("input", {
                directives: [{
                    name: "model",
                    rawName: "v-model",
                    value: selectedValues,
                    expression: "selectedValues"
                }],
                key: e.value,
                staticClass: "form-check-input",
                attrs: {type: "checkbox"},
                domProps: {
                    value: e.value,
                    checked: Array.isArray(selectedValues) ? _i(selectedValues, e.value) > -1 : selectedValues
                },
                on: {
                    change: function (t) {
                        var s = selectedValues, l = t.target, a = !!l.checked;
                        if (Array.isArray(s)) {
                            var i = e.value, c = _i(s, i);
                            l.checked ? c < 0 && (selectedValues = s.concat([i])) : c > -1 && (selectedValues = s.slice(0, c).concat(s.slice(c + 1)))
                        } else selectedValues = a
                    }
                }
            }), _v(" "), _c("div", {staticClass: "textOverflowEllipsis pr-4"}, [_v(_s(translate(e.label)))]), _v(" "), _c("span", {staticClass: "checkmark filter-checkmark"})])])])
        })), _v(" "), picklistValues.length > 5 && !showMore && actualCount >= 5 ? _c("div", [_c("span", {staticClass: "pl-1"}, [_c("a", {
            attrs: {href: "#"},
            on: {
                click: function (e) {
                    return e.preventDefault(), showMoreClicked(e)
                }
            }
        }, [_v(_s(translate("LBL_SHOW_MORE", "Vtiger")))])])]) : _e(), _v(" "), showMore && displayableValues.length > limit ? _c("div", [_c("span", {staticClass: "pl-1"}, [_c("a", {
            attrs: {href: "#"},
            on: {
                click: function (e) {
                    return e.preventDefault(), showLessClicked(e)
                }
            }
        }, [_v(_s(translate("JS_SHOW_LESS", "Vtiger")))])])]) : _e()], 2)
    }, computed: {
        displayableValues() {
            let e = this.picklistValues;
            return e = e.filter(e => e.label.toLowerCase().indexOf(this.search.toLowerCase()) > -1), this.actualCount = e.length, e.splice(0, this.limit)
        }, picklistValues() {
            let e = this.fieldModel.type.picklistValues;
            if ("currencyList" == this.fieldModel.fieldType) {
                let s = [];
                for (var t in e) {
                    let {label: l} = e[t];
                    s.push({value: l, label: l})
                }
                e = s
            }
            return e
        }
    }, methods: {
        selectAllFields() {
            for (let e in this.picklistValues) this.selectedValues.includes(this.picklistValues[e].value) || this.selectedValues.push(this.picklistValues[e].value)
        }
    }, watch: {
        selectedValues: function (e, t) {
            this.picklistValues && this.picklistValues.length != e.length ? this.partiallySelected = !0 : this.partiallySelected = !1, this.$emit("update:selectAll", !this.partiallySelected), this.$root.$emit("vds::filter::condition::changed", this.fieldName, e)
        }
    }
}));
var Vtiger_Component_RoleSearch = Vue.component("vds-search-role-component", Vtiger_Component_OwnerSearch.extend({
    data: () => ({roles: []}),
    computed: {
        displayableValues() {
            let e = this.roles;
            this.ownerCount = e.length;
            let t = e.filter(e => e.label.toLowerCase().indexOf(this.search.toLowerCase()) > -1);
            return this.actualCount = t.length, t.slice(0, this.limit)
        }
    },
    created() {
        this.initRoleValues()
    },
    methods: {
        initRoleValues() {
            let e = this.appStore.get("users_groups_info");
            _.isUndefined(e) ? this.appStore.request("api_get", {
                url: "records",
                params: {module: "Users", shared: "1"},
                key: "users_groups_info"
            }).then(e => {
                this.resolveRoles(e)
            }) : this.resolveRoles(e)
        }, resolveRoles(e) {
            for (let t in e.Roles) {
                let s = {};
                s.value = t.split(":")[1], s.label = e.Roles[t], this.roles.push(s)
            }
        }, showMoreClicked() {
            this.limit = this.limit + this.limit, this.ownerCount = this.roles.length, this.limit <= this.ownerCount ? this.showMore = !1 : this.showMore = !0
        }
    }
}));
var Vtiger_Component_TimeSearch = Vue.component("vds-search-time-component", Vtiger_Component_StringSearch.extend({
    mixins: [Vtiger_Mixin_DateUtils],
    methods: {
        init() {
            this.selectedValues = this.convertTimeToUserFormat(this.selectedFilterFieldValues[this.fieldName])
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "col-3 pl-0"}, [_c("span", [_v(_s(translate("LBL_EQUALS", "Vtiger")))])]), _v(" "), _c("div", {staticClass: "col-9 pr-0"}, [_c("vds-timepicker", {
            attrs: {
                value: selectedValues,
                field: fieldModel
            }, model: {
                value: selectedValues, callback: function (e) {
                    selectedValues = e
                }, expression: "selectedValues"
            }
        })], 1)])
    }
}));
var Vtiger_Component_AddAttachment = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "addAttachmentsModal",
                size: "lg",
                "hide-footer": !0,
                "no-enforce-focus": !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-title", id: "modalTitle"},
            slot: "modal-title"
        }, [_v(_s(translate("LBL_ATTACH_FILES")))]), _v(" "), _c("div", {attrs: {id: "attachmentModuleSelect"}}, [_c("p", [_v(_s(translate("What do you want to attach?")))]), _v(" "), _c("div", {
            staticClass: "btn-group btn-group-toggle",
            attrs: {"data-toggle": "buttons"}
        }, _l(attachableModules, (function (e) {
            return _c("label", {
                staticClass: "btn btn-outline-secondary",
                class: {"bg-primary text-white": selectedModuleName == e.relatedModule}
            }, [_c("input", {
                directives: [{
                    name: "model",
                    rawName: "v-model",
                    value: selectedModule,
                    expression: "selectedModule"
                }],
                attrs: {id: e.relatedModule + "SelectButton", type: "radio"},
                domProps: {value: e, checked: _q(selectedModule, e)},
                on: {
                    change: function (t) {
                        selectedModule = e
                    }
                }
            }), _v(_s(e.relatedModule) + "\n                    ")])
        })), 0)]), _v(" "), !_.isEmpty(selectedModule.id) && availableActions.length ? _c("div", {
            staticClass: "my-2",
            attrs: {id: "modalActions"}
        }, [_c("p", [_v(_s(translate("Do you want to")))]), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [availableActions.indexOf("select") > -1 ? _c("div", [_c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.LinkDocuments.true",
                value: {
                    relation: documentsRelationModel,
                    moduleName: selectedModuleName,
                    moduleModel: attachmentModuleModels[selectedModuleName],
                    showFolderTree: "Documents" == selectedModuleName
                },
                expression: "{relation: documentsRelationModel, moduleName: selectedModuleName, moduleModel: attachmentModuleModels[selectedModuleName], showFolderTree: (selectedModuleName == 'Documents')}",
                modifiers: {LinkDocuments: !0, true: !0}
            }], staticClass: "btn btn-outline-secondary"
        }, [_v("\n                            " + _s(translate("Link") + " " + selectedModuleName) + "\n                        ")])]) : _e(), _v(" "), this.availableActions.length > 1 && selectedModule.isCreatePermitted ? _c("span", {staticClass: "px-2"}, [_v(_s(translate("LBL_OR")))]) : _e(), _v(" "), availableActions.indexOf("add") > -1 && selectedModule.isCreatePermitted ? _c("div", [_c("button", {
            staticClass: "btn btn-outline-secondary",
            on: {
                click: function (e) {
                    return create()
                }
            }
        }, [_v("\n                            " + _s(translate("LBL_CREATE")) + "\n                        ")])]) : _e(), _v(" "), this.availableActions.length > 1 && selectedModule.isCreatePermitted && !isInventoryModule ? _c("span", {staticClass: "px-2"}, [_v(_s(translate("LBL_OR")))]) : _e(), _v(" "), availableActions.indexOf("add") > -1 && selectedModule.isCreatePermitted && !isInventoryModule ? _c("div", [_c("button", {
            staticClass: "btn btn-outline-secondary",
            on: {
                click: function (e) {
                    return upload()
                }
            }
        }, [_v("\n                            " + _s(translate("LBL_UPLOAD")) + "\n                        ")])]) : _e()])]) : _e()])
    },
    props: {
        documentsRelationModel: {default: () => BaseModel.getModuleSpecificModel("Documents", "Relation", {})},
        relations: {default: () => BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {})}
    },
    data() {
        return {selectedModule: BaseModel.getModuleSpecificModel(this.$module, "Relation", {})}
    },
    computed: {
        availableActions() {
            return _.isUndefined(this.documentsRelationModel.id) ? [] : this.documentsRelationModel.actions.split(",").map(e => e.toLowerCase())
        }, attachableModules() {
            let e = ["Quotes", "Invoice", "SalesOrder", "PurchaseOrder", "Documents"], t = [];
            for (let l in this.relations) {
                let o = this.relations[l];
                e.indexOf(o.relatedModule) > -1 && t.push(o)
            }
            return t
        }, attachmentModuleModels() {
            let e = {};
            for (let t in this.attachableModules) {
                let l = this.attachableModules[t];
                e[l.relatedModule] = l.relatedModuleModel
            }
            return e
        }, selectedModuleName() {
            let e = "";
            return _.isUndefined(this.selectedModule.id) || (e = this.selectedModule.relatedModule), e
        }, isInventoryModule() {
            return !!VTHelper.getInventoryModules().includes(this.selectedModuleName)
        }
    },
    methods: {
        setModule(e) {
            this.selectedModule = e
        }, create() {
            let e = VTHelper.getInventoryModules(), t = this.selectedModuleName;
            if (e.includes(t)) {
                let e = this.$_detailRecordModel,
                    l = "&related_to=" + e.getId() + "&related_module=" + e.moduleName + "&return=true&relatedtab=Documents";
                location.href = this.getEditViewUrl(t) + l
            } else this.showModal({
                componentName: "CreateRelatedDocument",
                componentData: {
                    relation: this.documentsRelationModel,
                    moduleName: this.selectedModuleName,
                    moduleModel: this.attachmentModuleModels[this.selectedModuleName]
                },
                modalOnModalMode: !0
            })
        }, upload() {
            let e = VTHelper.getInventoryModules(), t = this.selectedModuleName;
            if (e.includes(t)) {
                let e = this.$_detailRecordModel, l = "&related_to=" + e.getId() + "&related_module=" + e.moduleName;
                location.href = this.getEditViewUrl(t) + l
            } else this.showModal({
                componentName: App.loadComponent("UploadNewDocument", "Documents"),
                componentData: {relation: this.documentsRelationModel, moduleName: this.selectedModuleName},
                modalOnModalMode: !0
            })
        }
    }
});
var Vtiger_Component_AddOrCreateModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_RelationUtils],
    props: {relation: {type: Object}, record: {type: Object}, relatedModuleModel: {type: Object}},
    data: () => ({relationFieldName: ""}),
    computed: {
        parentRecord() {
            return _.isUndefined(this.record) ? this.$_detailRecordModel : this.record
        }, getComponentName() {
            return "Documents" == this.relation.relatedModule ? App.loadComponent("CreateRelatedDocument") : App.loadComponent("QuickCreateRelatedModal")
        }
    },
    mounted() {
        this.getLookupParams(this.parentRecord, this.relation), this.$on("vds::related::document::created", () => {
            this.postSave()
        }), this.relationFieldName = this.relation.relationfieldname
    },
    methods: {
        postSave(e) {
            this.$root.$emit("bv::hide::modal", "addOrCreateRecord"), this.$root.$emit("vds::widgets::refresh", this.relation.relatedModule)
        }, showCreateModal(e) {
            "Documents" == e ? (componentName = "CreateRelatedDocument", componentData = {
                moduleName: this.relation.relatedModule,
                relation: this.relation
            }) : (componentName = "QuickCreateRelatedModal", componentData = {
                module: this.parentRecord.moduleName,
                record: this.parentRecord,
                relatedAction: !0,
                relatedModule: this.relation.relatedModule,
                postQuickCreateSave: this.postSave
            }), !this.relatedModuleModel || !this.relatedModuleModel.isInventoryModule && this.relatedModuleModel.isQuickCreateSupported ? this.showModal({
                componentName: componentName,
                componentData: componentData,
                modalOnModalMode: !1
            }) : this.redirectUrl("view/edit?module=" + this.relatedModuleModel.name + "&related_to=" + this.record.id + "&related_module=" + this.record.moduleName + "&return=true", {}, !1, !0)
        }, uploadDocument(e) {
            this.showModal({
                componentName: App.loadComponent("UploadNewDocument", "Documents"),
                componentData: {
                    relation: this.relation,
                    moduleName: this.relation.relatedModule,
                    isRelatedDocumentCreation: !0
                },
                modalOnModalMode: !0
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "addOrCreateRecord",
                title: translate("LBL_WHAT_DO_YOU_WANT_TO_DO"),
                "hide-footer": !0
            }
        }, [_c("div", {
            staticClass: "btn-group",
            attrs: {role: "group"}
        }, [_c("button", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {
                    module: relation.relatedModule,
                    multiple: !0,
                    parentModule: parentRecord.moduleName,
                    fieldname: relationFieldName
                },
                expression: "{'module': relation.relatedModule, 'multiple': true, 'parentModule': parentRecord.moduleName,'fieldname' : relationFieldName}",
                modifiers: {PopupReferenceList: !0}
            }],
            staticClass: "btn btn-outline-secondary",
            attrs: {type: "button", disabled: !relation.isSelectPermitted},
            on: {"vds::popup:record::selected": postSave}
        }, [_v("\n                    " + _s(translate("LBL_SELECT") + " " + translate(relation.relatedModule, relation.relatedModule)) + "\n                ")]), _v(" "), _c("button", {
            staticClass: "btn btn-outline-secondary",
            attrs: {type: "button", disabled: !relation.isCreatePermitted, postQuickCreateSave: "postSave"},
            on: {
                click: function (e) {
                    return showCreateModal(relation.relatedModule)
                }
            }
        }, [_v("\n                    " + _s(translate("LBL_CREATE") + " " + translate(relation.relatedModule, relation.relatedModule)) + "\n                ")]), _v(" "), "Documents" == relation.relatedModule ? _c("button", {
            staticClass: "btn btn-outline-secondary",
            attrs: {type: "button", disabled: !relation.isCreatePermitted, postQuickCreateSave: "postSave"},
            on: {
                click: function (e) {
                    return uploadDocument(relation.relatedModule)
                }
            }
        }, [_v("\n                    " + _s(translate("LBL_UPLOAD") + " " + translate(relation.relatedModule, relation.relatedModule)) + "\n                ")]) : _e()])])
    }
});
var Vtiger_Component_AnalyticsAddWidget = App.vtComponent.extend({
    components: {"vds-filter-condition-row": App.loadComponent("FilterConditionRow")},
    mixins: [Vtiger_Mixin_Filter],
    props: {widgetDetails: Object, relatedModules: Array, currentModule: String},
    data() {
        return {
            module: !1,
            selectedModuleModel: !1,
            allWidgetTypes: [{value: "chart", label: this.translate("LBL_CHART_WIDGET")}, {
                value: "list",
                label: this.translate("LBL_RELATED_LIST")
            }, {value: "key_metrics", label: this.translate("LBL_KEY_METRICS")}],
            chartTypes: [{value: "pie", label: this.translate("LBL_PIE")}, {
                value: "donut",
                label: this.translate("LBL_DONUT_CHART")
            }, {value: "bar", label: this.translate("LBL_VERTICAL_BAR_CHART", "Reports")}, {
                value: "horizontal",
                label: this.translate("LBL_HORIZONTAL_BAR_CHART", "Reports")
            }, {value: "line", label: this.translate("LBL_LINE_CHART", "Reports")}],
            availableListFields: [],
            availableGroupByFields: {},
            availableDataFields: [],
            widgetData: {
                widgetid: "",
                name: "",
                relation_id: "",
                type: "",
                charttype: "",
                list_fields: [],
                group_by_field: "",
                data_field: [],
                key_metrics_data_field: "",
                advance_filter_conditions: {1: {columns: [], condition: "and"}, 2: {columns: [], condition: ""}}
            },
            widgetDataLoaded: !1,
            isEditing: !!(this.widgetDetails && "object" == typeof this.widgetDetails && Object.keys(this.widgetDetails).length > 0),
            widgetTypes: []
        }
    },
    computed: {
        $_currentModuleModel() {
            return this.selectedModuleModel
        }, keyMetricsGroupByFields() {
            let t = this.selectedModuleModel.fields, e = [];
            for (let a in t) t[a].type && t[a].viewable && (["picklist", "metricpicklist"].includes(t[a].type.name) || ["owner", "ownergroup"].includes(t[a].type.name) && 2 != t[a].generatedtype) && e.push({
                value: t[a].fieldname,
                label: this.translate(t[a].fieldlabel, this.module)
            });
            return e
        }
    },
    watch: {
        "widgetData.type"(t, e) {
            "chart" == t ? "chart" !== this.widgetData.type || this.widgetData.charttype || (this.widgetData.charttype = "pie") : delete this.widgetData.charttype
        }, "widgetData.relation_id"() {
            if (this.widgetData.relation_id) {
                for (var t in this.relatedModules) this.relatedModules[t].value === this.widgetData.relation_id && (this.module = this.relatedModules[t].module);
                this.setWidgetTypes(), this.isEditing || (Vue.set(this.widgetData, "list_fields", []), Vue.set(this.widgetData, "group_by_field", ""), Vue.set(this.widgetData, "data_field", []), Vue.set(this.widgetData, "key_metrics_data_field", ""), Vue.set(this.widgetData, "advance_filter_conditions", {
                    1: {
                        columns: [],
                        condition: "and"
                    }, 2: {columns: [], condition: ""}
                })), this.initForModule()
            }
        }, "widgetData.charttype"() {
            ["pie", "donut"].includes(this.widgetData.charttype) && this.widgetData.data_field.length > 1 && this.widgetData.data_field.pop()
        }
    },
    mounted() {
        this.setWidgetTypes(), this.initWidgetData(), setTimeout(() => {
            jQuery('#AnalyticsWidgetAdd input[name="name"]').focus()
        }, 0)
    },
    $_veeValidate: {validator: "new"},
    methods: {
        initForModule() {
            this.module && (this._getModuleDescribe(this.module).then(t => {
                Vue.set(this, "selectedModuleModel", t)
            }), this.appStore.request("api_get", {
                url: "records/analytics/describe",
                params: {module: this.currentModule, related_module: this.module},
                key: "analytics_describe_" + this.module
            }).then(t => {
                if (t) {
                    this.availableListFields = [];
                    for (let e in t.list_fields) this.availableListFields.push({value: e, label: t.list_fields[e]});
                    this.availableGroupByFields = {};
                    for (let e in t.chart_group_fields) {
                        this.availableGroupByFields[e] = [];
                        for (let a in t.chart_group_fields[e]) this.availableGroupByFields[e].push({
                            value: a,
                            label: t.chart_group_fields[e][a]
                        })
                    }
                    this.availableDataFields = [];
                    for (let e in t.chart_data_fields) this.availableDataFields.push({
                        value: e,
                        label: t.chart_data_fields[e]
                    });
                    this.widgetDataLoaded = !0
                }
            }))
        }, initWidgetData() {
            if (this.widgetDetails && "object" == typeof this.widgetDetails) {
                let e = {
                    widgetid: this.widgetDetails.widgetid,
                    name: this.widgetDetails.name,
                    relation_id: _.isEmpty(this.widgetDetails.rel_module) ? this.widgetDetails.relation_id : this.widgetDetails.relation_id + "::" + this.widgetDetails.rel_module,
                    type: this.widgetDetails.type,
                    charttype: this.widgetDetails.charttype,
                    list_fields: this.widgetDetails.list_fields,
                    group_by_field: this.widgetDetails.groupByField,
                    data_field: this.widgetDetails.dataField,
                    key_metrics_data_field: this.widgetDetails.key_metrics_data_field,
                    advance_filter_conditions: this.widgetDetails.conditions
                };
                for (var t in _.isUndefined(this.widgetDetails.conditions[1].columns) && (e.advance_filter_conditions = {
                    1: {
                        columns: [],
                        condition: "and"
                    }, 2: {columns: [], condition: ""}
                }), Vue.set(this, "widgetData", e), this.relatedModules) this.relatedModules[t].value === this.widgetData.relation_id && (this.module = this.relatedModules[t].module);
                this.initForModule()
            }
        }, addNewCondition() {
            let t = this.widgetData.advance_filter_conditions[1].columns.length;
            if (t > 0) {
                let e = this.widgetData.advance_filter_conditions[1].columns[t - 1];
                e.column_condition = "and", Vue.set(this.widgetData.advance_filter_conditions[1].columns, t - 1, e)
            }
            Vue.set(this.widgetData.advance_filter_conditions[1].columns, t, {
                column_condition: "and",
                columnname: "",
                comparator: "",
                value: ""
            })
        }, removeCondition(t) {
            this.widgetData.advance_filter_conditions[1].columns.splice(t, 1)
        }, saveWidget() {
            this.$validator.validate().then(t => {
                if (t) {
                    let t = "api_post";
                    this.widgetData.widgetid && (t = "api_put");
                    let e = jQuery.extend(!0, {}, this.widgetData), a = e.relation_id;
                    if (a.toString().includes("::")) {
                        let t = a.split("::");
                        e.relation_id = t[0], e.rel_module = t[1]
                    }
                    if (e.advance_filter_conditions[1].columns) {
                        let t = e.advance_filter_conditions[1].columns.length;
                        t > 0 && (e.advance_filter_conditions[1].columns[t - 1].column_condition = "")
                    }
                    e.module = this.currentModule, e.id = this.$id ? this.$id : App.recordId(), this.appStore.request(t, {
                        url: "records/analytics",
                        params: e
                    }).then(t => {
                        t && (this.$root.$emit("bv::hide::modal", "AnalyticsWidgetAdd"), this.$emit("vds::analytics::widget::saved", t))
                    }, t => {
                        this.showErrorNotification(t)
                    })
                }
            })
        }, setWidgetTypes() {
            this.module && this.currentModule == this.module ? (this.widgetTypes = [{
                value: "list",
                label: this.translate("LBL_RELATED_LIST")
            }], this.widgetData.type && "list" != this.widgetData.type && (this.widgetData.type = "list")) : this.widgetTypes = this.allWidgetTypes
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "lg",
                "hide-footer": !0,
                id: "AnalyticsWidgetAdd",
                title: isEditing ? translate("LBL_EDIT", "Vtiger") + " " + translate("LBL_WIDGET", "Vtiger") : translate("LBL_ADD_WIDGET", "Vtiger"),
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-0"
            }
        }, [_c("div", {staticClass: "d-flex p-4 greyBlock"}, [relatedModules.length ? _c("div", {staticClass: "d-flex justify-content-start align-items-center pl-0 w-100"}, [_c("div", {staticClass: "w-25"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_WIDGET_NAME", "Settings:LayoutEditor")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-75"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: widgetData.name,
                expression: "widgetData.name"
            }, {name: "validate", rawName: "v-validate", value: "required", expression: "'required'"}],
            staticClass: "form-control",
            attrs: {name: "name", type: "text", placeholder: translate("LBL_ENTER_WIDGET_NAME")},
            domProps: {value: widgetData.name},
            on: {
                input: function (t) {
                    t.target.composing || $set(widgetData, "name", t.target.value)
                }
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("name"),
                expression: "errors.has('name')"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])])]) : _e()]), _v(" "), _c("div", {staticClass: "d-flex px-4 pb-4 greyBlock"}, [relatedModules.length ? _c("div", {staticClass: "d-flex justify-content-start align-items-center pl-0 w-100"}, [_c("div", {staticClass: "w-25"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_SELECTED_RELATED_MODULE", "Settings:LayoutEditor")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-75"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 1,
            attrs: {emptyOption: !0, options: relatedModules, name: "relation_id", disabled: isEditing},
            model: {
                value: widgetData.relation_id, callback: function (t) {
                    $set(widgetData, "relation_id", t)
                }, expression: "widgetData.relation_id"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("relation_id"),
                expression: "errors.has('relation_id')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])], 1)]) : _e()]), _v(" "), _c("div", {
            staticClass: "d-flex px-4 pb-4 greyBlock",
            class: {"border-bottom mb-4": widgetDataLoaded}
        }, [_c("div", {staticClass: "d-flex justify-content-start align-items-center pl-0 w-100"}, [_c("div", {staticClass: "w-25"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_SELECT_WIDGET_TYPE")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-75"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 2,
            attrs: {emptyOption: !0, options: widgetTypes, name: "type", disabled: isEditing},
            model: {
                value: widgetData.type, callback: function (t) {
                    $set(widgetData, "type", t)
                }, expression: "widgetData.type"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("type"),
                expression: "errors.has('type')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])], 1)])]), _v(" "), widgetData.type && widgetData.relation_id && !widgetDataLoaded ? _c("div", {staticClass: "d-flex justify-content-center align-items-center pb-4 pt-0"}, [_c("span", [_v(_s(translate("JS_LOADING_PLEASE_WAIT")))])]) : _e(), _v(" "), "chart" == widgetData.type && widgetData.relation_id && widgetDataLoaded ? _c("div", {staticClass: "d-flex px-4 pb-4"}, [_c("div", {
            staticClass: "btn-group w-100",
            attrs: {role: "group"}
        }, _l(chartTypes, (function (t, e) {
            return _c("button", {
                staticClass: "btn border shadow-none",
                class: [0 == e || e == chartTypes.length - 1 ? "rounded-1" : "rounded-0", widgetData.charttype === t.value ? "bg-primary text-white" : ""],
                attrs: {type: "button"},
                on: {
                    click: function (e) {
                        widgetData.charttype = t.value
                    }
                }
            }, [_v("\n\t\t\t\t\t\t" + _s(t.label) + "\n\t\t\t\t\t")])
        })), 0)]) : _e(), _v(" "), "chart" == widgetData.type && widgetData.relation_id && widgetDataLoaded ? _c("div", {staticClass: "d-flex px-4 pb-4"}, [_c("div", {staticClass: "w-50 pr-3"}, [_c("div", {staticClass: "d-flex justify-content-start align-items-center label mb-1"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_GROUP_BY")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small pl-1"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 3,
            attrs: {emptyOption: !0, multiple: !1, options: availableGroupByFields, name: "chart_group_by"},
            model: {
                value: widgetData.group_by_field, callback: function (t) {
                    $set(widgetData, "group_by_field", t)
                }, expression: "widgetData.group_by_field"
            }
        })], 1), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("chart_group_by"),
                expression: "errors.has('chart_group_by')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])])]), _v(" "), _c("div", {staticClass: "w-50 pl-3"}, [_c("div", {staticClass: "d-flex justify-content-start align-items-center label mb-1"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_DATA_FIELDS")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small pl-1"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "d-flex"}, [["pie", "donut"].includes(widgetData.charttype) ? [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 4,
            attrs: {
                emptyOption: !1,
                multiple: !0,
                options: availableDataFields,
                closeOnSelect: !0,
                maximumSelectionLength: 1,
                name: "data_field"
            },
            model: {
                value: widgetData.data_field, callback: function (t) {
                    $set(widgetData, "data_field", t)
                }, expression: "widgetData.data_field"
            }
        })] : [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 5,
            attrs: {
                emptyOption: !1,
                multiple: !0,
                options: availableDataFields,
                closeOnSelect: !0,
                maximumSelectionLength: 2,
                name: "data_field"
            },
            model: {
                value: widgetData.data_field, callback: function (t) {
                    $set(widgetData, "data_field", t)
                }, expression: "widgetData.data_field"
            }
        })]], 2), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("data_field"),
                expression: "errors.has('data_field')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])])])]) : _e(), _v(" "), "list" == widgetData.type && widgetData.relation_id && widgetDataLoaded ? _c("div", {staticClass: "d-flex px-4 pb-4"}, [_c("div", {staticClass: "w-100"}, [_c("div", {staticClass: "d-flex justify-content-start align-items-center label mb-1"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_SELECT_FIELDS", "Settings:LayoutEditor")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small pl-1"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 6,
            attrs: {
                emptyOption: !1,
                multiple: !0,
                options: availableListFields,
                maximumSelectionLength: 4,
                closeOnSelect: !0,
                name: "list_fields"
            },
            model: {
                value: widgetData.list_fields, callback: function (t) {
                    $set(widgetData, "list_fields", t)
                }, expression: "widgetData.list_fields"
            }
        })], 1), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("list_fields"),
                expression: "errors.has('list_fields')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])])])]) : _e(), _v(" "), "key_metrics" == widgetData.type && widgetData.relation_id && widgetDataLoaded ? _c("div", {staticClass: "d-flex px-4 pb-4"}, [_c("div", {staticClass: "w-100"}, [_c("div", {staticClass: "d-flex justify-content-start align-items-center label mb-1"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_GROUP_BY")) + "\n\t\t\t\t\t\t"), _c("span", {staticClass: "text-warning small pl-1"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required",
                expression: "'required'"
            }],
            key: 7,
            attrs: {emptyOption: !0, multiple: !1, options: keyMetricsGroupByFields, name: "metric_data_fields"},
            model: {
                value: widgetData.key_metrics_data_field, callback: function (t) {
                    $set(widgetData, "key_metrics_data_field", t)
                }, expression: "widgetData.key_metrics_data_field"
            }
        })], 1), _v(" "), _c("div", {staticClass: "d-flex"}, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("metric_data_fields"),
                expression: "errors.has('metric_data_fields')"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))])])])]) : _e(), _v(" "), widgetData.relation_id && widgetData.type && widgetDataLoaded ? _c("div", {staticClass: "d-flex px-4 pb-4"}, [_c("div", {staticClass: "w-100"}, [_c("div", {staticClass: "d-flex justify-content-start align-items-center label"}, [_v("\n\t\t\t\t\t\t" + _s(translate("LBL_CONDITIONS")) + "\n\t\t\t\t\t")]), _v(" "), Object.keys(getFilterEnabledModuleFields).length ? _c("div", {staticClass: "mt-2"}, [_c("div", _l(widgetData.advance_filter_conditions[1].columns, (function (t, e) {
            return _c("div", {staticClass: "p-3 border mb-3 position-relative"}, [_c("span", {
                staticClass: "position-absolute closeFilterColumns c-pointer",
                on: {
                    click: function (t) {
                        return removeCondition(e)
                    }
                }
            }, [_c("i", {staticClass: "fa fa-times-circle"})]), _v(" "), _c("vds-filter-condition-row", {
                attrs: {
                    condition: t,
                    "filter-enabled-fields": getFilterEnabledModuleFields
                }
            })], 1)
        })), 0), _v(" "), _c("button", {
            staticClass: "btn btn-block bg-grey-hue-0 border shadow-none",
            on: {
                click: function (t) {
                    return addNewCondition()
                }
            }
        }, [_v(_s(translate("LBL_ADD_CONDITION")))])]) : _e()])]) : _e(), _v(" "), _c("hr", {staticClass: "mt-0"}), _v(" "), _c("div", {staticClass: "d-flex justify-content-end pb-3 px-4"}, [_c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return saveWidget()
                }
            }
        }, [_v(_s(translate("LBL_SAVE")))])])])
    }
});
var Vtiger_Component_AnalyticsChartWidget = App.vtComponent.extend({
    components: {
        "vds-pie-chart": App.loadComponent("PieChart", "Dashboard"),
        "vds-column-chart": App.loadComponent("ColumnChart", "Dashboard"),
        "vds-horizontal-bar-chart": App.loadComponent("HorizontalBarChart", "Dashboard"),
        "vds-line-chart": App.loadComponent("LineChart", "Dashboard"),
        "vds-donut-chart": App.loadComponent("DonutChart", "Dashboard")
    },
    props: {widgetModule: String, widgetDetails: Object, widgetsHasData: Object},
    data: () => ({
        chartData: {},
        transformedChartData: {},
        customOptions: {},
        moduleModel: !1,
        dataLoaded: !1,
        allFilterId: !1
    }),
    computed: {
        chartComponent() {
            switch (this.widgetDetails.charttype) {
                case"pie":
                    return "vds-pie-chart";
                case"bar":
                    return "vds-column-chart";
                case"horizontal":
                    return "vds-horizontal-bar-chart";
                case"line":
                    return "vds-line-chart";
                case"donut":
                    return "vds-donut-chart"
            }
        }
    },
    mounted() {
        this.getAllFilterId(), this.initModuleModel(), this.getChartData()
    },
    methods: {
        initModuleModel() {
            this._getModuleDescribe(this.widgetModule).then(t => {
                this.moduleModel = t
            })
        }, getAllFilterId() {
            this.appStore.request("api_get", {
                url: "filters",
                params: {module: this.widgetModule, q: {allfilter: !0}}
            }).then(t => {
                t && (this.allFilterId = t.id)
            })
        }, getChartData() {
            this.appStore.request("api_get", {
                url: "records/analytics/data",
                params: {
                    module: this.$module ? this.$module : App.module(),
                    id: this.$id ? this.$id : App.recordId(),
                    widgetid: this.widgetDetails.widgetid
                }
            }).then(t => {
                if (this.dataLoaded = !0, t) {
                    this.chartData = t;
                    let a = jQuery.extend(!0, {}, this.widgetsHasData);
                    a[this.widgetDetails.widgetid] = !!Object.keys(t).length, this.$emit("update:widgetsHasData", a), this.transformChartData()
                }
            })
        }, transformChartData() {
            if (this.chartData.values && this.chartData.labels) switch (this.widgetDetails.charttype) {
                case"donut":
                case"pie":
                    this.transformPieChartData();
                    break;
                case"bar":
                case"horizontal":
                case"line":
                    this.transformOtherChartData()
            }
        }, transformPieChartData() {
            Vue.set(this.transformedChartData, "countColumn", "data_field"), Vue.set(this.transformedChartData, "labelColumn", "groupby_field");
            let t = [], a = [];
            for (let e in this.chartData.labels) {
                let r = {
                    groupby_field: this.chartData.labels[e],
                    data_field: this.chartData.values[e],
                    data_type: this.chartData.data_type[0]
                };
                this.chartData.q[e] && (r.search_params = this.chartData.q[e]), t.push(r), this.chartData.colors[e] && a.push(this.chartData.colors[e])
            }
            Vue.set(this.transformedChartData, "widgetData", t), this.customOptions = {
                chart: {
                    spacingTop: 0,
                    events: {
                        load: function () {
                        }
                    }
                }
            }, a.length > 0 && (this.customOptions.plotOptions.pie.colors = a)
        }, transformOtherChartData() {
            let t = {
                labels: this.chartData.labels,
                chartData: [],
                data_labels: this.chartData.data_labels,
                data_type: this.chartData.data_type,
                search_params: this.chartData.q
            };
            for (let a in this.chartData.data_labels) {
                t.chartData[a] = [];
                for (let e in this.chartData.values) this.chartData.colors && this.chartData.colors[e] && "line" !== this.widgetDetails.charttype ? t.chartData[a][e] = {
                    y: this.chartData.values[e][a],
                    color: this.chartData.colors[e]
                } : t.chartData[a][e] = this.chartData.values[e][a]
            }
            Vue.set(this.transformedChartData, "widgetData", t)
        }, print() {
            this.$refs.chart.printChart()
        }, saveAsImage() {
            this.$refs.chart.saveChart()
        }, reload() {
            this.dataLoaded = !1, this.chartData = {}, this.getChartData()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [Object.keys(chartData).length > 0 && moduleModel && allFilterId ? _c("div", {staticClass: "summaryWidgetChart"}, [transformedChartData.widgetData ? _c(chartComponent, {
            ref: "chart",
            tag: "component",
            attrs: {
                widgetData: transformedChartData.widgetData,
                moduleName: widgetModule,
                labelColumn: transformedChartData.labelColumn,
                countColumn: transformedChartData.countColumn,
                customChartOptions: customOptions,
                allFilterId: allFilterId
            }
        }) : _e()], 1) : _c("div", {
            staticClass: "d-flex justify-content-center align-items-center",
            staticStyle: {"min-height": "6rem"}
        }, [dataLoaded ? _c("span", [_v(_s(translate("LBL_NO_RELATED")) + " " + _s(translate(widgetModule, widgetModule)))]) : _c("span", [_v(_s(translate("JS_LOADING_PLEASE_WAIT")))])])])
    }
});
var Vtiger_Component_AnalyticsKeyMetricsWidget = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module], props: {widgetModule: String, widgetDetails: Object}, data() {
        return {
            data: {},
            dataFieldModel: !1,
            dataLoaded: !1,
            allFilterId: !1,
            relatedModuleListUrl: this.getListViewUrl(this.widgetModule) + "&viewtype=List"
        }
    }, mounted() {
        this.getAllFilterId(), this.initDataFieldModel(), this.getData()
    }, methods: {
        getAllFilterId() {
            this.appStore.request("api_get", {
                url: "filters",
                params: {module: this.widgetModule, q: {allfilter: !0}}
            }).then(t => {
                t && (this.allFilterId = t.id)
            })
        }, initDataFieldModel() {
            this._getModuleDescribe(this.widgetModule).then(t => {
                this.dataFieldModel = t.getField(this.widgetDetails.key_metrics_data_field)
            })
        }, getData() {
            this.appStore.request("api_get", {
                url: "records/analytics/data",
                params: {
                    module: this.$module ? this.$module : App.module(),
                    id: this.$id ? this.$id : App.recordId(),
                    widgetid: this.widgetDetails.widgetid
                }
            }).then(t => {
                this.dataLoaded = !0, t && (this.data = t)
            })
        }, loadRelatedRecords(t) {
            let e = this.relatedModuleListUrl + "&filterid=" + this.allFilterId + "&q=" + JSON.stringify(t);
            window.open(e, "_blank")
        }, reload() {
            this.dataLoaded = !1, this.dataFieldModel = !1, this.data = {}, this.initDataFieldModel(), this.getData()
        }
    }, render: function anonymous() {
        with (this) return _c("div", [Object.keys(data).length > 0 && dataFieldModel && allFilterId ? _c("div", {staticClass: "w-100 px-2 pb-2 pt-0"}, _l(data, (function (t, e) {
            return _c("div", {staticClass: "w-50 d-inline-flex"}, [_c("div", {
                staticClass: "m-2 w-100 border d-flex align-items-center rounded boxShadowLight bg-white px-3 py-2 c-pointer",
                on: {
                    click: function (e) {
                        return loadRelatedRecords(t.search_params)
                    }
                }
            }, [_c("div", {
                staticClass: "text-white rounded-circle",
                staticStyle: {"background-color": "#03A588", padding: ".3rem .4rem .2rem .4rem"}
            }, [_c("i", {
                staticClass: "h2",
                class: getModuleIconClass(widgetModule)
            })]), _v(" "), _c("div", {staticClass: "flex-grow-1 ml-2 textOverflowEllipsis"}, [_c("span", {staticClass: "h5"}, [_v(_s(t.value))]), _v(" "), "total" === e ? _c("span", {
                staticClass: "ml-1 text-muted",
                attrs: {title: translate("LBL_TOTAL")}
            }, [_v(_s(translate("LBL_TOTAL")))]) : _c("span", {
                staticClass: "ml-1 text-muted",
                attrs: {title: e}
            }, [_v(_s(e))])])])])
        })), 0) : _c("div", {
            staticClass: "d-flex justify-content-center align-items-center",
            staticStyle: {"min-height": "6rem"}
        }, [dataLoaded ? _c("span", [_v(_s(translate("LBL_NO_RELATED")) + " " + _s(translate(widgetModule, widgetModule)))]) : _c("span", [_v(_s(translate("JS_LOADING_PLEASE_WAIT")))])])])
    }
});
var Vtiger_Component_AnalyticsListWidget = App.vtComponent.extend({
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    props: {widgetModule: String, widgetDetails: Object},
    data: () => ({records: [], moreRecordExists: !1, listLimit: 5, moduleModel: !1, dataLoaded: !1}),
    mounted() {
        this.getRecords(), this.initModuleModel()
    },
    methods: {
        getRecords() {
            this.appStore.request("api_get", {
                url: "records/analytics/data",
                params: {
                    module: this.$module ? this.$module : App.module(),
                    id: this.$id ? this.$id : App.recordId(),
                    widgetid: this.widgetDetails.widgetid
                }
            }).then(t => {
                if (this.dataLoaded = !0, t && t.length) {
                    let e = t.length;
                    e > this.listLimit && (e = this.listLimit, this.moreRecordExists = !0);
                    for (let i = 0; i < e; i++) this.records.push(BaseModel.getModuleSpecificModel(this.widgetModule, "Record", t[i]))
                }
            })
        }, initModuleModel() {
            this._getModuleDescribe(this.widgetModule).then(t => {
                this.moduleModel = t
            })
        }, openRelatedRecord(t) {
            this.redirectUrl(t.detailViewURL)
        }, showMore() {
            this.$emit("vds::analytics::showmore::click")
        }, reload() {
            this.dataLoaded = !1, this.records = [], this.moreRecordExists = !1, this.getRecords()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [records.length > 0 && moduleModel ? _c("div", {staticClass: "px-3 pb-3 pt-1"}, [_c("div", {staticClass: "listViewTableContainer bg-white border rounded boxShadowLight"}, [_c("table", {
            staticClass: "summaryWidgetTable table w-100 m-0 border-bottom",
            staticStyle: {"table-layout": "fixed"}
        }, [_c("thead", [_c("tr", {staticClass: "text-dark"}, _l(widgetDetails.list_fields, (function (t) {
            return _c("th", [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate(moduleModel.getField(t).fieldlabel, widgetModule)) + "\n\t\t\t\t\t\t\t\t")])
        })), 0)]), _v(" "), _c("tbody", _l(records, (function (t) {
            return _c("tr", {
                staticClass: "c-pointer", on: {
                    click: function (e) {
                        return openRelatedRecord(t)
                    }
                }
            }, _l(widgetDetails.list_fields, (function (e) {
                return _c("td", {staticClass: "textOverflowEllipsis"}, [_c("vds-field-display", {
                    attrs: {
                        field: e,
                        record: t,
                        modulemodel: moduleModel,
                        view: "list",
                        title: t.getDisplayValue(e)
                    }
                })], 1)
            })), 0)
        })), 0)])]), _v(" "), moreRecordExists ? _c("div", {staticClass: "text-center mt-3"}, [_c("button", {
            staticClass: "btn btn-sm btn-outline-primary",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return showMore()
                }
            }
        }, [_v(_s(translate("JS_SHOW_MORE")))])]) : _e()]) : _c("div", {
            staticClass: "d-flex justify-content-center align-items-center",
            staticStyle: {"min-height": "6rem"}
        }, [dataLoaded ? _c("span", [_v(_s(translate("LBL_NO_RELATED")) + " " + _s(translate(widgetModule, widgetModule)))]) : _c("span", [_v(_s(translate("JS_LOADING_PLEASE_WAIT")))])])])
    }
});
var Vtiger_Component_AnalyticsRelatedListPrefixContent = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_LinkRecords = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "linkRecordsModal",
                size: "lg"
            }
        }, [_c("div", {
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("p", [_v(_s(translate("LBL_SELECT") + " " + relation.relatedModule))])]), _v(" "), _c("div", [_c("div", {staticClass: "row m-2 justify-content-between"}, [_c("div", [_v(_s(translate("LBL_RECENT_RECORDS")))]), _v(" "), _c("div", {staticClass: "form-inline has-search col-4"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: searchString,
                expression: "searchString"
            }],
            staticClass: "form-control",
            attrs: {type: "text", placeholder: translate("LBL_TYPE_SEARCH")},
            domProps: {value: searchString},
            on: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : getRecords()
                }, input: function (e) {
                    e.target.composing || (searchString = e.target.value)
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "row"}, [_c(getRelatedRecordLinkComponent(), {
            tag: "component",
            attrs: {records: records, selectedRecords: selectedRecords, moduleName: relation.relatedModule},
            on: {"record-select": toggleRecordSelection}
        }), _v(" "), 0 == records.length ? _c("span", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))]) : _e()], 1)]), _v(" "), _c("div", {
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-primary", attrs: {slot: "modal-ok"}, on: {
                click: function (e) {
                    return attachRecords(selectedRecords)
                }
            }, slot: "modal-ok"
        }, [_v(_s(translate("LBL_ATTACH_FILES")))])])])
    },
    props: {relation: {default: BaseModel.getModuleSpecificModel(this.$module, "Relation", {})}},
    data: () => ({records: [], searchString: "", selectedRecords: []}),
    created() {
        this.getRecords()
    },
    methods: {
        toggleRecordSelection(e) {
            let t = this.selectedRecords.indexOf(e.getId());
            -1 == t ? this.selectedRecords.push(e.getId()) : this.selectedRecords.splice(t, 1)
        }, attachRecords(e) {
            e.length && this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.relation.relatedModule,
                    related_record_id: e
                }
            }).then(e => {
                _.isUndefined(e) || !0 !== e[0] || (this.$root.$emit("bv::hide::modal", "linkRecordsModal"), this.$root.$emit("bv::hide::modal", "addAttachmentsModal"), this.$root.$emit("vds::widgets::refresh"))
            })
        }, getListParams() {
            return {module: this.relation.relatedModule, text: this.searchString}
        }, getRecords(e = !1) {
            let t = this.getListParams();
            this.appStore.request("api_get", {
                url: "/records",
                params: t,
                key: "get_document_records_" + e,
                abortPrev: e
            }).then(e => this.records = e.map(e => BaseModel.getModuleSpecificModel(this.relation.relatedModule, "Record", e)))
        }, getLabelFields() {
            return this.relation.relatedModuleModel.getLabelFields()
        }, getRelatedRecordLinkComponent() {
            return App.getDynamicComponentInstance("LinkRecordItems", this.relation.relatedModule)
        }
    }
});
var Vtiger_Component_CreateRelatedDocument = Vtiger_Component_CreateRelated.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_Validators, Vtiger_Mixins_ShowModal],
    components: {
        "vds-record-quick-create": App.loadComponent("RecordQuickCreate"),
        "vds-link-drive-documents": App.loadComponent("LinkDriveDocuments")
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "createRecordModal",
            attrs: {
                id: "createRecordModal",
                lazy: !0,
                size: "lg",
                "hide-footer": "",
                "no-enforce-focus": !0,
                title: translate("LBL_LINK_EXTERNAL_DOCUMENT", "Documents"),
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-0"
            },
            on: {
                hide: function (e) {
                    return dismissModalConfirmation(e)
                }
            }
        }, [_c("div", {staticClass: "px-4 pt-4"}, [showUploadByDefault ? _e() : _c("div", {staticClass: "mb-2"}, [_c("div", {staticClass: "d-flex flex-column mb-2"}, [_c("div", {staticClass: "mb-2"}, [_v(_s(translate("LBL_ATTACH_FILES", "Documents")) + " " + _s(translate("LBL_FROM")))]), _v(" "), _c("div", {staticClass: "mb-2"}, [_c("v-select2", {
            staticStyle: {"max-width": "360px"},
            attrs: {emptyOption: !1, options: linkOptions},
            on: {change: getLinkDocumentsModal},
            model: {
                value: fromType, callback: function (e) {
                    fromType = e
                }, expression: "fromType"
            }
        })], 1)]), _v(" "), "Drive" == driveModule || "Dropbox" == driveModule ? _c("vds-link-drive-documents", {
            attrs: {
                relation: relation,
                moduleName: driveModule,
                title: title,
                type: type
            }
        }) : _e(), _v(" "), driveModule ? _e() : _c("vds-record-quick-create", {
            attrs: {
                module: moduleName,
                record: recordModel,
                createViewFields: moduleQuickCreateFields
            }
        })], 1), _v(" "), driveModule ? _e() : _c("div", {
            staticClass: "d-flex justify-content-end my-1 my-3",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-success", class: {disabled: recordSaving}, on: {
                click: function (e) {
                    return createRecord()
                }
            }
        }, [_v(_s(translate("LBL_SAVE")))])])])])
    },
    props: {
        moduleName: String,
        moduleModel: Object,
        recordLink: {type: Boolean, default: !0},
        showUploadByDefault: {defalut: !1},
        type: {type: String}
    },
    data() {
        return {
            uploadDocument: !1,
            fileObject: null,
            recordModel: BaseModel.getModuleSpecificModel(this.module, "Record", {}),
            relatedModuleModel: BaseModel.getModuleSpecificModel(this.moduleName, "Module", {}),
            linkOptions: [{
                label: this.translate("LBL_FILE_URL", "Documents"),
                value: "fileurl"
            }, {
                label: this.translate("LBL_GOOGLE_DRIVE_FOLDERS", "Documents"),
                value: "drive"
            }, {label: this.translate("LBL_DROPBOX", "Documents"), value: "dropbox"}],
            driveModule: "",
            fromType: "",
            title: "",
            showDiscardOption: !1,
            displayedOnce: !1
        }
    },
    mounted() {
        setTimeout(() => {
            this.$watch("recordModel", (e, t) => {
                this.showDiscardOption = !0
            }, {deep: !0})
        }, 300)
    },
    computed: {
        moduleQuickCreateFields() {
            let e = this.relatedModuleModel.getQuickCreateFields();
            _.isEmpty(e) && (e = this.relatedModuleModel.getMandatoryFields()), "fileurl" != this.fromType && e.hasOwnProperty("filename") && delete e.filename, e.hasOwnProperty("notecontent") && delete e.notecontent;
            let t = [];
            if (Object.keys(e).length && (t = Object.values(e).map(e => BaseModel.getModuleSpecificModel(this.moduleName, "Field", e))), "fileurl" == this.fromType) for (index in t) "filename" == t[index].columnname && (t[index].fieldlabel = this.translate("LBL_FILE_URL", "Documents"), t[index].type = {
                name: "string",
                length: "255"
            }, t[index].mandatory = !0);
            return t
        }
    },
    created() {
        this.setFieldDefaultValues("Documents", this.recordModel), _.isUndefined(this.moduleModel) || _.isEmpty(this.moduleModel.fields) ? this._getModuleDescribe(this.moduleName).then(e => {
            this.relatedModuleModel = e
        }) : this.relatedModuleModel = this.moduleModel
    },
    methods: {
        createRecord() {
            this.recordSaving = !0, this.recordModel.filestatus = 1, this.recordModel.filelocationtype = "fileurl" == this.fromType ? "E" : "I", null !== this.fileObject && (this.recordModel._files = this.fileObject), this.$validator.validate().then(e => {
                e && this.saveRecord(this.recordModel, this.relatedModuleModel).then(e => {
                    this.$bubble("vds::related::document::created", e), this.$root.$emit("vds::list::reload", !0), this.$bubble("vds::list::reload", {reloadCount: !0}), this.recordLink || "fileurl" != this.fromType ? this.recordLink || "application/pdf" != e.filetype || "Public" != e.document_type ? this.type && "create" != this.type && (this.recordSaving = !1, this.$root.$emit("bv::hide::modal", "createRecordModal"), this.showErrorNotification(this.translate("JS_FILE_NOT_SUPPORTED_FOR_SHARING"))) : this.$root.$emit("bv::hide::modal", "createRecordModal") : (this.$root.$emit("bv::hide::modal", "createRecordModal"), this.showSuccessNotification(this.translate("JS_DOCUMENT_CREATED"))), e && this.recordLink && ("Documents" == this.moduleName ? ("create" != this.type && this.linkRecord(e.id), this.showSuccessNotification(this.translate("JS_DOCUMENT_CREATED")), this.$root.$emit("bv::hide::modal", "createRecordModal")) : this.appStore.request("api_post", {
                        url: "records",
                        params: {module: "Documents", relatedto: e.id}
                    }).then(e => {
                        "create" != this.type && this.linkRecord(e.id), this.showSuccessNotification(this.translate("JS_DOCUMENT_CREATED")), this.$root.$emit("bv::hide::modal", "createRecordModal")
                    }))
                })
            })
        }, getLinkDocumentsModal(e) {
            "fileurl" == e && (this.driveModule = "", this.uploadDocument = !1), "drive" == e && (this.title = this.translate("LBL_GOOGLE_DRIVE_FOLDERS", "Documents"), this.driveModule = "Drive"), "dropbox" == e && (this.title = this.translate("LBL_DROPBOX_FOLDERS", "Documents"), this.driveModule = "Dropbox"), "computer" == e && (this.driveModule = "", this.uploadDocument = !0)
        }, dismissModalConfirmation(e) {
            if (!this.showDiscardOption || this.displayedOnce || this.recordSaving) this.$root.$emit("bv::hide::modal", "quickCreate"); else {
                e.preventDefault();
                this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        message: this.translate("JS_CHANGES_MAY_BE_LOST") + "  " + this.translate("JS_WISH_TO_PROCEED"),
                        onConfirm: e => {
                            this.displayedOnce = !0, this.$refs.createRecordModal.hide()
                        }
                    },
                    modalOnModalMode: !1
                })
            }
        }
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_DetailAccountsRelatedRecord = Vtiger_Component_DetailContactsRelatedRecord.extend({
    data: () => ({
        customRelationFields: [],
        editableHeaders: []
    }), computed: {
        relatedViews() {
            return [{
                name: "keyFields",
                icon: "keyfield",
                header: this.translate("LBL_KEY_FIELDS"),
                component: App.getDynamicComponentInstance("RecordKeyFields")
            }]
        }
    }
});
var Vtiger_Component_DetailAddOrCreateAction = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module, Vtiger_Mixin_RelationUtils],
    props: {relations: {type: Object, default: null}},
    data: () => ({
        attachmentModules: ["Documents", "Quotes"],
        relatedModules: {},
        activeRelation: {},
        salesOpsLoaded: !1,
        moduleSpecificRelationModules: [],
        ignoredModules: ["Emails", "Webchat"],
        relationsLoaded: !1
    }),
    computed: {
        relationsCount() {
            let e = 0, t = this.creatableRelations;
            return t && (e = Object.keys(t.Attachment).length + Object.keys(t.Others).length), e
        }, creatableRelations() {
            let e = this.moduleSpecificRelationModules.slice(0), t = this.relatedModules.relations,
                l = {Attachment: {}, Others: {}};
            if (this.relatedModules.isLoaded && this.salesOpsLoaded) {
                for (let o in t) {
                    let d = t[o];
                    this.ignoredModules.includes(d.relatedModuleName) || (d.set("icon", this.getModuleIconClass(d.relatedModuleName)), d.set("label", this.translate(d.label, d.relatedModuleName)), (d.isCreatePermitted || d.isSelectPermitted || d.relatedModuleModel.isCreateable && e.includes(d.relatedModuleName)) && d.isDisplayable && (this.attachmentModules.includes(d.relatedModuleName) ? l.Attachment[o] = d : ["Calendar", "Events", "Tasks", "PhoneCalls"].includes(d.relatedModuleName) || (l.Others[o] = d), delete e[e.indexOf(d.relatedModuleName)]))
                }
                if (e.length) {
                    let t = AppStorage.get("app_module_permissions");
                    for (var o in e) {
                        let d = e[o];
                        t[d] && t[d].creatable && (l.Others[d + "_Relation"] = {
                            label: this.translate(d, d),
                            relatedModuleName: d,
                            icon: this.getModuleIconClass(d)
                        })
                    }
                }
            }
            return l
        }
    },
    mounted() {
        this.getAllRelatedModules(), this.getSalesOpsModules()
    },
    methods: {
        setRelation(e) {
            this.activeRelation = e
        },
        getAllRelatedModules() {
            null != this.relations && this.relations.isLoaded ? (this.relatedModules = this.relations, this.fillRelationModuleModels(this.relatedModules.relations).then(e => this.relationsLoaded = !0)) : this.retrieveRelationModels(this.$module).then(e => {
                this.relatedModules = BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {
                    module: this.$module,
                    relations: e
                }), this.fillRelationModuleModels(this.relatedModules.relations).then(e => this.relationsLoaded = !0)
            })
        },
        getSalesOpsModules() {
            this.appStore.request("api_get", {
                url: "/apps/modules",
                key: "apps",
                cache: !0,
                nonamespace: !0
            }).then(e => {
                this.attachmentModules = this.attachmentModules.concat(e["SALES OPS"]), this.salesOpsLoaded = !0
            })
        },
        isQuickCreateSupported: e => BaseModel.getModuleSpecificModel(e, "Module").get("isQuickCreateSupported"),
        addRelatedModuleRecord(e) {
            this.getLookupParams(this.$_detailRecordModel, e), this._getModuleDescribe(e.relatedModuleName).then(t => {
                if (e.isSelectPermitted && e.isCreatePermitted && !this.moduleSpecificRelationModules.includes(e.relatedModule)) this.showModal({
                    componentName: "AddOrCreateModal",
                    componentData: {relation: e, record: this.$_detailRecordModel, relatedModuleModel: t},
                    modalOnModalMode: !0
                }), this.$root.$once("vds::widgets::refresh", () => this.$root.$emit("bv::hide::modal", "startActivity")), this.$once("vds::popup:record::selected", t => {
                    this.link(t, e), this.$emit("close-add-or-create-action-modal"), this.$root.$emit("vds-related-record-added", e)
                }), this.$once("vds::related::document::created", t => {
                    this.$emit("close-add-or-create-action-modal"), this.$root.$emit("vds-related-record-added", e)
                }); else if (e.isSelectPermitted && !this.moduleSpecificRelationModules.includes(e.relatedModule)) this.showPopupReferenceList(e); else if (t.isQuickCreateSupported && !t.isInventoryModule) {
                    let l = "QuickCreateRelatedModal";
                    componentData = {
                        module: e.module,
                        relatedModule: "Calendar" == e.relatedModule ? "Tasks" : e.relatedModule,
                        record: this.$_detailRecordModel,
                        relatedAction: !0,
                        postQuickCreateSave: () => {
                            this.$root.$emit("vds::widgets::refresh", e.relatedModule), this.$emit("close-add-or-create-action-modal"), this.$root.$emit("vds-related-record-added", e)
                        }
                    }, "Documents" == t.name && (l = "CreateRelatedDocument", componentData.moduleName = e.relatedModule, componentData.moduleModel = t, componentData.relation = e), this.showModal({
                        componentName: l,
                        componentData: componentData,
                        modalOnModalMode: !1
                    }), this.$root.$emit("bv::hide::modal", "startActivity")
                } else this.redirectUrl("view/edit?module=" + t.name + "&related_to=" + this.$_detailRecordModel.id + "&related_module=" + this.$_detailRecordModel.moduleName + "&return=true", {}, !1, !0)
            })
        },
        showPopupReferenceList(e) {
            this.showModal({
                componentName: "PopupReferenceList",
                componentData: {module: e.relatedModule, multiple: !0, parentModule: this.$module}
            }), this.$once("vds::popup:record::selected", t => {
                this.link(t, e), this.$emit("close-add-or-create-action-modal"), this.$root.$emit("vds-related-record-added", e)
            })
        },
        link(e, t) {
            var l = e.map((function (e) {
                return _.isObject(e) ? e.getId() : e
            }));
            l && 0 == l.length || this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relation_id: t.relation_id,
                    related_module: t.relatedModule,
                    related_record_id: l
                }
            }).then(e => {
                "true" == e && (this.$root.$emit("vds::widgets::refresh", t.relatedModule), this.$root.$emit("bv::hide::modal", "startActivity"))
            })
        },
        getRelationLabel: e => e
    },
    render: function anonymous() {
        with (this) return _c("div", [relationsLoaded ? relationsLoaded && !relationsCount ? _c("div", [_v("\n                " + _s(translate("No relations exist")) + "\n            ")]) : _c("div", _l(creatableRelations, (function (e, t) {
            return Object.keys(e).length ? _c("div", {staticClass: "my-4 align-items-center d-flex"}, [_c("div", [_c("div", {staticClass: "label mb-3"}, [_v(_s(getRelationLabel(t)))]), _v(" "), _c("vds-wizardtiles-rectangle", {
                attrs: {actions: e},
                on: {"vds::wizardtilerectangle::select": addRelatedModuleRecord}
            })], 1)]) : _e()
        })), 0) : _c("div", [_v("\n                " + _s(translate("LBL_LOADING")) + ", " + _s(translate("JS_PLEASE_WAIT")) + "\n            ")])])
    }
});
var Vtiger_Component_DetailAnalyticsRelatedList = App.vtComponent.extend({
    components: {
        "vds-analytics-chart-widget": App.loadComponent("AnalyticsChartWidget"),
        "vds-analytics-list-widget": App.loadComponent("AnalyticsListWidget"),
        "vds-analytics-key-metrics-widget": App.loadComponent("AnalyticsKeyMetricsWidget"),
        "vds-analytics-related-list-prefix-content": App.loadComponent("AnalyticsRelatedListPrefixContent")
    },
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal],
    props: {activeRelationId: {type: [String, Number, Boolean], default: !1}},
    data: () => ({widgets: [], activeWidget: !1, relatedModules: [], maxAllowedWidgets: 100, widgetsHasData: {}}),
    computed: {
        isAdmin() {
            return !(!this.$currentUser || "on" !== this.$currentUser.is_admin)
        }
    },
    mounted() {
        this.setDummyWidgets(), this.getRelatedModules(), this.getEditionWidgetLimits(), this.init()
    },
    methods: {
        setDummyWidgets() {
            for (let t = 0; t < 3; t++) this.widgets.push({})
        }, getRelatedModules() {
            this.appStore.request("api_get", {
                url: "modules",
                params: {onlyentity: 1, onlyenabled: 1},
                key: "_entitymodules",
                nonamespace: !0,
                cache: !0
            }).then(t => {
                this.appStore.request("api_get", {
                    url: "relations",
                    params: {module: this.$module},
                    key: "relations"
                }).then(e => {
                    let i = [], s = ["ModComments", "ModTracker", "Emails", "EmailCampaigns", "EventForms"];
                    for (var a in e) s.includes(e[a].modulename) || (t.includes(e[a].modulename) ? i.push({
                        value: e[a].relation_id,
                        label: this.translate(e[a].label, e[a].modulename),
                        module: e[a].modulename
                    }) : "Calendar" === e[a].modulename && (i.push({
                        value: e[a].relation_id + "::Tasks",
                        label: this.translate("LBL_TASKS", "Calendar"),
                        module: "Tasks"
                    }), i.push({
                        value: e[a].relation_id + "::Events",
                        label: this.translate("Events", "Events"),
                        module: "Events"
                    })));
                    this.relatedModules = i
                })
            })
        }, init() {
            this.appStore.request("api_get", {
                url: "records/analytics",
                params: {module: this.$module ? this.$module : App.module(), id: this.$id ? this.$id : App.recordId()}
            }).then(t => {
                this.widgets = [], t && t.length && (this.widgets = t)
            })
        }, deleteWidget(t) {
            this.showConfirmationBox({message: this.translate("JS_ARE_YOU_SURE_TO_DELETE_WIDGET", "Vtiger", this.widgets[t].name)}).then(() => {
                this.appStore.request("api_delete", {
                    url: "records/analytics",
                    params: {widgetid: this.widgets[t].widgetid, module: this.$module ? this.$module : App.module()}
                }).then(e => {
                    e && Vue.delete(this.widgets, t)
                }, t => {
                    this.showErrorNotification(t)
                })
            }, () => {
            })
        }, updateWidget(t) {
            let e = !1;
            for (let i in this.widgets) if (this.widgets[i].widgetid == t.widgetid) return e = !0, this.$refs["widget" + t.widgetid][0].reload(), void Vue.set(this.widgets, i, t);
            e || this.widgets.push(t)
        }, getWidgetComponent(t) {
            switch (t.type) {
                case"chart":
                    return "vds-analytics-chart-widget";
                case"list":
                    return "vds-analytics-list-widget";
                case"key_metrics":
                    return "vds-analytics-key-metrics-widget"
            }
        }, getWidgetModuleName(t) {
            if (t.rel_module) return t.rel_module;
            for (let e in this.relatedModules) if (this.relatedModules[e].value == t.relation_id) return this.relatedModules[e].module
        }, openRelatedTab(t) {
            this.$emit("update:activeRelationId", t)
        }, refreshWidget(t) {
            this.$refs["widget" + t.widgetid][0].reload()
        }, printChart(t) {
            this.$refs["widget" + t.widgetid][0].print()
        }, saveChartImage(t) {
            this.$refs["widget" + t.widgetid][0].saveAsImage()
        }, getEditionWidgetLimits() {
            let t = "SUMMARY_WIDGET_CUSTOM_LIMIT", e = AppStorage.get("edition_limits");
            e && e.hasOwnProperty(t) ? this.maxAllowedWidgets = e[t] : this.appStore.request("api_get", {
                url: "editionlimit",
                params: {module: "Ondemand", name: t, rule: "THRESHOLD"},
                key: "summary_widget_limit"
            }).then(i => {
                this.maxAllowedWidgets = i, null == e && (e = {}), e[t] = i, AppStorage.set("edition_limits", e)
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "py-3"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "flex-grow-1"}, [_c("h5", {staticClass: "mb-0"}, [_v(_s(translate("LBL_ANALYTICS")))])]), _v(" "), isAdmin && !$_detailRecordModel.isClosed ? _c("div", [widgets.length < maxAllowedWidgets ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.AnalyticsAddWidget",
                value: {relatedModules: relatedModules, currentModule: $module},
                expression: "{relatedModules : relatedModules,currentModule : $module}",
                modifiers: {AnalyticsAddWidget: !0}
            }],
            staticClass: "btn btn-light btn-lg p-0",
            attrs: {title: translate("LBL_ADD_WIDGET")},
            on: {
                "vds::analytics::widget::saved": function (t) {
                    return updateWidget(t)
                }
            }
        }, [_c("i", {staticClass: "fa fa-plus-circle"})]) : _e()]) : _e()]), _v(" "), _c("vds-analytics-related-list-prefix-content"), _v(" "), widgets.length ? _c("div", {staticClass: "mt-2"}, _l(widgets, (function (t, e) {
            return _c("div", {
                staticClass: "mb-3 w-100 border bg-grey-hue-0 rounded", on: {
                    mouseover: function (t) {
                        activeWidget = e
                    }, mouseout: function (t) {
                        activeWidget = !1
                    }
                }
            }, [_c("div", {staticClass: "d-flex align-items-center pt-2 pl-3 pr-1 pb-0"}, [_c("div", {staticClass: "flex-grow-1"}, [_c("h5", {staticClass: "mb-0"}, [_c("span", {staticClass: "align-top"}, [_v(_s(t.name))])])]), _v(" "), _c("div", {
                directives: [{
                    name: "visible",
                    rawName: "v-visible",
                    value: activeWidget === e,
                    expression: "activeWidget === index"
                }]
            }, [_c("b-dropdown", {
                attrs: {
                    "no-caret": !0,
                    variant: "link",
                    right: "",
                    title: translate("LBL_MORE")
                }
            }, [_c("i", {
                staticClass: "fa fa-ellipsis-v baseFontColor",
                attrs: {slot: "button-content"},
                slot: "button-content"
            }), _v(" "), isAdmin ? _c("b-dropdown-item", {
                staticClass: "px-3",
                attrs: {href: "javascript:void(0)"}
            }, [_c("div", {
                directives: [{
                    name: "show-modal",
                    rawName: "v-show-modal.AnalyticsAddWidget",
                    value: {widgetDetails: t, relatedModules: relatedModules, currentModule: $module},
                    expression: "{widgetDetails : widget, relatedModules : relatedModules,currentModule : $module}",
                    modifiers: {AnalyticsAddWidget: !0}
                }], on: {
                    "vds::analytics::widget::saved": function (t) {
                        return updateWidget(t)
                    }
                }
            }, [_c("i", {staticClass: "fa fa-pencil-alt mr-2"}), _v(_s(translate("LBL_EDIT")) + "\n\t\t\t\t\t\t\t\t\t")])]) : _e(), _v(" "), isAdmin ? _c("b-dropdown-item", {staticClass: "px-3"}, [_c("div", {
                on: {
                    click: function (t) {
                        return deleteWidget(e)
                    }
                }
            }, [_c("i", {staticClass: "fa fa-trash-alt mr-2"}), _v(_s(translate("LBL_DELETE")) + "\n\t\t\t\t\t\t\t\t\t")])]) : _e(), _v(" "), "chart" === t.type && widgetsHasData[t.widgetid] ? _c("b-dropdown-item", {staticClass: "px-3"}, [_c("div", {
                on: {
                    click: function (e) {
                        return printChart(t)
                    }
                }
            }, [_c("i", {staticClass: "fas fa-print mr-2"}), _v(_s(translate("LBL_PRINT")) + "\n\t\t\t\t\t\t\t\t\t")])]) : _e(), _v(" "), "chart" === t.type && widgetsHasData[t.widgetid] ? _c("b-dropdown-item", {staticClass: "px-3"}, [_c("div", {
                on: {
                    click: function (e) {
                        return saveChartImage(t)
                    }
                }
            }, [_c("i", {staticClass: "fas fa-image mr-2"}), _v(_s(translate("JS_SAVE_AS_IMAGE")) + "\n\t\t\t\t\t\t\t\t\t")])]) : _e(), _v(" "), _c("b-dropdown-item", {staticClass: "px-3"}, [_c("div", {
                on: {
                    click: function (e) {
                        return refreshWidget(t)
                    }
                }
            }, [_c("i", {staticClass: "fas fa-sync mr-2"}), _v(_s(translate("LBL_REFRESH")) + "\n\t\t\t\t\t\t\t\t\t")])])], 1)], 1)]), _v(" "), _c("div", [t.type && relatedModules.length ? _c(getWidgetComponent(t), {
                ref: "widget" + t.widgetid,
                refInFor: !0,
                tag: "component",
                attrs: {widgetModule: getWidgetModuleName(t), widgetDetails: t, widgetsHasData: widgetsHasData},
                on: {
                    "update:widgetsHasData": function (t) {
                        widgetsHasData = t
                    }, "update:widgets-has-data": function (t) {
                        widgetsHasData = t
                    }, "vds::analytics::showmore::click": function (e) {
                        return openRelatedTab(t.relation_id)
                    }
                }
            }) : _c("div", {
                staticClass: "d-flex justify-content-center align-items-center",
                staticStyle: {"min-height": "6rem"}
            }, [_v("\n\t\t\t\t\t\t\t" + _s(translate("JS_LOADING_PLEASE_WAIT")) + "\n\t\t\t\t\t\t")])], 1)])
        })), 0) : _c("div", {staticStyle: {"margin-top": "32%"}}, [_c("div", {staticClass: "d-flex justify-content-center align-items-center mb-2"}, [_v(_s(translate("LBL_ANALYTICS_NO_WIDGETS_INFO")))]), _v(" "), _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [isAdmin ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.AnalyticsAddWidget",
                value: {relatedModules: relatedModules, currentModule: $module},
                expression: "{relatedModules : relatedModules,currentModule : $module}",
                modifiers: {AnalyticsAddWidget: !0}
            }],
            staticClass: "btn btn-primary",
            attrs: {type: "button"},
            on: {
                "vds::analytics::widget::saved": function (t) {
                    return updateWidget(t)
                }
            }
        }, [_v("\n\t\t\t\t\t\t" + _s(translate("JS_CREATE")) + "\n\t\t\t\t\t")]) : _e()])])], 1)
    }
});
var Vtiger_Component_DetailApprovalBanner = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    props: {detailRecord: {type: [Object, Array], required: !0}},
    data: () => ({
        record: {},
        actionsPermitted: !1,
        approveButtonClass: "btn-secondary",
        rejectButtonClass: "btn-secondary",
        approvals: {},
        submittedApproval: {}
    }),
    computed: {
        isApprovalRecord() {
            return "Approvals" == this.detailRecord._moduleName
        }, getLockedMessage() {
            return this.translate("LBL_RECORD_LOCKED", "Approvals", "").trim()
        }, getActionMessage() {
            let t = this.record._moduleName;
            (this.detailRecord && "Calendar" == this.detailRecord.related_module || this.record && "Calendar" == this.record.moduleName && "Task" == this.record.activitytype) && (t = "Calendar");
            let e = this.translate("SINGLE_" + t, t), s = this.isApprovalRecord ? "" : this.translate("LBL_THIS") + " ";
            return this.submittedApproval && this.submittedApproval.isActionsPermitted ? s + this.translate("LBL_NC_WAITING_FOR_APPROVAL", "Approvals", e) : s + this.translate("LBL_WAITING_FOR_APPROVAL", "Approvals", e)
        }, requesterNote() {
            var t = "", e = Object.values(this.approvals);
            return e.length && (t = e[0].requester_note), t.trim()
        }, isCancelApprovalAllowed() {
            let t = !1;
            if (this.isApprovalRecord) return !1;
            var e = Object.values(this.approvals);
            return e.length && (t = e[0].isCancelApprovalAllowed), t
        }
    },
    mounted() {
        if (this.record = this.detailRecord, this.isApprovalRecord) {
            let t = this.detailRecord.related_to;
            t.isRecordLocked = "Submitted" == this.detailRecord.approval_status, this.record = Vtiger_Record_Model.getCleanInstance(t.module, t)
        }
        this.record.isRecordLocked && this.getApprovals()
    },
    methods: {
        getApprovals() {
            var t = {module: "Approvals", related_to: this.record.id};
            this.appStore.request("api_get", {url: "currentapprovals", params: t}).then(t => {
                var e = {};
                if (t) for (var s in t) {
                    var a = t[s];
                    e[a.approvalsid] = Vtiger_Record_Model.getCleanInstance("Approvals", jQuery.extend(!0, {}, a)), "Submitted" == a.approval_status && Vue.set(this, "submittedApproval", e[a.approvalsid])
                }
                Vue.set(this, "approvals", e)
            })
        }, showPopup(t) {
            this.showModal({
                componentName: App.loadComponent("ApproverActionPopup", "Approvals", !1),
                componentData: {record: this.submittedApproval, type: t},
                modalOnModalMode: !0
            })
        }, getBadge: t => ({Submitted: "badge-primary", Pending: "badge-warning", Approved: "badge-success"}[t])
    },
    render: function anonymous() {
        with (this) return record.isRecordLocked ? _c("div", {staticClass: "d-flex justify-content-center align-items-center closedAlert bg-light-yellow"}, [isApprovalRecord ? _e() : _c("span", {
            staticClass: "badge badge-pill text-white",
            staticStyle: {"background-color": "#f29538", "font-size": "0.8125rem"}
        }, [_c("strong", [_c("i", {staticClass: "fa fa-lock px-2"}), _v(_s(getLockedMessage))])]), _v(" "), [[_c("span", {staticClass: "mx-3"}, [_c("strong", [_v(_s(getActionMessage))])]), _v(" "), submittedApproval.isActionsPermitted ? _c("div", {staticClass: "d-flex"}, [_c("button", {
            staticClass: "btn btn-sm mr-2",
            class: approveButtonClass,
            on: {
                click: function (t) {
                    return showPopup("Approve")
                }, mouseout: function (t) {
                    approveButtonClass = "btn-secondary"
                }, mouseover: function (t) {
                    approveButtonClass = "btn-success"
                }
            }
        }, [_c("i", {staticClass: "fa-approve px-1 align-middle"}), _v("\n                                    " + _s(translate("Approve", "Approvals")) + "\n                                ")]), _v(" "), _c("button", {
            staticClass: "btn btn-sm ",
            class: rejectButtonClass,
            on: {
                click: function (t) {
                    return showPopup("Reject")
                }, mouseout: function (t) {
                    rejectButtonClass = "btn-secondary"
                }, mouseover: function (t) {
                    rejectButtonClass = "btn-danger"
                }
            }
        }, [_c("i", {staticClass: "fa-reject px-1 align-middle"}), _v("\n                                    " + _s(translate("Reject", "Approvals")) + "\n                                ")])]) : _e()], _v(" "), isCancelApprovalAllowed ? _c("div", {
            staticClass: "d-flex",
            class: submittedApproval.isActionsPermitted ? "ml-2" : ""
        }, [_c("button", {
            staticClass: "btn btn-sm btn-secondary", on: {
                click: function (t) {
                    return showPopup("Cancel Approvals")
                }
            }
        }, [_v("\n                                " + _s(translate("LBL_CANCEL_APPROVAL_REQUEST", "Approvals")) + "\n                            ")])]) : _e(), _v(" "), _c("button", {
            staticClass: "btn btn-link text-decoration-none text-dark",
            attrs: {type: "button", id: "approvalMatrix"},
            on: {
                click: function (t) {
                    t.stopPropagation()
                }
            }
        }, [_c("i", {staticClass: "fas fa-info-circle px-1"})]), _v(" "), _c("b-popover", {
            staticClass: "bg-grey-hue-7",
            attrs: {placement: "bottom", target: "approvalMatrix", triggers: "focus"}
        }, [_c("div", {staticClass: "d-flex flex-column p-2"}, [_c("div", {staticClass: "d-flex flex-column"}, [_c("div", [_c("h4", [_v(" " + _s(translate("Requester Note", "Approvals")) + " ")])]), _v(" "), _c("div", [requesterNote ? [_v(" " + _s(requesterNote) + " ")] : [_c("h6", {staticClass: "text-muted"}, [_v(" " + _s(translate("LBL_NONE")) + " ")])]], 2)]), _v(" "), _c("div", {staticClass: "card mt-2"}, [_c("div", {staticClass: "table-responsive"}, [_c("table", {staticClass: "table border rounded m-0"}, [_c("thead", {staticClass: "bg-grey-hue-7"}, [_c("tr", [_c("th", {staticClass: "text-left"}, [_v("#" + _s(translate("Level", "Approvals")))]), _v(" "), _c("th", {staticClass: "text-left"}, [_v(_s(translate("Approver", "Approvals")))]), _v(" "), _c("th", {staticClass: "text-left"}, [_v(_s(translate("Status", "Approvals")))]), _v(" "), _c("th", {staticClass: "text-left"}, [_v(_s(translate("Approved by", "Approvals")))])])]), _v(" "), _c("tbody", _l(approvals, (function (t) {
            return _c("tr", [_c("td", [_v(" " + _s(t.approver_level) + " ")]), _v(" "), _c("td", [_v(" " + _s(t.assigned_user_id.label) + " ")]), _v(" "), _c("td", [_c("span", {
                staticClass: "badge badge-pill",
                class: getBadge(t.approval_status)
            }, [_c("h6", {staticClass: "m-0"}, [_v(" " + _s(t.approval_status) + " ")])])]), _v(" "), _c("td", [_v(" " + _s(t.approved_by.label) + " ")])])
        })), 0)])])])])])]], 2) : _e()
    }
});
var Vtiger_Component_DetailViewBlocks = App.vtComponent.extend({
    name: "vds-detailViewBlocks", props: {record: {}, module: "", blocks: {}}, methods: {
        picklistTranslate(e, a) {
            for (let s in a) if (a[s].value == e) return a[s].label;
            return e
        }
    }, render: function anonymous() {
        with (this) return _c("div", _l(blocks, (function (e, a) {
            return _c("div", {staticClass: "py-2"}, [_c("div", [_c("h4", [_v(_s(translate(e.data.label, module)))])]), _v(" "), _c("div", {staticClass: "row"}, _l(e.fields, (function (e, a) {
                return e.viewable ? _c("div", {staticClass: "col-sm-12 col-md-6 py-1"}, [_c("div", {staticClass: "row"}, [_c("div", {staticClass: "col-sm-12 col-md-4"}, [_v(_s(translate(e.label, this.module)))]), _v(" "), "reference" == e.type.name || "owner" == e.type.name || "ownergroup" == e.type.name ? _c("div", {staticClass: "col-sm-12 col-md-8"}, [record[e.name] && record[e.name].label ? _c("a", {attrs: {href: "view/detail?module=" + record[e.name].module + "&id=" + record[e.name].id}}, [_v(_s(record[e.name].label))]) : _e()]) : "userReference" == e.type.name || "userRole" == e.type.name ? _c("div", {staticClass: "col-sm-12 col-md-8"}, [record[e.name] && record[e.name].label ? _c("a", {attrs: {href: "admin/view/detail?module=" + record[e.name].module + "&id=" + record[e.name].id}}, [_v(_s(record[e.name].label))]) : _e()]) : "image" == e.type.name ? _c("div", {staticClass: "col-sm-12 col-md-8"}, [record[e.name][0] ? _c("img", {
                    staticStyle: {
                        width: "300px",
                        height: "300px"
                    }, attrs: {src: record[e.name][0].url, alt: "c[0].name"}
                }) : _e()]) : "boolean" == e.type.name ? _c("div", {staticClass: "col-sm-12 col-md-8"}, [1 == record[e.name] ? _c("span", [_v(_s(translate("LBL_YES")))]) : _c("span", [_v(_s(translate("LBL_NO")))])]) : "picklist" == e.type.name ? _c("div", {staticClass: "col-sm-12 col-md-8"}, [translate(record[e.name], this.module) == record[e.name] ? _c("span", [_v(_s(picklistTranslate(record[e.name], e.type.picklistValues)))]) : _c("span", [_v(_s(translate(record[e.name], this.module)) + " - " + _s(record[e.name]))])]) : _c("div", {staticClass: "col-sm-12 col-md-8"}, [_v(_s(record[e.name]))])])]) : _e()
            })), 0)])
        })), 0)
    }
});
var Vtiger_Component_DetailViewBody = App.vtComponent.extend({
    inject: ["getScrollableHeight"],
    props: {
        viewMode: String,
        isAjaxEditAllowed: Boolean,
        activity: String,
        selectedActivityId: [Number, String],
        source_records: String,
        source_module: String,
        recordMode: String
    },
    computed: {
        mode: {
            get() {
                return this.viewMode
            }, set(e) {
                this.$emit("update:viewMode", e)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "vds-bodycontents vds-detailbodycontents"}, [_c(getDetailViewComponent(), {
            tag: "component",
            attrs: {
                "view-mode": mode,
                isAjaxEditAllowed: isAjaxEditAllowed,
                activity: activity,
                "selected-activity-id": selectedActivityId,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordMode
            },
            on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }
            }
        })], 1)
    },
    methods: {
        getDetailViewComponent() {
            return "deepdive" == this.viewMode ? App.getDynamicComponentInstance("DeepDive", this.$module) : App.getDynamicComponentInstance("DetailSummary", this.$module)
        }
    }
});
var Cases_Component_DetailCasesRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({computed: {recordActions: () => []}});
var Vtiger_Component_DetailCasesWebchatRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    computed: {
        recordLabel() {
            return this.record.chatno
        }, relatedViews: () => [{}], widgetHeaderFields() {
            let e = [], t = ["chatstart", "first_message"];
            for (var r in t) e.push(this.moduleModel.getField(t[r]));
            let a = [];
            for (let t in e) {
                let r = e[t];
                r && this.record.fieldHasValue(t) && a.push(r)
            }
            return a
        }
    }
});
var Vtiger_Component_DetailCommentReply = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_DraftComment],
    props: {
        mode: String,
        comment: [Object, Array],
        relatedModule: String,
        relatedTo: {type: Number, required: !0},
        parentComment: {
            type: [Object, Array], default: () => {
            }
        }
    },
    computed: {
        modalTitle() {
            return "edit" == this.mode ? "LBL_EDIT" : "LBL_REPLY"
        }, parentCommentId() {
            return this.comment.id
        }
    },
    components: {"vds-comment": App.loadComponent("Comment")},
    methods: {
        postSave() {
            this.$root.$emit("bv::hide::modal", "commentReplyModal"), this.$emit("vds::postcomment::save")
        }, registerDraftCommentWatcher() {
            this.$watch("draftComment", () => {
                _.isEmpty(this.draftComment) && (this.draftComment = JSON.parse(JSON.stringify(this.comment)))
            })
        }, draftCommentUpdate(t) {
            this.draftComment.commentcontent = JSON.parse(JSON.stringify(t))
        }, minimise(t) {
            this.getDraftComment(), setTimeout(() => {
                this.$emit("vds::update::comment", this.draftComment, t)
            }, 1e3)
        }, closeModal(t) {
            "reply" == t ? this.minimise("closeInlineComment") : this.$root.$emit("bv::hide::modal", "commentReplyModal")
        }
    },
    created() {
        "edit" == this.mode && (this.draftStatus = 3), "reply" == this.mode && (this.draftStatus = 4), this.draftComment = JSON.parse(JSON.stringify(this.comment)), this.getDraftComment(), this.registerDraftCommentWatcher(), this.parentComment = JSON.parse(JSON.stringify(this.comment))
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "commentReplyModal",
            attrs: {
                id: "commentReplyModal",
                size: "lg",
                title: translate(modalTitle),
                "hide-footer": !0,
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0,
                "header-class": "bgLtGrey"
            }
        }, [_c("div", {
            staticClass: "d-flex justify-content-between w-100 align-items-center px-1 py-1",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("span", {staticClass: "h5 mb-0"}, [_v(_s(translate(modalTitle)))]), _v(" "), _c("div", ["reply" == mode ? _c("i", {
            staticClass: "mr-2 fa-compress-wide c-pointer h5 my-1",
            on: {
                click: function (t) {
                    return minimise()
                }
            }
        }) : _e(), _v(" "), _c("i", {
            staticClass: "fa fa-times c-pointer h5 my-1", on: {
                click: function (t) {
                    return closeModal(mode)
                }
            }
        })])]), _v(" "), _c("vds-comment", {
            staticClass: "p-2 pb-4",
            attrs: {
                comment: draftComment,
                currentModule: $module,
                relatedTo: relatedTo,
                "parent-comment": parentComment,
                relatedModule: relatedModule,
                mode: mode,
                focus: !0
            },
            on: {
                "vds::draft::updated": draftCommentUpdate, "vds::postcomment::save": function (t) {
                    return postSave()
                }
            }
        })], 1)
    }
});
var Vtiger_Component_DetailCreateActions = App.vtComponent.extend({
    data() {
        return {
            reachOutModules: ["Contacts", "Quotes"],
            activeAction: !1,
            modalSize: "lg",
            customModalSize: "",
            relationModels: BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {
                module: this.$module,
                relations: {},
                loaded: !1
            })
        }
    }, computed: {
        actions() {
            let t = {}, e = ["Tasks", "Events", "Documents", "Products", "Services"];
            if (this.relationModels.isLoaded) {
                if (this.reachOutModules.includes(this.$module)) t["start-activity"] = {
                    name: "start-activity",
                    label: this.translate("LBL_REACH_OUT_NOW"),
                    icon: "fa fa-hand-point-right"
                }, t["remind-me-to"] = {
                    name: "remind-me-to",
                    label: this.translate("LBL_REACH_OUT_LATER"),
                    icon: "fa fa-reachout-later"
                }; else if (!e.includes(this.$module)) for (var i in this.relationModels.relations) {
                    let e = this.relationModels.relations[i];
                    if (["Contacts", "Calendar", "Events", "Tasks"].includes(e.relatedModuleName)) {
                        t["start-activity"] = {
                            name: "start-activity",
                            label: this.translate("LBL_REACH_OUT_NOW"),
                            icon: "fa fa-hand-point-right"
                        }, t["remind-me-to"] = {
                            name: "remind-me-to",
                            label: this.translate("LBL_REACH_OUT_LATER"),
                            icon: "fa fa-reachout-later"
                        };
                        break
                    }
                }
                t["add-or-create"] = {
                    name: "add-or-create",
                    label: this.translate("JS_ADD") + " " + this.translate("LBL_OR") + " " + this.translate("JS_CREATE"),
                    icon: "fa fa-plus"
                }
            }
            return jQuery.extend({}, t, this.moduleSpecificActions)
        }, moduleSpecificActions: () => ({})
    }, created() {
        this.init(), App.root.$emit("vds::detail::view::new::action::click", this.$module)
    }, methods: {
        init() {
            this.getCurrentModuleRelations(), this.getSalesOpsModules()
        }, getCurrentModuleRelations() {
            this.appStore.request("api_get", {
                url: "relations",
                params: {module: this.$module},
                key: this.$module.toLowerCase() + "_relations_response"
            }).then(t => {
                this.relationModels = BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {
                    module: this.$module,
                    relations: t
                })
            })
        }, getSalesOpsModules() {
            this.appStore.request("api_get", {
                url: "/apps/modules",
                key: "apps",
                cache: !0,
                nonamespace: !0
            }).then(t => this.reachOutModules = this.reachOutModules.concat(t["SALES OPS"]))
        }, getComponent() {
            return "start-activity" === this.activeAction ? App.getDynamicComponentInstance("DetailStartNewActivity", this.$module) : "remind-me-to" === this.activeAction ? App.getDynamicComponentInstance("DetailReminderCreateAction", this.$module) : App.getDynamicComponentInstance("DetailAddOrCreateAction", this.$module)
        }, getTitle() {
            if (this.activeAction) {
                return this.actions[this.activeAction].label
            }
            return this.translate("LBL_WHAT_DO_YOU_WANT_TO_DO")
        }, changeAction(t) {
            this.activeAction = t.name
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "startActivity",
                "hide-footer": "",
                size: modalSize,
                "dialog-class": customModalSize
            }
        }, [_c("template", {slot: "modal-title"}, [activeAction ? _c("i", {
            staticClass: "fa fa-arrow-left mr-2 mb-0 c-pointer",
            on: {
                click: function (t) {
                    activeAction = !1
                }
            }
        }) : _e(), _v(" " + _s(getTitle()) + "\n            ")]), _v(" "), _c("template", {slot: "modal-header-close"}, [_c("i", {
            staticClass: "fa fa-times fa-xs",
            on: {
                click: function (t) {
                    return $root.$emit("vds::update::completed::actions")
                }
            }
        })]), _v(" "), _c("vds-wizardtiles", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: _.size(actions) > 1,
                expression: "_.size(actions) > 1"
            }],
            class: activeAction ? "d-none" : "d-flex",
            attrs: {actions: actions},
            on: {"vds::wizardtile::select": changeAction}
        }), _v(" "), relationModels.isLoaded ? _c(getComponent(), {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: activeAction,
                expression: "activeAction"
            }], tag: "component", attrs: {relations: relationModels}
        }) : _e()], 2)
    }
});
var Vtiger_Component_DetailDelete = App.vtComponent.extend({
    components: {"vds-delete-confirmation": App.loadComponent("DeleteConfirmation", this.$module, !1)},
    data: () => ({additionalMessage: ""}),
    render: function anonymous() {
        with (this) return _c("vds-delete-confirmation", {
            attrs: {"modal-id": "detailDeleteModal"},
            on: {ok: ok, cancel: cancel}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_DELETE")))]), _v(" "), _c("div", {
            attrs: {slot: "message"},
            slot: "message"
        }, [_v(_s(translate("LBL_DELETE_CONFIRMATION_NOTE", "Vtiger", recycleBinDaysLimit())) + "?")]), _v(" "), additionalMessage ? _c("div", {
            attrs: {slot: "message"},
            slot: "message"
        }, [_v(_s(additionalMessage))]) : _e(), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_NO")))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_YES")))])])
    },
    props: {record: Object, moduleName: String, isPreview: Boolean},
    methods: {
        ok() {
            let e = {module: this.moduleName, id: this.record.getId()};
            this.appStore.request("api_delete", {url: "records", params: e}).then(() => {
                this.$root.$emit("bv::hide::modal", "detailDeleteModal"), this.isPreview ? (this.$bubble("vds::record::deleted", this.record.getId()), this.$bubble("vds::detail::preview::close", this.record.getId()), this.$bubble("vds::clear::preview::record::cache", this.record)) : this.redirectUrl("view/list?&module=" + this.moduleName)
            }, e => {
                this.showErrorNotification(e), "403" == e.code && this.$root.$emit("bv::hide::modal", "detailDeleteModal")
            })
        }, cancel() {
            this.$root.$emit("bv::hide::modal", "detailDeleteModal")
        }, recycleBinDaysLimit: () => (new Configuration).get("RECYCLE_BIN_DAYS_LIMIT")
    }
});
var Vtiger_Component_DetailDocumentsRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    computed: {
        relatedViews() {
            let e = [];
            return this.isSharable && e.push({
                name: "stats",
                icon: "chart-line",
                header: this.translate("JS_STATS"),
                component: App.getDynamicComponentInstance("DocumentStatsWidget")
            }), e.push({
                name: "keyFields",
                icon: "keyfield",
                header: this.translate("LBL_KEY_FIELDS"),
                component: App.getDynamicComponentInstance("RecordKeyFields")
            }), e
        }, isDownloadable() {
            return !(!this.record.filename || !this.record.filestatus || "I" != this.record.filelocationtype)
        }, isSharable() {
            return this.record.sharable
        }, documentType() {
            return this.record.document_type
        }, recordActions() {
            let e = [{name: "print", label: this.translate("LBL_PRINT"), icon: "print", handler: this.printDocument}];
            return this.isSharable && "Private" != this.documentType && e.push({
                name: "share",
                label: this.translate("LBL_SHARE"),
                icon: "share-alt",
                handler: this.shareDocument
            }), this.isDownloadable && e.push({
                name: "download",
                label: this.translate("LBL_DOWNLOAD"),
                icon: "download",
                handler: this.download
            }), this.relation && ["1:N", "N:N"].includes(this.relation.relationtype) && e.push({
                name: "unlink",
                label: this.translate("LBL_UNLINK"),
                icon: "times",
                handler: this.unlinkRecord
            }), e
        }
    }, methods: {
        download() {
            "E" == this.record.filelocationtype ? window.open(this.record.getDownloadUrl(), "_blank") : window.location.href = this.record.getDownloadUrl()
        }, shareDocument() {
            this.showModal({
                componentName: "ShareDocument",
                componentData: {records: [this.record.id], currentModule: this.$module}
            })
        }, printDocument() {
            this.showModal({componentName: "PrintData", componentData: {record: this.record}})
        }
    }
});
var Vtiger_Component_DetailEmailAction = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalComposeEmail",
            attrs: {
                id: "modalComposeEmail",
                lazy: !0,
                "hide-footer": "",
                size: "xl",
                title: translate("LBL_COMPOSE_EMAIL")
            }
        }, [_c("template", {slot: "modal-header"}, [_c("div", {
            staticClass: "d-flex bd-highlight align-items-center",
            staticStyle: {width: "100%"}
        }, [_c("div", {staticClass: "flex-grow-1 bd-highlight"}, [_c("h5", [_v(_s(translate("LBL_COMPOSE_EMAIL")))])]), _v(" "), showConfirmation ? _c("div", {staticClass: "bd-highlight"}, [_c("b-button", {
            attrs: {variant: "danger"},
            on: {
                click: function (t) {
                    return discardDraft()
                }
            }
        }, [_v(_s(translate("LBL_DISCARD")))])], 1) : _e(), _v(" "), _c("div", {staticClass: "bd-highlight"}, [_c("button", {
            staticClass: "close",
            attrs: {type: "button", "aria-label": "Close"},
            on: {
                click: function (t) {
                    return closeEmail()
                }
            }
        }, [_v("× ")])])])]), _v(" "), _c("vds-compose-email", {
            ref: "composeEmail",
            attrs: {
                id: "composeEmail",
                module: modulename,
                record: record,
                attachments: attachments,
                emailBody: description,
                recordShareParams: recordShareParams,
                isDocumentShareAsAttachment: isDocumentShareAsAttachment,
                searchType: searchType
            }
        })], 2)
    },
    data: () => ({showConfirmation: !1}),
    props: {
        record: {type: [Object]},
        modulename: {type: [String, Object], default: this.$module},
        attachments: {type: Array, default: () => []},
        description: {type: String, default: ""},
        recordShareParams: {type: Object, default: () => ({})},
        isDocumentShareAsAttachment: {type: Boolean, default: !1},
        searchType: {type: String, default: ""}
    },
    components: {"vds-compose-email": App.loadComponent("ComposeEmail")},
    mounted() {
        this.$root.$on("vds::hide::email::compose::modal", this.closeEmailModal), this.$root.$off("vds::show::draft::confirmation"), this.$root.$on("vds::show::draft::confirmation", t => {
            this.showConfirmation = t
        })
    },
    beforeDestroy() {
        this.$root.$off("vds::hide::email::compose::modal", this.closeEmailModal)
    },
    methods: {
        discardDraft() {
            this.$refs.composeEmail.discardDraft()
        }, closeEmail() {
            this.showConfirmation ? this.showConfirmation && this.discardDraft() : this.$root.$emit("bv::hide::modal", "modalComposeEmail")
        }, closeEmailModal() {
            this.displayedOnce = !0, this.$refs.modalComposeEmail.hide()
        }
    }
});
var Vtiger_Component_DetailEmailCampaignsRelatedList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    data: () => ({
        lists: [],
        listHeaders: ["LBL_LIST_NAME", "LBL_SUBSCRIBED", "LBL_UNSUBSCRIBED"],
        campaigns: [],
        campaignHeaders: ["LBL_CAMPAIGN_NAME", "LBL_SENT_DATE", "LBL_ENGAGEMENT_LEVEL"]
    }),
    mounted() {
        this.getCampaignHistory()
    },
    methods: {
        getCampaignHistory() {
            this.appStore.request("api_get", {
                url: "/CampaignsHistory",
                params: {
                    module: "EmailCampaigns",
                    record: this.$_detailRecordModel.getId(),
                    related_module: this.$module
                }
            }).then(t => {
                this.lists = t.lists, this.campaigns = t.campaigns
            })
        }, getEmailCampaignIcon(t) {
            var s = "";
            return "RegularCampaign" == t ? s = "fa-envelope" : "AutoResponderCampaign" == t && (s = "fa-autoresponder"), s
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "p-2"}, [_c("div", {staticClass: "mb-4"}, [_c("h5", [_v(_s(translate("LBL_EMAIL_LIST_SUBSCRIPTION", "EmailCampaigns")))]), _v(" "), _c("table", {staticClass: "table border mt-3"}, [_c("thead", {staticClass: "bg-light"}, [_c("tr", {staticClass: "bg-grey-hue-9"}, _l(listHeaders, (function (t, s) {
            return _c("th", {class: {"text-center": s > 0}}, [_v("\n                                        " + _s(translate(t, "EmailCampaigns")) + "\n                                    ")])
        })), 0)]), _v(" "), lists && _.keys(lists).length ? _c("tbody", [_l(lists, (function (t, s) {
            return _l(t, (function (t) {
                return _c("tr", {staticClass: "bg-grey-hue-7"}, [_c("td", [_c("a", {
                    attrs: {
                        href: "view/detail?module=MarketingList&id=" + s,
                        target: "_blank"
                    }
                }, [_v(_s(t.listname))])]), _v(" "), _c("td", {staticClass: "text-center"}, [_c("vds-checkbox", {
                    attrs: {
                        name: "subscribed",
                        disabled: !0
                    }, model: {
                        value: t.subscribed, callback: function (s) {
                            $set(t, "subscribed", s)
                        }, expression: "listDetails.subscribed"
                    }
                })], 1), _v(" "), _c("td", {staticClass: "text-center"}, [_c("vds-checkbox", {
                    attrs: {
                        name: "unsubscribed",
                        disabled: !0
                    }, model: {
                        value: !t.subscribed, callback: function (s) {
                            $set(!t, "subscribed", s)
                        }, expression: "!listDetails.subscribed"
                    }
                })], 1)])
            }))
        }))], 2) : _c("tbody", [_c("tr", [_c("td", {
            staticClass: "text-center",
            attrs: {colspan: _.keys(listHeaders).length}
        }, [_v("\n                                        " + _s(translate("LBL_NO_RECORDS_FOUND")) + "\n                                    ")])])])])]), _v(" "), _c("div", [_c("h5", [_v(_s(translate("LBL_CAMPAIGN_HISTORY", "EmailCampaigns")))]), _v(" "), _c("table", {staticClass: "table border mt-3"}, [_c("thead", {staticClass: "bg-light"}, [_c("tr", {staticClass: "bg-grey-hue-9"}, _l(campaignHeaders, (function (t, s) {
            return _c("th", {class: {"text-center": s > 0}}, [_v("\n                                        " + _s(translate(t, "EmailCampaigns")) + "\n                                    ")])
        })), 0)]), _v(" "), campaigns && _.keys(campaigns).length ? _c("tbody", _l(campaigns, (function (t, s) {
            return _c("tr", {staticClass: "bg-grey-hue-7"}, [_c("td", [_c("div", {staticClass: "d-flex"}, [_c("i", {
                staticClass: "fa mr-2 mt-1 font-16 text-muted",
                class: getEmailCampaignIcon(t.type)
            }), _v(" "), _c("span", [_c("a", {
                attrs: {
                    href: "view/detail?module=EmailCampaigns&id=" + s,
                    target: "_blank"
                }
            }, [_v(_s(t.name))])])])]), _v(" "), _c("td", {staticClass: "text-center"}, [_v(_s(t.senton))]), _v(" "), _c("td", {staticClass: "text-center"}, [_c("div", {staticClass: "d-flex align-items-center justify-content-center"}, [_l(t.report.level, (function (t) {
                return _c("i", {staticClass: "fa fa-star text-warning"})
            })), _v(" "), _l(5 - t.report.level, (function (t) {
                return _c("i", {staticClass: "fa fa-star text-muted"})
            })), _v(" "), _c("button", {
                key: s + "_details",
                staticClass: "btn px-2 py-1 shadow-none",
                attrs: {type: "button", id: s + "_details"},
                on: {
                    click: function (t) {
                        t.stopPropagation()
                    }
                }
            }, [_c("i", {staticClass: "fa fa-sort-down text-dark"})]), _v(" "), _c("b-popover", {
                staticClass: "text-decoration-none",
                attrs: {placement: "bottom", target: s + "_details", triggers: "focus"}
            }, [1 == t.report.level ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_SENT", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v("1")])])])]) : _e(), _v(" "), t.report.level > 0 && t.report.open > 0 ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_OPENS", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v(_s(t.report.open))])])])]) : _e(), _v(" "), t.report.level > 0 && t.report.click > 0 ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_CLICKS", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v(_s(t.report.click))])])])]) : _e(), _v(" "), t.report.bounce > 0 ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_BOUNCE", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v("1")])])])]) : _e(), _v(" "), t.report.unsubscribed > 0 ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_UNSUBSCRIBE", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v("1")])])])]) : _e(), _v(" "), t.report.spam > 0 ? _c("div", {
                staticClass: "px-2 py-1 c-pointer",
                staticStyle: {width: "100px"}
            }, [_c("div", {staticClass: "d-flex w-100 align-items-center"}, [_c("div", {staticClass: "w-75"}, [_v(_s(translate("LBL_COMPLAINT", "EmailCampaigns")))]), _v(" "), _c("div", {staticClass: "w-25 text-center"}, [_c("strong", [_v("1")])])])]) : _e()])], 2)])])
        })), 0) : _c("tbody", [_c("tr", [_c("td", {
            staticClass: "text-center",
            attrs: {colspan: _.keys(campaignHeaders).length}
        }, [_v("\n                                        " + _s(translate("LBL_NO_RECORDS_FOUND")) + "\n                                    ")])])])])])])
    }
});
var Vtiger_Component_DetailEventFormsRelatedList = Vtiger_Component_DetailRelatedList.extend({
    methods: {
        getRelatedRecordComponent() {
            return new Promise((e, t) => {
                if (this.$_detailRecordModel && "Group Event" != this.$_detailRecordModel.activitytype) this.relatedComponent = App.getDynamicComponentInstance("DetailEventFormsShowResponse", "EventForms"), e(this.relatedComponent); else {
                    this.constructor.super.options.methods.getRelatedRecordComponent.call(this).then(t => {
                        e(t)
                    })
                }
            })
        }
    }
});
var Vtiger_Component_DetailEventFormsRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    computed: {
        recordActions: () => [],
        headerFields: () => []
    }
});
var Vtiger_Component_DetailEventFormsShowResponse = Vtiger_Component_DetailRelatedRecord.extend({
    components: {"vds-response-view": App.loadComponent("ResponseView", "EventForms")},
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "border bg-white",
            attrs: {role: "tab"}
        }, [_c("vds-response-view", {attrs: {record: record}})], 1)
    }
});
var Vtiger_Component_DetailEventsRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    data: () => ({
        headerLimit: 3,
        editableHeaders: ["eventstatus"],
        defaultHeaderFields: ["eventstatus"]
    }), methods: {
        prepareRecordToSave() {
            var e = this.constructor.super.options.methods.prepareRecordToSave.call(this);
            e && e.hasOwnProperty("date_start") && (e.time_start = this.recordModel.time_start), e && e.hasOwnProperty("due_date") && (e.time_end = this.recordModel.time_end);
            let t = this.recordModel;
            return e.set("invitees", t.invitees), e.set("inviteesid", t.inviteesid), t.allInviteeRemoved && e.set("allInviteeRemoved", t.allInviteeRemoved), e
        }, triggerModuleSpecificEvents() {
            this.recordModel && "Held" == this.recordModel.eventstatus && this.$root.$emit("vds::event::held", this.recordModel)
        }
    }
});
var Vtiger_Component_DetailViewHeader = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_RelationUtils],
    props: ["viewMode", "isPreview", "isSummaryViewAllowed", "isRelationsAllowed", "showHeaderTitleActions", "source_records", "source_module", "recordMode"],
    data: () => ({
        showHeaderStatus: !0,
        isNewActionsSupported: !0,
        headerTitleComponent: "",
        headerStatusComponent: "",
        headerActionsComponent: "",
        headerFieldsComponent: ""
    }),
    created() {
        this.headerTitleComponent = App.loadComponent("DetailHeaderTitle", this.$module), this.headerStatusComponent = App.loadComponent("DetailHeaderStatus", this.$module), this.headerActionsComponent = App.loadComponent("DetailHeaderActions", this.$module), this.headerFieldsComponent = App.loadComponent("DetailHeaderFields", this.$module), this.checkIfNewPermitted()
    },
    computed: {
        mode: {
            get() {
                return this.viewMode
            }, set(e) {
                this.$emit("update:viewMode", e)
            }
        }, recordEditMode: {
            get() {
                return this.recordMode
            }, set(e) {
                this.$emit("update:recordMode", e)
            }
        }
    },
    watch: {
        "$store.state.deepdive_save_button_show"(e) {
            this.showHeaderStatus = !e
        }
    },
    methods: {
        checkIfNewPermitted() {
            if (this.isRelationsAllowed) {
                let e = ["ModComments", "Webchat"];
                this.retrieveRelationModels(this.$module).then(t => {
                    let o = BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {
                        module: this.$module,
                        relations: t
                    });
                    if (_.size(o.relations)) for (let t in o.relations) {
                        let d = o.relations[t];
                        if (!e.includes(d.relatedModule) && (d.isCreatePermitted || d.isSelectPermitted)) {
                            this.isNewActionsSupported = !0;
                            break
                        }
                    }
                })
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "vds-bodyfixedheader vds-detailbodyfixedheader shadow-sm border-bottom",
            attrs: {id: "detailHeader"}
        }, [_c("div", {staticClass: "container-fluid"}, [_c("div", {staticClass: "row flex-nowrap align-items-center px-4 pt-3 pb-2"}, [_c("div", {
            staticClass: "col p-0",
            staticStyle: {"min-width": "0"}
        }, [_c(headerTitleComponent, {
            tag: "component",
            attrs: {
                "view-mode": mode,
                "is-preview": isPreview,
                showHeaderTitleActions: showHeaderTitleActions,
                recordMode: recordEditMode
            },
            on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }, "update:recordMode": function (e) {
                    recordEditMode = e
                }, "update:record-mode": function (e) {
                    recordEditMode = e
                }
            }
        })], 1), _v(" "), showHeaderStatus ? _c("div", {
            staticClass: "ml-3",
            attrs: {id: $namespaceStore + "_headerStatus"}
        }, [_c(headerStatusComponent, {
            tag: "component",
            attrs: {
                "view-mode": mode,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordEditMode
            },
            on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }, "update:recordMode": function (e) {
                    recordEditMode = e
                }, "update:record-mode": function (e) {
                    recordEditMode = e
                }
            }
        })], 1) : _e(), _v(" "), _c("div", [_c(headerActionsComponent, {
            tag: "component",
            attrs: {
                "view-mode": mode,
                isNewActionsSupported: isNewActionsSupported,
                isSummaryViewPermitted: isSummaryViewAllowed,
                isRelationsAllowed: isRelationsAllowed,
                recordMode: recordEditMode
            },
            on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }
            }
        })], 1)])]), _v(" "), _c("div", {staticClass: "px-4"}, [_c(headerFieldsComponent, {tag: "component"})], 1)])
    }
});
var Vtiger_Component_DetailHeaderActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel],
    data: () => ({showSaveCancelButton: !1, widgets: []}),
    props: ["viewMode", "isNewActionsSupported", "isSummaryViewPermitted", "isRelationsAllowed", "recordMode"],
    computed: {
        viewToggleLabel() {
            return "deepdive" == this.viewMode ? this.translate("LBL_SUMMARY") : this.translate("Deep Dive")
        }, detailRecordModel() {
            return this.$_detailRecordModel
        }
    },
    watch: {
        "$store.state.deepdive_save_button_show"(e) {
            this.showSaveCancelButton = !!e
        }
    },
    created() {
        this.injectUnwatch = this.$root.vtInjector.listen("vds::detail::headeractions::subscriptions", e => {
            let t = _.isArray(e) ? e : [e];
            for (var i in t) {
                let e = t[i], s = "vds-component-" + Math.random();
                this.widgets.push(s), this.$options.components[s] = e
            }
        }, {module: this.$module})
    },
    beforeDestroy() {
        this.injectUnwatch && this.injectUnwatch()
    },
    methods: {
        toggleDetailView() {
            "deepdive" == this.viewMode ? (this.$emit("update:viewMode", "summary"), App.root.$emit("vds::summary::click", this.$module)) : (this.$emit("update:viewMode", "deepdive"), App.root.$emit("vds::deepdive::click", this.$module))
        }, save() {
            let e = this.$namespaceStore, t = "vds::deepdive::save::clicked";
            e && (t += "::" + e), this.$root.$emit(t)
        }, cancel() {
            this.showSaveCancelButton = !1, this.$root.$emit("vds::deepdive::cancel::clicked")
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [showSaveCancelButton ? _c("div", {staticClass: "d-flex justify-content-end"}, [_c("button", {
            staticClass: "btn btn-secondary mr-3 p-2 vt-btn-medium",
            on: {click: cancel}
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary  p-2 vt-btn-medium",
            on: {click: save}
        }, [_v(_s(translate("LBL_SAVE")))])]) : _c("div", {staticClass: "d-flex justify-content-end"}, [_l(widgets, (function (e) {
            return [_c(e, {tag: "component", attrs: {id: $id, moduleName: $module}})]
        })), _v(" "), isNewActionsSupported && isRelationsAllowed ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.DetailCreateActions",
                modifiers: {DetailCreateActions: !0}
            }],
            key: "newAction",
            staticClass: "btn btn-success mr-3  p-2 vt-btn-medium newAction",
            attrs: {title: translate($module, $module) + " " + translate("LBL_ACTIONS")}
        }, [_c("i", {staticClass: "fa-bolt pr-2"}), _v(_s(translate("LBL_DO")))]) : _e(), _v(" "), isSummaryViewPermitted ? _c("button", {
            key: "viewButton",
            staticClass: "btn btn-primary p-2 vt-btn-large",
            attrs: {id: ["summary" == viewMode ? $module + "_deepdive" : $module + "_summary"]},
            on: {click: toggleDetailView}
        }, ["deepdive" == this.viewMode ? _c("i", {staticClass: "fa fa-chevron-left mr-1"}) : _e(), _v(" "), _c("span", [_v(_s(viewToggleLabel))]), _v(" "), "summary" == this.viewMode ? _c("i", {staticClass: "fa fa-chevron-right ml-1"}) : _e()]) : _e()], 2)])
    },
    $_onBoard: {steps: {onboard_managepipeline: ["onboard_managepipeline_newactivities"]}}
});
var Vtiger_Component_DetailHeaderAdditionalAction = App.vtComponent.extend({
    props: {
        viewMode: {type: [String]},
        source_records: {type: String, default: "[]"},
        source_module: {type: String},
        recordMode: {type: String}
    }, data() {
        return {sourceRecords: JSON.parse(this.source_records)}
    }, render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_DetailHeaderBreadCrumb = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel],
    inject: ["changeLifeCycle", "getPicklistTextColor"],
    props: {breadCrumbOptions: Object, selectedOption: String, currentStageColor: String},
    computed: {
        modalTitle() {
            return this.translate("LBL_CLICK_TO_CHANGE_SOURCE_FIELD_VALUE")
        }
    },
    methods: {
        switchLifeCycle(e) {
            this.$root.$emit("bv::hide::popover"), this.$emit("vds::breadcrumbs::saveProgressionBar", e)
        }
    },
    render: function anonymous() {
        with (this) return _c("ul", {staticClass: "vtBreadCrumbs d-flex justify-content-end list-unstyled mb-0"}, _l(breadCrumbOptions, (function (e, t) {
            return _c("li", {
                staticClass: "d-flex ml-3 bg-grey-hue-5", on: {
                    click: function (e) {
                        return switchLifeCycle(t)
                    }
                }
            }, [_c("a", {
                directives: [{name: "b-tooltip", rawName: "v-b-tooltip"}],
                key: e,
                staticClass: "p-2 c-pointer d-flex flex-grow-1",
                class: [e == selectedOption ? "selectedValue align-items-center justify-content-center" : ""],
                style: {
                    background: e === selectedOption ? currentStageColor : "",
                    borderColor: e === selectedOption ? currentStageColor : "",
                    color: getPicklistTextColor(currentStageColor)
                },
                attrs: {id: "element_" + e, title: translate(e)}
            }, [e == selectedOption ? _c("span", {staticClass: "text-truncate  px-1 "}, [_v(_s(e))]) : [_v("\n                              \n                        ")]], 2)])
        })), 0)
    }
});
var Vtiger_Component_DetailHeaderEmotionDisplay = App.vtComponent.extend({
        mixins: [Vtiger_Mixin_Emotions, Vtiger_Mixin_ModuleModel, App.loadMixin("Record", "Emotions"), Vtiger_Mixin_DetailRecord],
        components: {"vds-display-emotion-emojis": App.loadComponent("EmotionEmojis")},
        data: () => ({
            lastEmotion: "",
            lastEmotionIcon: "",
            emotionDisplay: !1,
            displayInlineEmotions: !1,
            selectedEmotion: "",
            recentEmotionRecords: ""
        }),
        created() {
            this.init()
        },
        mounted() {
            this.$root.$on("vds::emotion::value::saved", t => {
                this.lastEmotion = t.emotion, this.lastEmotionIcon = this.getEmotionIcon(this.lastEmotion)
            }), this.$root.$on("vds::emotion::value::updated", t => {
                this.lastEmotion = t, this.lastEmotionIcon = this.getEmotionIcon(this.lastEmotion)
            })
        },
        computed: {
            relatedEmotionRecordIds() {
                let t = [];
                if (this.recentEmotionRecords) for (index in this.recentEmotionRecords) {
                    let o = this.recentEmotionRecords[index];
                    _.isObject(o) && t.push({parent_id: o.parent_id.id, emotionId: o.id})
                }
                return t
            }, moduleModel() {
                return this.$_currentModuleModel
            }
        },
        watch: {
            selectedEmotion(t, o) {
                t && this.saveSelectedEmotion(t)
            }
        },
        methods: {
            init() {
                this.$_currentModuleModel.isEmotionsSupported && this.fetchLastActivityEmotion()
            }, fetchLastActivityEmotion() {
                var t = {};
                t.parent_id = this.$id, t.sortfield = "happened_on", t.sortorder = "DESC", t.limit = 1, this.retrieveEmotionRecord(t, "Emotions").then(t => {
                    this.recentEmotionRecords = t, t && t[0] && (this.emotionDisplay = !0, this.lastEmotion = t[0].emotion, this.lastEmotionIcon = this.getEmotionIcon(this.lastEmotion))
                })
            }, showEmotionModal() {
                if (!this.$module || "Events" == this.$module || "Events" == this.$_detailRecordModel.moduleName) if (this.$_detailRecordModel && this.$_detailRecordModel.isClosed) this.showErrorNotification(this.translate("JS_NOT_ALLOWED_TO_UPDATE_EMOTION_FOR_CLOSED")); else {
                    var t = {};
                    t.recordId = this.$_detailRecordModel.id, t.relatedRecordIds = this.relatedEmotionRecordIds, t.modalTitle = this.$_detailRecordModel.label, t.activityType = this.$_detailRecordModel.activitytype, t.parentModuleName = this.$_detailRecordModel.moduleName, this.$root.$emit("vds::show::emotion::modal", t)
                }
            }, saveSelectedEmotion(t) {
                var o = Vtiger_Record_Model.getCleanInstance("Emotions", {});
                o.related_to = this.$_detailRecordModel.id, o.emotion = t, this._getModuleDescribe("Emotions").then(t => {
                    t && this.saveRecord(o, t).then(t => {
                        if (t) {
                            this.lastEmotion = t.emotion;
                            var o = {};
                            o.related_to = this.$_detailRecordModel.id, o.sortfield = "happened_on", o.sortorder = "DESC", o.limit = 1, this.retrieveEmotionRecord(o, "Emotions").then(o => {
                                if (o && o[0]) {
                                    var e = o[0].related_to.id;
                                    e && this.$_detailRecordModel.id && parseInt(e) == parseInt(this.$_detailRecordModel.id) && this.$root.$emit("vds::emotion::value::updated", t.emotion)
                                }
                            }), this.displayInlineEmotions = !1
                        }
                    }, t => {
                        this.showErrorNotification(t.message)
                    })
                })
            }
        },
        render: function anonymous() {
            with (this) return lastEmotionIcon && moduleModel.isEmotionsSupported ? _c("div", [_c("div", {staticClass: "d-flex emotionEmojiColor align-items-center mr-2"}, [_c("img", {
                staticClass: "smallEmoji c-pointer",
                attrs: {title: lastEmotion, src: getEmotionIcon(lastEmotion)},
                on: {
                    click: function (t) {
                        return showEmotionModal()
                    }
                }
            })])]) : _e()
        }
    }), Events_Component_DetailHeaderEmotionDisplay = Vtiger_Component_DetailHeaderEmotionDisplay.extend({
        methods: {
            fetchLastActivityEmotion() {
                var t = {};
                t.related_to = this.$id, t.sortfield = "happened_on", t.sortorder = "DESC", this.retrieveEmotionRecord(t, "Emotions").then(t => {
                    this.recentEmotionRecords = t, t && t[0] && (this.emotionDisplay = !0, this.lastEmotion = t[0].emotion, this.lastEmotionIcon = this.getEmotionIcon(this.lastEmotion))
                })
            }
        }
    }), Contacts_Component_DetailHeaderEmotionDisplay = Vtiger_Component_DetailHeaderEmotionDisplay.extend({}),
    Potentials_Component_DetailHeaderEmotionDisplay = Vtiger_Component_DetailHeaderEmotionDisplay.extend({}),
    Accounts_Component_DetailHeaderEmotionDisplay = Vtiger_Component_DetailHeaderEmotionDisplay.extend({}),
    Cases_Component_DetailHeaderEmotionDisplay = Vtiger_Component_DetailHeaderEmotionDisplay.extend({});
var Vtiger_Component_DetailHeaderFieldEdit = Vtiger_Component_DeepDive.extend({
    props: {field: {type: Object}, showCloseIcon: {default: !1}}, data: () => ({showCancel: !1}), created() {
        this.$nextTick(() => {
            this.$refs.detailHeaderEdit && (this.$refs.detailHeaderEdit.visible = !0)
        })
    }, mounted() {
        this.registerSaveEvents(), this.$on("vds::deepdive::save::success", () => {
            this.$bubble("vds::header::field::edit::closed", !0), this.$refs.detailHeaderEdit.hide(), this.resetFieldEdit()
        }), this.$root.$off("bv::dropdown::hide"), this.$root.$on("bv::dropdown::hide", e => {
            e.vueTarget.$parent.$refs.detailHeaderEdit && e.preventDefault()
        })
    }, methods: {
        init() {
            this.editing = !0, this.watchForRecordLoad();
            this.$watch("$_currentModuleModel", e => {
                e.isLoaded && this.$nextTick(() => {
                    this.toggleEdit(this.field, !1, this.editing)
                })
            }, {immediate: !0})
        }, resetFieldEdit() {
            this.$nextTick(() => {
                this.$refs.detailHeaderEdit && (this.$refs.detailHeaderEdit.visible = !1)
            }), this.resetView()
        }, registerSaveEvents() {
            this.$on("vds::trigger::save::dependentfields", () => {
                this.validateAndSave({skipMandatory: !0})
            })
        }, resetFieldEditEnvironment() {
            this.$bubble("vds::header::field::edit::closed", !0), this.resetFieldEdit()
        }, registerSelect2FocusOnEdit() {
            this.$on("select-field-loaded", e => {
                setTimeout(() => {
                    jQuery(this.$refs["detailHeader_" + e].$el).find(".select2-container").siblings("select:enabled").select2("open")
                }, 50)
            })
        }
    }, watch: {
        "$store.state.deepdive_save_button_show"(e) {
            e && this.resetFieldEditEnvironment()
        }
    }, render: function anonymous() {
        with (this) return _c("b-dropdown", {
            key: field.name,
            ref: "detailHeaderEdit",
            staticClass: "mt-3",
            attrs: {variant: "none shadow-none p-0", right: "", "no-caret": ""},
            on: {
                hide: function (e) {
                    if (!e.type.indexOf("key") && _k(e.keyCode, "preventDefault()", void 0, e.key, void 0)) return null
                }, hidden: resetFieldEditEnvironment
            }
        }, [_c("div", {staticClass: "d-flex align-items-center justify-content-between py-2 px-3"}, [_c("span", [_v(_s(translate("LBL_EDIT") + " " + translate(field.label)))]), _v(" "), showCloseIcon && field && field.editable ? _c("span", {
            staticClass: "c-pointer text-grey-2",
            on: {
                click: function (e) {
                    return resetFieldEditEnvironment()
                }
            }
        }, [_c("i", {staticClass: "fa-times"})]) : _e()]), _v(" "), _c("hr", {staticClass: "m-0"}), _v(" "), _c("b-dropdown-form", {
            staticClass: "mb-0 mt-4 p-2 d-flex col-12 align-items-center",
            staticStyle: {"min-width": "372px", "min-height": "80px"},
            on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [_c("div", {staticClass: "d-flex col-md-12 col-sm-12 p-2 align-items-center"}, [moduleModel && moduleModel._loaded && editRecordModel && editRecordModel._loaded ? _c("div", {staticClass: "flex-grow-1 text-break"}, [_c("ui-field-edit-type", {
            ref: "detailHeader_" + field.fieldname,
            staticClass: "w-100",
            attrs: {
                field: field,
                record: editRecordModel,
                ignoreCompositeGrouping: compositeFieldStatus,
                currencyChange: isMulticurrencyChangeAllowed,
                isFieldLocked: isFieldLocked(moduleModel.getField(field.fieldname))
            }
        })], 1) : _e()])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-end mr-3 pb-3"}, [_c("b-button", {
            staticClass: "shadow-none",
            attrs: {variant: "primary", disabled: saving, size: "sm"},
            on: {
                click: function (e) {
                    return validateAndSave({skipMandatory: !0})
                }
            }
        }, [_v(_s(translate("LBL_SAVE")))])], 1)], 1)
    }
});
var Vtiger_Component_DetailHeaderMoreTitleActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_RelationUtils, Vtiger_Mixin_DetailRecord],
    render: function anonymous() {
        with (this) return _c("div", [isAddReminderAllowed ? [_c("b-dd-divider", {staticClass: "m-0"}), _v(" "), _c("div", {staticClass: "d-flex text-center"}, [isAddReminderAllowed ? _c("div", {
            staticClass: "w-100 p-2 c-pointer border-left",
            attrs: {title: translate("LBL_CREATE_REMINDER")},
            on: {
                click: function (e) {
                    return showCreateReminderModal()
                }
            }
        }, [_c("i", {staticClass: "headerTitleActions fas fa-reminder text-grey-4"})]) : _e(), _v(" "), _c("div")])] : _e()], 2)
    },
    props: {recordIds: [Object, String, Number], modulename: String},
    data: () => ({isAddReminderAllowed: !0}),
    created() {
        this.validateAllReminderPermissions()
    },
    methods: {
        validateAllReminderPermissions() {
            let e = AppStorage.get("app_module_permissions", {});
            e && e.Calendar && !e.Calendar.creatable ? this.isAddReminderAllowed = !1 : this.retrieveRelationModels(this.$module).then(e => {
                let d = _.find(e, {relatedModuleName: "Calendar"});
                this.isAddReminderAllowed = !!d
            })
        }, showCreateReminderModal() {
            this.showModal({
                componentName: App.loadComponent("AddReminderModal", "Tasks"),
                componentData: {
                    module: this.$module,
                    relatedModule: "Tasks",
                    record: this.$_detailRecordModel,
                    relatedAction: !0
                },
                modalOnModalMode: !0
            })
        }
    }
});
var Vtiger_Component_DetailHeaderStatus = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel],
    components: {
        "vds-record-progression": App.loadComponent("RecordProgression"),
        "vds-detail-header-additional-action": App.loadComponent("DetailHeaderAdditionalAction")
    },
    props: {
        viewMode: {type: [String]},
        source_records: {type: String, default: "[]"},
        source_module: {type: String},
        recordMode: {type: String}
    },
    computed: {
        mode: {
            get() {
                return this.viewMode
            }, set(e) {
                this.$emit("update:viewMode", e)
            }
        }, recordEditMode: {
            get() {
                return this.recordMode
            }, set(e) {
                this.$emit("update:recordMode", e)
            }
        }
    },
    mounted() {
        this.$root.$on("vds-displayProgressionBar", this.progressionBar)
    },
    data: () => ({showProgressBar: !1}),
    methods: {
        progressionBar(e) {
            this.showProgressBar = e
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "d-flex pr-3 justify-content-end",
            style: {opacity: !0 === showProgressBar ? "0" : "1"}
        }, [_c("vds-detail-header-additional-action", {
            attrs: {
                "view-mode": mode,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordEditMode
            }, on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }, "update:recordMode": function (e) {
                    recordEditMode = e
                }, "update:record-mode": function (e) {
                    recordEditMode = e
                }
            }
        }), _v(" "), _c("vds-record-progression")], 1)
    }
});
var Vtiger_Component_DetailHeaderTitle = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module, Vtiger_Mixin_ModulePermissions, Vtiger_Mixin_CopyPermalink],
    components: {
        "vds-header-title-actions": App.loadComponent("DetailHeaderTitleActions"),
        "vds-header-emotion-display": App.loadComponent("DetailHeaderEmotionDisplay"),
        "vds-module-icon": App.loadComponent("ModuleIcon")
    },
    props: {
        showHeaderTitleActions: {type: Boolean, default: !0},
        isPreview: {type: Boolean, default: !1},
        recordMode: {type: String, default: ""},
        viewMode: {type: String, default: "summary"}
    },
    data: () => ({
        isFollowingSupported: !0,
        isTagsSupported: !0,
        isPrintSupported: !1,
        isDeleteSupported: !0,
        isDuplicateSupported: !0,
        isGoBackAllowed: !0,
        isEditSupported: !1
    }),
    created() {
        ["PBXManager", "ModComments", "EmailCampaigns", "PrintTemplates", "SLA", "Olark", "EventForms", "Inbox", "PSLineItems", "Esign", "SmsCampaigns", "Transactions", "Surveys", "Emotions", "Import", "Employees", "JourneyTemplates", "EmailSequence"].includes(this.$module) || this._getModuleDescribe(this.$module, !0).then(e => {
            e && e.isLoaded && e.tools && (this.isPrintSupported = !!this.isModuleEnabled("PrintTemplates") && e.isToolPermitted("PrintTemplates"))
        })
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center w-100"}, [$isLoading ? _c("span", {staticClass: "w-50"}, [_c("vds-value-progress")], 1) : [isGoBackAllowed ? _c("i", {
            staticClass: "fa fa-arrow-left text-primary c-pointer mr-3 mb-0 c-pointer h4",
            on: {click: goBack}
        }) : _e(), _v(" "), $isLoading ? _c("vds-value-progress", {attrs: {"min-width": "150"}}) : [_c("vds-module-icon", {attrs: {module: $module}}), _v(" "), isPreview ? _c("a", {
            staticClass: "text-truncate mb-0 h4 text-decoration-none text-dark mr-2",
            attrs: {href: getDetailViewURL($module, $_detailRecordModel.getId(), mode), title: recordTitle}
        }, [_v(_s(recordTitle))]) : _c("h4", {
            staticClass: "text-truncate mb-0 mr-2",
            attrs: {title: recordTitle}
        }, [_v(_s(recordTitle))])], _v(" "), showHeaderTitleActions ? _c("vds-header-title-actions", {
            attrs: {
                "view-mode": mode,
                "is-preview": isPreview,
                isFollowingSupported: isFollowingSupported,
                isTagsSupported: isTagsSupported,
                isPrintSupported: isPrintSupported,
                isDeleteSupported: isDeleteSupported,
                isDuplicateSupported: isDuplicateSupported,
                isEditSupported: isEditSupported,
                recordMode: recordEditMode
            }, on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }, "update:recordMode": function (e) {
                    recordEditMode = e
                }, "update:record-mode": function (e) {
                    recordEditMode = e
                }
            }
        }) : _e(), _v(" "), _c("vds-header-emotion-display"), _v(" "), isPreview ? _c("i", {
            staticClass: "fa-external-link-alt text-muted c-pointer ml-2 mr-3",
            attrs: {title: translate("LBL_OPEN_IN_NEW_TAB")},
            on: {
                click: function (e) {
                    return openSummaryView()
                }
            }
        }) : _e(), _v(" "), _c("i", {
            staticClass: "fa fa-permalink c-pointer mr-3 text-muted",
            attrs: {title: translate("LBL_COMMENT_URL_TITLE")},
            on: {
                click: function (e) {
                    return copyDirectLink()
                }
            }
        })]], 2)
    },
    computed: {
        recordTitle() {
            return this.$_detailRecordModel.recordLabel
        }, mode: {
            get() {
                return this.viewMode
            }, set(e) {
                this.$emit("update:viewMode", e)
            }
        }, recordEditMode: {
            get() {
                return this.recordMode
            }, set(e) {
                this.$emit("update:recordMode", e)
            }
        }
    },
    methods: {
        showListView() {
            let e = this.getListViewUrl(this.$module);
            this.redirectUrl(e)
        }, goBack() {
            this.isPreview ? this.$bubble("vds::detail::preview::close", this.$_detailRecordModel.getId()) : this.showListView()
        }, openSummaryView() {
            let e = "Calendar" == this.$module ? "Tasks" : this.$module,
                t = this.getDetailViewURL(e, this.$_detailRecordModel.getId());
            this.redirectUrl(t, !1, "_blank")
        }, copyDirectLink() {
            let e = "Calendar" == this.$module ? "Tasks" : this.$module,
                t = VTHelper.getInstanceUrl() + this.getDetailViewURL(e, this.$_detailRecordModel.getId(), this.mode);
            this.copyPermalink(t, this.$_detailRecordModel.getId())
        }
    }
});
var Vtiger_Component_DetailHeaderTitleActions = App.vtComponent.extend({
    components: {"vds-header-more-title-actions": App.loadComponent("DetailHeaderMoreTitleActions")},
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Tags, Vtiger_Mixin_Module],
    props: {
        isFollowingSupported: {type: Boolean, default: !0},
        isTagsSupported: {type: Boolean, default: !0},
        isPrintSupported: {type: Boolean, default: !0},
        isDeleteSupported: {type: Boolean, default: !0},
        isDuplicateSupported: {type: Boolean, default: !0},
        isPreview: {type: Boolean, default: !1},
        isEditSupported: {type: Boolean, default: !1}
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "headerTitleActions",
            attrs: {id: $module + "_detail_header_title_actions"}
        }, [_c("b-dropdown", {
            staticClass: "p-0",
            attrs: {"no-caret": !0, variant: "link", title: translate("LBL_MORE")}
        }, [_c("i", {
            staticClass: "fa fa-ellipsis-v baseFontColor align-middle",
            attrs: {slot: "button-content"},
            slot: "button-content"
        }), _v(" "), _c("div", {staticStyle: {width: "225px"}}, [isFollowingSupported ? _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "col-3 p-2 border-right text-center c-pointer"}, [_c("vds-record-star", {
            attrs: {
                status: starred,
                "record-id": $_detailRecordModel.getId()
            }, on: {
                "update:status": function (e) {
                    starred = e
                }
            }
        })], 1), _v(" "), _c("div", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.Followers",
                value: {record: $_detailRecordModel},
                expression: "{record: $_detailRecordModel}",
                modifiers: {Followers: !0}
            }], staticClass: "col-9 f-4 text-center c-pointer"
        }, [_v("\n                            " + _s(translate("LBL_FOLLOWERS")) + "\n                        ")])]) : _e(), _v(" "), isFollowingSupported ? _c("b-dd-divider", {staticClass: "m-0"}) : _e(), _v(" "), isTagsSupported ? _c("div", {staticClass: "pb-2"}, [_c("b-dd-header", {staticClass: "px-3 pb-2 text-dark"}, [_v(_s(translate("LBL_TAGS")))]), _v(" "), _c("div", {staticClass: "px-2 d-flex flex-wrap align-items-center overflow-auto tagsContainer"}, [_l(recordTags, (function (e) {
            return _c("span", {staticClass: "badge badge-pill badge-secondary text-dark font-weight-normal mx-2 my-1 p-2"}, [_c("span", {staticClass: "mt-1"}, [_v(_s(e))]), _v(" "), _c("i", {
                staticClass: "fa fa-times-circle ml-1 c-pointer",
                on: {
                    click: function (t) {
                        return removeTag(e)
                    }
                }
            })])
        })), _v(" "), _c("span", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.Tags",
                value: {record: $_detailRecordModel, showExisting: !0},
                expression: "{record: $_detailRecordModel,showExisting: true}",
                modifiers: {Tags: !0}
            }],
            staticClass: "c-pointer py-1 vt-badge-rounded vt-badge-rounded_lg d-flex align-items-center justify-content-center my-1 mx-2"
        }, [_c("i", {staticClass: "fa fa-plus"})])], 2)], 1) : _e(), _v(" "), _c("vds-header-more-title-actions", {
            attrs: {
                isPreview: isPreview,
                moduleModel: $_currentModuleModel,
                record: $_detailRecordModel,
                recordIds: $id,
                modulename: $module
            }
        }), _v(" "), $_detailRecordModel && $_detailRecordModel.cancel_signature ? _c("b-dd-divider", {staticClass: "m-0"}) : _e(), _v(" "), $_detailRecordModel && $_detailRecordModel.cancel_signature ? _c("div", {staticClass: "d-flex justify-content-around text-center"}, [_c("div", {staticClass: "w-100 p-2"}, [_c("i", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.EsignClickToCancelModal",
                value: {parentRecord: $_detailRecordModel.id, module: $module},
                expression: "{parentRecord:$_detailRecordModel.id, module:$module}",
                modifiers: {EsignClickToCancelModal: !0}
            }],
            staticClass: "c-pointer headerTitleActions text-grey-4 fa fa-cancelesign py-3 f-3 fa-lg",
            attrs: {title: translate("LBL_CANCEL_ESIGN_DOCS", "Esign")}
        })]), _v(" "), _c("div", {staticClass: "w-100 p-2 border-left"}, [_c("i", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.EsignClickToReplaceModal",
                value: {parentRecord: $_detailRecordModel.id, module: $module},
                expression: "{parentRecord:$_detailRecordModel.id, module:$module}",
                modifiers: {EsignClickToReplaceModal: !0}
            }],
            staticClass: "c-pointer headerTitleActions text-grey-4 fa fa-esignreplace py-3 f-3 fa-lg",
            attrs: {title: translate("LBL_REPLACE_ESIGN", "Esign")}
        })])]) : _e(), _v(" "), _c("b-dd-divider", {staticClass: "m-0"}), _v(" "), _c("div", {staticClass: "d-flex justify-content-around text-center"}, [isPrintSupported ? _c("div", {staticClass: "w-100 p-2"}, [_c("i", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.PrintData",
                value: {record: $_detailRecordModel},
                expression: "{record:$_detailRecordModel}",
                modifiers: {PrintData: !0}
            }],
            staticClass: "c-pointer headerTitleActions text-grey-4 fa fa-print py-3 f-3",
            attrs: {title: translate("LBL_PRINT")}
        })]) : _e(), _v(" "), isDuplicateSupported && $_currentModuleModel.isCreateable ? _c("div", {
            staticClass: "w-100 p-2",
            class: isPrintSupported ? "border-left" : ""
        }, [_c("i", {
            staticClass: "c-pointer headerTitleActions text-grey-4 far fa-clone py-3 f-3",
            attrs: {title: translate("LBL_DUPLICATE")},
            on: {
                click: function (e) {
                    return e.stopPropagation(), duplicateRecord($_detailRecordModel)
                }
            }
        })]) : _e(), _v(" "), isDeleteSupported && $_detailRecordModel.isDeleteable ? _c("div", {
            staticClass: "w-100 p-2",
            class: isDuplicateSupported || isPrintSupported ? "border-left" : ""
        }, [_c("i", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.DetailDelete",
                value: {record: $_detailRecordModel, moduleName: $module, isPreview: isPreview},
                expression: "{record:$_detailRecordModel,moduleName:$module, isPreview : isPreview}",
                modifiers: {DetailDelete: !0}
            }],
            staticClass: "c-pointer headerTitleActions text-grey-4 far fa-trash py-3 f-3",
            attrs: {title: translate("LBL_DELETE")}
        })]) : _e(), _v(" "), isEditSupported && $_detailRecordModel.isEditable ? _c("div", {
            staticClass: "w-100 p-2",
            class: isDuplicateSupported || isPrintSupported || isDeleteSupported ? "border-left" : ""
        }, [_c("i", {
            staticClass: "c-pointer  headerTitleActionsfar text-grey-4 fa-pencil py-3 f-3",
            attrs: {title: translate("LBL_EDIT")},
            on: {
                click: function (e) {
                    return editRecord($_detailRecordModel)
                }
            }
        })]) : _e()])], 1)])], 1)
    },
    mounted: function () {
        this.init()
    },
    computed: {
        starred: {
            get() {
                return this.$_detailRecordModel.getRawValue("starred")
            }, set(e) {
                this.$_detailRecordModel.set("starred", e)
            }
        }, recordTags: {
            get() {
                let e = this.$_detailRecordModel.getRawValue("tags");
                return void 0 === e || "" == e ? [] : e.split(",")
            }, set(e) {
                this.$_detailRecordModel.set("tags", e)
            }
        }
    },
    methods: {
        init() {
            this.$root.$on("vds::tags::modal::hide", this.updateTags)
        }, updateTags(e) {
            let t = e.myTags, i = e.selectedTags, a = e.recordTags, d = Object.keys(a);
            i.forEach(e => {
                let i = _.findKey(t, {tag: e});
                Object.keys(a).includes(i) || (d = d.concat(i))
            });
            let s = "";
            d.forEach(e => {
                s += t[e].tag + ","
            }), s = s.slice(0, -1), this.recordTags = s
        }, removeTag(e) {
            this.getMyTags().then(t => {
                let i = t;
                Object.keys(i).forEach(t => {
                    i[t].tag == e && this.appStore.request("api_delete", {
                        url: "tags/unlink",
                        params: {module: this.$module, id: t, record: this.$_detailRecordModel.getId()}
                    }).then(() => {
                        let t = this.recordTags;
                        t.splice(t.indexOf(e), 1), this.recordTags = t.toString()
                    }), this.clearTagsCache({module: this.$module})
                })
            })
        }, duplicateRecord(e) {
            this.isPreview && this.$bubble("vds::detail::preview::close", e.getId()), this.redirectUrl("view/edit?id=" + e.getId() + "&module=" + this.$module + "&mode=duplicate")
        }, editRecord(e) {
            var t = this.getEditViewUrl(this.$module, e.getId());
            this.redirectUrl(t)
        }
    }
});
var Vtiger_Component_DetailInvoiceRelatedRecord = Vtiger_Component_DetailInventoryRelatedRecord.extend({});
var Vtiger_Component_DetailMoreHeaderFields = App.vtComponent.extend({
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_AjaxEditRestrictedModules],
    render: function anonymous() {
        with (this) return _c("div", [_c("b-dropdown", {
            ref: "moreHeaderFields",
            staticClass: "scrollableDropdown",
            attrs: {toggleClass: "p-0 d-flex align-items-center", right: "", variant: "link", size: "lg"}
        }, [_c("template", {slot: "button-content"}, [_c("span", {staticClass: "h6 m-0"}, [_v(" + " + _s(moreHeadersCount) + " " + _s(translate("LBL_MORE", $module)))])]), _v(" "), _l(moreHeaders, (function (e) {
            return _c("div", [e.isViewableInDetail ? _c("b-dropdown-text", {staticClass: "dropdown-item py-2 headerField"}, [_c("div", {staticClass: "d-flex w-100"}, [_c("div", {staticClass: "d-flex align-items-center w-100"}, [_c("div", {staticClass: "text-muted"}, [_v(_s(translate(e.label, $module)) + " : ")]), _v(" "), _c("span", {staticClass: "text-truncate"}, [_c("vds-field-display", {
                attrs: {
                    isCompact: !0,
                    record: recordModel,
                    field: e,
                    modulemodel: $_currentModuleModel,
                    view: "moreHeaderDropDown",
                    title: e.label
                }
            })], 1), _v(" "), e.editable && recordModel && !recordModel.isClosed && recordModel.isEditable && !isDeepDiveEditEnabled && !recordModel.isRecordLocked && isAjaxEditAllowed ? _c("span", {
                staticClass: "text-primary ml-2 editIcon opacity-0",
                on: {
                    click: function (t) {
                        return showEditField(e)
                    }
                }
            }, [_c("i", {staticClass: "fa-pencil"})]) : _e()])])]) : _e()], 1)
        }))], 2)], 1)
    },
    props: {
        moreHeaders: Object,
        recordModel: {type: Object, default: this.$_detailRecordModel},
        fieldModel: {type: Object}
    },
    data: () => ({fieldName: ""}),
    computed: {
        moreHeadersCount() {
            return Object.keys(this.moreHeaders).length
        }, isDeepDiveEditEnabled() {
            return this.appStore.get("deepdive_save_button_show")
        }
    },
    mounted() {
        setTimeout(() => {
            this.$refs.moreHeaderFields.rootCloseListener = function (e) {
                e != this && jQuery(e.$el).closest(this.$el).length <= 0 && (this.visible = !1)
            }
        }, 200)
    },
    methods: {
        showEditField(e) {
            Vue.set(this, "fieldName", e.fieldname), this.$refs.moreHeaderFields.hide(), this.$emit("update:fieldModel", e)
        }
    }
});
var Vtiger_Component_DetailOneViewAdditionalTopWidget = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_DetailPhoneCallsRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    computed: {
        recordLabel() {
            return this.record.user.label
        }, relatedViews: () => [{}], widgetHeaderFields() {
            let e = [], t = ["callstatus", "customer", "direction"];
            for (var l in t) e.push(this.moduleModel.getField(t[l]));
            let r = [];
            for (let t in e) {
                let l = e[t];
                l && l.isViewableInDetail && this.record.fieldHasValue(t) && r.push(l)
            }
            return r
        }
    }
});
var Vtiger_Component_DetailPotentialsRelatedRecord = Vtiger_Component_DetailContactsRelatedRecord.extend({
    data: () => ({relatedContact: Vtiger_Module_Model.getInstance({loaded: !1}, "Contacts")}),
    computed: {
        relatedViews() {
            return [{
                name: "upcoming",
                icon: "list-alt",
                header: this.translate("LBL_UP_NEXT"),
                component: App.getDynamicComponentInstance("PotentialsUpcomingWidget")
            }, {
                name: "keyFields",
                icon: "keyfield",
                header: this.translate("LBL_KEY_FIELDS"),
                component: App.getDynamicComponentInstance("RecordKeyFields")
            }]
        }
    },
    created() {
        this.getRelatedContactDetails()
    },
    methods: {
        getRelatedContactDetails() {
            let e = this.record.get("contact_id");
            if (!_.isUndefined(e) && 0 != e.id) {
                let t = {id: e.id, _loaded: !1};
                this.relatedContact = Vtiger_Module_Model.getInstance(t, "Contacts")
            }
        }, call() {
            this.showModal({
                componentName: App.loadComponent("VtigerBuiltinPhoneCallsController", "PhoneCalls"),
                componentData: {record: this.relatedContact, modulename: "Contacts"}
            })
        }, composeEmail() {
            this.showModal({
                componentName: "ListViewComposeEmail",
                componentData: {record: this.relatedContact, modulename: "Contacts"}
            })
        }, sms() {
            this.showModal({
                componentName: "ListViewSendSMS",
                componentData: {record: this.relatedContact, modulename: "Contacts"}
            })
        }
    }
});
var Vtiger_Component_DetailPreview = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    components: {"vds-detail-view": App.loadComponent("DetailView")},
    props: {
        module: {type: String},
        id: {type: [Number, String]},
        viewtype: {type: String},
        previewRecord: {
            type: [Object], default: () => {
            }
        },
        previewNoListReload: {type: [Boolean], default: !1}
    },
    data() {
        return {namespaceStore: "preview_" + this.id, updated: !1, deleted: !1, defaultUserDetailView: this.viewtype}
    },
    created() {
        this.$currentUser && this.$currentUser.default_record_view && !this.viewtype && (this.defaultUserDetailView = "Detail" == this.$currentUser.default_record_view ? "deepdive" : "summary"), this.updatedFields = []
    },
    mounted() {
        this.listenForModalClose(), this.listenForUpdate(), this.listenForDelete(), this.listenForRecordChange(), this.trackUpdatedFields()
    },
    methods: {
        listenForModalClose() {
            this.$on("vds::detail::preview::close", e => {
                this.$root.$emit("bv::hide::modal", "detailRecordPreview_" + e)
            })
        }, triggerParentViewUpdate() {
            this.previewNoListReload || !this.updated && !this.deleted || (this.updated && !this.deleted && this.updatedRecord ? this.$bubble("vds::list::record::update", this.updatedRecord, this.updatedFields) : this.$bubble("vds::list::reload"))
        }, listenForUpdate() {
            let e = e => e == this.id && (this.updated = !0);
            this.$on("vds::detail::preview::updated", e), App.event.on("pre.record.save", (t, d) => {
                e(d.record.getId())
            })
        }, listenForDelete() {
            this.$on("vds::record::deleted", e => e == this.id && (this.deleted = !0))
        }, listenForRecordChange() {
            this.updatedRecord = !1;
            let e = this.id, t = this.namespaceStore + `_Record_${e}_recordDetails`;
            this.$watch("$store.state." + t, e => {
                e && (this.updatedRecord = e)
            })
        }, compareTwoRecordModels(e, t) {
            let d = [];
            for (var i in e) _.isEqual(e[i], t[i]) || d.push(i);
            return d
        }, trackUpdatedFields() {
            let e = {};
            this.updatedFields = [], this.$watch("$_detailRecordModel", (t, d) => {
                if (!_.isEmpty(e) && e._loaded) {
                    let d = this.compareTwoRecordModels(t, e);
                    this.updatedFields = [...this.updatedFields, ...d]
                }
                e = JSON.parse(JSON.stringify(t))
            }, {immediate: !0})
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "detailRecordPreview_" + id,
                size: "xxl",
                "hide-header": !0,
                "hide-footer": !0,
                "body-class": "p-0 detailRecordPreview border rounded shadow"
            }, on: {hide: triggerParentViewUpdate}
        }, [_c("vds-detail-view", {
            ref: "detailView",
            attrs: {
                module: module,
                id: id,
                viewtype: defaultUserDetailView,
                "is-preview": !0,
                "preview-record": previewRecord
            }
        })], 1)
    }
});
var Vtiger_Component_DetailPurchaseOrderRelatedRecord = Vtiger_Component_DetailInventoryRelatedRecord.extend({});
var Vtiger_Component_DetailQuotesRelatedRecord = Vtiger_Component_DetailInventoryRelatedRecord.extend({});
var Vtiger_Component_DetailRecentActivitiesAdditionalActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_DetailRecentActivityRelatedList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord],
    props: {activity: String, selectedActivityId: [Number, String]},
    components: {"vds-detail-recent-activities": App.loadComponent("DetailRecentActivityRelatedListContents")},
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "pt-3"}, [_c("vds-detail-recent-activities", {
            attrs: {
                recordId: $_detailRecordModel.getId(),
                activity: activity,
                "selected-activity-id": selectedActivityId
            }
        })], 1)
    }
});
var Vtiger_Component_DetailRecentActivityRelatedListContents = Vtiger_Component_DetailRecentActivities.extend({
    props: {activity: String, selectedActivityId: [Number, String]}, data() {
        return {showAddCommentButton: !0, showCommentBox: !1, dropdownText: this.translate("Filters"), showFilter: !0}
    }, methods: {
        updateCommentButton() {
            this.showAddCommentButton = !1, this.showCommentBox = !0, this.showCommentInput = !this.showCommentInput
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex flex-grow-1 justify-content-between align-items-center mb-2"}, [_c("h5", {staticClass: "mb-0"}, [_v(_s(translate("LBL_ACTIVITY")))]), _v(" "), _c("div", {staticClass: "float-right"}, [isCommentsAllowed && (showAddCommentButton || showCommentInput) ? _c("button", {
            staticClass: "btn btn-primary",
            class: {"mr-3": showFilter},
            attrs: {type: "button", "reactions-enabled": reactionsEnabled},
            on: {
                click: function (t) {
                    return updateCommentButton()
                }
            }
        }, [_v(_s(translate("LBL_ADD_COMMENT")))]) : _e(), _v(" "), showFilter ? _c("vds-filterdropdown", {
            staticClass: "float-right completedActivitiesDropdown",
            attrs: {
                transform: transformFilterData,
                options: filterOptions,
                separator: !0,
                lazy: !1,
                "dropdown-text": dropdownText
            },
            model: {
                value: selectedFilters, callback: function (t) {
                    selectedFilters = t
                }, expression: "selectedFilters"
            }
        }) : _e()], 1)]), _v(" "), showCommentBox && isCommentsAllowed ? _c("div", {staticClass: "form-group"}, [showCommentInput ? _e() : _c("vds-comment", {
            attrs: {
                comment: draftComment,
                currentModule: $module,
                relatedTo: recordId,
                relatedModule: $module,
                focus: !0,
                hasCancel: !0
            }, on: {
                "vds::postcomment::save": function (t) {
                    return postCommentSave()
                }, "vds::enable::commentInput": function (t) {
                    showCommentInput = !0
                }
            }
        })], 1) : _e(), _v(" "), _c("div", {
            staticStyle: {border: "0px !important"},
            attrs: {id: "completedActivitiesBlock"}
        }, [_l(recentActivities, (function (t) {
            return _c("vds-" + t.activity.toLowerCase() + "-activity", {
                key: t.id,
                tag: "component",
                staticClass: "border border-bottom mb-1 rounded bg-grey-hue-7",
                attrs: {
                    data: t,
                    "parent-record-id": parseInt(recordId),
                    parentRecord: $_detailRecordModel,
                    "selected-activity-id": selectedActivityId,
                    "reactions-enabled": reactionsEnabled
                },
                on: {
                    "vds::postcomment::save": function (t) {
                        return postCommentSave()
                    }
                }
            })
        })), _v(" "), showCommentInput && !recentActivities.length ? _c("div", {staticClass: "text-center p-3 rounded"}, [_v("\n\t\t\t\t\t" + _s(translate("LBL_NO_ACTIVITIES_FOUND")) + "\n\t\t\t\t")]) : _e()], 2)])
    }
});
var Vtiger_Component_DetailRecordBanner = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, App.loadMixin("Record")],
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    render: function anonymous() {
        with (this) return isRecordClosed ? _c("div", {
            staticClass: "d-flex justify-content-center align-items-center closedAlert bg-light-yellow",
            attrs: {id: "recordBanner"}
        }, [_c("vds-field-display", {
            attrs: {
                record: $_detailRecordModel,
                field: statusField,
                modulemodel: $_currentModuleModel
            }
        }), _v(" "), _c("span", {staticClass: "mx-2"}, [_v(_s(translate("JS_REOPEN_MESSAGE", $module)))]), _v(" "), _c("button", {
            staticClass: "btn btn-secondary btn-sm c-pointer rounded-sm",
            on: {
                click: function (e) {
                    return reopenDetailRecord()
                }
            }
        }, [_v("\n                        " + _s(translate("JS_REOPEN", $module)) + "\n                    ")])], 1) : _e()
    },
    data() {
        return {statusField: "", recordModel: BaseModel.getModuleSpecificModel(this.$module, "Record", {})}
    },
    watch: {
        $_detailRecordModel() {
            this.recordModel = this.$_detailRecordModel
        }
    },
    computed: {
        isRecordClosed() {
            let e = this.$_detailRecordModel, t = this.$_currentModuleModel;
            return !(!e.isClosed || !t.closedStateDetails) && (this.statusField = t.closedStateDetails.status_field, this.reopenStatus = t.closedStateDetails.reopen_status, !0)
        }
    },
    methods: {
        reopenDetailRecord() {
            this.recordModel[this.statusField] = this.reopenStatus, this.reOpenRecord(this.$id, this.$module).then(e => {
                e && this.retrieveRecord(this.$id, this.$module).then(e => {
                    this.$_currentModuleModel.isPSLineItemsEnabled && e.resolveLineItems(), this.appStore.set({
                        key: "Detail_Record_Model",
                        data: this.transformRecordToUserFormat(e, this.$_currentModuleModel)
                    }), 0 == this.$namespaceStore.indexOf("preview_") && this.$bubble("vds::detail::preview::updated", this.$id)
                })
            })
        }
    }
});
var Vtiger_Component_DetailRecordDescription = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, App.loadMixin("Record"), Vtiger_Mixin_DependentFields],
    data: () => ({
        showMoreBtn: !0,
        expandText: !1,
        descriptionEdit: !1,
        clonedDescription: "",
        showEditIcon: !1,
        descriptionField: null
    }),
    props: {descriptionContent: {type: [String]}},
    computed: {
        masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.recordModel
        }, description() {
            let e;
            if (this.descriptionContent ? e = this.descriptionContent : this.$_detailRecordModel && (e = this.$_detailRecordModel.getDisplayValue("description")), e) return "<div>" + e + "</div>"
        }, descriptionLabel() {
            return this.translate("LBL_DESCRIPTION")
        }, recordModel() {
            return this.$_detailRecordModel
        }, checkIfDescriptionIsEditable() {
            if (this.$_currentModuleModel.isLoaded && this.recordModel.isLoaded) return this.descriptionField = this.$_currentModuleModel.getField("description"), !(!this.recordModel.isEditable || !this.descriptionField.isEditable || this.recordModel.isClosed)
        }
    },
    methods: {
        showORhideContent() {
            this.showMoreBtn = !this.showMoreBtn
        }, save() {
            if (!this.checkIfDescriptionIsEditable) return this.cancel(), void this.showErrorNotification(this.translate("LBL_NOT_EDITABLE_BECAUSE_OF_DEPENDENCY"));
            this.$validator.validate().then(e => {
                let t = {
                    field: "description",
                    value: this.recordModel.description,
                    module: this.$module,
                    id: this.recordModel.id
                };
                this.reviseField(t).then(e => {
                    if (e) {
                        this.descriptionEdit = !1;
                        let t = this.transformRecordToUserFormat(e, this.$_currentModuleModel);
                        this.appStore.set({key: "Detail_Record_Model", data: t}), this.checkIfViewMoreOptionRequired()
                    }
                }, e => {
                    this.showErrorNotification(e.message), this.descriptionEdit = !1
                })
            })
        }, cancel() {
            this.descriptionEdit = !1, Vue.set(this.recordModel, "description", this.clonedDescription)
        }, editDescriptionField(e) {
            if (this.checkIfDescriptionIsEditable) {
                if (e) {
                    if (jQuery(e.target).closest("a").length) return
                }
                this.descriptionEdit = !0, this.clonedDescription = this.$_detailRecordModel.description
            }
        }, checkIfViewMoreOptionRequired() {
            this.$once("hook:updated", () => {
                setTimeout(() => {
                    let e = jQuery(this.$el).find(".descriptionContent");
                    e.prop("scrollHeight") > e.prop("offsetHeight") && (this.expandText = !0)
                }, 500)
            })
        }
    },
    mounted() {
        this.checkIfViewMoreOptionRequired()
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("div", [descriptionEdit ? _c("div", {staticClass: "test mb-4"}, [_c("ui-field-edit-type", {
            attrs: {
                focusOnField: !0,
                field: descriptionField,
                record: recordModel
            }
        }), _v(" "), _c("div", {staticClass: "d-flex justify-content-end mt-2"}, [_c("button", {
            staticClass: "btn btn-secondary mr-2",
            on: {click: cancel}
        }, [_v(_s(translate("LBL_CANCEL")))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary",
            on: {click: save}
        }, [_v(_s(translate("LBL_SAVE")))])])], 1) : _c("div", {
            on: {
                click: function (e) {
                    return editDescriptionField(e)
                }
            }
        }, [description && description.length > 0 && descriptionField && descriptionField.isViewable ? _c("div", {staticClass: "mb-4"}, [_c("div", {staticClass: "mb-2 mb-0 h5 descriptionLabel"}, [_v(_s(descriptionLabel))]), _v(" "), _c("div", {
            staticClass: "rounded p-3-5 bg-white detailRecord descriptionContainer defaultBoxShadow list-no-overflow c-pointer position-relative",
            class: showEditIcon && checkIfDescriptionIsEditable ? "c-pointer" : "c-text",
            on: {
                mouseover: function (e) {
                    showEditIcon = !0
                }, mouseleave: function (e) {
                    showEditIcon = !1
                }
            }
        }, [_c("i", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showEditIcon && checkIfDescriptionIsEditable,
                expression: "showEditIcon && checkIfDescriptionIsEditable"
            }], staticClass: "fa fa-pencil-alt text-grey-4 position-absolute r-0 mr-3"
        }), _v(" "), _c("div", {
            staticClass: "image-no-overflow pr-3",
            class: {descriptionContent: showMoreBtn},
            domProps: {innerHTML: _s(linkify(purifyContent(description)))}
        }), _v(" "), expandText ? _c("div", {
            staticClass: "mt-3 w-maxContent", on: {
                click: function (e) {
                    return e.stopPropagation(), showORhideContent()
                }
            }
        }, [showMoreBtn ? _c("span", {staticClass: "d-flex c-pointer text-primary"}, [_v(_s(translate("LBL_VIEW_MORE")))]) : _e(), _v(" "), showMoreBtn ? _e() : _c("span", {staticClass: "d-flex c-pointer text-primary"}, [_v(_s(translate("LBL_VIEW_LESS")))])]) : _e()])]) : checkIfDescriptionIsEditable ? _c("div", {staticClass: "mb-4"}, [_c("div", {
            staticClass: "rounded p-3-5 bg-grey-hue-7 border-grey-3 dottedBorder text-center",
            class: checkIfDescriptionIsEditable ? "c-pointer" : "c-text"
        }, [_c("span", [_c("i", {staticClass: "fa-plus mr-1"}), _v(_s(translate("Add Description")))])])]) : _e()])])
    }
});
var Vtiger_Component_DetailRelated = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_RelationUtils],
    components: {
        "vds-related-list": App.loadComponent("DetailRelatedList"),
        "vds-related-tabs": App.loadComponent("DetailRelatedTabs")
    },
    props: {viewMode: String, activity: String, selectedActivityId: [Number, String], recordMode: String},
    data() {
        let e = {
            height: {type: [String, Number]},
            relations: {},
            activeRelationId: !1,
            relationTypes: {
                __person__: e => !!e.isPersonModule && e.isPersonModule,
                __inventory__: e => !!e.isInventoryModule && e.isInventoryModule,
                __organization__: e => "Accounts" == e.name,
                __issue__: e => !!e.isIssueModule && e.isIssueModule,
                __item__: e => !!e.isItemModule && e.isItemModule,
                __activity__: e => !["Calendar", "Tasks", "Events"].includes(e.name) && ("Emails" == e.name || !!e.isActivityModule && e.isActivityModule),
                __custom__: e => e.isCustomModule
            },
            relationsGroupByType: {},
            groupSelectedRelationId: !1,
            oneViewModuleName: this.translate("ONE_VIEW"),
            oneViewComponent: null,
            oneViewModules: [],
            relatedListComponent: {template: "<span></span>"},
            cleanRelation: Vtiger_Relation_Model.getCleanInstance(this.$module)
        }, t = function (e) {
            let t = jQuery.extend({isDummy: !0}, e);
            return Object.defineProperty(t, "groupedRelations", {
                value: {},
                writable: !0,
                enumerable: !0,
                configurable: !0
            }), t
        }, i = new Vtiger_Relation_Model(t({
            icon: "fa-contacts",
            relation_id: "__person__",
            label: this.translate("LBL_PERSON")
        }));
        Object.defineProperty(e.relationTypes, "__person__relationModel", {value: i});
        let l = new Vtiger_Relation_Model(t({
            icon: "fa-invoice",
            relation_id: "__inventory__",
            label: this.translate("LBL_SALES_OPS")
        }));
        Object.defineProperty(e.relationTypes, "__inventory__relationModel", {value: l});
        let o = new Vtiger_Relation_Model(t({
            icon: "fa-activity",
            relation_id: "__activity__",
            label: this.translate("LBL_ACTIVITY")
        }));
        Object.defineProperty(e.relationTypes, "__activity__relationModel", {value: o});
        let a = new Vtiger_Relation_Model(t({
            icon: "fa fa-th",
            relation_id: "__custom__",
            label: this.translate("LBL_CUSTOM_MODULES")
        }));
        Object.defineProperty(e.relationTypes, "__custom__relationModel", {value: a});
        let n = new Vtiger_Relation_Model(t({
            icon: "fa-accounts",
            relation_id: "__organization__",
            label: this.translate("Accounts")
        }));
        Object.defineProperty(e.relationTypes, "__organization__relationModel", {value: n});
        let s = new Vtiger_Relation_Model(t({
            icon: "fa-cases",
            relation_id: "__issue__",
            label: this.translate("LBL_ISSUES")
        }));
        Object.defineProperty(e.relationTypes, "__issue__relationModel", {value: s});
        let d = new Vtiger_Relation_Model(t({
            icon: "fa-products",
            relation_id: "__item__",
            label: this.translate("LBL_ITEMS")
        }));
        return Object.defineProperty(e.relationTypes, "__item__relationModel", {value: d}), e
    },
    computed: {
        activeRelation() {
            if (this.activeRelationId) {
                if (_.contains(Object.keys(this.relationTypes), this.activeRelationId)) {
                    let e = this.relationTypes[this.activeRelationId + "relationModel"],
                        t = this.groupSelectedRelationId, i = Object.keys(e.groupedRelations);
                    return i.includes(t) || (this.groupSelectedRelationId = t = i[0]), e.groupedRelations[t]
                }
                return this.relations[this.activeRelationId]
            }
            return this.cleanRelation
        }, groupedRelationModuleList() {
            let e = {};
            if (this.activeRelationId) if (_.contains(Object.keys(this.relationTypes), this.activeRelationId)) {
                let t = this.relationTypes[this.activeRelationId + "relationModel"];
                for (let i in t.groupedRelations) e[i] = t.groupedRelations[i]
            } else for (let t in this.relationsGroupByType) {
                let i = this.relationsGroupByType[t];
                if (Object.keys(i).includes(this.activeRelationId)) {
                    this.groupSelectedRelationId = this.activeRelationId, this.activeRelationId = t;
                    let i = this.relationTypes[this.activeRelationId + "relationModel"];
                    for (let t in i.groupedRelations) e[t] = i.groupedRelations[t]
                }
            }
            return e
        }, groupedRelations() {
            let e = [];
            for (let t in this.relations) {
                let i = this.relations[t];
                if (this.oneViewModules.includes(i.relatedModuleName) && !i.isCustom) continue;
                let l = !1;
                for (let o in this.relationTypes) {
                    if ((0, this.relationTypes[o])(i.relatedModuleModel)) {
                        if ("__activity__" == o) {
                            l = !0;
                            continue
                        }
                        this.relationsGroupByType[o] = this.relationsGroupByType[o] || {}, this.relationsGroupByType[o][t] = i;
                        let a = this.relationTypes[o + "relationModel"];
                        a.groupedRelations[t] = i;
                        let n = e.findIndex(e => e.id == a.id);
                        -1 == n ? e.push(a) : e[n] = a, l = !0;
                        break
                    }
                }
                if (!l) {
                    let l = VTHelper.getInventoryModules();
                    if ("__oneview__" == t) e.unshift(i); else if ("__recommendations__" == t) e.unshift(i); else if ("__tasks__" == t) e.unshift(i); else if ("__events__" == t) e.unshift(i); else if ("__analytics__" === t) e.unshift(i); else if ("__PS_RELATION_ID" == t) {
                        let t = e.findIndex(e => "__oneview__" == e.relation_id);
                        e.splice(++t, 0, i)
                    } else if ("__recentactivities__" == t) if (l.includes(this.$module)) e.unshift(i); else {
                        let t = e.findIndex(e => "__events__" == e.relation_id);
                        e.splice(++t, 0, i)
                    } else "__chatanalysis__" == t ? e.splice(0, 0, i) : e.push(i)
                }
            }
            return e
        }
    },
    mounted() {
        let e = this.$watch("$_currentModuleModel", t => {
            t.isLoaded && (this.init(), e())
        });
        this.getDetailViewHeight(), this.$root.$on("vds::widgets::refresh", e => {
            this.$refs.widgetContainer && this.$refs.widgetContainer.refreshWidgets(e)
        }), this.$root.$on("vds-related-record-added", e => {
            this.oneViewModules.includes(e.modulename) ? this.activeRelationId = "__oneview__" : this.activeRelationId = e.relation_id
        })
    },
    watch: {
        activeRelationId: {
            handler(e) {
                let t = this.getRelatedTabName(e);
                this.appStore.set({
                    key: "selectedRelatedTab",
                    data: t
                }), VTHelper.pushDataToUrl({relatedtab: t}, !0), "Potentials" == this.$module && "__tasks__" == e && App.root.$emit("vds::deals::journey::tasks::click"), "Potentials" == this.$module && "__analytics__" == e && App.root.$emit("vds::deals::analytics::click")
            }
        }, "activeRelation.relatedModule": {
            handler() {
                this.relatedListComponent = {template: "<span></span>"}, this.loadRelatedListComponent()
            }
        }
    },
    methods: {
        init() {
            this.getRelatedModules(this.$module)
        }, groupChange(e) {
            this.groupSelectedRelationId = e;
            for (let e in this.groupedRelations) if (this.groupedRelations[e].groupedRelations) for (let t in this.groupedRelations[e].groupedRelations) this.groupedRelations[e].groupedRelations[t].relation_id === this.groupSelectedRelationId && VTHelper.pushDataToUrl({relatedtab: this.groupedRelations[e].groupedRelations[t].relatedModuleName}, !0)
        }, addLineItemsRelationModel() {
            if (this.$_currentModuleModel && this.$_currentModuleModel.isPSLineItemsEnabled) {
                let e = "PSLineItems", t = Vtiger_Relation_Model.getCleanInstance(e, {
                    relation_id: "__PS_RELATION_ID",
                    relatedModuleName: e,
                    label: this.translate("Line Items"),
                    icon: "fa-lineitem",
                    actions: "[ADD]"
                });
                this.relations.__PS_RELATION_ID = t
            }
        }, addInventoryRelatedRelationModels() {
            if (this.$_currentModuleModel && this.$_currentModuleModel.isInventoryModule) {
                let e = Vtiger_Relation_Model.getCleanInstance("RecentActivity", {
                    relation_id: "__recentactivities__",
                    relatedModuleName: "RecentActivity",
                    label: this.translate("Activity"),
                    icon: "fa fa-hourglass-end"
                });
                this.relations.__recentactivities__ = e, this._getModuleDescribe("PrintTemplates", !0).then(e => {
                    if (e && e.viewable) {
                        let e = Vtiger_Relation_Model.getCleanInstance("Settings", {
                            relation_id: "__settings__",
                            relatedModuleName: "Settings",
                            label: this.translate("Settings"),
                            icon: "fa fa-cog"
                        });
                        this.relations.__settings__ = e
                    }
                })
            }
        }, isRestrictedModule: e => !1, isRelationRestricted: e => !1, getRelatedModules(e) {
            this.retrieveRelations(e).then(e => {
                let t = Vtiger_RelationCollection_Model.getModuleSpecificModel(this.$module, "RelationCollection", {
                    module: this.$module,
                    relations: e
                }), i = !1, l = !1;
                this.relations = t.relations;
                for (let e in this.relations) {
                    let t = this.relations[e];
                    t.isDisplayable || delete this.relations[e], this.isRestrictedModule(t.relatedModuleName) || this.isRelationRestricted(t) ? delete this.relations[e] : "Calendar" == t.relatedModuleName ? ("get_activities" == t.name ? (i || (i = t), l || (l = t)) : 9 == t.related_tabid ? i = t : 16 == t.related_tabid && (l = t), delete this.relations[e]) : "Webchat" == t.relatedModuleName && delete this.relations[e]
                }
                if (!this.isRestrictedModule("Analytics")) {
                    let e = Vtiger_Relation_Model.getCleanInstance("Analytics", {
                        relation_id: "__analytics__",
                        relatedModuleName: "Analytics",
                        label: this.translate("LBL_ANALYTICS"),
                        icon: "fa fa-chart-line",
                        actions: ""
                    });
                    this.relations.__analytics__ = e
                }
                if (l && "Tasks" !== this.$module && "ProjectMilestone" !== this.$module) {
                    let e = l, t = Vtiger_Relation_Model.getCleanInstance("Events", {
                        relation_id: "__events__",
                        relatedModuleName: "Events",
                        label: "WorkOrders" == this.$module ? this.translate("Service Appointments", "Calendar") : this.translate("LBL_EVENTS", "Events"),
                        icon: "fa-calendar",
                        calendarRelation: e
                    });
                    this.relations.__events__ = t
                }
                if (i || "Potentials" == this.$module) {
                    let e = i, t = Vtiger_Relation_Model.getCleanInstance("Tasks", {
                        relation_id: "__tasks__",
                        relatedModuleName: "Tasks",
                        label: "Tasks" == this.$module ? this.translate("JS_RELATED_TASKS", "Calendar") : this.translate("LBL_TASKS", "Calendar"),
                        icon: "Potentials" == this.$module ? "fa fa-check" : "fa fa-tasks",
                        actions: "[ADD]",
                        calendarRelation: e
                    });
                    this.relations.__tasks__ = t
                }
                if (this.addLineItemsRelationModel(), this.addInventoryRelatedRelationModels(), this.addCustomWidgets(), null !== this.oneViewComponent) {
                    let e = Vtiger_Relation_Model.getCleanInstance(this.oneViewModuleName, {
                        relation_id: "__oneview__",
                        relatedModuleName: this.oneViewModuleName,
                        label: this.oneViewModuleName,
                        icon: "fa-street-view",
                        actions: ""
                    });
                    this.relations.__oneview__ = e
                }
                this.fillRelationModuleModels(this.relations).then(e => this.selectFirstRelation())
            })
        }, addCustomWidgets() {
        }, selectFirstRelation() {
            let e = this.appStore.get("selectedRelatedTab");
            if (e) for (let t in this.relations) this.relations[t].relatedModuleName === e && (this.activeRelationId = this.relations[t].relation_id, VTHelper.pushDataToUrl({relatedtab: e}, !0));
            if (!this.activeRelationId) if (null !== this.oneViewComponent) this.activeRelationId = "__oneview__"; else for (let e in this.groupedRelations) {
                let t = this.groupedRelations[e];
                this.activeRelationId = t.get("relation_id");
                break
            }
        }, loadRelatedListComponent() {
            let e = this.activeRelation.relatedModule;
            if (e == this.oneViewModuleName) return Vue.set(this, "relatedListComponent", this.oneViewComponent), !0;
            if ("PSLineItems" == e) {
                App.loadComponent("LineItemsRelatedList", "PSLineItems")(e => {
                    Vue.set(this, "relatedListComponent", e)
                })
            } else {
                let e = `Detail${this.$module}${this.activeRelation.relatedModule}RelatedList`,
                    t = `Detail${this.activeRelation.relatedModule}RelatedList`, i = "DetailRelatedList",
                    l = App.getDynamicComponentInstance(e, this.$module) || App.getDynamicComponentInstance(t, this.$module) || App.getDynamicComponentInstance(i, this.$module);
                Vue.set(this, "relatedListComponent", l)
            }
        }, checkForOneViewComponent() {
            return App.getDynamicComponentInstance("DetailOneViewRelatedList", this.$module)
        }, getRelatedTabName(e) {
            for (let t in this.groupedRelations) if (this.groupedRelations[t].relation_id === e) {
                if (this.groupedRelations[t].relatedModuleName) return this.groupedRelations[t].relatedModuleName;
                for (let e in this.groupedRelations[t].groupedRelations) {
                    if (!_.isUndefined(this.groupedRelations[t].groupedRelations[this.groupSelectedRelationId])) return this.groupedRelations[t].groupedRelations[this.groupSelectedRelationId].relatedModuleName;
                    if (this.groupedRelations[t].groupedRelations[e].relation_id) return this.groupedRelations[t].groupedRelations[e].relatedModuleName
                }
            }
        }, getDetailViewHeight: function () {
            let e = document.getElementById("topbar") ? document.getElementById("topbar").clientHeight : 0,
                t = document.getElementById("detailHeader") ? document.getElementById("detailHeader").clientHeight : 0,
                i = document.getElementById("recordBanner") ? document.getElementById("detailHeader").clientHeight : 0;
            this.height = window.innerHeight - (e + t + i)
        }, scrollFunction(e) {
            e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight && this.$root.$emit("vds::load::records")
        }, checkRelationExistsInGroupedRelation(e) {
            for (let t in this.groupedRelations) if (this.groupedRelations[t].groupedRelations) for (let i in this.groupedRelations[t].groupedRelations) if (this.groupedRelations[t].groupedRelations[i].relation_id === e) return !0;
            return !1
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex h-100"}, [_c("div", {
            staticClass: "flex-grow-1 pl-0 px-4 pb-3 pt-2 overflow-y",
            style: {"min-height": height + "px"},
            on: {
                scroll: function (e) {
                    return scrollFunction(e)
                }
            }
        }, [_c(relatedListComponent, {
            key: activeRelationId,
            ref: "widgetContainer",
            tag: "component",
            attrs: {
                relation: activeRelation,
                "relation-collection": relations,
                activeRelationId: activeRelationId,
                activity: activity,
                "selected-activity-id": selectedActivityId
            },
            on: {
                "update:activeRelationId": function (e) {
                    activeRelationId = e
                }, "update:active-relation-id": function (e) {
                    activeRelationId = e
                }
            }
        }, [_.size(groupedRelationModuleList) > 1 ? _c("template", {slot: "header-title"}, [_c("v-select2", {
            staticClass: "form-control col mr-2",
            attrs: {name: activeRelationId},
            on: {
                change: function (e) {
                    return groupChange(e)
                }
            },
            model: {
                value: groupSelectedRelationId, callback: function (e) {
                    groupSelectedRelationId = e
                }, expression: "groupSelectedRelationId"
            }
        }, _l(groupedRelationModuleList, (function (e, t) {
            return _c("option", {
                attrs: {name: e.label},
                domProps: {value: t}
            }, [_v("\n                                " + _s(translate(e.label, e.relatedModule)) + "\n                            ")])
        })), 0)], 1) : _e()], 2)], 1), _v(" "), _c("div", {
            staticClass: "p-0",
            staticStyle: {"max-width": "56px"},
            style: {"min-height": height + "px"}
        }, [_c("vds-related-tabs", {
            attrs: {relations: groupedRelations, activeRelationId: activeRelationId},
            on: {
                "update:activeRelationId": function (e) {
                    activeRelationId = e
                }, "update:active-relation-id": function (e) {
                    activeRelationId = e
                }
            }
        })], 1)])
    },
    $_onBoard: {steps: {onboard_managepipeline: ["onboard_managepipeline_relatedjourneytasks", "onboard_managepipeline_relatedoneview"]}}
});
var Vtiger_Component_DetailRelatedListHeader = App.vtComponent.extend({
    props: {
        relation: {type: Object},
        moduleName: {type: String}
    }, computed: {
        title() {
            return _.isUndefined(this.relation) ? this.translate(this.moduleName, this.moduleName) : this.translate(this.relation.label, this.relation.modulename)
        }
    }, render: function anonymous() {
        with (this) return "" != title ? _c("div", {staticClass: "py-2 d-flex justify-content-between align-items-center"}, [_t("title", [_c("h5", {staticClass: "mb-0"}, [_v(_s(title))])]), _v(" "), _t("action")], 2) : _e()
    }
});
var Vtiger_Component_DetailReminderCreateAction = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModulePermissions], data() {
        return {
            remindMeToOptions: {
                Event: {
                    name: "event",
                    label: this.translate("Schedule", "EmailSequence") + " " + this.translate("LBL_EVENT", "Calendar"),
                    icon: "fas fa-calendar",
                    module: "Events"
                },
                Email: {
                    name: "email",
                    label: this.translate("Schedule", "EmailSequence") + " " + this.translate("Email", "Settings:LayoutEditor"),
                    icon: "fas fa-envelope",
                    module: "Email"
                },
                Task: {
                    name: "task",
                    label: this.translate("Schedule", "EmailSequence") + " " + this.translate("LBL_TASK", "Calendar"),
                    icon: "fa-tasks",
                    module: "Tasks"
                }
            }
        }
    }, created() {
        this.isSendEmailAllowed || delete this.remindMeToOptions.Email
    }, methods: {
        actionsTitle() {
            return this.translate("LBL_REMIND_ME")
        }, handleAction(e) {
            "Email" != e.module ? this.showModal({
                componentName: "QuickCreateRelatedModal",
                componentData: {
                    module: this.$module,
                    record: this.$_detailRecordModel,
                    relatedAction: !0,
                    relatedModule: e.module,
                    postQuickCreateSave: this.closeStartModal
                },
                modalOnModalMode: !0
            }) : this.showModal({
                componentName: "ListViewComposeEmail",
                componentData: {record: this.$_detailRecordModel, modulename: this.$module}
            })
        }, closeStartModal() {
            this.$root.$emit("bv::hide::modal", "startActivity")
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "label mb-3"}, [_v(_s(actionsTitle()))]), _v(" "), _c("vds-wizardtiles-rectangle", {
            attrs: {actions: remindMeToOptions},
            on: {"vds::wizardtilerectangle::select": handleAction}
        })], 1)
    }
});
var Vtiger_Component_DetailSalesOrderRelatedRecord = Vtiger_Component_DetailInventoryRelatedRecord.extend({});
var Vtiger_Component_DetailShareActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal],
    data() {
        return {
            actions: {
                "share-as-link": {
                    name: "share-as-link",
                    label: this.translate("Share as link"),
                    icon: "fa fa-share-alt"
                },
                "share-as-attach": {
                    name: "share-as-attach",
                    label: this.translate("Share as attachment"),
                    icon: "fa fa-share-alt"
                }
            }
        }
    },
    methods: {
        handleAction(a) {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "label mb-3"}, [_v(" " + _s(translate("LBL_HOW_DO_YOU_WANT_TO_SHARE")) + " ")]), _v(" "), _c("vds-wizardtiles-rectangle", {
            attrs: {actions: actions},
            on: {"vds::wizardtilerectangle::select": handleAction}
        })], 1)
    }
});
var Vtiger_Component_DetailStartNewActivity = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModulePermissions], data() {
        return {
            activities: {
                DetailEmailAction: {
                    name: "DetailEmailAction",
                    label: this.translate("LBL_EMAIL", "Ondemand"),
                    icon: "fas fa-envelope"
                },
                PhoneCall: {name: "PhoneCall", label: this.translate("LBL_CALL", "Calendar"), icon: "fas fa-phone-alt"},
                ListViewSendSMS: {
                    name: "ListViewSendSMS",
                    label: this.translate("LBL_SMS", "Notifications"),
                    icon: "fas fa-comment"
                },
                logMeeting: {name: "logMeeting", label: "Log a meeting", icon: "fa-calendar"}
            }, activeActivity: "", activityData: "", relatedAction: !0, relatedModule: "Events"
        }
    }, computed: {
        title() {
            return this.translate("LBL_START_AN")
        }
    }, created() {
        let t = VTHelper.getCallingAllowedModules();
        _.contains(t, this.$module) && !AppStorage.get("phonecalls_deprecated") || delete this.activities.PhoneCall, this.isSendEmailAllowed || delete this.activities.DetailEmailAction, this.$_detailRecordModel && this.$_detailRecordModel.send_for_signature && (this.activities.sendForSignature = {
            name: "sendForSignature",
            label: this.translate("LBL_SEND_PDF_FOR_SIGNING", "Esign"),
            icon: "fa-esign"
        });
        let e = !1, i = AppStorage.get("app_module_permissions");
        i && i.Whatsapp && (e = i.Whatsapp.creatable), "Contacts" == this.$module && e && (this.activities.SendWhatsapp = {
            name: "SendWhatsapp",
            label: "Whatsapp",
            icon: "fa-whatsapp"
        })
    }, methods: {
        handleAction(t) {
            var e = t.name;
            this.activeActivity = e, "PhoneCall" == e ? (this.activeActivity = App.loadComponent("VtigerBuiltinPhoneCallsController", "PhoneCalls"), this.activityData = {
                record: this.$_detailRecordModel,
                modulename: this.$module
            }) : "logMeeting" == e ? (this.activityData = {
                module: this.$module,
                record: this.$_detailRecordModel,
                relatedAction: this.relatedAction,
                relatedModule: this.relatedModule,
                activitytype: "Meeting",
                postQuickCreateSave: this.closeStartModal
            }, this.activeActivity = "QuickCreateRelatedModal") : "sendForSignature" == e ? (this.activeActivity = "EsignClickToSendModal", this.activityData = {
                module: this.$module,
                "parent-record": this.$_detailRecordModel.id,
                modulename: this.$module
            }) : "SendWhatsapp" == e ? (this.activeActivity = App.loadComponent("SendWhatsapp", "Whatsapp"), this.activityData = {
                module: this.$module,
                record: this.$_detailRecordModel
            }) : this.activityData = {
                record: this.$_detailRecordModel,
                modulename: this.$module
            }, this.showModal({
                componentName: this.activeActivity,
                componentData: this.activityData,
                modalOnModalMode: !0
            })
        }, closeStartModal() {
            this.$root.$emit("bv::hide::modal", "startActivity")
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "label mb-3"}, [_v(_s(title))]), _v(" "), _c("vds-wizardtiles-rectangle", {
            attrs: {actions: activities},
            on: {"vds::wizardtilerectangle::select": handleAction}
        })], 1)
    }
});
var Vtiger_Component_DetailTasksRelatedList = Vtiger_Component_DetailEventsRelatedList.extend({
    components: {"vds-related-list-header": App.loadComponent("DetailRelatedListHeader")},
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_DateUtils, Vtiger_Mixin_JourneyTemplatesUtils, App.loadMixin("Record"), Vtiger_Mixins_ShowModal, App.loadMixin("DependentFields")],
    data() {
        return {
            salesStages: "",
            taskSequence: {},
            taskSequenceRecordIds: [],
            progress: "",
            showMoreStages: !1,
            showByIndex: null,
            tasksSortOrder: [],
            dealModuleDesc: {},
            targetField: "",
            recordModel: BaseModel.getModuleSpecificModel(this.$module, "Record", {}),
            nextStageValue: ""
        }
    },
    created() {
        this.getDealsModuleModel()
    },
    mounted() {
        var e = this.$_currentModuleModel.getHeaderProgressionFields();
        Object.keys(e).length && (this.targetField = e.targetField), "Potentials" == this.$module && (this.getTaskSequence(), this.listenPipelineChange()), this.$root.$off("vds::tasks::preview::modal::post::completed"), this.$root.$on("vds::tasks::preview::modal::post::completed", e => {
            e && (e.sales_stage == this.currentSalesStage && this.checkDependencyOnNextStage(), this.updateAndCheckForStateTasksCompletion(e))
        }), this.$root.$on("vds::on::record::progression::stage::change", () => {
            this.loadDealNewTaskSequnce()
        }), this.$root.$on("vds::activity::completed", (e, t) => {
            t && (t.sales_stage == this.currentSalesStage && this.checkDependencyOnNextStage(), this.$root.$emit("vds::update::upcomingactivities"), this.loadDealNewTaskSequnce(), this.updateAndCheckForStateTasksCompletion(t))
        });
        let t = this.$watch("$_detailRecordModel", e => {
            e.isLoaded && (this.calculateRecordModel(), Vue.nextTick(() => {
                t()
            }))
        }, {immediate: !0})
    },
    computed: {
        masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.$_detailRecordModel
        }, currentSalesStage() {
            return this.$_detailRecordModel.sales_stage
        }, previousSalesStages() {
            let e = [];
            for (let t of this.salesStages) if (t.value !== this.currentSalesStage) e.push(t.value); else if (t.value === this.currentSalesStage) break;
            return e
        }, otherTaskRecords() {
            if ("Potentials" !== this.$module) return this.relatedRecords;
            return this.relatedRecords.filter(e => !this.taskSequenceRecordIds.includes(e.getId()))
        }, calendarRelation() {
            return Vtiger_Relation_Model.getCleanInstance("Tasks", $.extend(!0, {}, this.relation.calendarRelation, {relatedModuleName: "Tasks"}))
        }
    },
    methods: {
        calculateRecordModel() {
            let e = JSON.parse(JSON.stringify(this.$_detailRecordModel)),
                t = BaseModel.getModuleSpecificModel(this.module, "Record", e);
            this.recordModel = t
        }, loadDealNewTaskSequnce() {
            this.getTaskSequence(), this.listenPipelineChange()
        }, getDealsModuleModel() {
            this._getModuleDescribe("Potentials").then(e => {
                if (e.isLoaded) {
                    this.dealModuleDesc = e;
                    let t = this.dealModuleDesc.getField("sales_stage"),
                        s = this.getPipelineSalesStageOrder(t, this.$_currentModuleModel, this.$_detailRecordModel.pipeline);
                    this.tasksSortOrder = [];
                    for (let e in s) this.tasksSortOrder.push(s[e].value.toString())
                }
            })
        }, loadAllSalesStages() {
            this.salesStages = this.$_currentModuleModel.getField("sales_stage").picklistValues
        }, prepareStageData() {
            this.loadAllSalesStages();
            let e = this.$_currentModuleModel, t = [];
            if (e.closedStateDetails) {
                let s = e.closedStateDetails;
                s && s.status_field && "sales_stage" == s.status_field && s.status_values && (t = s.status_values)
            }
            for (let e of this.salesStages) t && t.includes(e.value) || Vue.set(this.taskSequence, e.value, {
                records: {},
                label: e.label,
                completed: !1,
                partiallyCompleted: !1,
                color: e.color
            })
        }, markAsSkipped(e, t, s, a) {
            let i;
            i = "Task" === s ? "taskstatus" : "eventstatus", this.appStore.request("api_patch", {
                url: "records",
                params: {field: i, value: "Skipped", module: "Calendar", id: t}
            }).then(s => {
                let i = BaseModel.getModuleSpecificModel("Calendar", "Record", s);
                Vue.set(this.taskSequence[e].records[a], t, i), Vue.set(this.$_detailRecordModel, "progress", this.calculateProgressPercentage()), this.checkStageStatus(), this.$root.$emit("vds::activity::completed", t), this.checkIfNextStageValuesAreClosesStates()
            }, e => {
                this.showErrorNotification(e.message)
            })
        }, markCompleted(e, t, s, a) {
            let i, l;
            e == this.currentSalesStage && this.checkDependencyOnNextStage(), "Task" === s ? (i = "taskstatus", l = "Completed") : (i = "eventstatus", l = "Held"), this.appStore.request("api_patch", {
                url: "records",
                params: {field: i, value: l, module: "Calendar", id: t}
            }).then(s => {
                let i = BaseModel.getModuleSpecificModel("Calendar", "Record", s);
                Vue.set(this.taskSequence[e].records[a], t, i), Vue.set(this.$_detailRecordModel, "progress", this.calculateProgressPercentage()), this.checkStageStatus(), this.$root.$emit("vds::activity::completed", t), s && "Task" != s.activitytype && this.$root.$emit("vds::event::held", s), this.checkIfNextStageValuesAreClosesStates()
            }, e => {
                this.showErrorNotification(e.message)
            })
        }, checkDependencyOnNextStage() {
            let e = 0, t = this.taskSequence[this.currentSalesStage].records, s = "";
            for (let l in t) {
                s = t[l];
                for (let s in t[l]) {
                    let a = t[l][s];
                    a.isClosed && (a.isClosed || "Skipped" == a.taskstatus || "Skipped" == a.eventstatus) && e++
                }
                if (e == _.size(s)) {
                    var a = this.salesStages.findIndex(e => e.value === this.currentSalesStage),
                        i = this.salesStages[a + 1].value;
                    this.nextStageValue = i
                }
            }
        }, checkStageStatus() {
            for (let e in this.taskSequence) {
                let t = !1, s = !1, a = 0, i = this.taskSequence[e].records, l = [];
                for (let e in i) for (let t in i[e]) l.push(i[e][t]);
                if (l.length > 0) {
                    for (let e in l) l[e].isClosed && a++;
                    a === l.length ? t = !0 : a > 0 && (s = !0), Vue.set(this.taskSequence[e], "completed", t), Vue.set(this.taskSequence[e], "partiallyCompleted", s)
                }
            }
        }, getTaskSequence() {
            this.appStore.request("api_get", {
                url: "records/journeyactions",
                params: {module: this.$module, id: this.$id},
                key: "journey_actions"
            }).then(e => {
                this.prepareStageData();
                for (let t in e) for (let s in e[t]) {
                    let a = e[t][s], i = s || "None";
                    Vue.set(this.taskSequence[this.translate(t)].records, i, {});
                    for (let e in a) {
                        let s = Vtiger_Record_Model.getCleanInstance(a[e]._moduleName, a[e]);
                        this.taskSequenceRecordIds.push(s.getId()), Vue.set(this.taskSequence[this.translate(t)].records[i], e, s)
                    }
                }
                this.calculateProgressPercentage(), this.checkStageStatus()
            })
        }, calculateProgressPercentage() {
            let e = 0, t = 0;
            for (let s in this.taskSequence) {
                let a = this.taskSequence[s].records;
                for (let s in a) for (let i in a[s]) {
                    let l = a[s][i];
                    if (e++, l.isClosed) {
                        if (l.isClosed && ("Skipped" == l.taskstatus || "Skipped" == l.eventstatus)) continue;
                        t++
                    }
                }
            }
            return Math.ceil(t / e * 100)
        }, watchForStageCompletion() {
            this.$watch(() => ({stage: this.taskSequence[this.currentSalesStage]}), e => {
                e.stage && e.stage.completed && this.retrieveLatestSalesStage()
            }, {deep: !0})
        }, retrieveLatestSalesStage() {
            this.appStore.set({
                key: `Record_${this.$_detailRecordModel.id}_recordDetails`,
                data: !1
            }), this.retrieveRecord(this.$_detailRecordModel.id, this.$module).then(e => {
                this.$_detailRecordModel.sales_stage = e.sales_stage, this.nextStageValue = e.sales_stage, this.$_detailRecordModel.isclosed = e.isclosed, this.$root.$emit("vds::update::upcomingactivities"), this.$root.$emit("vds::record::reload::metrics"), 0 == this.$namespaceStore.indexOf("preview_") && this.$bubble("vds::detail::preview::updated", this.$_detailRecordModel.getId())
            })
        }, showModalPreview(e) {
            var t = VTHelper.getCalendarSpecificModule(e);
            "Tasks" == t ? this.showModal({
                componentName: App.loadComponent("PreviewModal", t),
                componentData: {module: t, record: e.id, sourceRecordId: e.id},
                modalOnModalMode: !1
            }) : this.showModal({
                componentName: App.loadComponent("PreviewModal", t),
                componentData: {module: t, activityRecord: {id: e.id}, sourceRecordId: e.id},
                modalOnModalMode: !1
            })
        }, getRelatedListParams() {
            let e = new SearchParams;
            return e.pushAll("activitytype", "e", "Task"), {
                module: this.$module,
                id: this.$_detailRecordModel.getId(),
                relationid: this.calendarRelation.relation_id,
                page: this.pageNum,
                q: JSON.stringify(e.data)
            }
        }, getExtraFields() {
            return new Promise((e, t) => {
                var s = [], a = ["email", "phone"];
                this._getModuleDescribe("Tasks").then(t => {
                    var i = t;
                    (s = i ? Object.keys(i.getFieldsOfType(a)) : s).push("primary_phone_field", "primary_email_field"), e(s)
                })
            })
        }, getTasksWidgetTitle() {
            let e = this.translate("LBL_TASKS", "Calendar");
            return "Potentials" == this.$module && (e = this.translate("Other") + " " + e), e
        }, getRelatedRecordComponent() {
            return new Promise((e, t) => {
                this.relatedComponent = App.getDynamicComponentInstance("DetailTasksRelatedRecord", this.$module), e(this.relatedComponent)
            })
        }, listenPipelineChange() {
            let e = function () {
            };
            e = this.$watch("$_detailRecordModel._loaded", t => {
                t && (e(), this.$watch("$_detailRecordModel.pipeline", () => {
                    this.getTaskSequence(), this.$root.$emit("vds::update::upcomingactivities")
                }))
            }, {immediate: !0})
        }, updateAndCheckForStateTasksCompletion(e) {
            let t = BaseModel.getModuleSpecificModel("Calendar", "Record", e);
            Vue.set(this.taskSequence[this.currentSalesStage].records[e.due_date], e.id, t), Vue.set(this.$_detailRecordModel, "progress", this.calculateProgressPercentage()), this.checkStageStatus(), this.$root.$emit("vds::activity::completed", e.id), e && "Task" != e.activitytype && this.$root.$emit("vds::event::held", e), this.checkIfNextStageValuesAreClosesStates()
        }, checkIfNextStageValuesAreClosesStates() {
            if (!_.where(this.taskSequence, {completed: !1}).length) {
                let e = this.$_currentModuleModel, t = [];
                if (e.closedStateDetails) {
                    let s = e.closedStateDetails;
                    s && s.status_field && "sales_stage" == s.status_field && s.status_values && (t = s.status_values)
                }
                this.showModal({
                    componentName: "SalesStageClosedStatesModal",
                    componentData: {module: "Potentials", closedStateValues: t, salesStages: this.salesStages},
                    modalOnModalMode: !1
                })
            }
        }, triggerDependencyAndSave() {
            if (this.$_detailRecordModel.set(this.targetField, this.nextStageValue), this.masterModuleModel.dependentTriggererFields.includes(this.targetField)) var e = this.$watch("dynamicUpdatedFields", (t, s) => {
                if (_.size(t) || (this.recordModel.set(this.targetField, this.nextStageValue), this.save()), _.size(t)) {
                    let e = Object.keys(this.dynamicallyUpdatedEditableFields);
                    if (e.length > 0) {
                        let t = JSON.parse(JSON.stringify(this.recordModel)),
                            s = BaseModel.getModuleSpecificModel(this.$module, "Record", t);
                        s.set(this.targetField, this.nextStageValue), this.showModal({
                            componentName: App.loadComponent("DependentFieldsModal", this.$module),
                            componentData: {
                                module: this.$module,
                                record: s,
                                triggerFieldModel: this.masterModuleModel.getField(this.targetField),
                                targetFields: e
                            },
                            modalOnModalMode: !0
                        }), this.$off("vds::dependentfields::save"), this.$on("vds::dependentfields::save", e => {
                            let t = e.triggerFieldModel;
                            t && this.recordModel.set(t.name, s.get(t.name));
                            let a = e.targetFieldModelList;
                            for (var i in a) {
                                let e = s.get(i);
                                this.recordModel.set(i, e)
                            }
                            this.save()
                        }), this.$off("vds::dependentfields::close"), this.$on("vds::dependentfields::close", e => {
                            let t = e.triggerFieldModel;
                            t && (this.$_detailRecordModel.set(t.name, this.previousSalesStages.value), this.save())
                        })
                    }
                }
                e()
            })
        }, save() {
            this.saveRecord(this.recordModel, this.$_currentModuleModel).then(e => {
                this.$root.$emit("vds::record::saved"), this.$root.$emit("bv::hide::modal", "ClosedStateValues");
                let t = this.transformRecordToUserFormat(e, this.$_currentModuleModel);
                this.appStore.set({key: "Detail_Record_Model", data: t})
            })
        }
    },
    watch: {
        currentSalesStage: {
            handler() {
                this.watchForStageCompletion()
            }, immediate: !0
        }, nextStageValue: {
            handler(e) {
                this.triggerDependencyAndSave()
            }, immediate: !0
        }
    },
    render: function anonymous() {
        with (this) return _c("div", ["Potentials" == $module ? _c("div", {staticClass: "d-flex justify-content-between"}, [_c("vds-related-list-header", {attrs: {relation: relation}}, [_c("h5", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_JOURNEY_TASKS")))])]), _v(" "), _c("h5", {staticClass: "d-flex w-50 justify-content-end align-items-center"}, [_c("div", {staticClass: "progress w-75"}, [_c("div", {
            staticClass: "progress-bar",
            style: {width: $_detailRecordModel.progress + "%"},
            attrs: {
                role: "progressbar",
                "aria-valuenow": $_detailRecordModel.progress,
                "aria-valuemin": "0",
                "aria-valuemax": "100"
            }
        })]), _v(" "), _c("span", {staticClass: "pl-1"}, [_v(_s(Math.ceil($_detailRecordModel.progress)) + "%")])])], 1) : _e(), _v(" "), "Potentials" == $module ? _c("div", {staticClass: "d-flex flex-column mt-3 border rounded activitySequenceStages"}, [_l(tasksSortOrder, (function (e, t) {
            return _.keys(taskSequence).length && taskSequence[e] ? _c("div", {class: e == currentSalesStage || -1 != previousSalesStages.indexOf(e) || showMoreStages ? "" : "d-none"}, [_c("div", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: e.split(" ").join("_"),
                    expression: "stage.split(' ').join('_')"
                }],
                staticClass: "d-flex justify-content-between align-items-center text-dark p-3 c-pointer",
                class: {currentStage: e == currentSalesStage},
                attrs: {id: "activitySequenceCollapse", href: "#" + e.split(" ").join("_")}
            }, [_c("div", {staticClass: "d-flex flex-grow-1"}, [_c("div", {
                staticClass: "rounded-circle",
                staticStyle: {width: "16px", height: "16px"},
                style: "background-color:" + taskSequence[e].color
            }), _c("span", {staticClass: "pl-2"}, [_v(_s(taskSequence[e].label))])]), _v(" "), taskSequence[e].completed ? _c("div", {staticClass: "pr-3"}, [_c("vds-checkbox", {
                attrs: {completed: taskSequence[e].completed},
                model: {
                    value: taskSequence[e].completed, callback: function (t) {
                        $set(taskSequence[e], "completed", t)
                    }, expression: "taskSequence[stage]['completed']"
                }
            })], 1) : !taskSequence[e].completed && -1 != previousSalesStages.indexOf(e) && _.size(taskSequence[e].records) > 0 ? _c("div", {staticClass: "text-danger"}, [_c("i", {staticClass: "fa fa-exclamation-triangle"})]) : _e()]), _v(" "), _c("b-collapse", {
                attrs: {
                    visible: e == currentSalesStage,
                    id: e.split(" ").join("_")
                }
            }, [_c("div", {staticClass: "py-2 px-3"}, [_l(taskSequence[e].records, (function (t, s) {
                return "None" !== s ? _c("div", ["None" !== s ? _c("div", [_c("span", [_v(_s(translate("LBL_DUE", $module)))]), _v(" " + _s(getMonthAndDay(s)))]) : _c("div", [_c("span", [_v(_s(translate("LBL_DUE_DATE_NOT_SET", $module)))])]), _v(" "), _l(t, (function (t) {
                    return _c("div", {
                        staticClass: "mt-1 px-2",
                        staticStyle: {
                            "'width": "422px",
                            height: "40px",
                            "border-radius": "4px",
                            "background-color": "#f2f6fa"
                        }
                    }, [_c("div", {
                        staticClass: "d-flex justify-content-between align-items-center py-2",
                        on: {
                            mouseleave: function (e) {
                                showByIndex = null
                            }, mouseover: function (e) {
                                showByIndex = t.id
                            }
                        }
                    }, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("span", {staticClass: "pl-1 pr-1"}, [!t.isClosed || "Skipped" != t.eventstatus && "Skipped" != t.taskstatus ? _c("vds-checkbox", {
                        attrs: {
                            status: t.isClosed,
                            completed: t.isClosed,
                            disabled: t.isClosed,
                            id: "checkbox_" + t.id
                        }, on: {
                            change: function (a) {
                                return markCompleted(e, t.id, t.activitytype, s)
                            }
                        }
                    }) : _c("i", {
                        staticClass: "fa fa-times-circle text-danger fa-20px cursorPointerNotAllowed",
                        attrs: {id: "checkbox_" + t.id}
                    })], 1), _v(" "), _c("label", {
                        staticClass: "form-check-label c-pointer mb-1",
                        class: !t.isClosed || "Skipped" != t.eventstatus && "Skipped" != t.taskstatus ? "pl-4" : "pl-1",
                        attrs: {for: "checkbox_" + t.id},
                        on: {
                            click: function (e) {
                                return showModalPreview(t)
                            }
                        }
                    }, [_c("span", [_v(_s(t.subject))])])]), _v(" "), t.isClosed || showByIndex !== t.id ? _e() : _c("div", [_c("span", {
                        staticClass: "badge badge-pill badge-secondary c-pointer",
                        on: {
                            click: function (a) {
                                return markAsSkipped(e, t.id, t.activitytype, s)
                            }
                        }
                    }, [_c("i", {staticClass: "fas fa-times-hexagon pr-1"}), _v(_s(translate("JS_SKIP", $module)))])])])])
                }))], 2) : _e()
            })), _v(" "), _l(taskSequence[e].records, (function (t, s) {
                return "None" === s || "" == s ? _c("div", ["None" !== s ? _c("div", [_c("span", [_v(_s(translate("LBL_DUE", $module)))]), _v(" " + _s(getMonthAndDay(s)))]) : _c("div", [_c("span", [_v(_s(translate("LBL_DUE_DATE_NOT_SET", $module)))])]), _v(" "), _l(t, (function (t) {
                    return _c("div", {
                        staticClass: "mt-1 px-2",
                        staticStyle: {
                            "'width": "422px",
                            height: "40px",
                            "border-radius": "4px",
                            "background-color": "#f2f6fa"
                        }
                    }, [_c("div", {
                        staticClass: "d-flex justify-content-between align-items-center py-2",
                        on: {
                            mouseleave: function (e) {
                                showByIndex = null
                            }, mouseover: function (e) {
                                showByIndex = t.id
                            }
                        }
                    }, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("span", {staticClass: "pl-1 pr-1"}, [!t.isClosed || "Skipped" != t.eventstatus && "Skipped" != t.taskstatus ? _c("vds-checkbox", {
                        attrs: {
                            status: t.isClosed,
                            completed: t.isClosed,
                            disabled: t.isClosed,
                            id: "checkbox_" + t.id
                        }, on: {
                            change: function (a) {
                                return markCompleted(e, t.id, t.activitytype, s)
                            }
                        }
                    }) : _c("i", {
                        staticClass: "fa fa-times-circle text-danger fa-20px",
                        attrs: {id: "checkbox_" + t.id}
                    })], 1), _v(" "), _c("label", {
                        staticClass: "form-check-label c-pointer mb-1",
                        class: !t.isClosed || "Skipped" != t.eventstatus && "Skipped" != t.taskstatus ? "pl-4" : "pl-1",
                        attrs: {for: "checkbox_" + t.id},
                        on: {
                            click: function (e) {
                                return showModalPreview(t)
                            }
                        }
                    }, [_c("span", [_v(_s(t.subject))])])]), _v(" "), t.isClosed || showByIndex !== t.id ? _e() : _c("div", [_c("span", {
                        staticClass: "badge badge-pill badge-secondary c-pointer",
                        on: {
                            click: function (a) {
                                return markAsSkipped(e, t.id, t.activitytype, s)
                            }
                        }
                    }, [_c("i", {staticClass: "fas fa-times-hexagon pr-1"}), _v(_s(translate("JS_SKIP", $module)))])])])])
                }))], 2) : _e()
            })), _v(" "), 0 == _.size(taskSequence[e].records) ? _c("div", {staticClass: "py-2 text-center"}, [_v("\n                                " + _s(translate("LBL_NO_TASKS")) + "\n                            ")]) : _e()], 2)])], 1) : _e()
        })), _v(" "), showMoreStages ? _c("div", [_c("div", {
            staticClass: "d-flex align-items-center text-primary p-3 c-pointer",
            on: {
                click: function (e) {
                    showMoreStages = !1
                }
            }
        }, [_c("i", {staticClass: "fa pr-2 fa-angle-up"}), _v("\n                        " + _s(translate("LBL_COLLAPSE_UPCOMING_STAGES", $module)) + "\n                    ")])]) : _c("div", [_c("div", {
            staticClass: "d-flex align-items-center text-primary p-3 c-pointer",
            on: {
                click: function (e) {
                    showMoreStages = !0
                }
            }
        }, [_c("i", {staticClass: "fa pr-2 fa-angle-right"}), _v("\n                        " + _s(translate("LBL_VIEW_UPCOMING_STAGES", $module)) + "\n            ")])])], 2) : _e(), _v(" "), _c("vds-related-list-header", {
            staticClass: "mt-2",
            attrs: {relation: relation}
        }, [_c("h5", {
            staticClass: "mb-0",
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(getTasksWidgetTitle()))]), _v(" "), _c("template", {slot: "action"}, [isRelatedListActionPermitted() ? _c("vds-select-related-record-actions", {
            attrs: {
                showAllRecords: showAllRecords,
                relation: calendarRelation
            }, on: {
                "update:showAllRecords": function (e) {
                    showAllRecords = e
                }, "update:show-all-records": function (e) {
                    showAllRecords = e
                }, "vds::popup:record::selected": link
            }
        }) : _e()], 1)], 2), _v(" "), _c("div", {
            staticClass: "widget-list",
            attrs: {role: "tablist"}
        }, [_.isUndefined(otherTaskRecords) || otherTaskRecords.length ? _e() : _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))]), _v(" "), _l(otherTaskRecords, (function (e, t) {
            return _c("div", {key: t}, [e.getId() ? _c(relatedComponent, {
                key: e.getId(),
                tag: "component",
                attrs: {
                    module: calendarRelation.relatedModule,
                    record: e,
                    index: t,
                    parentModuleModel: $_currentModuleModel,
                    relation: calendarRelation,
                    expanded: !t
                },
                on: {"vds::related:record::action": handleAction}
            }) : _e()], 1)
        })), _v(" "), !loading && pageExists ? _c("div", {
            staticClass: "moreRecordsLink text-center text-primary c-pointer mt-2",
            on: {click: getRelatedRecords}
        }, [_v(_s(translate("LBL_SHOW_MORE")))]) : _e()], 2)], 1)
    }
});
var Vtiger_Component_DetailTasksRelatedRecord = Vtiger_Component_DetailRelatedRecord.extend({
    data: () => ({headerLimit: 3, editableHeaders: ["taskstatus"], defaultHeaderFields: ["taskstatus"]}),
    computed: {
        recordActions() {
            let e = [{
                name: "duplicate",
                label: this.translate("LBL_DUPLICATE"),
                icon: "clone",
                handler: this.duplicate
            }];
            return this.relation && ["1:N", "N:N"].includes(this.relation.relationtype) && e.push({
                name: "unlink",
                label: this.translate("LBL_UNLINK"),
                icon: "times",
                handler: this.unlinkRecord
            }), e
        }, relatedViews() {
            return [{
                name: "subTasks",
                icon: "list-alt",
                header: this.translate("JS_SUBTASKS"),
                component: App.getDynamicComponentInstance("RelatedSubtasksWidget", "Tasks")
            }, {
                name: "keyFields",
                icon: "keyfield",
                header: this.translate("LBL_KEY_FIELDS"),
                component: App.getDynamicComponentInstance("RecordKeyFields")
            }]
        }
    },
    mounted() {
        this.init(), this.$on("vds::subtask::added", () => {
            this.clearRecordFromCache(this.record.getId()), this.retrieveRecord(this.record.getId(), this.$module).then(e => {
                Vue.set(this.record, "date_start", e.date_start), Vue.set(this.record, "time_start", e.time_start), Vue.set(this.record, "due_date", e.due_date), Vue.set(this.record, "time_end", e.time_end)
            })
        })
    },
    methods: {
        duplicate() {
            this.redirectUrl("view/edit?id=" + this.record.getId() + "&module=" + this.$module + "&mode=duplicate", {}, !1, !0)
        }, addReminder() {
        }, prepareRecordToSave() {
            var e = this.constructor.super.options.methods.prepareRecordToSave.call(this);
            return e && e.hasOwnProperty("date_start") && (e.time_start = this.recordModel.time_start), e && e.hasOwnProperty("due_date") && (e.time_end = this.recordModel.time_end), e
        }
    }
});
var Vtiger_Component_DetailUpcomingActivities = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, App.loadMixin("Module"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_EmailActionsData],
    components: {
        "vds-upcoming-activities": App.loadComponent("UpcomingActivities"),
        "vds-overdue-activities": App.loadComponent("OverdueActivities")
    },
    props: {displayHeader: {type: Boolean, default: !0}},
    data: () => ({
        activities: {},
        counts: {upcoming: 0, overdue: 0},
        activityModule: "Calendar",
        activityView: "",
        activityProps: "",
        emptyActivities: {},
        loading: !0,
        restrictedModules: ["Events", "Tasks"],
        displayLimit: 5,
        showAll: !1
    }),
    mounted() {
        this.init(), this.setEmptyActivities(), this.$root.$on("vds::update::upcomingactivities", this.upcomingHandler)
    },
    computed: {
        allActivities() {
            let t = [];
            return _.isArray(this.activities.overdueActivities) && (t = t.concat(this.activities.overdueActivities)), _.isArray(this.activities.upcomingActivities) && (t = t.concat(this.activities.upcomingActivities)), t
        }
    },
    watch: {
        "counts.upcoming"() {
            this.$nextTick(() => {
                this.$forceUpdate()
            })
        }, "counts.overdue"() {
            this.$nextTick(() => {
                this.$forceUpdate()
            })
        }
    },
    beforeDestroy() {
        this.$root.$off("vds::update::upcomingactivities", this.upcomingHandler)
    },
    methods: {
        init() {
            this.restrictedModules.includes(this.$module) || (this.getUpcomingAndOverdueActivities(), this.$root.$on("vds::activity::completed", t => {
                var i = this.activities.upcomingActivities, e = this.activities.overdueActivities;
                if (i) {
                    this.activities.upcomingActivities = _.without(this.activities.upcomingActivities, _.findWhere(this.activities.upcomingActivities, {id: t}));
                    let e = this.counts.upcoming;
                    e > 0 && i.length != this.activities.upcomingActivities.length && Vue.set(this.counts, "upcoming", e - 1)
                }
                if (e) {
                    this.activities.overdueActivities = _.without(this.activities.overdueActivities, _.findWhere(this.activities.overdueActivities, {id: t}));
                    let i = this.counts.overdue;
                    i > 0 && e.length != this.activities.overdueActivities && Vue.set(this.counts, "overdue", i - 1)
                }
            }), this.$root.$on("vds::post::related::record::quickcreate::save", t => {
                !t || "Tasks" != t.moduleName && "Events" != t.moduleName || this.reloadUpcomingAndOverdueActivities()
            }), this.$root.$on("vds::post::email::sent::refresh::upcomming", this.reloadUpcomingAndOverdueActivities))
        }, reloadUpcomingAndOverdueActivities() {
            delete this.activities.upcomingActivities, delete this.activities.overdueActivities, this.getUpcomingAndOverdueActivities()
        }, getUpcomingAndOverdueActivities() {
            if ("upcomingActivities" in this.activities || "overdueActivities" in this.activities) return;
            let t = [];
            t.push({
                type: "get",
                api: "records/upcomingactions",
                module: this.$module,
                id: this.$id
            }), t.push({type: "get", api: "records/overdueactions", module: this.$module, id: this.$id});
            this.appStore.request("api_batch", {requests: t, key: "UPCOMING_OVERDUE_ACTIVITIES"}).then(t => {
                this.loading = !1;
                let i = Object.keys(t["0-response"]).length ? JSON.parse(t["0-response"]) : [];
                Vue.set(this.activities, "upcomingActivities", i), Vue.set(this.counts, "upcoming", i.length);
                let e = Object.keys(t["1-response"]).length ? JSON.parse(t["1-response"]) : [];
                e.forEach(t => {
                    "alert" !== t.status && (t.isOverdue = !0)
                }), Vue.set(this.activities, "overdueActivities", e), Vue.set(this.counts, "overdue", e.length)
            })
        }, setEmptyActivities() {
            let t = [];
            for (var i = 0; i < 3; i++) {
                let i = {id: "", label: "", scheduled_date: "", status: "", type: ""};
                t.push(i)
            }
            this.emptyActivities = t
        }, getActivityIconClass(t) {
            if ("alert" === t.status) return "fa-smart-alert";
            let i = t.type;
            switch (i) {
                case"Task":
                    i = "Tasks";
                    break;
                case"Mobile Call":
                case"Call":
                    return i = "Phone", "fa-phone-alt";
                case"Emails":
                    break;
                default:
                    i = "Calendar"
            }
            return this.getModuleIconClass(i)
        }, mouseoverActivity(t) {
            Vue.set(t, "activityHover", !0)
        }, mouseoutActivity(t) {
            Vue.set(t, "activityHover", !1)
        }, getActivityView(t) {
            if ("alert" !== t.status) if ("Emails" === t.type) this.modalModule = "Emails", this.loadEmail(t); else {
                let i = "Tasks";
                "Task" != t.type && (i = "Events"), this.showModal({
                    componentName: "DetailPreview",
                    componentData: {module: i, id: t.id}
                })
            }
        }, loadEmail(t) {
            this.retrieveEmailActionsData(t.id, "edit").then(i => {
                this.showModal({
                    componentName: "ComposeEmailModal",
                    componentData: {
                        emailRecord: i,
                        module: this.$module,
                        emailRecordId: t.id,
                        threadId: i.threadId,
                        emailAction: "preview"
                    },
                    modalOnModalMode: !1
                })
            })
        }, completeActivity(t) {
            "alert" !== t.status && "Emails" !== t.type ? this.markComplete(t) : "alert" === t.status && this.dismissNotification(t.id)
        }, markComplete(t) {
            var i = {};
            i.id = t.id, "Task" === t.type ? (i.module = "Tasks", i.field = "taskstatus", i.value = "Completed") : (i.module = "Events", i.field = "eventstatus", i.value = "Held"), this.reviseField(i).then(i => {
                i && i.id && (this.$root.$emit("vds::activity::completed", i.id, i), this.showSuccessNotification(this.translate("JS_RECORD_UPDATED")), "Task" != t.type && this.$root.$emit("vds::event::held", t, this.$_detailRecordModel))
            }, t => {
                this.showErrorNotification(t.message)
            })
        }, dismissNotification(t) {
            var i = {url: "messages", params: {module: "Notifications", id: t}};
            this.appStore.request("api_delete", i).then(i => {
                i && i.success && (this.$root.$emit("vds::activity::completed", t), this.showSuccessNotification(this.translate("LBL_DISMISSED_NOTIFICATION")))
            }, t => {
                this.showErrorNotification(t)
            })
        }, reschedule() {
        }, upcomingHandler() {
            Vue.set(this, "activities", {}), this.getUpcomingAndOverdueActivities()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [$isLoading ? _c("div", {staticClass: "mb-4"}, [_c("div", {staticClass: "w-25"}, [_c("vds-value-progress")], 1), _v(" "), _c("vds-upcoming-activities", {
            attrs: {
                upcomings: emptyActivities,
                activityModule: activityModule,
                activityView: activityView,
                activityProps: activityProps
            }, on: {
                "update:activityModule": function (t) {
                    activityModule = t
                }, "update:activity-module": function (t) {
                    activityModule = t
                }, "update:activityView": function (t) {
                    activityView = t
                }, "update:activity-view": function (t) {
                    activityView = t
                }, "update:activityProps": function (t) {
                    activityProps = t
                }, "update:activity-props": function (t) {
                    activityProps = t
                }
            }
        })], 1) : _e(), _v(" "), $isLoading || !counts.upcoming && !counts.overdue ? _e() : _c("div", {staticClass: "mb-4"}, [displayHeader ? _c("div", {staticClass: "display-flex align-items-center mb-4"}, [_c("span", {staticClass: "h5"}, [_v(_s(translate("LBL_UP_NEXT")))]), _v(" "), _c("span", {staticClass: "ml-2 badge upcomingCounts badge-pill badge-primary font-weight-bold"}, [_v(_s(counts.upcoming + counts.overdue))])]) : _e(), _v(" "), _c("div", {staticClass: "list-group rounded-6"}, _l(allActivities, (function (t, i) {
            return showAll || i < displayLimit ? _c("div", {
                staticClass: "list-group-item border-grey-2 px-4 py-3 d-flex align-items-center c-pointer",
                class: {"bg-light-blue-3": t.activityHover},
                on: {
                    click: function (i) {
                        return getActivityView(t)
                    }, mouseover: function (i) {
                        return mouseoverActivity(t)
                    }, mouseout: function (i) {
                        return mouseoutActivity(t)
                    }
                }
            }, [_c("span", {staticClass: "text-grey-2 h4 mr-3 mb-0 mt-1"}, [_c("i", {
                staticClass: "text-grey-2",
                class: getActivityIconClass(t)
            })]), _v(" "), _c("span", {staticClass: "flex-grow-1 text-truncate"}, [_v(_s(t.label))]), _v(" "), _c("span", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: !t.activityHover && t.isOverdue,
                    expression: "!activity.activityHover && activity.isOverdue"
                }], staticClass: "badge badge-pill badge-warning bg-orange-0 px-3 py-2 ml-2 font-weight-bold"
            }, [_v(_s(translate("LBL_OVERDUE")))]), _v(" "), _c("span", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: t.activityHover,
                    expression: "activity.activityHover"
                }], staticClass: "mb-0 text-nowrap"
            }, [_c("button", {staticClass: "btn py-0"}, [_c("i", {
                staticClass: "far fa-clock text-grey-2 h4",
                attrs: {hidden: ""},
                on: {
                    click: function (t) {
                        return t.stopPropagation(), reschedule()
                    }
                }
            })]), _v(" "), _c("button", {staticClass: "btn py-0"}, ["Emails" != t.type ? _c("i", {
                staticClass: "fa fa-check text-grey-2 h4",
                on: {
                    click: function (i) {
                        return i.stopPropagation(), completeActivity(t)
                    }
                }
            }) : _e()])])]) : _e()
        })), 0), _v(" "), allActivities.length > displayLimit && !showAll ? _c("button", {
            staticClass: "btn bg-white border-grey-2 rounded-6 mt-2",
            on: {
                click: function (t) {
                    showAll = !0
                }
            }
        }, [_c("i", {staticClass: "fa fa-arrow-circle-down mr-1"}), _v("\n\t\t\t\t\t" + _s(translate("LBL_SHOW_MORE")) + "\n\t\t\t\t")]) : _e()])])
    }
});
var Vtiger_Component_DetailView = App.vtComponent.extend({
    mixins: [App.loadMixin("Record"), Vtiger_Mixin_ModuleModel],
    components: {
        "vds-detail-header": App.loadComponent("DetailViewHeader"),
        "vds-detail-body": App.loadComponent("DetailViewBody")
    },
    provide: function () {
        return {getScrollableHeight: this.getViewHeightWithoutHeader}
    },
    props: {
        module: {type: String},
        id: {type: [Number, String]},
        viewtype: {type: String},
        relatedtab: {type: String, default: ""},
        record: {type: [Object, Boolean], default: !1},
        isPreview: {type: Boolean, default: !1},
        activity: {type: String, default: ""},
        selectedActivityId: {type: [Number, String]},
        previewRecord: {
            type: [Object], default: () => {
            }
        },
        source_records: {type: String, default: "[]"},
        source_module: {type: String},
        mode: {type: String}
    },
    data: function () {
        return {
            viewMode: this.viewtype,
            recordMode: this.mode,
            detailviewallowed: !0,
            isSummaryViewAllowed: !0,
            isRelationsAllowed: !0,
            isAjaxEditAllowed: !0,
            loading: !1,
            errorMessage: "",
            recordLoaded: !1,
            showHeaderTitleActions: !0,
            defalutDetailViewExits: !0
        }
    },
    computed: {
        isDetailViewPermitted: {
            get() {
                return this.detailviewallowed
            }, set(e) {
                this.detailviewallowed = e
            }
        }, isSummaryViewPermitted: {
            get() {
                return this.isSummaryViewAllowed
            }, set(e) {
                this.isSummaryViewAllowed = e
            }
        }, isNewRelationsPermitted: {
            get() {
                return this.isRelationsAllowed
            }, set(e) {
                this.isRelationsAllowed = e
            }
        }, isAjaxEditPermitted: {
            get() {
                return this.isAjaxEditAllowed
            }, set(e) {
                this.isAjaxEditAllowed = e
            }
        }, userDefaultRecordPreview() {
            return this.$currentUser && this.$currentUser.default_record_view ? "Detail" != this.$currentUser.default_record_view || this.selectedActivityId ? "summary" : "deepdive" : ""
        }
    },
    created() {
        this.$currentUser && this.userDefaultRecordPreview && !this.viewMode && (this.viewMode = this.userDefaultRecordPreview), this.viewMode && "deepdive" == this.viewMode && !this.defalutDetailViewExits && (this.viewMode = "summary"), this.appStore.set({
            key: "Detail_Record_Model",
            data: Vtiger_Record_Model.getCleanInstance(this.$module, {id: this.$id, loaded: !1})
        }), this.relatedtab && this.appStore.set({key: "selectedRelatedTab", data: this.relatedtab}), this.init()
    },
    watch: {
        viewMode(e) {
            this.isPreview || VTHelper.pushDataToUrl({viewtype: e}, !0)
        }, "$store.state.Detail_Record_Model.isClosed"(e) {
            this.setNewRelationAllowed(e)
        }
    },
    methods: {
        init() {
            if (this.$_currentModuleModel.isLoaded) this.loadRecord(); else {
                let e = this.$watch("$_currentModuleModel", (t, i) => {
                    t.isLoaded && (this.loadRecord(), e())
                })
            }
            this.$root.$on("vds::detailview::record::reload", this.loadRecord)
        }, loadRecord() {
            if (this.record) {
                let e = this.transformRecordToUserFormat(this.record, this.$_currentModuleModel);
                this.appStore.set({key: "Detail_Record_Model", data: e})
            }
            this.loading = !0, _.isEmpty(this.previewRecord) || !this.previewRecord.isLoaded ? this.retrieveRecord(this.id, this.module).then(e => {
                this.setPreviewRecordDetails(e)
            }, e => {
                "The record you are trying to view has been deleted." == e.message && (this.errorMessage = "LBL_RECORD_DELETE"), this.isDetailViewPermitted = !1
            }) : this.setPreviewRecordDetails(this.previewRecord), this.recordLoaded = !0
        }, setPreviewRecordDetails(e) {
            this.setNewRelationAllowed(e.isClosed), this.updateRecentRecords(this.id, this.module);
            let t = JSON.parse(JSON.stringify(e));
            e = this.transformRecordToUserFormat(e, this.$_currentModuleModel), this.appStore.set({
                key: "Detail_Record_Model",
                data: e
            }), this.appStore.set({key: `Record_${e.id}_recordDetails`, data: t}), this.loading = !1
        }, setNewRelationAllowed(e) {
            this.$_currentModuleModel.isLoaded && !_.isEmpty(this.$_currentModuleModel.closedStateDetails) && (this.isNewRelationsPermitted = !e || 1 == this.$_currentModuleModel.closedStateDetails.allow_relations)
        }, getViewHeightWithoutHeader() {
            var e = document.getElementById("topbar") ? document.getElementById("topbar").clientHeight : 0,
                t = document.getElementById("detailHeader") ? document.getElementById("detailHeader").clientHeight : 0;
            return window.innerHeight - (e + t) - 70
        }
    },
    render: function anonymous() {
        with (this) return recordLoaded && isDetailViewPermitted ? _c("div", {
            staticClass: "vds-body",
            attrs: {viewtype: viewMode}
        }, [_c("vds-detail-header", {
            attrs: {
                "view-mode": viewMode,
                "is-preview": isPreview,
                isSummaryViewAllowed: isSummaryViewPermitted,
                isRelationsAllowed: isNewRelationsPermitted,
                showHeaderTitleActions: showHeaderTitleActions,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordMode
            }, on: {
                "update:viewMode": function (e) {
                    viewMode = e
                }, "update:view-mode": function (e) {
                    viewMode = e
                }, "update:recordMode": function (e) {
                    recordMode = e
                }, "update:record-mode": function (e) {
                    recordMode = e
                }
            }
        }), _v(" "), _c("vds-detail-body", {
            attrs: {
                "view-mode": viewMode,
                activity: activity,
                "selected-activity-id": selectedActivityId,
                isAjaxEditAllowed: isAjaxEditPermitted,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordMode
            }, on: {
                "update:viewMode": function (e) {
                    viewMode = e
                }, "update:view-mode": function (e) {
                    viewMode = e
                }
            }
        })], 1) : _c("div", {staticClass: "vds-body"}, [recordLoaded ? _c("vds-permission-denied", {
            attrs: {
                "is-preview": isPreview,
                message: errorMessage
            }
        }) : _e()], 1)
    }
});
var Vtiger_Component_DetailViewAdditionalBlock = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("span")
    }
});
var Vtiger_Component_DocumentStats = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Record],
    components: {
        "vds-field-display": App.loadComponent("FieldDisplay"),
        "vds-list-table": App.loadComponent("ListTable")
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                "hide-footer": "",
                lazy: !0,
                size: "lg",
                title: record.notes_title
            }
        }, [_c("div", {staticClass: "mb-2 mt-2"}, [_v(_s(translate("LBL_KEY_METRICS", $module)))]), _v(" "), _c("div", {staticClass: "container"}, [_c("div", {staticClass: "row"}, _l(documentStatFields, (function (t, e) {
            return _c("div", {staticClass: "col p-0"}, [_c("div", {staticClass: "card m-2"}, [_c("div", {staticClass: "row m-0"}, [_c("div", {staticClass: "col col-8 p-2"}, [_c("div", [_c("vds-field-display", {
                attrs: {
                    record: record,
                    field: e,
                    modulemodel: $_currentModuleModel
                }
            }), _v(" ")], 1), _v(" "), _c("div", {staticClass: "text-truncate"}, [_v(_s(t.fieldLabel))])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-center align-items-center bg-light mb-0 col-4 p-0"}, [_c("i", {
                staticClass: "fa-2x",
                class: t.icon
            })])])])])
        })), 0)]), _v(" "), _c("div", {staticClass: "mb-2 mt-2"}, [_v(_s(translate("LBL_TRACKING_DETAILS", $module)))]), _v(" "), _c("div", {staticClass: "justify-content-md-center listViewBlock p-2"}, [_c("div", {staticClass: "container-fluid listViewTableContainer"}, [_c("div", {staticClass: "table-container listTableContainer"}, [_c("vds-list-table", {
            attrs: {
                listheaders: documentStatHeaderFields,
                records: documentStatList,
                selectedrecords: [],
                resize: !1,
                showActionsColumn: !1,
                sortable: !1
            }
        })], 1)])])])
    },
    props: {recordModel: Object, module: String},
    data() {
        return {
            record: Vtiger_Record_Model.getCleanInstance(this.module, data = {}),
            documentShareStatFields: {
                open_count: {icon: "fa-envelope-open"},
                share_count: {icon: "fa fa-share-alt"},
                filedownloadcount: {icon: "fa fa-download"},
                deal_conversion_rate: {icon: "fa fa-percent"}
            },
            documentStatHeaderFields: {
                related_records: this.translate("LBL_SHARING_DETAILS", this.module),
                views: this.translate("LBL_VIEWS", this.module),
                filedownloadcount: this.translate("LBL_DOWNLOADS", this.module),
                reshares_count: this.translate("LBL_RESHARES", this.module),
                avg_time_spent: this.translate("LBL_AVG_TIME_SPENT", this.module),
                total_time_spent: this.translate("LBL_TOTAL_TIME_SPENT", this.module),
                avg_page_views: this.translate("LBL_TOTAL_PAGES_READ", this.module)
            },
            fieldMap: {
                filedownloadcount: "downloads",
                reshares_count: "reshares",
                avg_time_spent: "avg_time",
                total_time_spent: "total_time"
            },
            docShareStat: "",
            listParams: {sortfield: "", sortorder: "", page: 1, filterid: "", q: new SearchParams, text: ""}
        }
    },
    computed: {
        documentStatFields() {
            let t = this.$_currentModuleModel;
            for (let e in this.documentShareStatFields) {
                let s = t.getField(e);
                s && (Vue.set(this.documentShareStatFields[e], "fieldValue", this.record[e]), "filedownloadcount" === e ? Vue.set(this.documentShareStatFields[e], "fieldLabel", this.translate("LBL_DOWNLOADS", this.currentModule)) : "deal_conversion_rate" === e ? Vue.set(this.documentShareStatFields[e], "fieldLabel", this.translate("LBL_CONVERSION", this.currentModule)) : Vue.set(this.documentShareStatFields[e], "fieldLabel", s.get("label")))
            }
            return this.documentShareStatFields
        }, documentStatList() {
            let t = {}, e = [];
            for (let s of this.docShareStat) {
                for (let e in this.documentStatHeaderFields) if ("related_records" === e) {
                    let a = s[e];
                    for (let s of a) t[e] = s.label
                } else {
                    let a = this.fieldMap[e];
                    t[e] = s[a]
                }
                e.push(t)
            }
            return e = e.map(t => BaseModel.getModuleSpecificModel("Documents", "Record", t)), e
        }
    },
    mounted() {
        this.getDocumentRecord(), this.getDocumentSharingStatRecord(), this.appStore.set({
            key: "listParams",
            data: this.listParams
        })
    },
    methods: {
        getDocumentRecord() {
            this.retrieveRecord(this.recordModel.id, this.module).then(t => {
                this.record = t
            })
        }, getDocumentSharingStatRecord() {
            var t = {id: this.recordModel.id, module: this.module};
            this.appStore.request("api_get", {
                url: "records/metrics",
                params: t,
                key: "documentRecordMetrics"
            }).then(t => {
                this.docShareStat = t.map(t => BaseModel.getModuleSpecificModel("Documents", "Record", t))
            })
        }
    }
});
var Vtiger_Component_DocumentStatsWidget = App.vtComponent.extend({
    props: {record: {type: Object}},
    data: () => ({
        documentStatsModels: [],
        metrics: [{name: "emailOpenCount", field: "email_opens", icon: "envelope"}, {
            name: "views",
            field: "views",
            icon: "eye"
        }, {name: "viewMetrics", field: ["avg_page_views", "total_time"], icon: "percent"}, {
            name: "reshares",
            field: "reshares",
            icon: "sync-alt"
        }, {name: "downloads", field: "downloads", icon: "download"}]
    }),
    created() {
        this.init()
    },
    methods: {
        init() {
            this.getDocumentsStatsModel()
        }, getDocumentsStatsModel() {
            var e = {id: this.record.getId(), module: this.$module};
            this.appStore.request("api_get", {
                url: "records/metrics",
                params: e,
                key: "documentRecordMetrics"
            }).then(e => {
                this.documentStatsModels = e.map(e => BaseModel.getModuleSpecificModel("Documents", "Record", e))
            })
        }, getRelatedLabel: e => e.related_records.length ? _.first(e.related_records).label : "", getMetricData(e, t) {
            if (_.isArray(t.field)) {
                let i = "";
                for (field of t.field) {
                    let t = this.getStatValue(field, e[field]);
                    i += this.translate(field, "Documents") + ": " + t + "\n"
                }
                return i
            }
            {
                let i = this.getStatValue(t.field, e[t.field]);
                return this.translate(t.field, "Documents") + ": " + i
            }
        }, getStatValue(e, t) {
            if (null == t && (t = 0), "avg_page_views" == e) return t + "%";
            if ("total_time" == e) {
                let e = t % 60, i = Math.floor(t / 60), a = Math.floor(i / 60),
                    s = e + " " + this.translate("LBL_SECONDS");
                return i && (s = i + " " + this.translate("LBL_MINUTES") + " " + s), a && (s = a + " " + this.translate("LBL_HOURS") + " " + s), s
            }
            return t
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "list-group"}, _l(documentStatsModels, (function (e, t) {
            return _c("div", {staticClass: "list-group-item d-flex align-items-center justify-content-between"}, [_c("span", {staticClass: "text-truncate"}, [_v(_s(getRelatedLabel(e)))]), _v(" "), _c("span", _l(metrics, (function (t) {
                return _c("span", {
                    directives: [{
                        name: "b-tooltip",
                        rawName: "v-b-tooltip.hover",
                        modifiers: {hover: !0}
                    }],
                    staticClass: "d-inline-block icon-container-sm bg-light-blue-2 text-blue-0 text-center p-2 mx-1",
                    attrs: {title: getMetricData(e, t)}
                }, [_c("i", {staticClass: "align-top fa", class: "fa-" + t.icon})])
            })), 0)])
        })), 0)])
    }
});
var Vtiger_Component_DetailDocumentsRelatedList = Vtiger_Component_DetailRelatedList.extend({
    render: function anonymous() {
        with (this) return _c("div", [_c("vds-related-list-header", {attrs: {relation: relation}}, [_t("header-title", null, {slot: "title"}), _v(" "), _c("div", {
            attrs: {slot: "action"},
            slot: "action"
        }, [isRelatedListActionPermitted() ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.AddAttachment",
                value: {documentsRelationModel: relation, relations: relationCollection},
                expression: "{documentsRelationModel: relation, relations: relationCollection}",
                modifiers: {AddAttachment: !0}
            }],
            staticClass: "btn btn-light btn-lg p-0",
            attrs: {
                id: relation ? relation.relatedModule + "_relatedActionButton" : "",
                title: translate("LBL_ATTACH_FILES")
            }
        }, [_c("i", {staticClass: "fa fa-plus-circle"})]) : _e()])], 2), _v(" "), _l(relatedRecords, (function (e, t) {
            return [e._isEmpty ? [_c("vds-empty-related-record")] : [_c(relatedComponent, {
                tag: "component",
                attrs: {module: relation.relatedModule, relation: relation, expanded: !t, index: t, record: e},
                on: {"vds::related:record::action": handleAction}
            })]]
        })), _v(" "), relatedRecords.length ? _e() : _c("div", {staticClass: "h-100 d-flex justify-content-center align-items-center"}, [_c("div", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])])], 2)
    },
    props: {relationCollection: {default: () => BaseModel.getModuleSpecificModel(this.$module, "RelationCollection", {})}},
    methods: {
        getRelatedRecords() {
            void 0 !== this.relation.relation_id && (this.loading = !0, this.relatedRecords = this.relatedRecords.concat(this.emptyRecords), this.appStore.request("api_get", {
                url: "records/relationrecords",
                params: {
                    module: this.$module,
                    id: this.$_detailRecordModel.getId(),
                    relationid: this.relation.relation_id,
                    extrafields: ["filesize", "filetype"]
                },
                key: "related_records_data"
            }).then(e => {
                this.loading = !1, this.relatedRecords.splice(-this.emptyRecords.length, this.relatedRecords.length), _.isArray(e) && (this.relatedComponent = this.getRelatedRecordComponent(), this.relatedRecords = e.map(e => BaseModel.getModuleSpecificModel(this.relation.relatedModule, "Record", e)))
            }))
        }, isRelatedListActionPermitted() {
            return !(this.$_detailRecordModel && this.$_detailRecordModel.isClosed && this.$_currentModuleModel && this.$_currentModuleModel.closedStateDetails && this.$_currentModuleModel.closedStateDetails.allow_relations && !parseInt(this.$_currentModuleModel.closedStateDetails.allow_relations))
        }
    }
});
var Vtiger_Component_DocumentsTree = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module],
    components: {
        "vds-folder-node": App.loadComponent("FolderNode"),
        "vds-link-record-items": App.loadComponent("LinkRecordItems", "Documents")
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "row documentsTree"}, [_c("div", {staticClass: "col-4 mt-3 border-right"}, [_c("ul", {staticClass: "list-unstyled"}, _l(documentFolders, (function (e) {
            return _c("li", [_c("vds-folder-node", {
                attrs: {folder: e, "active-folder-id": activeFolderId},
                on: {
                    "update:activeFolderId": function (e) {
                        activeFolderId = e
                    }, "update:active-folder-id": function (e) {
                        activeFolderId = e
                    }
                }
            })], 1)
        })), 0)]), _v(" "), null !== activeFolderId ? _c("div", {staticClass: "col-8"}, [_c("vds-link-record-items", {
            attrs: {
                records: folderDocuments,
                selectedRecords: selectedFiles,
                moduleName: "Documents"
            }, on: {"record-select": emitSelectedFile}
        }), _v(" "), 0 == Object.keys(folderDocuments).length ? _c("span", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))]) : _e()], 1) : _e()])
    },
    data: () => ({
        documentsModuleModel: BaseModel.getModuleSpecificModel("Documents", "Module", {}),
        documentFolders: {},
        folderDocuments: [],
        activeFolderId: null,
        selectedFiles: []
    }),
    props: {searchString: {type: String}},
    watch: {
        activeFolderId(e, t) {
            e !== t && null !== e && (this.getFolderDocuments(), this.searchString = "")
        }, searchString(e, t) {
            this.searchFolderDocuments(e)
        }
    },
    created() {
        this.getDocumentsDescribe(), this.getDocumentsFolders()
    },
    methods: {
        getDocumentsDescribe() {
            this._getModuleDescribe("Documents").then(e => this.documentsModuleModel = e)
        }, getLabelFields() {
            return this.documentsModuleModel.getLabelFields()
        }, getDocumentsFolders() {
            this.appStore.request("api_get", {
                url: "folders",
                params: {module: "Documents"},
                key: "folders_response"
            }).then(e => {
                this.documentFolders = e, this.selectDefaultFolder()
            })
        }, selectDefaultFolder() {
            this.activeFolderId = Object.keys(this.documentFolders)[0]
        }, getFolderDocuments() {
            this.appStore.request("api_get", {
                url: "folders",
                params: this.getListParams(),
                key: "document_folders"
            }).then(e => {
                Vue.set(this, "folderDocuments", Object.values(e).map(e => BaseModel.getModuleSpecificModel("Documents", "Record", e)))
            })
        }, searchFolderDocuments(e) {
            let t = this.getLabelFields()[0];
            _.each(this.folderDocuments, (function (s, o) {
                e && s[t].toLowerCase().includes(e.toLowerCase()) ? Vue.set(s, "hide", !1) : e ? Vue.set(s, "hide", !0) : e || Vue.set(s, "hide", !1)
            }))
        }, getListParams() {
            let e = {module: "Documents", id: this.activeFolderId};
            if ("" != this.searchString) {
                let t = new SearchParams;
                t.pushAny("notes_title", "c", this.searchString), e.q = JSON.stringify(t.data)
            }
            return e
        }, toggleFileSelection(e) {
            let t = this.selectedFiles.indexOf(e.getId());
            -1 == t ? this.selectedFiles.push(e.getId()) : this.selectedFiles.splice(t, 1)
        }, emitSelectedFile(e) {
            this.toggleFileSelection(e), this.$emit("file-select", e)
        }
    }
});
var Vtiger_Component_EmptyActivity = App.vtComponent.extend({
    data: () => ({loading: !0}), render: function anonymous() {
        with (this) return _c("div", {staticClass: "mt-2"}, [_c("div", {staticClass: "c-pointer d-flex align-items-center bg-grey-hue-7"}, [_c("span", {staticClass: "activityIconContainer icon-container-sm ml-2"}), _v(" "), _c("span", {staticClass: "flex-grow-1 p-3-5 text-truncate"}, [$isLoading ? _c("span", [_c("vds-value-progress")], 1) : _e()])])])
    }
});
var Vtiger_Component_EmptyRelatedRecord = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "border bgLtGrey mb-1",
            attrs: {role: "tab"}
        }, [_c("div", {staticClass: "d-flex py-2 mw-col-12 c-pointer bgLtGrey"}, [_m(0), _v(" "), _c("div", {staticClass: "col-10 pl-0"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("vds-value-progress")], 1), _v(" "), _c("div", {staticClass: "row"}, [_c("span", {staticClass: "col-6"}, [_c("vds-value-progress")], 1), _v(" "), _c("span", {staticClass: "col-3"}, [_c("vds-value-progress")], 1)]), _v(" "), _c("div", {staticClass: "row"}, [_c("span", {staticClass: "col-3"}, [_c("vds-value-progress")], 1)])])])])
    }, staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "col-2"}, [_c("img", {staticClass: "bg-grey-hue-3 circle-icon p-0 circle-icon-lg mt-2"})])
    }]
});
var Vtiger_Component_EngagementsEmailActivity = Vtiger_Component_EngagementsActivity.extend({
    data: () => ({threadReRender: 0, record: !1}), props: {threadColorCodes: {type: Object}}, methods: {
        loadEmail() {
            ["SAVED", "SCHEDULED"].includes(this.data.status) || this.record || this.retrieveRecord(this.data.record.id, "Emails").then(t => {
                this.record = t
            })
        }, getAllAttachmentURL(t) {
            let e = "";
            return t && (e = "index.php?module=Emails&action=DownloadFile&mode=downloadAllAttachments&record=" + t), e
        }
    }, computed: {
        emailStatus() {
            let t = this.data.status.toLowerCase();
            return ["queued", "failed", "sent"].includes(t) ? t = this.translate("SENT") : "saved" == t && (t = this.translate("DRAFTED")), t
        }, iconColor() {
            let t = {color: "#005CEB"};
            return this.threadColorCodes && this.threadColorCodes[this.data.threadid] && (t.color = this.threadColorCodes[this.data.threadid]), t
        }
    }, render: function anonymous() {
        with (this) return _c("div", {
            directives: [{
                name: "b-toggle",
                rawName: "v-b-toggle",
                value: data.record.id,
                expression: "data.record.id"
            }], staticClass: "d-flex  p-3 position-relative", attrs: {name: data.type}, on: {
                mouseover: function (t) {
                    showEmotionIcon = !0
                }, mouseout: function (t) {
                    showEmotionIcon = !1
                }, click: function (t) {
                    return loadEmail()
                }
            }
        }, [_c("span", {staticClass: "p-0 mr-3 position-relative"}, [[userImageInfo && userImageInfo[data.userid.id] && userImageInfo[data.userid.id].image ? _c("img", {
            staticClass: "user-image-sm border-grey-6",
            attrs: {
                alt: userImageInfo[data.userid.id].fullname,
                src: userImageInfo[data.userid.id].image.url,
                title: data.userid.label
            }
        }) : _c("span", {
            staticClass: "circle-icon border-grey-6 text-capitalize text-white icon-container-sm d-flex align-items-center justify-content-center",
            style: {background: getColor(data.userid.label)}
        }, [_v(_s(data.userid.label.substring(0, 2)))]), _v(" "), _c("span", {
            staticClass: "relatedModuleIcon",
            class: activityIcon,
            style: iconColor
        })]], 2), _v(" "), _c("div", {staticClass: "w-100"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "d-flex-inline"}, [_c("div", {staticClass: "d-inline"}, [_c("strong", [isUserDetailLinkAllowed ? _c("a", {
            staticClass: "text-dark",
            attrs: {href: userDetailViewUrl, target: "_blank"}
        }, [_v(_s(data.userid.label))]) : _c("span", [_v(_s(data.userid.label))])])]), _v(" "), _c("div", {staticClass: "d-inline"}, [_c("span", {staticClass: "text-lowercase"}, [_v(_s(emailStatus))]), _v(" "), _c("span", [_v(_s(translate("SINGLE_" + data.type, data.type)) + " ")]), _v(" "), data.threadid ? _c("a", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.ThreadView",
                value: {recordid: data.threadid},
                expression: "{recordid : data.threadid}",
                modifiers: {ThreadView: !0}
            }], staticClass: "word-break-all", attrs: {tabindex: ""}
        }, [_v(_s(data.record.label))]) : _c("a", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.EmailPreview",
                value: {recordid: data.record.id},
                expression: "{recordid : data.record.id}",
                modifiers: {EmailPreview: !0}
            }], staticClass: "word-break-all", attrs: {tabindex: ""}
        }, [_v(_s(data.record.label))])]), _v(" "), ["QUEUED", "FAILED", "SAVED"].includes(data.status) ? _c("small", ["SAVED" == data.status ? _c("span", {staticClass: "text-danger m-2 px-1 border border-danger"}, [_v(_s(translate("DRAFT")))]) : _c("span", {staticClass: "text-danger m-2 px-1 border border-danger"}, [_v(_s(data.status))])]) : _e(), _v(" "), _c("small", {staticClass: "mx-2 text-muted"}, [_c("vds-date-diff-string", {attrs: {utcTime: data.happened_on}})], 1)]), _v(" "), isEmotionSupportedInView ? _c("div", [_c("span", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: showEmotionIcon && isEmotionSupportedInView && data.emotion,
                expression: "showEmotionIcon && isEmotionSupportedInView && data.emotion"
            }], attrs: {title: data.emotion}
        }, [_c("img", {
            staticClass: "mediumEmoji c-pointer",
            attrs: {src: getEmotionIcon(data.emotion)}
        })])]) : _e()]), _v(" "), _c("b-collapse", {attrs: {id: data.record.id}}, [record ? _c("div", [_c("vds-iframe", {
            staticClass: "overflow-hidden",
            attrs: {content: purifyContent(record.description)}
        }), _v(" "), record.attachments && record.attachments.length > 0 ? [_c("div", {staticClass: "d-flex justify-content-between align-items-center"}, [_c("h5", {staticClass: "bold"}, [_c("i", {staticClass: "fa fa-paperclip"}, [_v(_s(translate("LBL_ATTACHMENTS")))])]), _v(" "), record && record.attachments && record.attachments.length > 1 ? _c("div", [_c("a", {
            staticClass: "p-1",
            attrs: {href: getAllAttachmentURL(data.record.id), title: translate("LBL_DOWNLOAD_ALL", "Documents")}
        }, [_c("i", {staticClass: "fa fa-download h5"})])]) : _e()]), _v(" "), _c("div", {staticClass: "d-flex flex-wrap"}, _l(record.attachments, (function (t, e) {
            return record.attachments && record.attachments.length > 0 ? _c("div", {
                staticClass: "d-flex align-items-center mb-2",
                on: {
                    click: function (t) {
                        t.stopPropagation()
                    }
                }
            }, [_c("div", {staticClass: "d-flex rounded bg-grey-hue-4 text-dark font-weight-normal px-2 py-1 w-100 font-10 mr-3"}, [_c("i", {
                staticClass: "circle-icon border-0 d-flex far mr-1 my-0 text-grey-4",
                class: getAttachmentIcon(t.attachment)
            }), _v(" "), _c("a", {
                staticClass: "d-flex w-100 ml-1 text-dark no-text-decoration align-items-center",
                attrs: {href: t.url}
            }, [_c("span", {staticClass: "w-100 textOverflowEllipsis"}, [_v(_s(t.attachment))]), _v(" "), _c("i", {staticClass: "far fa-download ml-2 text-grey-4"})])])]) : _e()
        })), 0)] : _e()], 2) : _e()])], 1)])
    }
});
var Vtiger_Component_EsignClickToCancelModal = App.vtComponent.extend({
    props: {parentRecord: [Number, String]}, data: () => ({clickToCancelInfo: {}, disableAction: !1}), mounted() {
        this.appStore.request("api_get", {
            url: "clicktocancel",
            params: {module: "Esign", sourceModule: this.$module, record: this.parentRecord}
        }).then(t => {
            this.clickToCancelInfo = t
        })
    }, methods: {
        cancelEsignDoc() {
            let t = {}, e = !0;
            for (let s in this.clickToCancelInfo) {
                let a = this.clickToCancelInfo[s];
                a.selected && (t[s] = a.cancel_reason, e = !!a.cancel_reason && e)
            }
            Object.keys(t).length > 0 ? e ? (this.disableAction = !0, this.appStore.request("api_put", {
                url: "clicktocancel",
                params: {module: "Esign", sourceModule: this.$module, cancellationInfo: t}
            }).then(t => {
                t.success ? (this.$root.$emit("bv::hide::modal", "EsignClickToCancelModal"), this.showSuccessNotification(this.translate("JS_CANCELLED_ESIGN_DOC", "Esign"))) : (this.disableAction = !1, this.showErrorNotification(this.translate("JS_CANCELLED_ESIGN_DOC_FAILED", "Esign")))
            })) : (this.disableAction = !1, this.showErrorNotification(this.translate("LBL_CANCEL_REASON", "Esign") + " " + this.translate("JS_REQUIRED", "Esign"))) : this.showErrorNotification(this.translate("JS_PLEASE_SELECT_ONE_RECORD", "Esign"))
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "EsignClickToCancelModal",
                lazy: !0,
                title: translate("LBL_CANCEL_ESIGN_DOCS", "Esign"),
                size: "md",
                "header-class": "bgLtGrey"
            }
        }, [_c("div", [_c("div", {staticClass: "px-2"}, [_c("div", {staticClass: "d-flex"}, [_c("div", {staticClass: "w-75 d-flex font-weight-bold"}, [_v(_s(translate("Agreement Name", "Esign")))]), _v(" "), _c("div", {staticClass: "w-25 d-flex font-weight-bold"}, [_v(_s(translate("Esign Status", "Esign")))])]), _v(" "), _l(clickToCancelInfo, (function (t, e) {
            return _c("div", [_c("div", {staticClass: "d-flex mt-2"}, [_c("div", {staticClass: "w-75 d-flex clickToCancel"}, [_c("b-form-checkbox", {
                model: {
                    value: t.selected,
                    callback: function (e) {
                        $set(t, "selected", e)
                    },
                    expression: "cancelInfo.selected"
                }
            }, [_v(_s(t.name))])], 1), _v(" "), _c("div", {staticClass: "w-25 d-flex"}, [_v(_s(t.status))])]), _v(" "), t.selected ? _c("div", {staticClass: "align-items-center mt-2"}, [_c("div", {staticClass: "mb-1 d-flex"}, [_v(_s(translate("LBL_CANCEL_REASON", "Esign"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-75 d-flex"}, [_c("textarea", {
                directives: [{
                    name: "model",
                    rawName: "v-model",
                    value: t.cancel_reason,
                    expression: "cancelInfo.cancel_reason"
                }], staticClass: "form-control", domProps: {value: t.cancel_reason}, on: {
                    input: function (e) {
                        e.target.composing || $set(t, "cancel_reason", e.target.value)
                    }
                }
            })])]) : _e()])
        }))], 2)]), _v(" "), _c("template", {slot: "modal-footer"}, [_c("div", {staticClass: "d-flex justify-content-end"}, [_c("button", {
            staticClass: "btn btn-secondary mr-2",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "EsignClickToCancelModal")
                }
            }
        }, [_v(_s(translate("LBL_CANCEL", $module)))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button", disabled: disableAction},
            on: {
                click: function (t) {
                    return cancelEsignDoc()
                }
            }
        }, [_v(_s(translate("LBL_CANCEL_ESIGN_DOCS", "Esign")))])])])], 2)
    }
});
var Vtiger_Component_EsignClickToReplaceModal = App.vtComponent.extend({
    props: {parentRecord: [Number, String]},
    data: () => ({templates: [], templateSelected: "", replaceRecord: {}, disableSend: !1}),
    mounted() {
        this.appStore.request("api_get", {
            url: "clicktosend",
            params: {module: "Esign", sourceModule: this.$module, record: this.parentRecord, replace: !0}
        }).then(e => {
            this.templates = [], this.templates.push({value: "", label: this.translate("JS_SELECT_TEMPLATE", "Esign")});
            let t = e.print_templates;
            for (let e in t) {
                let s = t[e];
                this.templates.push({value: e, label: s})
            }
            this.replaceRecord = e.replace_info
        })
    },
    methods: {
        replaceEsignDoc() {
            let e = [];
            for (let t in this.replaceRecord) {
                let s = this.replaceRecord[t];
                s.selected && e.push(s.id)
            }
            e.length > 0 ? this.templateSelected ? (this.disableSend = !0, this.appStore.request("api_put", {
                url: "clicktoreplace",
                params: {
                    module: "Esign",
                    printtemplateid: this.templateSelected,
                    printtemplatesource: {id: this.parentRecord},
                    printtemplatesourcemodule: this.$module,
                    replace_records: e
                }
            }).then(e => {
                e.success ? (this.$root.$emit("bv::hide::modal", "EsignClickToReplaceModal"), this.showSuccessNotification(this.translate("JS_SENT_FOR_SIGNATURE", "Esign"))) : (this.disableSend = !1, this.showErrorNotification(this.translate("JS_FAILED_TO_SEND_FOR_SIGNATURE", "Esign") + " (" + e.error_message + ")"))
            })) : this.showErrorNotification(this.translate("LBL_SELECT_PRINT_TEMPLATE", "Esign")) : this.showErrorNotification(this.translate("JS_PLEASE_SELECT_ONE_RECORD", "Esign"))
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "EsignClickToReplaceModal",
                lazy: !0,
                title: translate("LBL_REPLACE_DOCUMENT", "Esign"),
                size: "md",
                "header-class": "bgLtGrey"
            }
        }, [_c("div", {staticClass: "px-2"}, [_c("div", [_c("div", [_c("h5", [_v(_s(translate("LBL_SELECT_PRINT_TEMPLATE", "Esign")))])]), _v(" "), _c("div", {staticClass: "d-flex printTemplateId w-75"}, [_c("v-select2", {
            attrs: {
                options: templates,
                emptyOption: !1
            }, model: {
                value: templateSelected, callback: function (e) {
                    templateSelected = e
                }, expression: "templateSelected"
            }
        })], 1)]), _v(" "), _c("div", {staticClass: "mt-3"}, [_c("h5", [_v(_s(translate("LBL_SELECT_DOCUMENTS", "Esign")))])]), _v(" "), _l(replaceRecord, (function (e, t) {
            return _c("div", [_c("div", {staticClass: "d-flex mt-2 clickToReplace"}, [_c("div", {staticClass: "w-75 d-flex"}, [_c("b-form-checkbox", {
                model: {
                    value: e.selected,
                    callback: function (t) {
                        $set(e, "selected", t)
                    },
                    expression: "replaceInfo.selected"
                }
            }, [_v(_s(e.name))])], 1)])])
        }))], 2), _v(" "), _c("template", {slot: "modal-footer"}, [_c("div", {staticClass: "d-flex justify-content-end"}, [_c("button", {
            staticClass: "btn btn-secondary mr-2",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return $root.$emit("bv::hide::modal", "EsignClickToReplaceModal")
                }
            }
        }, [_v(_s(translate("LBL_CANCEL", $module)))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button", disabled: disableSend},
            on: {
                click: function (e) {
                    return replaceEsignDoc()
                }
            }
        }, [_v(_s(translate("LBL_SEND", "Esign")))])])])], 2)
    }
});
var Vtiger_Component_EsignClickToSendModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module, Vtiger_Mixin_Validators, Vtiger_Mixin_Record],
    props: {parentRecord: [Number, String]},
    components: {
        "vds-edit-signee": App.loadComponent("EditSignee", "Esign"),
        "vds-edit-email-detail": App.loadComponent("EditEmailDetail", "Esign")
    },
    data: () => ({
        record: Vtiger_Record_Model.getCleanInstance("Esign", {loaded: !1}),
        moduleInfo: !1,
        templates: [],
        relatedSendTo: {},
        relatedEmails: {},
        relatedNameList: {},
        disableSend: !1
    }),
    mounted() {
        this.appStore.request("api_get", {
            url: "clicktosend",
            params: {module: "Esign", sourceModule: this.$module, record: this.parentRecord}
        }).then(e => {
            this._getModuleDescribe("Esign").then(t => {
                this.moduleInfo = t, this.initTemplates(e), this.initRelatedDetails(e)
            })
        })
    },
    methods: {
        initTemplates(e) {
            this.templates = [], this.templates.push({value: "", label: this.translate("JS_SELECT_TEMPLATE", "Esign")});
            let t = e.print_templates;
            for (let e in t) {
                let i = t[e];
                this.templates.push({value: e, label: i})
            }
        }, initRelatedDetails(e) {
            let t = e.relation_details;
            if (Object.keys(t).length > 0) for (let e in t) {
                let i = t[e], s = [];
                for (let e in i) {
                    s.push({value: i[e].id, label: i[e].name});
                    let t = JSON.parse(i[e].email), r = [];
                    for (let e in t) {
                        let i = t[e];
                        r.push({value: i, label: i})
                    }
                    this.relatedEmails[i[e].id] = r, this.relatedNameList[i[e].id] = i[e].name
                }
                this.relatedSendTo[e] = s
            }
            Vue.set(this.record, "emailsubject", e.subject)
        }, sendForSignature() {
            Vue.set(this.record, "sending_option", "send"), this.submit()
        }, tagAndSend() {
            Vue.set(this.record, "sending_option", "tagandsend"), this.submit()
        }, submit() {
            this.record.printtemplateid ? this.$validator.validate().then(e => {
                if (e) {
                    this.disableSend = !0;
                    let e = this.prepareRecordToSave();
                    this.saveRecord(e, this.moduleInfo).then(e => {
                        if (e.getId()) {
                            if (this.$root.$emit("bv::hide::modal", "EsignClickToSendModal"), e.docusignTagURL) return void (window.location.href = e.docusignTagURL);
                            e.service_error ? this.showErrorNotification(this.translate("JS_FAILED_TO_SEND_FOR_SIGNATURE", "Esign") + " (" + e.service_error + ")") : this.showSuccessNotification(this.translate("JS_SENT_FOR_SIGNATURE", "Esign"))
                        }
                    }, e => {
                        e && e.message && (this.showErrorNotification(this.translate("JS_FAILED_TO_SEND_FOR_SIGNATURE", "Esign") + " (" + e.message + ")"), this.disableSend = !1)
                    })
                }
            }) : this.showErrorNotification(this.translate("LBL_SELECT_PRINT_TEMPLATE", "Esign"))
        }, prepareRecordToSave() {
            let e = this.record.link_to_1.id ? this.record.link_to_1.id : this.record.link_to_1,
                t = this.record.link_to_1.label ? this.record.link_to_1.label : this.relatedNameList[this.record.link_to_1],
                i = this.translate("SINGLE_" + this.$module, this.$module) + " " + this.translate("LBL_SENT_TO", "Esign") + " " + t;
            return i += this.record.signees_count > 1 ? " +" + (this.record.signees_count - 1) : "", this.record.signees_count || Vue.set(this.record, "signees_count", 1), Vue.set(this.record, "agreement_name", i), Vue.set(this.record, "esign_status", "Created"), Vue.set(this.record, "link_to", e), Vue.set(this.record, "recepientname", t), Vue.set(this.record, "recepientname_1", t), Vue.set(this.record, "esign_email", this.record.esign_email_1), Vue.set(this.record, "attachmentmode", "printtemplate"), Vue.set(this.record, "printtemplatesourcemodule", this.$module), Vue.set(this.record, "printtemplatesource", {id: this.parentRecord}), this.record
        }
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "EsignClickToSendModal",
                lazy: !0,
                title: translate("LBL_SEND_FOR_SIGNATURE", "Esign"),
                size: "lg",
                "header-class": "bgLtGrey"
            }
        }, [moduleInfo ? _c("div", {staticClass: "px-2"}, [Object.keys(relatedSendTo).length > 0 ? _c("div", [_c("div", {staticClass: "mb-2"}, [_c("h5", [_v(_s(translate("LBL_WHO_DO_YOU_WANT_TO_SEND", "Esign")))])]), _v(" "), _c("div", {staticClass: "rounded bg-grey-hue-2 p-3 border"}, [_c("div", {staticClass: "d-flex"}, [_c("div", {staticClass: "d-flex w-50"}, [_c("v-select2", {
            attrs: {
                options: relatedSendTo,
                emptyOption: !1
            }, model: {
                value: record.link_to_1, callback: function (e) {
                    $set(record, "link_to_1", e)
                }, expression: "record.link_to_1"
            }
        })], 1), _v(" "), _c("div", {staticClass: "d-flex printTemplateId w-50 ml-4"}, [_c("v-select2", {
            attrs: {
                options: relatedEmails[record.link_to_1],
                emptyOption: !1
            }, model: {
                value: record.esign_email_1, callback: function (e) {
                    $set(record, "esign_email_1", e)
                }, expression: "record.esign_email_1"
            }
        })], 1)])])]) : _c("div", {staticClass: "clickToSend"}, [_c("vds-edit-signee", {
            attrs: {
                "module-info": moduleInfo,
                record: record
            }, on: {
                "update:record": function (e) {
                    record = e
                }
            }
        })], 1), _v(" "), _c("div", [_c("div", {staticClass: "mt-3"}, [_c("h5", [_v(_s(translate("LBL_SELECT_PRINT_TEMPLATE", "Esign")))])]), _v(" "), _c("div", {staticClass: "d-flex printTemplateId w-50"}, [_c("v-select2", {
            attrs: {
                options: templates,
                emptyOption: !1
            }, model: {
                value: record.printtemplateid, callback: function (e) {
                    $set(record, "printtemplateid", e)
                }, expression: "record.printtemplateid"
            }
        })], 1)]), _v(" "), _c("vds-edit-email-detail", {
            staticClass: "mt-3",
            attrs: {"module-info": moduleInfo, record: record},
            on: {
                "update:record": function (e) {
                    record = e
                }
            }
        })], 1) : _e(), _v(" "), _c("template", {slot: "modal-footer"}, [_c("div", {staticClass: "d-flex justify-content-end"}, [_c("button", {
            staticClass: "btn btn-secondary mr-2",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return $root.$emit("bv::hide::modal", "EsignClickToSendModal")
                }
            }
        }, [_v(_s(translate("LBL_CANCEL", $module)))]), _v(" "), _c("button", {
            staticClass: "btn btn-outline-primary mr-2",
            attrs: {disabled: disableSend, type: "button"},
            on: {
                click: function (e) {
                    return tagAndSend()
                }
            }
        }, [_v(_s(translate("LBL_TAG_AND_SEND", "Esign")))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary",
            attrs: {disabled: disableSend, type: "button"},
            on: {
                click: function (e) {
                    return sendForSignature()
                }
            }
        }, [_v(_s(translate("LBL_SEND", "Esign")))])])])], 2)
    }
});
var Vtiger_Component_FilePreview = App.vtComponent.extend({
    created() {
        this.getFileDetails()
    }, props: ["divheight"], data: () => ({fileDetails: [], filePath: ""}), methods: {
        getFileDetails() {
            this.appStore.request("api_get", {
                url: "records/preview",
                params: {module: this.$module, id: this.$id},
                key: "file_preview_details"
            }).then(e => {
                this.fileDetails = e, "yes" == this.fileDetails.PDF_FILE_TYPE ? this.getPdfFilePath() : "yes" == this.fileDetails.OPENDOCUMENT_FILE_TYPE ? this.getOpenDocPath() : "yes" == this.fileDetails.AUDIO_FILE_TYPE ? this.getAudioFilePath() : "yes" == this.fileDetails.VIDEO_FILE_TYPE && this.getVideoFilePath()
            })
        }, getPdfFilePath() {
            let e = this.fileDetails.SITE_URL + "/" + this.fileDetails.FILE_PATH;
            this.filePath = "libraries/jquery/pdfjs/web/viewer.html?file=" + encodeURIComponent(e)
        }, getOpenDocPath() {
            this.filePath = "libraries/jquery/Viewer.js/../../..//" + this.fileDetails.DOWNLOAD_URL
        }, getAudioFilePath() {
            this.filePath = this.fileDetails.SITE_URL + "/" + this.fileDetails.DOWNLOAD_URL
        }, getVideoFilePath() {
            this.filePath = this.fileDetails.SITE_URL + "/" + this.fileDetails.DOWNLOAD_URL
        }
    }, render: function anonymous() {
        with (this) return _c("div", ["yes" == this.fileDetails.BASIC_FILE_TYPE ? _c("vds-document-basic", {attrs: {content: fileDetails.FILE_CONTENTS}}) : "yes" == this.fileDetails.PDF_FILE_TYPE ? _c("vds-document-pdf", {
            attrs: {
                filePath: filePath,
                divheight: divheight
            }
        }) : "yes" == this.fileDetails.OPENDOCUMENT_FILE_TYPE ? _c("vds-document-opendoc", {
            attrs: {
                recordId: recordId,
                fileId: fileId
            }
        }) : "yes" == this.fileDetails.IMAGE_FILE_TYPE ? _c("vds-document-image", {attrs: {imgPath: fileDetails.FILE_PATH}}) : "yes" == this.fileDetails.AUDIO_FILE_TYPE ? _c("vds-document-audio", {
            attrs: {
                filePath: fileDetails.FILE_PATH,
                fileType: fileDetails.FILE_TYPE
            }
        }) : "yes" == this.fileDetails.VIDEO_FILE_TYPE ? _c("vds-document-video", {
            attrs: {
                filePath: fileDetails.FILE_PATH,
                fileType: fileDetails.FILE_TYPE
            }
        }) : _e()], 1)
    }
});
var Vtiger_Component_FolderNode = App.vtComponent.extend({
    components: {"vds-folder-node": App.loadComponent("FolderNode")}, render: function anonymous() {
        with (this) return _c("div", [collapsed && folder.folderid !== activeFolderId ? _c("span", {
            staticClass: "row c-pointer",
            on: {
                click: function (e) {
                    return e.stopPropagation(), handleFolderClick()
                }
            }
        }, [_c("i", {
            staticClass: "fa px-2",
            class: {"fa-chevron-down": !collapsed, "fa-chevron-right": collapsed},
            on: {
                click: function (e) {
                    collapsed = !collapsed
                }
            }
        }), _v(" "), _c("i", {staticClass: "fas fa-folder mr-2"}), _v(" "), _c("p", [_v(_s(folder.foldername))])]) : _e(), _v(" "), collapsed && folder.folderid != activeFolderId ? _e() : _c("div", {
            on: {
                click: function (e) {
                    return e.stopPropagation(), handleFolderClick()
                }
            }
        }, [_c("span", {staticClass: "row c-pointer"}, [_c("i", {
            staticClass: "fa px-2",
            class: {"fa-chevron-down": !collapsed, "fa-chevron-right": collapsed},
            on: {
                click: function (e) {
                    collapsed = !collapsed
                }
            }
        }), _v(" "), _c("i", {staticClass: "fas fa-folder-open mr-2"}), _v(" "), _c("p", [_v(_s(folder.foldername))])]), _v(" "), !collapsed && hasSubfolders() ? _c("div", {staticClass: "ml-2"}, _l(folder.subfolders, (function (e) {
            return _c("vds-folder-node", {
                key: e.folderid,
                attrs: {folder: e, "active-folder-id": activeId},
                on: {
                    "update:activeFolderId": function (e) {
                        activeId = e
                    }, "update:active-folder-id": function (e) {
                        activeId = e
                    }
                }
            })
        })), 1) : _e()])])
    }, props: ["folder", "activeFolderId"], data: () => ({collapsed: !0}), computed: {
        activeId: {
            get() {
                return this.activeFolderId
            }, set(e) {
                this.$emit("update:activeFolderId", e)
            }
        }
    }, methods: {
        hasSubfolders() {
            return !!Object.keys(this.folder.subfolders).length
        }, handleFolderClick() {
            this.$emit("update:activeFolderId", this.folder.folderid)
        }
    }
});
var Vtiger_Component_InviteeComposeEmail = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalComposeEmail",
            attrs: {
                id: "inviteeEmailAction",
                lazy: !0,
                "hide-footer": "",
                size: "xl",
                title: translate("LBL_COMPOSE_EMAIL")
            }
        }, [_c("vds-compose-email", {
            attrs: {
                id: "composeEmail",
                module: modulename,
                recordId: recordId,
                showrelated: showRelatedEmails
            }
        })], 1)
    },
    props: {recordId: {type: [String], required: !0}, modulename: {type: [String], required: !0}},
    components: {"vds-compose-email": App.loadComponent("ComposeEmail")},
    data: () => ({showRelatedEmails: !1}),
    mounted() {
        this.$root.$on("vds::hide::email::compose::modal", this.closeEmailModal)
    },
    beforeDestroy() {
        this.$root.$off("vds::hide::email::compose::modal", this.closeEmailModal)
    },
    methods: {
        closeEmailModal() {
            this.displayedOnce = !0, this.$refs.modalComposeEmail.hide()
        }
    }
});
var Vtiger_Component_LifeCycleChange = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Record, Vtiger_Mixin_PicklistDependency, Vtiger_Mixin_DependentFields, Vtiger_Mixin_Validators],
    props: {recordId: {type: [String, Number]}, sourceField: {type: String}, targetField: {type: String}},
    data() {
        return {
            sourcePickListValues: {},
            targetPickListValues: {},
            clonedRecordModel: {},
            initialRecordData: {},
            dynamicUpdatedTargetFields: {},
            module: this.$module,
            enableSaveButton: !1
        }
    },
    created() {
        let e = JSON.parse(JSON.stringify(this.$_detailRecordModel));
        this.initialRecordData = BaseModel.getModuleSpecificModel(this.$module, "Record", e), this.clonedRecordModel = BaseModel.getModuleSpecificModel(this.$module, "Record", e)
    },
    computed: {
        recordModel() {
            return this.clonedRecordModel
        }, moduleModel() {
            if (this.$_currentModuleModel.isLoaded) return this.$_currentModuleModel
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.recordModel
        }, targetFieldModelList() {
            let e = {};
            if (this.$_currentModuleModel) for (var t in this.dynamicUpdatedTargetFields) {
                let d = this.dynamicUpdatedTargetFields[t], i = this.masterModuleModel.getField(d);
                i.isEditViewField && (e[d] = i)
            }
            return e
        }
    },
    watch: {
        dynamicUpdatedFields() {
            this.dynamicUpdatedTargetFields = Object.keys(this.dynamicUpdatedFields)
        }, recordModel: {
            handler(e) {
                let t = [];
                _.size(this.targetFieldModelList) > 0 && (t = Object.keys(this.targetFieldModelList)), t.push(this.sourceField), t.push(this.targetField);
                for (let d in t) {
                    if (e[t[d]] != this.initialRecordData[t[d]]) {
                        this.enableSaveButton = !0;
                        break
                    }
                    this.enableSaveButton = !1
                }
            }, deep: !0, immediate: !0
        }
    },
    $_veeValidate: {validator: "new"},
    methods: {
        save() {
            this.$validator.validate().then(e => {
                if (e) {
                    let e = Vtiger_Record_Model.getCleanInstance(this.$module);
                    e.set(this.sourceField, this.recordModel.get(this.sourceField)), e.set(this.targetField, this.recordModel.get(this.targetField));
                    for (let t in this.targetFieldModelList) e.set(t, this.recordModel.get(t));
                    e.set("id", this.recordModel.getId()), e.set("sourceModule", this.$module), this.saveRecord(e, this.moduleModel).then(e => {
                        let t = this.transformRecordToUserFormat(e, this.$_currentModuleModel);
                        this.appStore.set({
                            key: "Detail_Record_Model",
                            data: t
                        }), this.$root.$emit("vds::post::lifecycle::save", this.recordModel[this.sourceField], this.recordModel[this.targetField]), this.$root.$emit("bv::hide::modal", "lifeCycleChange")
                    }, e => {
                        this.showErrorNotification(e.message), this.$root.$emit("bv::hide::modal", "lifeCycleChange")
                    })
                }
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "lifeCycleChange",
            attrs: {
                lazy: !0,
                id: "lifeCycleChange",
                "header-class": "bgLtGrey",
                "hide-footer": "",
                "ok-title": translate("LBL_SAVE"),
                "no-enforce-focus": !0
            },
            on: {ok: save}
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("div", [_c("span", {staticClass: "d-inline h4"}, [_v(_s(translate(module, module)) + " " + _s(translate("LBL_CHANGE_LIFE_CYCLE", module)))])])]), _v(" "), moduleModel ? _c("div", {staticClass: "d-flex flex-wrap"}, [_c("div", {staticClass: "form-group w-100"}, [_c("vds-field-label", {
            attrs: {
                field: moduleModel.getField(sourceField),
                module: $module
            }
        }), _v(" "), _c("ui-field-edit-type", {
            attrs: {
                field: moduleModel.getField(sourceField),
                record: recordModel
            }
        })], 1), _v(" "), _c("div", {staticClass: "form-group w-100"}, [_c("vds-field-label", {
            attrs: {
                field: moduleModel.getField(targetField),
                module: $module
            }
        }), _v(" "), _c("ui-field-edit-type", {
            attrs: {
                field: moduleModel.getField(targetField),
                record: recordModel
            }
        })], 1)]) : _e(), _v(" "), _l(targetFieldModelList, (function (e) {
            return _c("div", {staticClass: "form-group"}, [_c("div", {staticClass: "form-group w-100"}, [_c("vds-field-label", {
                attrs: {
                    field: e,
                    module: module,
                    isEditView: !1
                }
            }), _v(" "), _c("div", {staticClass: "fieldName"}, [_c("ui-field-edit-type", {
                attrs: {
                    field: e,
                    record: recordModel
                }
            })], 1)], 1)])
        })), _v(" "), _c("div", {staticClass: "d-flex justify-content-end"}, [_c("button", {
            staticClass: "btn btn-primary mr-0",
            attrs: {disabled: !enableSaveButton},
            on: {click: save}
        }, [_v(_s(translate("LBL_SAVE")))])])], 2)
    }
});
var Vtiger_Component_LinkDocuments = Vtiger_Component_LinkRecords.extend({
    components: {"vds-documents-tree": App.loadComponent("DocumentsTree")}, render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "linkRecordsModal",
            attrs: {id: "linkRecordsModal", size: "lg", "header-bg-variant": headerBgVariant}
        }, [_c("div", {
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", {staticClass: "pr-3"}, [_c("i", {
            staticClass: "fa fa-arrow-left ml-auto c-pointer",
            on: {
                click: function (e) {
                    return $refs.linkRecordsModal.hide()
                }
            }
        })]), _v(_s(translate("LBL_LINK_EXISTING", "Leads", translate(moduleName, moduleName))) + "\n            ")]), _v(" "), _c("div", [_c("div", {staticClass: "row m-0 justify-content-between"}, [showFolderTree ? _c("ul", {staticClass: "nav"}, [_c("li", {
            staticClass: "nav-item mx-1 p-1",
            class: {" btn-outline-primary  border-primary  border-bottom ": "list" == mode},
            on: {
                click: function (e) {
                    mode = "list"
                }
            }
        }, [_v(_s(translate("LBL_RECENT_RECORDS")))]), _v(" "), _c("li", {
            staticClass: "nav-item mx-1 p-1",
            class: {" btn-outline-primary border-primary  border-bottom ": "tree" == mode},
            on: {
                click: function (e) {
                    mode = "tree"
                }
            }
        }, [_v(_s(translate("LBL_BROWSE_CRM")))])]) : _c("div", [_c("h5", {staticClass: "pt-2"}, [_v(_s(translate("LBL_RECENT_RECORDS")))])]), _v(" "), _c("div", {staticClass: "form-inline has-search pb-2"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("vds-input-clear", {
            attrs: {
                inputvalue: searchString,
                placeholder: translate("LBL_SEARCH_FOR") + " " + translate(moduleName, moduleName)
            }, on: {
                "update:inputvalue": function (e) {
                    searchString = e
                }, "vds::post::input:clear": clearSearchString, "vt-onenter": function (e) {
                    return getSearchResults(searchString)
                }, "vds::search::on::keyup": function (e) {
                    return getSearchResults(searchString, !0)
                }
            }
        })], 1)]), _v(" "), showFolderTree ? _c("span", {staticClass: "d-flex flex-row border-bottom"}) : _e(), _v(" "), "list" === mode ? _c("div", [_c(getRelatedRecordLinkComponent(), {
            tag: "component",
            attrs: {records: records, selectedRecords: selectedRecords, moduleName: moduleName},
            on: {"record-select": toggleRecordSelection}
        }), _v(" "), 0 == records.length ? _c("span", [_v(_s(translate("LBL_NO_RECORDS_FOUND")))]) : _e()], 1) : _e(), _v(" "), "tree" == mode ? _c("vds-documents-tree", {
            attrs: {"search-string": searchInFolders},
            on: {
                "update:searchString": function (e) {
                    searchInFolders = e
                }, "update:search-string": function (e) {
                    searchInFolders = e
                }, "file-select": toggleRecordSelection
            }
        }) : _e()], 1), _v(" "), _c("div", {
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn shadow-none btn-primary",
            class: {"disabled cursorPointerNotAllowed": !_.size(selectedRecords)},
            attrs: {slot: "modal-ok"},
            on: {
                click: function (e) {
                    return attachDocuments()
                }
            },
            slot: "modal-ok"
        }, [_v(_s(translate("LBL_ATTACH") + " " + translate(moduleName, moduleName)))])])])
    }, props: {moduleName: String, moduleModel: Object, showFolderTree: {default: !1}}, data() {
        return {
            mode: "list",
            relatedModuleModel: BaseModel.getModuleSpecificModel(this.moduleName, "Module", {}),
            loaded: !1,
            headerBgVariant: "light",
            searchInFolders: ""
        }
    }, computed: {
        labelFields() {
            return this.relatedModuleModel.getLabelFields()
        }, relatedAccountsField() {
            let e = this.relatedModuleModel.getFieldsOfType("reference");
            for (field in e) {
                if (e[field].type.relatedModules.includes("Accounts")) return field
            }
        }, relatedContactsField() {
            let e = this.relatedModuleModel.getFieldsOfType("reference");
            for (field in e) {
                if (e[field].type.relatedModules.includes("Contacts")) return field
            }
        }
    }, created() {
        _.isEmpty(this.moduleModel.fields) ? this._getModuleDescribe(this.moduleName).then(e => {
            this.relatedModuleModel = e, this.loaded = !0
        }) : (this.relatedModuleModel = this.moduleModel, this.loaded = !0)
    }, methods: {
        getListParams() {
            let e = {module: this.moduleName};
            if ("" != this.searchString) {
                let t = new SearchParams;
                for (field of (_.isUndefined(this.relatedAccountsField) || t.pushAny(this.relatedAccountsField, "c", this.searchString), _.isUndefined(this.relatedContactsField) || t.pushAny(this.relatedContactsField, "c", this.searchString), this.labelFields)) t.pushAny(field, "c", this.searchString);
                e.q = JSON.stringify(t.data)
            }
            return e
        }, duplicateRecords() {
            return new Promise((e, t) => {
                let s = [], r = {type: "get", api: "records", parameters: {module: this.moduleName, id: ""}};
                this.selectedRecords.forEach(e => {
                    r.parameters.id = e, s.push($.extend(!0, {}, r))
                }), this.appStore.request("api_batch", {requests: s, key: "somekey"}).then(t => {
                    s = [];
                    let r = {type: "post", api: "records", parameters: {module: this.moduleName}},
                        o = {module: this.moduleName};
                    for (let e in t) {
                        let a = null;
                        try {
                            a = JSON.parse(t[e])
                        } catch (s) {
                            this.showErrorNotification(t[e]);
                            continue
                        }
                        delete a.id;
                        for (let e in a) {
                            let t = a[e];
                            if ("subject" == e && (a[e] = "Duplicate: " + t), "potential_id" == e && (t = {}, t.id = this.$_detailRecordModel.getId()), _.isObject(t)) if (_.isUndefined(t.id)) {
                                if ("lineitems" == e) {
                                    for (let e in t) {
                                        let s = t[e];
                                        for (let e in s) {
                                            let t = s[e];
                                            _.isObject(t) && (s[e] = JSON.stringify(t))
                                        }
                                        $.extend(!0, a, s)
                                    }
                                    o.totalProductCount = _.size(a.lineitems), o.adjustment = a.txtAdjustment, o.subtotal = a.hdnSubTotal, o.total = a.hdnGrandTotal, o.taxtype = a.hdnTaxType, o.discount_percent = a.hdnDiscountPercent, o.discount_amount = a.discount_amount, o.s_h_amount = a.hdnS_H_Percent, o.balance = a.hdnGrandTotal, delete a.lineitems
                                }
                            } else a[e] = t.id
                        }
                        r.parameters = $.extend(!0, o, a), s.push($.extend(!0, {}, r))
                    }
                    this.appStore.request("api_batch", {requests: s, key: "duplicate_records"}).then(t => {
                        let s = [];
                        for (let e in t) try {
                            let r = JSON.parse(t[e]);
                            s.push(r.id)
                        } catch (s) {
                            this.showErrorNotification(t[e])
                        }
                        e(s)
                    }, e => {
                        this.showErrorNotification(e.message)
                    })
                }, e => {
                    this.showErrorNotification(e.message)
                })
            })
        }, attachDocuments() {
            "Documents" == this.moduleName ? this.attachRecords(this.selectedRecords) : this.duplicateRecords().then(e => {
                let t = [], s = {type: "post", api: "records", parameters: {module: "Documents", relatedto: ""}};
                e.forEach(e => {
                    s.parameters.relatedto = e, t.push($.extend(!0, {}, s))
                }), this.appStore.request("api_batch", {requests: t, key: "generated_documents"}).then(e => {
                    let t = [];
                    for (let s in e) try {
                        let r = JSON.parse(e[s]);
                        t.push(r.id)
                    } catch (t) {
                        this.showErrorNotification(e[s])
                    }
                    this.attachRecords(t)
                }, e => {
                    this.showErrorNotification(e.message)
                })
            })
        }, getRelatedRecordLinkComponent() {
            return App.getDynamicComponentInstance("LinkRecordItems", this.moduleName)
        }, clearSearchString() {
            this.searchString = ""
        }, getSearchResults(e, t = !1) {
            "list" === this.mode ? this.getRecords(t) : "tree" === this.mode && (this.searchInFolders = e)
        }
    }, watch: {
        searchString: {
            handler(e, t) {
                e || "list" !== this.mode || this.getRecords()
            }
        }, mode: {
            handler() {
                this.searchString = ""
            }
        }
    }
});
var Vtiger_Component_LinkDriveDocuments = Vtiger_Component_LinkRecords.extend({
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "p-2 border rounded-lg"}, [_c("div", {staticClass: "d-flex m-2 justify-content-start align-items-center"}, [_c("div", {
            staticClass: "btn-group mx-2 mr-3",
            attrs: {role: "group"}
        }, [_c("button", {
            staticClass: "btn btn-outline-secondary border-right-0",
            class: {"c-none opacity-0-5": _.isEmpty(searchString)},
            attrs: {title: title, disabled: _.isEmpty(searchString) && _.isEmpty(activeFolder)},
            on: {
                click: function (e) {
                    return goHome()
                }
            }
        }, [_c("i", {staticClass: "fa fa-home"})]), _v(" "), _c("button", {
            staticClass: "btn btn-outline-secondary",
            class: {"c-none opacity-0-5": _.isEmpty(activeFolder)},
            attrs: {title: parentFolderName, disabled: _.isEmpty(activeFolder)},
            on: {
                click: function (e) {
                    return goToParent()
                }
            }
        }, [_c("i", {staticClass: "fa fa-level-up-alt"})])]), _v(" "), _c("div", {staticClass: "form-inline has-search"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: searchString,
                expression: "searchString"
            }],
            staticClass: "form-control",
            attrs: {type: "text", placeholder: translate("LBL_TYPE_SEARCH")},
            domProps: {value: searchString},
            on: {
                keyup: function (e) {
                    return searchRecords()
                }, input: function (e) {
                    e.target.composing || (searchString = e.target.value)
                }
            }
        })])]), _v(" "), loading ? _c("span", {staticClass: "d-flex flex-grow-1 justify-content-center p-3"}, [_v(_s(translate("JS_LOADING")))]) : _c("div", {staticClass: " p-2  linkRecordsMainContainer d-flex flex-wrap"}, [_l(records, (function (e) {
            return e.hide ? _e() : _c("div", {
                staticClass: "justify-content-between linkRecordBlock w-100",
                on: {
                    click: function (t) {
                        return handleSelection(e)
                    }
                }
            }, [_c("div", {
                staticClass: "align-items-center linkRecords p-2 pl-3 d-flex rounded m-2 c-pointer",
                class: selectedRecordIds.includes(e.id) ? "bg-light-blue-0 " : "bgLtGrey"
            }, [isFile(e) ? _c("vds-file-icon", {
                attrs: {
                    icon: "fa-documents",
                    "custom-class": "h5 mb-0 mr-2"
                }
            }) : _c("vds-file-icon", {
                attrs: {
                    icon: "fa-folder",
                    "custom-class": "h5 mb-0 mr-2 foldericon"
                }
            }), _v(" "), _c("div", {staticClass: "py-1 linkRecordLabel overflow-hidden text-nowrap"}, _l(getLabelFields(), (function (t) {
                return _c("span", [_c("span", [_v(_s(e[t]) + " ")])])
            })), 0), _v(" "), selectedRecordIds.includes(e.id) ? _c("i", {staticClass: "fa-check ml-auto text-primary"}) : _e()], 1)])
        })), _v(" "), loading || 0 != records.length ? _e() : _c("div", {staticClass: "d-flex w-100 justify-content-center m-2 p-2"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])], 2)]), _v(" "), _c("div", {staticClass: "d-flex justify-content-end my-1 my-3"}, [_c("button", {
            staticClass: "btn btn-success",
            class: {disabled: !_.size(selectedRecords)},
            on: {
                click: function (e) {
                    return createAndAttachRecords()
                }
            }
        }, [_v(_s(translate("LBL_LINK", "Inbox")))])])])
    },
    props: {moduleName: String, title: String, type: {default: "link"}},
    data: () => ({
        loading: !1,
        activeFolder: "",
        selectedRecordIds: [],
        documentFolderId: null,
        documentFolderName: null,
        searchString: null,
        parentFolder: "",
        parentFolderName: ""
    }),
    watch: {
        moduleName: {
            handler(e, t) {
                e != t && this.getRecords()
            }
        }, activeFolder(e, t) {
            e !== t && this.getRecords()
        }, searchString: {
            handler() {
                _.isEmpty(this.searchString) && this.getRecords()
            }
        }
    },
    methods: {
        goHome() {
            this.activeFolder = "", this.searchString = ""
        }, goToParent() {
            this.loading = !0;
            let e = {module: "Documents", id: "" != this.parentFolder ? this.parentFolder.id : this.parentFolder};
            this.appStore.request("api_get", {
                url: this.moduleName.toLowerCase() + "/folders",
                params: e,
                key: "drive_contents"
            }).then(e => {
                this.parentFolderName = e.title, e[0].parents && (this.parentFolder = e[0].parents), Vue.set(this, "records", e)
            }).finally(() => this.loading = !1)
        }, isFile(e) {
            switch (this.moduleName) {
                case"Drive":
                    return "application/vnd.google-apps.folder" !== e.mimeType;
                case"Dropbox":
                    return "file" === e[".tag"]
            }
        }, handleSelection(e) {
            if (this.isFile(e)) {
                let t = this.selectedRecords.find(t => t.id == e.id);
                _.isUndefined(t) ? (this.selectedRecords.push(e), this.selectedRecordIds.push(e.id)) : (this.selectedRecords.splice(t, 1), this.selectedRecordIds.splice(t, 1))
            } else this.activeFolder = e, this.parentFolderName = e.title, this.parentFolder = e.parents[0]
        }, getRecords() {
            this.loading = !0;
            let e = {module: "Documents", id: "" != this.activeFolder ? this.activeFolder.id : this.activeFolder};
            "" !== this.searchString && (e.q = this.searchString), this.appStore.request("api_get", {
                url: this.moduleName.toLowerCase() + "/folders",
                params: e,
                key: "drive_contents"
            }).then(e => {
                if (e.hasOwnProperty("reauth")) {
                    let t = e.authUrl;
                    window.resumeAuth = e => {
                        this.getRecords(), this.getFolderId()
                    }, window.open(t, "", "height=600,width=600,channelmode=1")
                } else this.documentFolderId || this.getFolderId(), Vue.set(this, "records", e)
            }).finally(() => this.loading = !1)
        }, searchRecords() {
            let e = this.searchString, t = this.getLabelFields()[0];
            _.each(this.records, (function (s, i) {
                s[t].toLowerCase().includes(e.toLowerCase()) ? Vue.set(s, "hide", !1) : Vue.set(s, "hide", !0)
            }))
        }, getLabelFields() {
            switch (this.moduleName) {
                case"Drive":
                    return ["title"];
                case"Dropbox":
                    return ["name"]
            }
        }, getLink(e) {
            switch (this.moduleName) {
                case"Drive":
                    return e.alternateLink;
                case"Dropbox":
                    return e.url
            }
        }, getDocumentSource() {
            return "Drive" == this.moduleName ? "Google Drive" : this.moduleName
        }, getFolderId() {
            this.appStore.request("api_get", {
                url: "folders",
                params: {module: "Documents", page: 1},
                key: "document_folders"
            }).then(e => {
                let t = Object.keys(e)[0],
                    s = Object.values(e).find(e => e.foldername.toLowerCase().includes(this.moduleName.toLowerCase()));
                _.isUndefined(s) || (t = s.folderid, this.documentFolderName = s.foldername), this.documentFolderId = t
            })
        }, createAndAttachRecords() {
            if (this.selectedRecords.length) {
                let e = this.getDocumentSource(), t = this.documentFolderId, s = [], i = {
                    type: "post",
                    api: "records",
                    parameters: {
                        module: "Documents",
                        document_source: e,
                        document_type: "Confidential",
                        filestatus: 1,
                        filelocationtype: "E",
                        filename: "",
                        notes_title: "",
                        folderid: t
                    }
                };
                this.selectedRecords.forEach(e => {
                    i.parameters.notes_title = e[this.getLabelFields()[0]], i.parameters.filename = this.getLink(e), s.push($.extend(!0, {}, i))
                }), this.appStore.request("api_batch", {requests: s}).then(e => {
                    let t = [];
                    for (let s in e) {
                        let i = JSON.parse(e[s]);
                        t.push(i.id)
                    }
                    "create" == this.type ? (this.$root.$emit("bv::hide::modal", "quickCreate"), this.$root.$emit("bv::hide::modal", "createRecordModal"), this.$root.$emit("bv::hide::modal", "addOrCreateRecord"), this.$root.$emit("vds::list::reload", !0), this.$bubble("vds::list::reload", {reloadCount: !0}), this.$root.$emit("vds::folder::selection::event", this.documentFolderName)) : (this.attachRecords(t), this.$root.$emit("bv::hide::modal", "createRecordModal"), this.$root.$emit("bv::hide::modal", "addOrCreateRecord"))
                })
            }
        }
    }
});
var Vtiger_Component_LinkRecordItems = App.vtComponent.extend({
        props: {
            selectedRecords: [Object, Array],
            records: [Object, Array],
            moduleName: String
        }, data: () => ({relatedModuleModel: {}}), computed: {
            labelFields() {
                return this.relatedModuleModel.getLabelFields()
            }
        }, created() {
            this.getModuleDescribe()
        }, methods: {
            emitSelectedRecord(e) {
                this.$emit("record-select", e)
            }, getModuleDescribe() {
                this._getModuleDescribe(this.moduleName).then(e => this.relatedModuleModel = e)
            }
        }
    }), Documents_Component_LinkRecordItems = Vtiger_Component_LinkRecordItems.extend({
        data: () => ({documentsModuleModel: BaseModel.getModuleSpecificModel("Documents", "Module", {})}), created() {
            this.getDocumentsDescribe()
        }, methods: {
            getDocumentsDescribe() {
                this._getModuleDescribe("Documents").then(e => this.documentsModuleModel = e)
            }, getLabelFields() {
                return this.documentsModuleModel.getLabelFields()
            }
        }, render: function anonymous() {
            with (this) return _c("div", {staticClass: "linkRecordsMainContainer d-flex flex-wrap"}, _l(records, (function (e) {
                return records.length && !e.hide ? _c("div", {
                    staticClass: "justify-content-between linkRecordBlock w-50",
                    on: {
                        click: function (t) {
                            return emitSelectedRecord(e)
                        }
                    }
                }, [_c("div", {
                    staticClass: "align-items-center linkRecords  p-2 d-flex rounded my-2",
                    class: {"bg-light-blue-0 border ": selectedRecords.includes(e.id)}
                }, [_c("i", {staticClass: "fa fa-Documents mr-2 fa-lg text-primary"}), _v(" "), _c("div", {staticClass: "linkRecordLabel overflow-hidden text-nowrap"}, [e.recordLabel ? _c("span", {attrs: {title: e.recordLabel}}, [_v(_s(e.recordLabel))]) : _c("span", _l(getLabelFields(), (function (t) {
                    return _c("span", {attrs: {title: e.getDisplayValue(t)}}, [_v(_s(e.getDisplayValue(t)) + " ")])
                })), 0)]), _v(" "), selectedRecords.includes(e.id) ? _c("i", {staticClass: "fas fa-check ml-auto circle-icon-small text-white"}) : _e()])]) : _e()
            })), 0)
        }
    }), Inventory_Component_LinkRecordItems = Vtiger_Component_LinkRecordItems.extend({
        render: function anonymous() {
            with (this) return _c("div", {staticClass: "linkRecordsMainContainer d-flex flex-wrap"}, _l(records, (function (e) {
                return _c("div", {
                    staticClass: "justify-content-between linkRecordBlock baselinkRecordBlock w-100 my-2",
                    on: {
                        click: function (t) {
                            return emitSelectedRecord(e)
                        }
                    }
                }, [_c("div", {
                    staticClass: " linkRecords  baseFontColor px-3 py-2 d-flex rounded  bg-light flex-column border",
                    class: {"bg-light-blue-0  ": selectedRecords.includes(e.getId())}
                }, [_c("div", {staticClass: "py-1 linkRecordLabel overflow-hidden text-nowrap"}, [e.account_id && 0 != e.account_id.id ? _c("span", [_v(_s(e.account_id.label) + " > ")]) : _e(), _v(" "), e.recordLabel ? _c("span", {attrs: {title: e.recordLabel}}, [_v(_s(e.recordLabel))]) : _c("span", _l(labelFields, (function (t) {
                    return _c("div", [_v(_s(e.getDisplayValue(t)) + " ")])
                })), 0)]), _v(" "), _c("div", {staticClass: "my-1 d-flex align-items-center"}, [_c("span", {staticClass: "badge badge-pill badge-success px-3  py-2"}, [_v(_s(translate("Potentials", "Potentials")))]), _v(" "), selectedRecords.includes(e.getId()) ? _c("i", {staticClass: "fas fa-check ml-auto circle-icon-small text-white"}) : _e()])])])
            })), 0)
        }
    }), Invoice_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    Quotes_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    SalesOrder_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    PurchaseOrder_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    ServiceContracts_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    WorkOrders_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    Subscription_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({}),
    CreditNotes_Component_LinkRecordItems = Inventory_Component_LinkRecordItems.extend({});
var Vtiger_Component_ModCommentsActivity = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DraftComment, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Record, Vtiger_Mixin_StickyNotes, Vtiger_Mixins_ShowModal, Vtiger_Mixin_Reaction, Vtiger_Mixin_UsersUtils, Vtiger_Mixin_ModulePermissions, Vtiger_Mixin_CopyPermalink],
    props: {
        data: Object,
        parentRecordId: {type: Number, default: this.$id},
        selectedActivityId: [Number, String],
        reactionsEnabled: [Boolean],
        userImageInfo: {type: Object}
    },
    components: {"vds-comment": App.loadComponent("Comment")},
    data: () => ({
        showAction: !1,
        showStickyBtn: !1,
        attachmentsHover: [],
        reactions: {},
        showByIndex: null,
        reactionValues: ["Tada", "Clap", "Thinking", "Heart", "Smile", "Thumbsdown", "Thumbsup"],
        reactionHovered: !1,
        stickyNoteAllowed: !0,
        replyComment: !1
    }),
    created() {
        this.init(), this.draftStatus = 4, this.draftComment = JSON.parse(JSON.stringify(this.data)), this.getDraftComment(), this.registerDraftCommentWatcher(), this.parentComment = JSON.parse(JSON.stringify(this.data))
    },
    computed: {
        activityIcon: () => "fa fa-comment", userDetailViewUrl() {
            return this.getUserDetailUrl(this.data.userid.id)
        }, isAdmin() {
            return !(!this.$currentUser || "on" !== this.$currentUser.is_admin)
        }, isUserDetailLinkAllowed() {
            return this.isAdmin || this.data.userid.id == this.$currentUser.id
        }, replyData() {
            return jQuery.extend({}, !0, this.data)
        }, commentUrl() {
            let t = VTHelper.getInstanceUrl() + this.getRecordDetailViewUrl(this.parentRecordId, this.$module) + "&activity=ModComments&selectedActivityId=" + this.data.id,
                e = VTHelper.getInventoryModules();
            return _.contains(e.concat(["Documents", "PriceBooks"]), this.$module) && (t += "&relatedtab=RecentActivity"), t
        }, parentCommentId() {
            return this.data.id
        }
    },
    watch: {
        reactionsEnabled: {
            handler() {
                this.setupReactions()
            }
        }
    },
    methods: {
        init() {
            this.$watch(`$store.state.${this.parentRecordId}_stickynotes`, t => {
                this.showStickyBtn = t.modcommentsid == this.data.id && 1 == t.isstickynote || this.showStickyBtn
            }), this.$root.$on("vds::stickynote::status", t => {
                this.showStickyBtn = t
            }), this.data.id == this.selectedActivityId && setTimeout(() => {
                window.scroll(0, document.getElementById("comment_" + this.selectedActivityId).offsetTop)
            }, 1e3);
            let t = !_.isUndefined(this.$id) && this.$id ? this.$id : this.parentRecordId;
            this.data && this.data.parent_id && !_.isUndefined(t) && this.data.parent_id.id != t && (this.stickyNoteAllowed = !1), this.setupReactions()
        },
        setupReactions() {
            this.reactionsEnabled && (this.$options.components["vds-reactions"] = App.loadComponent("Reaction", "Reactions"), this.getReactions())
        },
        addORremoveStickyNote(t) {
            this._getModuleDesc("ModComments");
            let e = this.appStore.get(this.parentRecordId + "_stickynotes"),
                s = {module: "ModComments", id: t, related_to: this.parentRecordId, field: "isstickynote"};
            if (e && Object.keys(e).length > 0) {
                var i = e.id ? e.id : e.modcommentsid;
                s.value = i == t && 1 == e.isstickynote ? 0 : 1
            } else s.value = 1;
            this.appStore.request("api_patch", {url: "records", params: s}).then(t => {
                this.appStore.set({key: this.parentRecordId + "_stickynotes", data: t});
                let e = 1 == t.isstickynote ? "JS_STICKY_NOTE_ADDED" : "JS_STICKY_NOTE_REMOVED";
                this.showStickyBtn = 1 == t.isstickynote, this.showSuccessNotification(this.translate(e))
            }, e => {
                this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        onConfirm: this.updateStickyNote,
                        confirmEntity: {oldStickyNote: i, newStickyNote: t},
                        message: this.translate("JS_STICKY_NOTE_CONFIRMATION_MESSAGE", this.$module)
                    },
                    modalOnModalMode: !1
                })
            })
        },
        updateStickyNote(t) {
            this.$root.$emit("vds::stickynote::status", !1);
            let e = [], s = {
                module: "ModComments",
                id: t.oldStickyNote,
                related_to: this.parentRecordId,
                field: "isstickynote",
                value: 0,
                type: "patch",
                api: "records"
            }, i = {
                module: "ModComments",
                id: t.newStickyNote,
                related_to: this.parentRecordId,
                field: "isstickynote",
                value: 1,
                type: "patch",
                api: "records"
            };
            e.push(jQuery.extend(!0, {}, s)), e.push(jQuery.extend(!0, {}, i)), this.appStore.request("api_batch", {requests: e}).then(t => {
                this.appStore.set({
                    key: this.parentRecordId + "_stickynotes",
                    data: JSON.parse(t["0-response"])
                }), this.appStore.set({
                    key: this.parentRecordId + "_stickynotes",
                    data: JSON.parse(t["1-response"])
                }), this.showStickyBtn = !0, this.showSuccessNotification(this.translate("JS_STICKY_NOTE_ADDED"))
            })
        },
        toggleAttachmentsHover(t, e) {
            Vue.set(this.attachmentsHover, t, e)
        },
        openLinkInNewTab() {
            jQuery("#completedActivitiesBlock a").attr("target", "_blank")
        },
        copyDirectLink() {
            document.createElement("input");
            this.successNotification = this.translate("JS_COMMENT_URL_COPY_SUCCESS"), this.copyPermalink(this.commentUrl, this.data.id)
        },
        getReactions() {
            let t = "$store.state.";
            this.$namespaceStore && (t += this.$namespaceStore + "_"), t += this.data.id + "_reactions", this.$watch(t, (function (t) {
                this.reactions = t
            }))
        },
        getColor: t => VTHelper.getColorCode(t),
        getAttachmentIcon: t => t ? VTHelper.getFileIconByFileName(t) : "fa-file",
        registerDraftCommentWatcher() {
            this.$watch("draftComment", () => {
                _.isEmpty(this.draftComment) && (this.draftComment = JSON.parse(JSON.stringify(this.data)))
            })
        },
        postSave() {
            this.replyComment = !1, this.$emit("vds::postcomment::save")
        },
        updateDraftComment(t, e) {
            this.draftComment = JSON.parse(JSON.stringify(t)), this.$root.$emit("bv::hide::modal", "commentReplyModal"), e && (this.replyComment = !1)
        },
        draftCommentUpdate(t) {
            this.draftComment.commentcontent = JSON.parse(JSON.stringify(t))
        }
    },
    mounted() {
        this.openLinkInNewTab()
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "w-100"}, [_c("div", {
            staticClass: "d-flex p-3 w-100 position-relative",
            class: data.id == selectedActivityId ? "commentHighlighted" : "",
            attrs: {name: "Comments", id: "comment_" + data.id},
            on: {
                mouseover: function (t) {
                    showAction = !0
                }, mouseout: function (t) {
                    showAction = !1
                }
            }
        }, [_c("span", {staticClass: "p-0 position-relative"}, [userImageInfo && userImageInfo[data.userid.id] && userImageInfo[data.userid.id].image ? _c("img", {
            staticClass: "user-image-sm border-grey-6",
            attrs: {
                alt: userImageInfo[data.userid.id].fullname,
                src: userImageInfo[data.userid.id].image.url,
                title: data.userid.label
            }
        }) : _c("span", {
            staticClass: "circle-icon border-grey-6 text-capitalize text-white icon-container-sm d-flex align-items-center justify-content-center",
            style: {background: getColor(data.userid.label)}
        }, [_v(_s(data.userid.label.substring(0, 2)))]), _v(" "), _c("span", {
            staticClass: "text-warning relatedModuleIcon",
            class: activityIcon
        })]), _v(" "), _c("div", {staticClass: "d-flex flex-column w-100 pr-4"}, [_c("div", {staticClass: "d-flex"}, [_c("div", {staticClass: "pb-3 d-flex flex-grow-1"}, [_c("strong", [isUserDetailLinkAllowed ? _c("a", {
            staticClass: "pl-3 text-dark",
            attrs: {target: "_blank", href: userDetailViewUrl}
        }, [_v(_s(data.userid.label))]) : _e(), _v(" "), isUserDetailLinkAllowed ? _e() : _c("div", {staticClass: "pl-3"}, [_v(_s(data.userid.label))])]), _v("\n\t\t\t\t\t\t " + _s(translate("LBL_COMMENTED").toLowerCase()) + " \n\t\t\t\t\t\t"), _c("small", {staticClass: "mx-1 text-muted my-auto"}, [_c("vds-date-diff-string", {attrs: {utcTime: data.created_time}})], 1)]), _v(" "), _c("div", {
            staticClass: "d-flex flex-grow-1 justify-content-end position-absolute",
            class: data.id == selectedActivityId ? "commentHighlighted" : "",
            staticStyle: {right: "0px"}
        }, [reactionsEnabled ? _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showAction,
                expression: "showAction"
            }], staticClass: "mr-4 c-pointer", attrs: {title: translate("JS_REACT")}, on: {
                click: function (t) {
                }
            }
        }, [1 === showByIndex ? _c("div", {staticClass: "float-right"}, [_c("div", {
            staticClass: "emotionBadge bg-grey-hue-1 font-14 mt-n2 mr-n1 c-pointer px-2",
            on: {
                mouseleave: function (t) {
                    showByIndex = null
                }
            }
        }, [_c("span", {staticClass: "d-flex text-truncate p-2 text-dark emojis"}, _l(reactionValues, (function (t) {
            return _c("i", {
                staticClass: "e1a-lg",
                class: getReactionIcon(t, reactionHovered),
                attrs: {title: translate(t, "Reactions")},
                on: {
                    click: function (e) {
                        return updateReaction(t, data.id)
                    }, mouseover: function (e) {
                        reactionHovered = t
                    }, mouseout: function (t) {
                        reactionHovered = !1
                    }
                }
            })
        })), 0), _v(" "), _c("span", {
            staticClass: "text-secondary", on: {
                mouseover: function (t) {
                    showByIndex = 1
                }
            }
        }, [_c("i", {staticClass: "fa fa-smile-plus font-14"})])])]) : _c("div", {staticClass: "text-center text-dark font-14"}, [_c("span", {
            staticClass: "c-pointer highlightText-hover",
            on: {
                mouseover: function (t) {
                    showByIndex = 1
                }
            }
        }, [_c("i", {staticClass: "fa fa-smile-plus"})])])]) : _e(), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showAction && isCommentsAllowed,
                expression: "showAction && isCommentsAllowed"
            }],
            staticClass: "mr-4 c-pointer highlightText-hover",
            attrs: {title: translate("LBL_REPLY")},
            on: {
                click: function (t) {
                    replyComment = !0
                }
            }
        }, [_c("i", {staticClass: "fa fa-reply"})]), _v(" "), $currentUser.id == data.userid.id ? _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showAction && isCommentsAllowed,
                expression: "showAction && isCommentsAllowed"
            }, {
                name: "show-modal",
                rawName: "v-show-modal.DetailCommentReply.true",
                value: {comment: data, mode: "edit", relatedModule: $module, relatedTo: parentRecordId},
                expression: "{comment : data, mode : 'edit', relatedModule:$module, relatedTo : parentRecordId}",
                modifiers: {DetailCommentReply: !0, true: !0}
            }],
            staticClass: "mr-4 c-pointer highlightText-hover",
            attrs: {title: translate("LBL_EDIT")},
            on: {
                "vds::postcomment::save": function (t) {
                    return $root.$emit("vds::postcomment::save")
                }
            }
        }, [_c("i", {staticClass: "fa fa-pencil"})]) : _e(), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showAction,
                expression: "showAction"
            }],
            staticClass: "mr-4 c-pointer highlightText-hover",
            attrs: {title: translate("LBL_COMMENT_URL_TITLE")},
            on: {
                click: function (t) {
                    return copyDirectLink()
                }
            }
        }, [_c("i", {staticClass: "fa fa-permalink"})]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: stickyNoteAllowed && (showAction || showStickyBtn),
                expression: "stickyNoteAllowed && (showAction || showStickyBtn)"
            }],
            staticClass: "mr-4 c-pointer highlightText-hover",
            attrs: {title: translate("JS_STICKY_NOTE")},
            on: {
                click: function (t) {
                    return addORremoveStickyNote(data.id)
                }
            }
        }, [_c("i", {staticClass: "far fa-sticky-note"})])])]), _v(" "), _c("div", {staticClass: "d-flex align-items-center pl-3 mb-1 text-dark description-html textContainer image-no-overflow overflow-x-auto"}, [_c("div", {
            staticClass: "w-100",
            domProps: {innerHTML: _s(linkify(purifyContent(data.commentcontent)))}
        })]), _v(" "), data.happened_on != data.created_time ? _c("small", {staticClass: "text-muted pl-3 mt-2 mb-1"}, [_c("span", [_v(_s(translate("LBL_COMMENT_MODIFIED")))]), _v(" "), _c("vds-date-diff-string", {attrs: {utcTime: data.happened_on}})], 1) : _e(), _v(" "), _c("div", {staticClass: "d-flex flex-wrap"}, _l(data.attachments, (function (t, e) {
            return data.attachments && data.attachments.length > 0 ? _c("div", {staticClass: "d-flex align-items-center mb-2 pl-3 mw-col-11"}, [_c("div", {staticClass: "d-flex rounded bg-grey-hue-4 text-dark font-weight-normal px-2 py-1 w-100 font-10"}, [_c("i", {
                staticClass: "circle-icon border-0 d-flex far mr-1 my-0 text-grey-4",
                class: getAttachmentIcon(t.attachment)
            }), _v(" "), _c("a", {
                staticClass: "d-flex w-100 ml-1 text-dark no-text-decoration align-items-center",
                attrs: {href: t.url}
            }, [_c("span", {staticClass: "w-100 textOverflowEllipsis"}, [_v(_s(t.attachment))]), _v(" "), _c("i", {staticClass: "far fa-download ml-2 text-grey-4"})])])]) : _e()
        })), 0), _v(" "), _.keys(reactions).length > 0 ? _c("vds-reactions", {
            staticClass: "pl-3 pt-2",
            attrs: {commentid: data.id, reactions: reactions}
        }) : _e()], 1)]), _v(" "), replyComment ? _c("div", {staticClass: "position-relative"}, [_c("i", {
            staticClass: "fa fa-times c-pointer position-absolute mt-3 mr-3 r-0",
            on: {
                click: function (t) {
                    replyComment = !1
                }
            }
        }), _v(" "), _c("i", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.DetailCommentReply.true",
                value: {comment: draftComment, mode: "reply", relatedModule: $module, relatedTo: parentRecordId},
                expression: "{comment : draftComment, mode : 'reply', relatedModule:$module, relatedTo : parentRecordId}",
                modifiers: {DetailCommentReply: !0, true: !0}
            }],
            staticClass: "fa fa-expand c-pointer position-absolute mt-3 mr-4 r-16",
            on: {"vds::update::comment": updateDraftComment}
        }), _v(" "), _c("vds-comment", {
            attrs: {
                comment: draftComment,
                currentModule: $module,
                relatedTo: parentRecordId,
                "parent-comment": parentComment,
                relatedModule: $module,
                mode: "reply",
                focus: !0
            }, on: {
                "vds::postcomment::save": function (t) {
                    return postSave()
                }, "vds::draft::updated": draftCommentUpdate
            }
        })], 1) : _e()])
    }
});
var Vtiger_Component_ModTrackerActivity = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record"), Vtiger_Mixin_Module, Vtiger_Mixin_UsersUtils, Vtiger_Mixin_DateUtils, Vtiger_Mixin_ShowPreview],
    props: {data: Object, userImageInfo: {type: Object}, parentRecord: {type: Object}},
    data: () => ({
        linkedRecordDetailUrl: "",
        isRecordDeleted: !1,
        detailFieldDisplayTypes: ["owner", "email", "phone", "documentsFolder", "file"],
        isReplyAllowed: !0
    }),
    mounted() {
        this.getLinkedRecordDetailUrl()
    },
    computed: {
        isSystemAction() {
            return !!(this.data.fromwhere && this.data.fromwhere.through && ["workflow", "approvals", "system", "mailroom", "google", "office365"].includes(this.data.fromwhere.through.toLowerCase()))
        }, userDetailViewUrl() {
            return this.getUserDetailUrl(this.data.whodid.id)
        }, isUserDetailLinkAllowed() {
            return this.isAdmin || this.data.whodid.id == this.$currentUser.id
        }, isAdmin() {
            return !(!this.$currentUser || "on" !== this.$currentUser.is_admin)
        }, isAllowed() {
            return "linked" != this.data.status || "ModComments" != this.data.linked_record.module
        }
    },
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    methods: {
        getLinkedRecordDetailUrl() {
            _.isUndefined(this.data.linked_record) || (_.isEmpty(this.data.linked_record.deleted) || parseInt(this.data.linked_record.deleted) ? this.isRecordDeleted = !0 : (this.linkedRecordDetailUrl = "view/detail?id=" + this.data.linked_record.id + "&module=" + this.data.linked_record.module, "PhoneCalls" == this.data.linked_record.module && (this.linkedRecordDetailUrl += "&viewtype=deepdive")))
        }, getUpdatedFieldModel(e) {
            return !!this.$_currentModuleModel && this.$_currentModuleModel.getField(e)
        }, getUpdateFieldDisplay(e) {
            var t = this.getUpdatedFieldModel(e);
            return t ? this.translate(t.fieldlabel) : ""
        }, getRecordModel(e, t) {
            var a = {};
            a[e] = t;
            let s = this.getUpdatedFieldModel(e);
            s && "multicurrency" == s.type.name ? a.record_currency_id = this.parentRecord.record_currency_id : s && "currency" == s.type.name && this.parentRecord && this.parentRecord.record_prices && (a.hideCurrencySymbol = !0);
            var d = BaseModel.getModuleSpecificModel(this.$module ? this.$module : App.module(), "Record", a);
            return this.transformRecordToUserFormat(d, this.$_currentModuleModel)
        }, hasPreValue(e) {
            var t = this.getUpdatedFieldModel(e.fieldname);
            return !(t && ["reference", "owner", "multireference"].includes(t.fieldType) && e.prevalue && 0 === parseInt(e.prevalue)) && !!e.prevalue
        }, hasPostValue(e) {
            var t = this.getUpdatedFieldModel(e.fieldname);
            return !(t && ["reference", "owner", "multireference"].includes(t.fieldType) && e.postvalue && 0 === parseInt(e.postvalue)) && !!e.postvalue
        }, isFileField(e) {
            let t = this.getUpdatedFieldModel(e);
            return !(!t || !t.type || "image" !== t.type.name && "file" !== t.type.name)
        }, isFieldViewable(e) {
            let t = !1, a = this.getUpdatedFieldModel(e);
            return ["next_journey", "activeon"].includes(e) ? t = !1 : (a && a._viewable && 5 != parseInt(a.displaytype) || -1 != jQuery.inArray(e, ["emailoptin_requestcount", "emailoptin_lastrequestedon"])) && (t = !0), t
        }, getHtmlDiff: (e, t) => VTHelper.getHtmlDiff(e, t), getFieldDisplayViewType(e) {
            var t = this.getUpdatedFieldModel(e);
            return t && _.contains(this.detailFieldDisplayTypes, t.fieldType) ? "detail" : "list"
        }, openDetailPreview() {
            this.openRecord(this.data.linked_record.id, this.data.linked_record.module)
        }
    },
    render: function anonymous() {
        with (this) return isAllowed ? _c("div", {
            staticClass: "p-3",
            attrs: {
                name: data.linked_record ? data.linked_record.module : "",
                "data-record-id": data.linked_record ? data.linked_record.id : ""
            }
        }, [_c("div", {staticClass: "d-flex"}, [_c("span", {staticClass: "p-0 mr-3 position-relative"}, [isSystemAction ? _c("i", {staticClass: "fa fa-workflow activityIconContainer icon-container-sm d-flex align-items-center justify-content-center text-dark"}) : [userImageInfo && userImageInfo[data.whodid.id].image ? _c("img", {
            staticClass: "user-image-sm border-grey-6",
            attrs: {
                alt: userImageInfo[data.whodid.id].fullname,
                src: userImageInfo[data.whodid.id].image.url,
                title: data.whodid.label
            }
        }) : _c("i", {staticClass: "fa fa-user activityIconContainer icon-container-sm d-flex align-items-center justify-content-center text-dark"})], _v(" "), "linked" === data.status || "unlinked" === data.status ? [_c("span", {
            staticClass: "text-primary relatedModuleIcon",
            class: getModuleIconClass(data.linked_record.module)
        })] : _e()], 2), _v(" "), _c("div", {staticClass: "mt-1 w-75"}, [_c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "d-flex-inline w-100"}, [isSystemAction ? _c("span", [_c("span", {}, [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.through)) + "\n\t\t\t\t\t\t\t\t\t"), data.fromwhere[data.fromwhere.through.toLowerCase()] ? _c("span", [_c("strong", [_v(" - '" + _s(data.fromwhere[data.fromwhere.through.toLowerCase()].name) + "'")])]) : _e(), _v(" "), 22 == data.fromwhere.state ? _c("span", [_c("strong", [_v(" - '" + _s(data.fromwhere.through.toLowerCase()) + "'")])]) : _e(), _v(" "), "Workflow" === data.fromwhere.through ? _c("span", [_v(" " + _s(translate("LBL_VIA_TASK")) + "\n\t\t\t\t\t\t\t\t\t\t"), _c("strong", [_v(" '" + _s(data.fromwhere.task.name) + "'")])]) : _e()]), _v(" "), "created" === data.status ? _c("span", [_v(_s(translate("LBL_CREATED")))]) : "updated" === data.status ? _c("span", [_v(_s(translate("LBL_UPDATED")))]) : "linked" === data.status ? _c("span", {staticClass: "mr-1"}, [_v(_s(translate("LBL_LINKED").toLowerCase()))]) : "unlinked" === data.status ? _c("span", {staticClass: "mr-1"}, [_v(_s(translate("LBL_UNLINKED").toLowerCase()))]) : _e()]) : _c("span", ["consent_viewed" == data.status ? _c("span", [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.log.label, data.fromwhere.log.module, parentRecord.label)) + "\n\t\t\t\t\t\t\t\t")]) : "email_optin_email" == data.status ? _c("span", [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.log.label)) + "\n\t\t\t\t\t\t\t\t")]) : "email_log" == data.status ? _c("span", [data.fromwhere.length && data.fromwhere.log.parameters && 1 == data.fromwhere.log.parameters.length ? [_v("\n\t\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.log.label, data.fromwhere.log.module, data.fromwhere.log.parameters[0])) + "\n\t\t\t\t\t\t\t\t\t")] : _e(), _v(" "), data.fromwhere.length && data.fromwhere.log.parameters && 2 == data.fromwhere.log.parameters.length ? [_v("\n\t\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.log.label, data.fromwhere.log.module, data.fromwhere.log.parameters[0], data.fromwhere.log.parameters[1])) + "\n\t\t\t\t\t\t\t\t\t")] : [_v("\n\t\t\t\t\t\t\t\t\t\t" + _s(translate(data.fromwhere.log.label, data.fromwhere.log.module)) + " \n\t\t\t\t\t\t\t\t\t\t"), "LBL_CONFIRMATION_EMAIL_SENT" == data.fromwhere.log.label ? [_v(_s(getDisplayDateTime(data.fromwhere.log.parameters.sent_on)))] : _e()]], 2) : [_c("strong", [22 == data.fromwhere.state ? [_c("span", [_v(_s(data.fromwhere.through) + "'")])] : [isUserDetailLinkAllowed ? _c("a", {
            staticClass: "text-dark",
            attrs: {href: userDetailViewUrl, target: "_blank"}
        }, [_v(_s(data.whodid.label))]) : _c("span", [_v(_s(data.whodid.label))])]], 2), _v(" "), "created" === data.status ? _c("span", [_v(_s(translate("LBL_CREATED")))]) : "updated" === data.status ? _c("span", [_v(_s(translate("LBL_UPDATED")))]) : "decrypted" === data.status ? _c("span", [_v(_s(translate("decrypted")) + " \n\t\t\t\t\t\t\t\t\t\t"), _c("span", {staticClass: "font-weight-bold"}, _l(data.fromwhere.log.parameters.fieldnames, (function (e) {
            return _c("span", {staticClass: "pr-1"}, [_v("\n\t\t\t\t\t\t\t\t\t\t\t\t" + _s(getUpdateFieldDisplay(e)) + "\n\t\t\t\t\t\t\t\t\t\t\t")])
        })), 0)]) : "erased" === data.status ? _c("span", [_v(_s(translate("erased")) + " \n\t\t\t\t\t\t\t\t\t\t"), _c("span", {staticClass: "font-weight-bold"}, _l(data.fromwhere.log.parameters.fieldnames, (function (e, t) {
            return _c("span", {staticClass: "pr-1"}, [_v("\n\t\t\t\t\t\t\t\t\t\t\t\t" + _s(getUpdateFieldDisplay(e)) + "\n\t\t\t\t\t\t\t\t\t\t\t\t"), t != data.fromwhere.log.parameters.fieldnames.length - 1 ? [_v(",")] : _e()], 2)
        })), 0)]) : "linked" === data.status ? _c("span", {staticClass: "mr-1"}, [_v(_s(translate("LBL_LINKED").toLowerCase()))]) : "unlinked" === data.status ? _c("span", {staticClass: "mr-1"}, [_v(_s(translate("LBL_UNLINKED").toLowerCase()))]) : _e()]], 2), _v(" "), "linked" === data.status || "unlinked" === data.status ? _c("span", {staticClass: "font-weight-normal"}, [_c("span", {}, [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate("SINGLE_" + ("Tasks" === data.linked_record.module ? "Calendar" : data.linked_record.module), "Tasks" === data.linked_record.module ? "Calendar" : data.linked_record.module).toLowerCase()) + "\n\t\t\t\t\t\t\t\t")]), _v(" "), "Emails" != data.linked_record.module ? _c("b-link", {
            class: [isRecordDeleted ? "cursorPointerNotAllowed" : ""],
            attrs: {href: "#", href: linkedRecordDetailUrl, target: "_blank", disabled: isRecordDeleted},
            on: {
                click: function (e) {
                    return e.preventDefault(), openDetailPreview(e)
                }
            }
        }, [_v(_s(data.linked_record.label))]) : _e(), _v(" "), "Emails" == data.linked_record.module ? _c("b-link", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.EmailPreview",
                value: {recordid: data.linked_record.id, isReplyAllowed: isReplyAllowed},
                expression: "{recordid : data.linked_record.id,isReplyAllowed: isReplyAllowed}",
                modifiers: {EmailPreview: !0}
            }],
            staticClass: "word-break-all",
            class: [isRecordDeleted ? "cursorPointerNotAllowed" : ""],
            attrs: {disabled: isRecordDeleted}
        }, [_v(_s(data.linked_record.label))]) : _e(), _v(" "), isRecordDeleted ? _c("span", [_c("b-badge", {
            attrs: {
                pill: "",
                variant: "warning"
            }
        }, [_v(_s(translate("LBL_Deleted")))])], 1) : _e()], 1) : _e(), _v(" "), _c("small", {staticClass: "text-muted ml-1"}, [_c("vds-date-diff-string", {attrs: {utcTime: data.happened_on}})], 1)])]), _v(" "), "updated" === data.status && data.changed_data.length > 0 ? _c("div", {staticClass: "p-0 mt-2 fieldUpdatesContainer"}, _l(data.changed_data, (function (e) {
            return (hasPreValue(e) || hasPostValue(e)) && (getUpdatedFieldModel(e.fieldname) && isFieldViewable(e.fieldname) || "isclosed" === e.fieldname) ? _c("div", {staticClass: "d-flex mb-1"}, ["isclosed" === e.fieldname ? _c("span", ["0" == e.prevalue && "1" == e.postvalue ? _c("span", [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate("LBL_CLOSED_RECORD")) + "\n\t\t\t\t\t\t\t\t")]) : _e(), _v(" "), "1" == e.prevalue && "0" == e.postvalue ? _c("span", [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate("LBL_REOPENED_RECORD")) + "\n\t\t\t\t\t\t\t\t")]) : _e()]) : _c("div", {staticClass: "d-flex-inline w-100"}, ["richtext" != getUpdatedFieldModel(e.fieldname).type.name ? _c("span", [_v("\n\t\t\t\t\t\t\t\t\t'" + _s(getUpdateFieldDisplay(e.fieldname)) + "'\n\t\t\t\t\t\t\t\t")]) : _e(), _v(" "), "richtext" == getUpdatedFieldModel(e.fieldname).type.name ? _c("div", [_c("div", {staticClass: "d-flex"}, [_c("span", [_v("'" + _s(getUpdateFieldDisplay(e.fieldname)) + "'")]), _v(" "), _c("span", {staticClass: "mx-1"}, [_v(_s(translate("LBL_CHANGED")))]), _v(" "), _c("span", {staticClass: "text-dark mr-1"}, [_v(_s(translate("LBL_TO").toLowerCase()))])]), _v(" "), _c("div", {
                staticClass: "text-add text-remove image-no-overflow ml-2 word-break-all list-no-overflow",
                domProps: {innerHTML: _s(linkify(purifyContent(getHtmlDiff(e.prevalue, e.postvalue))))}
            })]) : hasPreValue(e) && hasPostValue(e) ? [_c("span", {staticClass: "mx-1"}, [_v(_s(translate("LBL_CHANGED")))]), _v(" "), _c("span", {staticClass: "text-dark mr-1"}, [_v(_s(translate("LBL_FROM").toLowerCase()))]), _v(" "), isFileField(e.fieldname) ? _c("span", {staticClass: "mr-1"}, [_v(_s(e.prevalue))]) : _c("span", {staticClass: "text-dark font-weight-bold updatesFieldValue"}, [_c("vds-field-display", {
                attrs: {
                    field: getUpdatedFieldModel(e.fieldname),
                    record: getRecordModel(e.fieldname, e.prevalue, "prevalue"),
                    modulemodel: $_currentModuleModel,
                    view: getFieldDisplayViewType(e.fieldname),
                    "show-converted-currency-value": !1
                }
            })], 1), _v(" "), _c("span", {staticClass: "text-dark mx-1"}, [_v(_s(translate("LBL_TO").toLowerCase()))]), _v(" "), isFileField(e.fieldname) ? _c("span", [_v(_s(e.postvalue))]) : _c("span", {staticClass: "text-dark font-weight-bold updatesFieldValue"}, [_c("vds-field-display", {
                attrs: {
                    field: getUpdatedFieldModel(e.fieldname),
                    record: getRecordModel(e.fieldname, e.postvalue, "postvalue"),
                    modulemodel: $_currentModuleModel,
                    view: getFieldDisplayViewType(e.fieldname),
                    "show-converted-currency-value": !1
                }
            })], 1)] : hasPreValue(e) && !hasPostValue(e) ? [_c("span", {staticClass: "mx-1"}, [_v(_s(translate("LBL_CHANGED")))]), _v(" "), _c("span", {staticClass: "text-dark  mr-1"}, [_v(_s(translate("LBL_FROM").toLowerCase()))]), _v(" "), isFileField(e.fieldname) ? _c("span", {staticClass: "text-remove"}, [_v(_s(e.prevalue))]) : _c("span", {staticClass: "text-dark font-weight-bold updatesFieldValue"}, [_c("vds-field-display", {
                staticClass: "text-remove",
                attrs: {
                    field: getUpdatedFieldModel(e.fieldname),
                    record: getRecordModel(e.fieldname, e.prevalue, "prevalue"),
                    modulemodel: $_currentModuleModel,
                    view: getFieldDisplayViewType(e.fieldname),
                    "show-converted-currency-value": !1
                }
            })], 1), _v(" "), _c("span", {staticClass: "text-dark mx-1"}, [_v(_s(translate("LBL_TO").toLowerCase()))]), _v(" "), _c("span", {staticClass: "mr-1"}, [_v('"' + _s(translate("JS_NONE").toLowerCase()) + '"')])] : !hasPreValue(e) && hasPostValue(e) ? [_c("span", {staticClass: "mx-1"}, [_v(_s(translate("LBL_CHANGED")))]), _v(" "), _c("span", {staticClass: "text-dark mr-1"}, [_v(_s(translate("LBL_FROM").toLowerCase()))]), _v(" "), _c("span", {staticClass: "mr-1"}, [_v('"' + _s(translate("JS_NONE").toLowerCase()) + '"')]), _v(" "), _c("span", {staticClass: "text-dark mr-1"}, [_v(_s(translate("LBL_TO").toLowerCase()))]), _v(" "), isFileField(e.fieldname) ? _c("span", [_v(_s(e.postvalue))]) : _c("span", {staticClass: "text-dark font-weight-bold updatesFieldValue"}, [_c("vds-field-display", {
                attrs: {
                    field: getUpdatedFieldModel(e.fieldname),
                    record: getRecordModel(e.fieldname, e.postvalue, "postvalue"),
                    modulemodel: $_currentModuleModel,
                    view: getFieldDisplayViewType(e.fieldname),
                    "show-converted-currency-value": !1
                }
            })], 1)] : _e()], 2)]) : _e()
        })), 0) : _e()])])]) : _e()
    }
});
var Vtiger_Component_PotentialsUpcomingWidget = App.vtComponent.extend({
    components: {"vds-detail-upcoming-activities": App.loadComponent("DetailUpcomingActivities")},
    props: {record: {type: Object, default: () => Vtiger_Record_Model.getCleanInstance(this.$module, {loaded: !1})}},
    render: function anonymous() {
        with (this) return _c("div", [_c("vds-detail-upcoming-activities", {
            attrs: {
                id: record.getId(),
                "display-header": !1
            }
        })], 1)
    }
});
var Vtiger_Component_PreviewModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleCollection, Vtiger_Mixin_Reaction, Vtiger_Mixin_Validators, Vtiger_Mixin_DependentFields, Vtiger_Mixins_ShowModal, Vtiger_Mixin_ShowDependentFieldsModal, Vtiger_Mixin_CopyPermalink],
    data: () => ({
        reactionsEnabled: !1,
        fieldEdit: {},
        triggerFields: [],
        dynamicUpdatedFields: [],
        unwatch: Function,
        clonedRecord: {},
        disableFocusOutEvent: !1,
        targetFields: {},
        editIcon: {}
    }),
    mounted() {
        this.getEnabledModules().then(e => {
            _.indexOf(e, "Reactions") >= 0 && (this.reactionsEnabled = !0)
        })
    },
    methods: {
        fetchAndStoreReactions() {
            let e = [];
            for (var t = 0; t < this.relatedComments.length; t++) e.push(this.relatedComments[t].id);
            this.storeReactions(e)
        }, registerWatcher(e) {
            this.unwatch = this.$watch(() => {
                let t = this.recordModel;
                return {recordModel: t, fieldValue: t[e]}
            }, ({recordModel: t, fieldValue: i}) => {
                this.disableFocusOutEvent = !0, $("#fixedFieldsDisplay").off("focusout.previewModal"), this.triggerModuleSpecificWatcherEvents(e), this.moduleModel.dependentTriggererFields.includes(e) || ("date_start" == e || "due_date" == e ? jQuery(".bootstrap-datetimepicker-widget").length && (this.$root.$off("datepickerclosed"), this.$root.$on("datepickerclosed", () => {
                    this.save(e)
                })) : this.save(e))
            }, {deep: !0})
        }, save(e) {
            this.$validator.validate().then(t => {
                if (t) {
                    let t = this.prepareRecordToSave();
                    this.saveRecord(t, this.moduleModel).then(e => {
                        this.recordModel = this.transformRecordToUserFormat(e, this.$_currentModuleModel), this.appStore.set({
                            key: "Detail_Record_Model",
                            data: this.recordModel
                        });
                        let t = jQuery.extend(!0, {}, e.assigned_user_id),
                            i = this.convertToDBFormat(e, this.$_currentModuleModel);
                        i.assigned_user_id = t, this.$root.$emit("vds::tasks::preview::modal::post::completed", i), this.unwatch(), this.triggerModuleSpecificEvents();
                        for (let e in this.fieldEdit) this.fieldEdit[e] = !1;
                        for (let e in this.editIcon) this.editIcon[e] = !1;
                        this.disableFocusOutEvent = !1, this.$root.$off("vds::dependentfields::save::record")
                    }, t => {
                        this.showErrorNotification(t.message), Vue.set(this.recordModel, e, this.clonedRecord[e]);
                        for (let e in this.fieldEdit) this.fieldEdit[e] = !1
                    })
                }
            })
        }, toggleEdit(e) {
            if (this.recordModel.isClosed) return;
            for (let t in this.fixedDisplayFields) t == e ? Vue.set(this.fieldEdit, t, !0) : Vue.set(this.fieldEdit, t, !1);
            this.moduleModel.getField(e) && "datetime" == this.moduleModel.getField(e).fieldType ? setTimeout(() => {
                jQuery(this.$refs[e]).length && jQuery(this.$refs[e][0].$el).find("input,textarea").focus()
            }, 0) : this.registerSelect2Focus(e), this.registerFocusoutEvent(e), this.registerWatcher(e), this.registerSaveEvents(e), this.moduleModel.dependentTriggererFields.includes(e) && this.handleDependentFields(this.moduleModel.getField(e))
        }, registerSelect2Focus(e) {
            this.$on("select-field-loaded", e => {
                setTimeout(() => {
                    jQuery(this.$refs[e][0].$el) && jQuery(this.$refs[e][0].$el).find(".select2-container").siblings("select:enabled").select2("open")
                }, 50)
            })
        }, triggerModuleSpecificEvents() {
        }, triggerModuleSpecificWatcherEvents(e) {
        }, registerSaveEvents(e) {
            this.$root.$off("vds::dependentfields::save::record"), this.$root.$on("vds::dependentfields::save::record", (e, t) => {
                this.targetFields = t, this.save(e)
            }), this.$root.$off("vds::cancel::dependentfields::modal"), this.$root.$on("vds::cancel::dependentfields::modal", e => {
                this.unwatch(), this.fieldEdit[e] = !1, Vue.set(this.recordModel, e, this.clonedRecord[e])
            })
        }, registerFocusoutEvent(e) {
            $("#fixedFieldsDisplay").off("focusout.previewModal"), $("#fixedFieldsDisplay").on("focusout.previewModal", () => {
                setTimeout(() => {
                    this.disableFocusOutEvent || (Vue.set(this.fieldEdit, e, !1), Vue.set(this.editIcon, e, !1)), this.unwatch()
                }, 200)
            })
        }, prepareRecordToSave() {
            let e = Vtiger_Record_Model.getCleanInstance(this.$module);
            if (e.id = this.recordModel.id, _.size(this.targetFields) > 0) for (let t in this.targetFields) e.set(t, this.recordModel[t]);
            for (let t in this.fieldEdit) this.fieldEdit[t] && e.set(t, this.recordModel[t]);
            let t = ["assigned_user_id"];
            for (var i in t) if (!e.get(s)) {
                var s = t[i];
                e.set(s, this.recordModel[s])
            }
            return e
        }, showEditIcon(e) {
            Vue.set(this.editIcon, e, !0)
        }, hideEditIcon(e) {
            Vue.set(this.editIcon, e, !1)
        }, copyDirectLink() {
            "Calendar" == this.$module || this.$module;
            let e = VTHelper.getInstanceUrl() + this.getRecordDetailViewUrl(this.recordModel.id, this.$module);
            this.copyPermalink(e, this.recordModel.id)
        }
    },
    $_veeValidate: {validator: "new"},
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_RecordKeyFields = App.vtComponent.extend({
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    mixins: [Vtiger_Mixin_ModuleModel],
    props: {record: {type: Object}, widgetHeaders: {type: Array}, relation: {type: [Array, Object]}},
    data: () => ({fieldLimit: 5, showAll: !1}),
    computed: {
        relationSpecificKeyFields: () => [], keyFields() {
            let e = {}, t = this.widgetHeaders.map(e => e.name);
            this.$_currentModuleModel.isLoaded && (e = this.$_currentModuleModel.getSummaryAndHeaderFields(), t.forEach(t => delete e[t]));
            let l = [];
            for (let t in e) {
                let i = e[t];
                if (i.isViewableInDetail && this.record.fieldHasValue(t) && l.push(i), !this.showAll && l.length + this.relationSpecificKeyFields.length == this.fieldLimit) break
            }
            return l = this.relationSpecificKeyFields.concat(l), l
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_l(keyFields, (function (e) {
            return _c("div", {staticClass: "d-flex bg-grey-hue-6 rounded p-2 mt-2 align-items-center"}, [_c("span", {
                staticClass: "col-5 textOverflowEllipsis",
                attrs: {title: translate(e.label, $module)}
            }, [_v(_s(translate(e.label, $module)))]), _v(" "), _c("span", {
                staticClass: "col-7 font-weight-bold",
                class: {"text-truncate": !e.isCompositeParent}
            }, [_c("vds-field-display", {attrs: {record: record, field: e, modulemodel: $_currentModuleModel}})], 1)])
        })), _v(" "), keyFields.length >= fieldLimit ? _c("div", {staticClass: "my-1 p-2"}, [_c("a", {
            staticClass: "mx-3 text-center",
            attrs: {href: "#"},
            on: {
                click: function (e) {
                    e.preventDefault(), showAll = !showAll
                }
            }
        }, [showAll ? _c("span", [_v(_s(translate("JS_SHOW_LESS")))]) : _c("span", [_v(_s(translate("LBL_SHOW_MORE")))])])]) : _e()], 2)
    }
});
var Vtiger_Component_RecordProgression = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_PicklistDependency, Vtiger_Mixins_ShowModal, App.loadMixin("Record"), App.loadMixin("DependentFields"), App.loadMixin("SalesStageProbability", "Potentials")],
    components: {"vds-pick-list-dropdown": App.loadComponent("PickListDropdown")},
    provide() {
        return {changeLifeCycle: this.changeLifeCycle, getPicklistTextColor: this.getPicklistTextColor}
    },
    watch: {
        selectedValue(e, t) {
            this.previouslySelectedVal = t, this.saveTargetValue(e)
        }, $_detailRecordModel(e, t) {
            this.recordModel = e
        }
    },
    data() {
        return {
            selectedValue: "",
            showProgression: !1,
            targetPicklistValues: {},
            sourceField: "",
            targetField: "",
            pickListValues: {},
            showProgressionBar: !1,
            recordModel: BaseModel.getModuleSpecificModel(this.$module, "Record", {}),
            breadCrumbSortOrder: [],
            previouslySelectedVal: ""
        }
    },
    computed: {
        currentSourceField() {
            if (!_.isUndefined(this.sourceField)) return this.translate(this.$_detailRecordModel.getDisplayValue(this.sourceField))
        }, currentTargetField() {
            let e = this.pickListValues.filter(e => e.value == this.$_detailRecordModel.getDisplayValue(this.targetField));
            if (e && e[0]) return this.selectedValue = e[0].value, e[0].value
        }, picklistDependency_DataFields() {
            return this.$_detailRecordModel
        }, currentStageColor() {
            for (let e in this.pickListValues) {
                let t = this.$_currentModuleModel.getField(this.targetField).name;
                if (this.pickListValues[e].value === this.$_detailRecordModel[t]) return this.pickListValues[e].color && "#ffffff" != this.pickListValues[e].color ? this.pickListValues[e].color : "#8E9093"
            }
        }, modalTitle() {
            return this.translate("LBL_CLICK_TO_CHANGE_LIFE_CYCLE")
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.recordModel
        }
    },
    created() {
        this.unWatchersList = []
    },
    methods: {
        observerTriggerFields(e) {
            for (let e in this.unWatchersList) this.unWatchersList[e]();
            if (!(e instanceof Vtiger_Record_Model)) return;
            let t = this.masterModuleModel.dependentTriggererFields;
            for (let i in t) {
                let s = t[i], l = !1;
                l = this.$watch(() => ({fieldName: s, fieldValue: e.get(s)}), ({fieldName: t, fieldValue: i}) => {
                    this.dynamicTriggerFieldName = t, this.dynamicUpdatedFields = {}, this.dynamicTargetFields = {}, this.validateDependentRules(this.masterModuleModel.dependentRules, e)
                }), this.unWatchersList.push(l)
            }
        },
        changeLifeCycle: function () {
            if (this.recordModel && !this.recordModel.isEditable) return void this.showErrorNotification(this.translate("LBL_EDIT") + " " + this.translate("LBL_PERMISSION_DENIED"));
            this.showModal({
                componentName: "LifeCycleChange",
                componentData: {
                    recordId: this.$id,
                    sourceField: this.sourceField,
                    targetField: this.targetField,
                    module: this.$module,
                    namespaceStore: this.$namespaceStore
                },
                modalOnModalMode: !1
            })
        },
        save(e = {}) {
            return new Promise((t, i) => {
                let s = {module: this.$module, id: this.$id}, l = this.recordModel.get(this.targetField);
                this.selectedValue = l, s[this.targetField] = l, Object.keys(e).length > 0 && (s = jQuery.extend(s, e));
                let d = BaseModel.getModuleSpecificModel(this.$module, "Record", s), r = ["assigned_user_id"];
                for (var o in r) if (!this.recordModel.get(a)) {
                    var a = r[o];
                    d.set(a, this.recordModel[a])
                }
                this.saveRecord(d, this.$_currentModuleModel).then(e => {
                    this.moduleSpecificInit(), this.selectedValue = l, this.showProgression = !1;
                    let i = this.transformRecordToUserFormat(e, this.$_currentModuleModel);
                    this.appStore.set({key: "Detail_Record_Model", data: i}), t(e)
                }, e => {
                    e.message != this.translate("LBL_DEALS_NOT_ALLOWED_TO_SAVE", this.$module) && this.showErrorNotification(e.message), i(e)
                })
            })
        },
        moduleSpecificInit() {
        },
        saveTargetValue: function (e) {
            this.recordModel.set(this.targetField, e)
        },
        handleDependentFields() {
            let e = this.masterModuleModel.dependentTriggererFields;
            if (this.masterModuleModel.isLoaded) if (this.targetField) {
                this.$watch(() => ({
                    fieldName: this.targetField,
                    fieldValue: this.recordModel.get(this.targetField)
                }), (e, t) => {
                    _.isEqual(e, t) || setTimeout(() => {
                        Object.keys(this.dynamicUpdatedFields).length <= 0 && this.save()
                    }, 200)
                });
                if (e.includes(this.targetField)) this.$watch("dynamicUpdatedFields", (e, t) => {
                    let i = Object.keys(this.dynamicallyUpdatedEditableFields);
                    if (i.length > 0) {
                        let e = JSON.parse(JSON.stringify(this.recordModel)),
                            t = BaseModel.getModuleSpecificModel(this.$module, "Record", e);
                        this.showModal({
                            componentName: App.loadComponent("DependentFieldsModal", this.$module),
                            componentData: {
                                module: this.$module,
                                record: t,
                                triggerFieldModel: this.masterModuleModel.getField(this.targetField),
                                targetFields: i
                            },
                            modalOnModalMode: !1
                        }), this.$off("vds::dependentfields::save"), this.$on("vds::dependentfields::save", e => {
                            let i = e.triggerFieldModel;
                            i && this.recordModel.set(i.name, t.get(i.name));
                            let s = e.targetFieldModelList, l = {};
                            for (var d in s) {
                                let e = t.get(d);
                                this.recordModel.set(d, e), l[d] = e
                            }
                            this.save(l)
                        }), this.$off("vds::dependentfields::close"), this.$on("vds::dependentfields::close", e => {
                            let t = e.triggerFieldModel;
                            t && this.recordModel.set(t.name, this.$_detailRecordModel.get(t.name)), this.cancel()
                        })
                    }
                })
            } else {
                let e = this.$watch("targetField", () => {
                    this.handleDependentFields(), e()
                })
            } else {
                let e = this.$watch("masterModuleModel", () => {
                    this.handleDependentFields(), e()
                })
            }
        },
        registerTargetFieldSaveListener() {
            this.$root.$on("vds::post::lifecycle::save", (e, t) => {
                this.selectedValue = t, this.$_detailRecordModel.set(this.targetField, this.selectedValue), this.$_detailRecordModel.set(this.sourceField, e), this.updatePickListProgressDetails()
            })
        },
        updatePickListProgressDetails() {
            this.selectedValue = this.$_detailRecordModel.getDisplayValue(this.targetField);
            var e = this.$_currentModuleModel.getHeaderProgressionFields();
            if (Object.keys(e).length && (this.sourceField = e.sourceField, this.targetField = e.targetField), "" == this.sourceField && "" == this.targetField) return void (this.targetPickListValues = {});
            let t = this.$_currentModuleModel, i = t.picklistDependency,
                s = t.getField(this.targetField).picklistValues;
            for (var l in this.breadCrumbSortOrder = [], s) this.breadCrumbSortOrder.push(s[l].value);
            let d, r = [], o = {};
            for (let e in i) {
                let t = i[e].valuemapping;
                if (i[e].sourcefield == this.sourceField && i[e].targetfield == this.targetField) {
                    d = e;
                    for (let e of t) if (e.sourcevalue == this.$_detailRecordModel.getRawValue(this.sourceField)) {
                        r = e.targetvalues;
                        break
                    }
                    break
                }
            }
            if (_.isUndefined(i) || _.isUndefined(i[d]) || !_.isUndefined(this.$_detailRecordModel[this.sourceField]) && "" == this.$_detailRecordModel[this.sourceField]) {
                let e = {}, i = t.getField(this.targetField).picklistValues;
                for (let t of Object.keys(i)) e[i[t].value] = i[t].label;
                this.targetPicklistValues = e
            } else {
                for (let e of r) {
                    let t = s.find(t => t.value == e);
                    t && (o[e] = t.value)
                }
                this.targetPicklistValues = o
            }
            this.pickListValues = s
        },
        onPopoverShow() {
            this.showProgressionBar = !0, this.$root.$emit("vds-displayProgressionBar", this.showProgressionBar), this.$refs.popover._toolpop.getTipElement().classList.add("recordProgressBar"), this.$_detailRecordModel.isClosed && this.$refs.popover._toolpop.getTipElement().classList.add("moveProgressBarToRight")
        },
        onPopoverHide() {
            this.showProgressionBar = !1, this.$root.$emit("vds-displayProgressionBar", this.showProgressionBar)
        },
        getPicklistTextColor: e => "#8E9093" == e ? "#fff" : _.isUndefined(e) ? "#1C2121" : VTHelper.pickTextColorBasedOnBgColorSimple(e),
        calculateRecordModel() {
            let e = JSON.parse(JSON.stringify(this.$_detailRecordModel)),
                t = BaseModel.getModuleSpecificModel(this.$module, "Record", e);
            this.recordModel = t
        },
        cancel() {
            this.selectedValue = this.previouslySelectedVal
        }
    },
    mounted() {
        this.registerTargetFieldSaveListener();
        let e = this.$watch(() => this.$_detailRecordModel.isLoaded && this.$_currentModuleModel.isLoaded, (t, i) => {
            t && (e(), setTimeout(() => {
                this.updatePickListProgressDetails(), this.moduleSpecificInit()
            }, 50))
        }), t = this.$watch("$_detailRecordModel", e => {
            e.isLoaded && (this.calculateRecordModel(), Vue.nextTick(() => {
                t()
            }))
        }, {immediate: !0});
        this.handleDependentFields()
    },
    render: function anonymous() {
        with (this) return "" != targetField ? _c("div", {staticClass: "recordProgressionContainer"}, [_c("div", {staticClass: "btn-group"}, [currentSourceField ? _c("button", {
            staticClass: "mw-120px d-flex btn align-items-center p-2 bg-grey-hue-4",
            class: [currentTargetField ? "sourceFieldBtn" : "rounded"],
            attrs: {title: currentSourceField},
            on: {click: changeLifeCycle}
        }, [_c("i", {
            staticClass: "fa fa-signal mr-1",
            attrs: {"aria-hidden": "true"}
        }), _v(" "), _c("div", {staticClass: "text-truncate"}, [_v(_s(currentSourceField))])]) : _e(), _v(" "), currentTargetField ? _c("vds-pick-list-dropdown", {
            attrs: {
                disabled: recordModel && !recordModel.isEditable,
                closedStateValues: masterModuleModel.closedStateValues,
                targetPicklistValues: targetPicklistValues,
                selectedValue: currentTargetField,
                pickListValues: pickListValues
            }, model: {
                value: selectedValue, callback: function (e) {
                    selectedValue = e
                }, expression: "selectedValue"
            }
        }) : _e()], 1)]) : _e()
    }
});
var Vtiger_Component_RelatedListView = Vtiger_Component_ListView.extend({
    props: {record: {type: Object}, relation: {type: Object}}, data() {
        return {listParams: {page: this.page, text: this.text, sortfield: this.sortfield, sortorder: this.sortorder}}
    }, methods: {
        loadCount() {
            this.appStore.request("api_get", {
                url: "records/relationrecords/count",
                params: {
                    id: this.record.getId(),
                    module: this.record.moduleName,
                    relationId: this.relation.relation_id,
                    relatedModuleName: this.getCurrentModule()
                },
                key: "related_list_count"
            }).then(t => {
                Vue.set(this.refs.pagination.pageparams, "totalcount", t[this.relation.relation_id])
            })
        }, getListRequestParams() {
            let t = {module: this.record.moduleName, id: this.record.getId(), relationid: this.relation.relation_id};
            return Object.assign(t, this.listParams)
        }, loadList(t = {}) {
            if (t && t.massAction) return void this.updatePageOnMassAction();
            let e = {url: "records/relationrecords", params: this.getListRequestParams(), key: "related_list_records"};
            this.appStore.request("api_get", e).then(t => {
                t && t[0] && (_.isUndefined(t[0].nextPageExists) ? this.$refs.pagination.pageparams.totalcount || this.loadCount() : this.nextPageExist = t[0].nextPageExists), this.list = t.map(t => Vtiger_Record_Model.getCleanInstance(this.getCurrentModule(), t)), this.showTable = !0
            })
        }
    }
});
var Vtiger_Component_RelatedSubtasksWidget = App.vtComponent.extend({
    components: {"vds-load-sub-tasks-view": App.loadComponent("LoadSubTasksView", "Tasks")},
    props: {record: {type: Object}, relation: {type: Object}},
    data: () => ({
        relatedRecords: [],
        relationModel: Vtiger_Relation_Model.getCleanInstance("Calendar", {loaded: !1}),
        section: [],
        showEditableFields: !1
    }),
    created() {
        this.getTaskToTaskRelation()
    },
    methods: {
        getTaskToTaskRelation() {
            this.appStore.request("api_get", {
                url: "relations",
                params: {module: "Calendar"},
                key: this.relation.relatedModuleName.toLowerCase() + "_relations_response"
            }).then(e => {
                if (e) for (let t of e) ["Calendar"].includes(t.relatedModuleName) && "get_subtasks" == t.name && (this.relationModel = Vtiger_Relation_Model.getCleanInstance(this.$module, t), this.getRelatedRecords())
            })
        }, getRelatedRecords() {
            void 0 !== this.relation && this.appStore.request("api_get", {
                url: "records/relationrecords",
                params: {
                    module: this.relationModel.relatedModuleName,
                    id: this.record.getId(),
                    relationid: this.relationModel.relation_id,
                    extrafields: ["taskpriority"]
                }
            }).then(e => {
                this.relatedRecords = e.map(e => Vtiger_Record_Model.getCleanInstance("Tasks", e))
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("vds-load-sub-tasks-view", {
            attrs: {
                showEditableFields: showEditableFields,
                parentRecordModel: record,
                showSubTasksHeader: !1,
                relatedRecords: relatedRecords,
                relationId: relationModel.relation_id,
                id: record.getId(),
                section: section
            }
        })], 1)
    }
});
var Vtiger_Component_DetailRelatedTabs = App.vtComponent.extend({
    inheritAttrs: !1,
    mixins: [Vtiger_Mixin_Module],
    props: {relations: {type: Array, default: []}, activeRelationId: {type: [String, Number, Boolean], default: !1}},
    data: () => ({showByIndex: null}),
    methods: {
        selectRelation(t, e) {
            this.$emit("update:activeRelationId", e.id)
        }, getIconClass(t) {
            return t.icon ? t.icon : this.getModuleIconClass(t.relatedModule)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "h-100 px-2 py-3 pb-5 bg-grey-hue-6 border-grey-0"}, _l(relations, (function (t, e) {
            return _c("div", {
                staticStyle: {"min-height": "50px"},
                attrs: {name: t.label ? t.label : ""}
            }, [showByIndex === e ? _c("div", {
                staticClass: "float-right", on: {
                    click: function (e) {
                        return selectRelation(e, t)
                    }
                }
            }, [_c("div", {
                staticClass: "moduleIconBadge text-white mt-n2 mr-n1 c-pointer",
                on: {
                    mouseleave: function (t) {
                        showByIndex = null
                    }
                }
            }, [_c("span", {staticClass: "text-truncate px-2"}, [_v(_s(translate(t.label, t.modulename)))]), _v(" "), _c("span", {
                on: {
                    mouseover: function (t) {
                        showByIndex = e
                    }
                }
            }, [_c("i", {
                staticClass: "d-inline-block widgetModuleIcon mt-1 mx-2",
                class: getIconClass(t),
                attrs: {"data-relation-id": t.relation_id}
            })])])]) : _c("div", {staticClass: "text-center"}, [_c("span", {
                staticClass: "text-grey-1 c-pointer",
                class: {"text-primary": t.relation_id == activeRelationId},
                on: {
                    mouseover: function (t) {
                        showByIndex = e
                    }
                }
            }, [_c("i", {
                staticClass: "d-inline-block widgetModuleIcon mx-2 mb-4",
                class: getIconClass(t),
                attrs: {"data-relation-id": t.relation_id}
            })])])])
        })), 0)
    }
});
var Vtiger_Component_SalesStageClosedStatesModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal, App.loadMixin("Record"), App.loadMixin("DependentFields")],
    props: {
        module: {type: String, default: "Potentials"},
        closedStateValues: {type: Array, required: !0},
        salesStages: {type: [Object, Array]}
    },
    data() {
        return {targetField: "", recordModel: BaseModel.getModuleSpecificModel(this.module, "Record", {})}
    },
    mounted() {
        var e = this.$_currentModuleModel.getHeaderProgressionFields();
        Object.keys(e).length && (this.targetField = e.targetField);
        let t = this.$watch("$_detailRecordModel", e => {
            e.isLoaded && (this.calculateRecordModel(), Vue.nextTick(() => {
                t()
            }))
        }, {immediate: !0})
    },
    computed: {
        masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.$_detailRecordModel
        }, closedStates() {
            var e = [];
            for (var t in this.closedStateValues) {
                var d = {};
                if (d.label = this.closedStateValues[t], d.value = this.closedStateValues[t], _.where(this.salesStages, {value: this.closedStateValues[t]})) {
                    var s = _.where(this.salesStages, {value: this.closedStateValues[t]});
                    d.color = s[0].color
                }
                e.push(d)
            }
            return e
        }
    },
    methods: {
        calculateRecordModel() {
            let e = JSON.parse(JSON.stringify(this.$_detailRecordModel)),
                t = BaseModel.getModuleSpecificModel(this.module, "Record", e);
            this.recordModel = t
        }, triggerDependencyAndSave(e) {
            if (this.$_detailRecordModel.set(this.targetField, e), this.masterModuleModel.dependentTriggererFields.includes(this.targetField)) var t = this.$watch("dynamicUpdatedFields", (d, s) => {
                if (_.size(d) || (this.recordModel.set(this.targetField, e), this.save()), _.size(d)) {
                    let t = Object.keys(this.dynamicallyUpdatedEditableFields);
                    if (t.length > 0) {
                        let d = JSON.parse(JSON.stringify(this.recordModel)),
                            s = BaseModel.getModuleSpecificModel(this.module, "Record", d);
                        s.set(this.targetField, e), this.showModal({
                            componentName: App.loadComponent("DependentFieldsModal", this.module),
                            componentData: {
                                module: this.module,
                                record: s,
                                triggerFieldModel: this.masterModuleModel.getField(this.targetField),
                                targetFields: t
                            },
                            modalOnModalMode: !0
                        }), this.$off("vds::dependentfields::save"), this.$on("vds::dependentfields::save", e => {
                            let t = e.triggerFieldModel;
                            t && this.recordModel.set(t.name, s.get(t.name));
                            let d = e.targetFieldModelList;
                            for (var l in d) {
                                let e = s.get(l);
                                this.recordModel.set(l, e)
                            }
                            this.$root.$emit("bv::hide::modal", "ClosedStateValues"), this.save()
                        }), this.$off("vds::dependentfields::close"), this.$on("vds::dependentfields::close", e => {
                            this.$root.$emit("bv::hide::modal", "ClosedStateValues");
                            let t = e.triggerFieldModel;
                            t && this.$_detailRecordModel.set(t.name, this.recordModel.get(t.name))
                        })
                    }
                }
                t()
            })
        }, save() {
            this.saveRecord(this.recordModel, this.$_currentModuleModel).then(e => {
                this.$root.$emit("vds::record::saved"), this.$root.$emit("bv::hide::modal", "ClosedStateValues");
                let t = this.transformRecordToUserFormat(e, this.$_currentModuleModel);
                this.appStore.set({key: "Detail_Record_Model", data: t})
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "ClosedStateValues",
                lazy: !0,
                size: "md",
                "hide-footer": "",
                title: translate("LBL_CLOSED_STATE_CONFIG", "ClosedState"),
                "header-class": "d-flex w-100 bgLtGrey p-3 px-4",
                "body-class": "p-3",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("div", {
            attrs: {slot: "modal-header-close"},
            slot: "modal-header-close"
        }, [_c("i", {staticClass: "fa fa-times c-pointer h5 my-1"})]), _v(" "), _c("div", {staticClass: "py-3"}, [_v(_s(translate("JS_NEXT_SALES_STAGE_CLOSED_STATES", module)))]), _v(" "), _c("div", {staticClass: "d-flex justify-content-center"}, [1 != _.size(closedStates) ? _c("div", {staticClass: "d-flex flex-row"}, [_l(closedStates, (function (e, t) {
            return [_c("button", {
                key: t,
                staticClass: "d-flex flex-row btn border border-1 rounded mr-2 align-items-center",
                attrs: {type: "button"},
                on: {
                    click: function (t) {
                        return triggerDependencyAndSave(e.value)
                    }
                }
            }, [_c("div", {
                staticClass: "rounded-circle mr-2",
                staticStyle: {width: "14px", height: "14px"},
                style: "background-color:" + e.color
            }), _v(" "), _c("span", [_v(_s(translate(e.value, module)))])])]
        }))], 2) : _e()])])
    }
});
var Vtiger_Component_SelectRelatedRecordActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, Vtiger_Mixin_DetailRecord, Vtiger_Mixin_RelationUtils],
    props: {relation: {type: Object}, record: {type: Object}, showAllRecords: {type: Boolean}},
    data() {
        return {
            showRecords: this.showAllRecords,
            toggleSupportedModules: ["Tasks", "Events"],
            relationFieldName: this.relation.relationfieldname
        }
    },
    computed: {
        parentRecord() {
            return _.isUndefined(this.record) ? this.$_detailRecordModel : this.record
        }
    },
    methods: {
        addOrCreate() {
            let e = VTHelper.getInventoryModules(), t = this.relation.relatedModuleName;
            if (this.getLookupParams(this.parentRecord, this.relation), this.relation.isCreatePermitted && !this.relation.isSelectPermitted) if (e.includes(t)) {
                let e = this.parentRecord,
                    o = "&related_to=" + e.getId() + "&related_module=" + e.moduleName + "&returnrelationId=" + this.relation.relation_id + "&return=true";
                location.href = this.getEditViewUrl(t) + o
            } else this.showModal({
                componentName: "QuickCreateRelatedModal",
                componentData: {
                    module: this.parentRecord.moduleName,
                    record: this.parentRecord,
                    relatedAction: !0,
                    relatedModule: this.relation.relatedModule,
                    postQuickCreateSave: this.postSave
                }
            }); else !this.relation.isCreatePermitted && this.relation.isSelectPermitted ? (this.showModal({
                componentName: "PopupReferenceList",
                componentData: {
                    module: this.relation.relatedModule,
                    multiple: !0,
                    parentModule: this.parentRecord.moduleName,
                    fieldname: this.relationFieldName
                }
            }), this.$on("vds::popup:record::selected", this.postSave)) : this.showModal({
                componentName: "AddOrCreateModal",
                componentData: {
                    relation: this.relation,
                    record: this.parentRecord,
                    relatedModuleModel: this.relation.relatedModuleModel
                },
                modalOnModalMode: !0
            })
        }, postSave(e) {
            this.$root.$emit("vds::widgets::refresh", this.relation.relatedModule)
        }, updateValue() {
            this.$emit("update:showAllRecords", this.showRecords)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex"}, [_c("button", {
            staticClass: "btn btn-light btn-lg p-0",
            attrs: {id: relation ? relation.relatedModule + "_relatedActionButton" : ""},
            on: {click: addOrCreate}
        }, [_c("i", {staticClass: "fa fa-plus-circle"})])])
    }
});
var Vtiger_Component_SocialRelatedView = App.vtComponent.extend({
    props: {record: {type: Object}},
    render: function anonymous() {
        with (this) return _c("div", [_l(socialInsights, (function (t, s) {
            return socialInsights.length ? _c("div", {staticClass: "py-3 border-bottom"}, [_c("div", [_c("span", [_c("i", {
                staticClass: "fa fa fa-twitter pr-2",
                attrs: {"aria-hidden": "true"}
            }), _v(" "), _c("h5", {staticClass: "d-inline"}, [_v(_s(t.username))]), _v("@"), _c("h6", {staticClass: "d-inline"}, [_v(_s(t.screenname))])]), _v(" "), _c("a", {
                staticClass: "float-right",
                attrs: {target: "_blank", href: getTwitterUrl(t)}
            }, [_c("span", {staticClass: "fa fa-link"})])]), _v(" "), _c("div", {staticClass: "pl-4 light-baseFontColor"}, [_v(_s(t.summary))])]) : _e()
        })), _v(" "), 0 == socialInsights.length ? _c("div", {staticClass: "d-flex align-items-center"}, [_c("span", {staticClass: "p-3"}, [_v(_s(translate("LBL_NO_RECORDS_FOUND")))])]) : _e()], 2)
    },
    data() {
        return {recordId: this.record.id, socialInsights: []}
    },
    mounted() {
        this.getSocialInformation()
    },
    methods: {
        getTwitterUrl: t => "https://twitter.com/" + t.screenname + "/status/" + t.postid,
        getSocialInformation() {
            let t = {module: "Social", relatedto: this.recordId};
            this.appStore.request("api_get", {
                url: "records",
                params: t,
                key: this.recordId + "_social_information"
            }).then(t => {
                this.socialInsights = t
            })
        }
    }
});
var Vtiger_Component_DetailSummary = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_RelationUtils],
    components: {
        "vds-detail-recent-activities": App.loadComponent("DetailRecentActivities"),
        "vds-detail-related": App.loadComponent("DetailRelated"),
        "vds-detail-record-banner": App.loadComponent("DetailRecordBanner"),
        "vds-detail-approval-banner": App.loadComponent("DetailApprovalBanner"),
        "vds-sticky-notes-place-holder": App.loadComponent("StickyNotesPlaceHolder", App.module(), !1),
        "vds-detail-view-additional-block": App.loadComponent("DetailViewAdditionalBlock")
    },
    props: {
        viewMode: String,
        activity: String,
        selectedActivityId: [Number, String],
        source_records: String,
        source_module: String,
        recordMode: String
    },
    computed: {
        mode: {
            get() {
                return this.viewMode
            }, set(e) {
                this.$emit("update:viewMode", e)
            }
        }
    },
    data: () => ({showUpcomingActions: !1, showDescription: !1, showRelated: !0}),
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "detailBody"}, [_c("vds-detail-record-banner"), _v(" "), $_detailRecordModel._loaded && ($_detailRecordModel.isRecordLocked || "Approvals" == $_detailRecordModel._moduleName) ? _c("vds-detail-approval-banner", {attrs: {detailRecord: $_detailRecordModel}}) : _e(), _v(" "), _c("div", {staticClass: "container-fluid"}, [_c("div", {staticClass: "row"}, [_c("div", {staticClass: "col-lg-7 col-12 px-4 py-3 bg-grey-hue-7"}, [_c("vds-sticky-notes-place-holder", {
            attrs: {
                module: $module,
                id: $id
            }
        }), _v(" "), showDescription ? _c("vds-detail-record-description") : _e(), _v(" "), _c("vds-detail-view-additional-block", {attrs: {record: $_detailRecordModel}}), _v(" "), showUpcomingActions ? _c("vds-detail-upcoming-activities", {staticClass: "openActivities"}) : _e(), _v(" "), _c("vds-detail-recent-activities", {
            staticClass: "completedActivities",
            attrs: {
                record: $_detailRecordModel,
                recordId: $_detailRecordModel.getId(),
                activity: activity,
                "selected-activity-id": selectedActivityId
            }
        })], 1), _v(" "), showRelated ? _c("div", {staticClass: "summaryWidgetsContainer col-lg-5 col-12 r-0 pr-0 pl-0"}, [_c("vds-detail-related", {
            attrs: {
                activity: activity,
                "view-mode": mode,
                "selected-activity-id": selectedActivityId,
                source_records: source_records,
                source_module: source_module,
                recordMode: recordMode
            }, on: {
                "update:viewMode": function (e) {
                    mode = e
                }, "update:view-mode": function (e) {
                    mode = e
                }
            }
        })], 1) : _e()])])], 1)
    },
    mounted() {
        this.init()
    },
    created() {
        this.$options.components["vds-detail-upcoming-activities"] = App.loadComponent("DetailUpcomingActivities", this.$module), this.$options.components["vds-detail-record-description"] = App.loadComponent("DetailRecordDescription", this.$module)
    },
    methods: {
        init() {
            this.$root.$emit("vds::display::stickynote"), this.retrieveRelationModels(this.$module).then(e => {
                let t = ["Calendar", "Events", "Emails"];
                for (var i in e) {
                    let o = e[i];
                    if (t.includes(o.relatedModuleName) && !["Events", "Tasks"].includes(this.$module)) {
                        this.showUpcomingActions = !0;
                        break
                    }
                }
            });
            ["Events", "Tasks", "Products", "Services", "ProjectTask"].includes(this.$module) && (this.showDescription = !0)
        }
    },
    $_onBoard: {steps: {onboard_managepipeline: ["onboard_managepipeline_completedactivities"]}}
});
var Vtiger_Component_SummaryActivities = App.vtComponent.extend({
    components: {
        "vds-detail-summaryactivityheader": App.loadComponent("DetailSummaryActivityHeader"),
        "vds-detail-summaryactivitycontents": App.loadComponent("DetailSummaryActivityContents")
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", [_c("vds-detail-summaryactivityheader")], 1), _v(" "), _c("div", [_c("vds-detail-summaryactivitycontents")], 1)])
    }
});
var Vtiger_Component_DetailSummaryActivityContents = App.vtComponent.extend({
    data: () => ({activities: {}}), mounted() {
        this.init()
    }, methods: {
        init() {
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_v(" Activity Contents ")])
    }
});
var Vtiger_Component_DetailSummaryActivityHeader = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModulePermissions],
    data: () => ({
        newCommentText: "",
        filterOptions: {
            comments: "Internal Collaboration",
            touchpoints: {
                label: "Customer Touchpoints",
                children: {Email: "Emails", phonecall: "PhoneCalls", sms: "SMS", Events: "Meetings"}
            }
        },
        selectedValues: {}
    }),
    methods: {
        postComment() {
        }
    },
    created() {
        this.isModuleEnabled("ModComments") || Vue.delete(this.filterOptions, "comments")
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "row"}, [_c("div", {staticClass: "col-6"}, [_c("h4", [_v(_s(translate("LBL_ACTIVITY", $module)))])]), _v(" "), _c("div", {staticClass: "col-6"}, [_c("vds-filterdropdown", {
            attrs: {
                options: filterOptions,
                separator: !0
            }, model: {
                value: selectedValues, callback: function (e) {
                    selectedValues = e
                }, expression: "selectedValues"
            }
        })], 1)]), _v(" "), _c("div", [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: newCommentText,
                expression: "newCommentText"
            }],
            staticClass: "w-100",
            attrs: {type: "text", placeholder: translate("LBL_POST_COMMENT", $module)},
            domProps: {value: newCommentText},
            on: {
                keyup: function (e) {
                    return !e.type.indexOf("key") && _k(e.keyCode, "enter", 13, e.key, "Enter") ? null : postComment(e)
                }, input: function (e) {
                    e.target.composing || (newCommentText = e.target.value)
                }
            }
        })])])
    }
});
var Vtiger_Component_DetailSummaryContents = App.vtComponent.extend({
    components: {
        "vds-detail-summaryupcomingactivities": App.loadComponent("SummaryUpcomingActivities"),
        "vds-detail-summaryactivities": App.loadComponent("SummaryActivities")
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", [_c("vds-detail-summaryupcomingactivities")], 1), _v(" "), _c("div", [_c("vds-detail-summaryactivities")], 1)])
    }
});
var Vtiger_Component_SummaryRelatedList = Vtiger_Component_ListView.extend({
    components: {
        "vds-summary-related-list-table": App.loadComponent("SummaryRelatedListTable", App.module()),
        "vds-summary-related-list-empty": App.loadComponent("SummaryRelatedListEmpty", App.module())
    },
    provide() {
        return {
            selectRecords: this.selectRecords,
            parentModule: this.parentModule,
            isAddRecordPermitted: this.isAddRecordPermitted,
            addRecord: this.addRecord
        }
    },
    props: {
        parentModule: String,
        parentRecord: Object,
        srcField: String,
        relation: {type: Object, required: !0},
        isMultiSelectable: {type: Boolean, default: !1},
        isFollowingAllowed: {type: Boolean, default: !1}
    },
    data() {
        return {listParams: {page: this.page, text: this.text, sortfield: this.sortfield, sortorder: this.sortorder}}
    },
    computed: {
        $module() {
            return this.relation.relatedModuleName
        }, isCompact: () => !0, isAddRecordPermitted: () => !1
    },
    created() {
        this.$root.$off("vds::summary::relatedrecord::unlink"), this.$root.$on("vds::summary::relatedrecord::unlink", e => {
            this.unlink(e.record)
        })
    },
    methods: {
        loadFilterDetails: function () {
            var e = e => {
                let t = e.fields, i = [];
                for (var s in t) {
                    let e = t[s];
                    (e.summaryfield || e.headerfield) && i.push({name: e.name, label: e.label})
                }
                this.resolveFilterFields({fields: i})
            };
            if (this.$_currentModuleModel._loaded) e(this.$_currentModuleModel); else {
                let t = this.$watch(() => ({loaded: this.$_currentModuleModel._loaded}), i => {
                    i && (t(), e(this.$_currentModuleModel))
                })
            }
        }, getDefaultListViewFields: () => [], getListRequestParams() {
            let e = {
                id: this.parentRecord.getId(),
                module: this.parentRecord.moduleName,
                relationid: this.relation.relation_id
            };
            return Object.assign(e, this.listParams)
        }, loadCount() {
            this.page = 1;
            let e = this.getListRequestParams();
            e.relatedModuleName = this.$module, this.appStore.request("api_get", {
                url: "records/relationrecords/count",
                params: e,
                key: "related_list_count"
            }).then(e => {
                Vue.set(this.$refs.pagination.pageparams, "totalcount", e[this.relation.relation_id])
            })
        }, loadList() {
            let e = this.getListRequestParams();
            _.isEmpty(this.extraReferenceListparams) || (e = Object.assign({}, e, this.extraReferenceListparams)), e.extrafields = _.union(this.getDefaultListViewFields(), this.extraFields);
            let t = {url: "records/relationrecords", params: e, key: "related_list_records"};
            this.loading = !0, this.appStore.request("api_get", t).then(e => {
                this.loading = !1, this.showTable = !0, e && e[0] && (_.isUndefined(e[0].nextPageExists) ? this.$refs.pagination.pageparams.totalcount || this.loadCount() : this.nextPageExist = e[0].nextPageExists), this.list = e.map(e => Vtiger_Record_Model.getCleanInstance(this.$module, e))
            })
        }, getListViewHeight: function () {
            var e = document.getElementsByClassName("relatedLists")[0].offsetTop;
            return window.innerHeight - e - 180
        }, selectRecords(e, t) {
            this.appStore.request("api_post", {
                url: "records/relationrecords",
                params: {
                    module: this.parentModule,
                    id: this.parentRecord.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.$module,
                    related_record_id: e
                }
            }).then(e => {
                this.reloadList({reloadCount: !0}), this.relatedListPostAction()
            })
        }, unlink(e) {
            this.appStore.request("api_delete", {
                url: "records/relationrecords",
                params: {
                    module: this.parentModule,
                    id: this.parentRecord.getId(),
                    relation_id: this.relation.relation_id,
                    related_module: this.$module,
                    related_record_id: e.getId()
                }
            }).then(e => {
                e && (this.loadList(), this.relatedListPostAction())
            })
        }, relatedListPostAction() {
        }, addRecord() {
            this.showModal({
                componentName: "QuickCreateRelatedModal",
                componentData: {
                    module: this.parentRecord.moduleName,
                    record: this.parentRecord,
                    relatedAction: !0,
                    relatedModule: this.relation.relatedModuleName,
                    postQuickCreateSave: this.postRecordSave
                }
            })
        }, postRecordSave() {
            this.reloadList({reloadCount: !0}), this.relatedListPostAction()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "listBody summaryrelatedlist"}, [loading || list.length || listParams.text.length ? _c("div", [_c("div", {
            staticClass: "container-fluid listViewActions d-flex align-items-center justify-content-end pr-0",
            staticStyle: {"padding-left": "30px"}
        }, [isAddRecordPermitted ? _c("b-button", {
            staticClass: "mr-3",
            attrs: {variant: "secondary"},
            on: {
                click: function (e) {
                    return addRecord()
                }
            }
        }, [_v(" " + _s(translate("LBL_ADD")) + " " + _s(translate($module, $module)) + " ")]) : _e(), _v(" "), _c("b-button", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {module: $module, multiple: !0, parentModule: parentModule, fieldname: srcField},
                expression: "{'module': $module, 'multiple': true, 'parentModule' : parentModule,fieldname:srcField}",
                modifiers: {PopupReferenceList: !0}
            }], staticClass: "mr-3", attrs: {variant: "secondary"}, on: {"vds::popup:record::selected": selectRecords}
        }, [_v(" " + _s(translate("LBL_SELECT")) + " " + _s(translate($module, $module)) + " ")]), _v(" "), _c("vds-pagination", {
            ref: "pagination",
            attrs: {
                "current-page": listParams.page,
                "next-page-exist": nextPageExist,
                "current-page-count": recordsLength
            },
            on: {
                "update:currentPage": function (e) {
                    return $set(listParams, "page", e)
                }, "update:current-page": function (e) {
                    return $set(listParams, "page", e)
                }, "vds::load::listview::count": function (e) {
                    return loadCount()
                }
            }
        })], 1), _v(" "), loading ? _c("div", {staticClass: "table-container listTableContainer empty"}, [_c("vds-list-loading-table", {attrs: {list: list}})], 1) : _e(), _v(" "), showTable ? _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !loading,
                expression: "!loading"
            }], staticClass: "justify-content-md-center listViewBlock pb-4"
        }, [_c("div", {
            staticClass: "position-relative",
            class: {listViewFrame: list.length}
        }, [_c("div", {staticClass: "container-fluid listViewTableContainer position-relative"}, [_c("div", {staticClass: "table-container listTableContainer"}, [_c("vds-summary-related-list-table", _g({
            attrs: {
                viewtype: viewtype,
                compactMode: isCompact,
                showActionsColumn: showActionsColumn,
                listheaders: filterHeaders,
                records: list,
                ismultiselectable: isMultiSelectable,
                "list-params": listParams,
                "is-following-allowed": isFollowingAllowed,
                "manage-columns": allowManageColumns,
                "hidden-resize-column-index": [0, 1],
                loading: this.loading
            },
            on: {
                vt_list_row_click: listRowClick,
                vt_all_list_record_selected: onSelectAllRecords,
                vt_list_field_sort: applySort
            }
        }, $listeners))], 1)])])]) : _e()]) : _c("div", [_c("vds-summary-related-list-empty", {
            style: {height: getListViewHeight() + "px"},
            attrs: {"is-add-record-permitted": isAddRecordPermitted, "src-field": srcField}
        })], 1)])])
    }
});
var Vtiger_Component_SummaryRelatedListEmpty = App.vtComponent.extend({
    inject: ["selectRecords", "parentModule", "addRecord"],
    props: {isAddRecordPermitted: [Boolean], srcField: [String]},
    computed: {
        moduleName() {
            return this.$parent.$module
        }, message() {
            let e = this.moduleName, t = this.translate("SINGLE_" + this.parentModule, this.parentModule);
            return this.translate("LBL_NO_RELATED_RECORDS_ADDED_YET", t, e, t)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex justify-content-center align-items-center"}, [_c("div", [_m(0), _v(" "), _c("div", {staticClass: "text-center mb-4 h5"}, [_v(_s(message))]), _v(" "), _c("div", {staticClass: "d-flex align-items-center justify-content-center"}, [_c("b-button", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {module: moduleName, multiple: !0, parentModule: parentModule, fieldname: srcField},
                expression: "{'module': moduleName, 'multiple': true, 'parentModule' : parentModule, fieldname:srcField}",
                modifiers: {PopupReferenceList: !0}
            }], staticClass: "mr-3", attrs: {variant: "success"}, on: {"vds::popup:record::selected": selectRecords}
        }, [_v(" " + _s(translate("LBL_SELECT")) + " " + _s(translate(moduleName, moduleName)) + "  ")]), _v(" "), isAddRecordPermitted ? _c("b-button", {
            staticClass: "mr-3",
            attrs: {variant: "success"},
            on: {click: addRecord}
        }, [_v(" " + _s(translate("LBL_ADD")) + " " + _s(translate(moduleName, moduleName)) + " ")]) : _e()], 1)])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "text-center mb-3"}, [_c("i", {staticClass: "fa-10x fas fa-image"})])
    }]
});
var Vtiger_Component_SummaryRelatedListTable = Vtiger_Component_ListTable.extend({
    props: {
        showCompactActions: {
            type: Boolean,
            default: !0
        }, sortable: {type: Boolean, default: !1}
    }, created() {
        this.$options.components["vds-row-action"] = App.loadComponent("SummaryRelatedRowActions", App.module())
    }, computed: {
        $module() {
            return this.$parent.$module
        }
    }, methods: {
        onClickOfListRow(o, e) {
        }
    }
});
var Vtiger_Component_SummaryRelatedRowActions = Vtiger_Component_RowAction.extend({
    functional: !1,
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal],
    props: {record: {type: Object}, module: {type: String}},
    methods: {
        isEditable() {
            return this.$_partialModuleModel(this.$module).editable
        }
    },
    render: function anonymous() {
        with (this) return _c("span")
    }
});
var Vtiger_Component_SummaryUpcomingActivities = App.vtComponent.extend({
    data: () => ({activities: {}}), mounted() {
        this.init()
    }, methods: {
        init() {
            this.loadDummy(), this.loadActivities()
        }, loadDummy() {
            let t = {};
            for (i = 0; i < 2; i++) {
                let i = new Vtiger_EmailActivity_Model;
                t[Math.random(1e3)] = i
            }
            this.activities = t
        }, loadActivities() {
        }, markDone(i) {
            i.markDone()
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("h4", [_v(_s(translate("LBL_Upcoming", $module)))]), _v(" "), _l(activities, (function (i) {
            return _c("div", [_c("span", [_v("\n                        " + _s(i.icon) + "\n                    ")]), _v(" "), _c("span", [_v("\n                        " + _s(i.label) + "\n                    ")]), _v(" "), _c("span", {
                on: {
                    click: function (t) {
                        return markDone(i)
                    }
                }
            }, [_c("i", {staticClass: "fas fa-check"})]), _v(" "), _c("hr")])
        }))], 2)
    }
});
var Vtiger_Component_SummaryUpcomingEmailAction = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalComposeEmail",
            attrs: {
                id: "scheduledEmailAction",
                lazy: !0,
                "hide-footer": "",
                size: "lg",
                title: translate("LBL_COMPOSE_EMAIL")
            }
        }, [_c("vds-compose-email", _b({
            attrs: {
                id: "composeEmail",
                module: modulename,
                record: record,
                emailAction: emailAction,
                emailRecord: emailRecord
            }
        }, "vds-compose-email", $props, !1))], 1)
    },
    props: {
        emailRecord: {type: [Object]},
        modulename: {type: [String, Object]},
        record: {type: [Object]},
        emailAction: {type: [String]}
    },
    components: {"vds-compose-email": App.loadComponent("ComposeEmail")}
});
var Vtiger_Component_SummaryUpcomingUpdateAction = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Module],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: modalId,
                size: "lg",
                lazy: !0,
                "hide-header": "",
                "hide-footer": ""
            }
        }, [_c("div", {attrs: {name: "modal-title"}}, [_c("h5", {staticClass: "title"}, [_c("span", {staticClass: "mx-2 text-success"}, [_c("i", {class: getActivityIcon})]), _v("\n                            " + _s(modalTitle) + "\n                        "), _c("button", {
            staticClass: "close align-right",
            staticStyle: {outline: "none"},
            attrs: {type: "button", "aria-label": "close"}
        }, [_c("i", {
            staticClass: "fa fa-times float-right c-pointer", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", modalId)
                }
            }
        })])])]), _v(" "), _c("hr"), _v(" "), _c("div", {staticClass: "container row my-4"}, [_c("span", [_v(_s(translate("DO_YOU_WANT_US_TO_STOP_REMINDING_YOU_TO_FOLLOW_UP_THIS_EVENT")))])]), _v(" "), _c("div", {staticClass: "container row mb-2"}, [_c("span", {staticClass: "openEvent col-md-6 col-sm-6"}, [_c("button", {
            staticClass: "btn-sm btn-success float-left",
            attrs: {type: "button"}
        }, [_v(_s(translate("Yes_i_no_longer_want_to_follow_up")))])]), _v(" "), _c("span", {staticClass: "eventStatus col-md-3 col-sm-6"}, [_v(_s(getHoldFollowUpFiled.label))]), _v(" "), _c("span", {staticClass: "eventStatus col-md-3 col-sm-6"}, [_c("ui-field-edit-type", {
            attrs: {
                field: getHoldFollowUpFiled,
                record: recordModel
            }
        })], 1)]), _v(" "), _c("hr"), _v(" "), _c("div", {staticClass: "row mb-4 mx-2"}, [_c("span", {staticClass: "col-6"}, [_v(_s(translate("LBL_You_can_also_update_deal_here")))]), _v(" "), _c("span", {staticClass: "col-6"}, [_c("button", {
            staticClass: "btn-sm btn-primary float-right",
            attrs: {type: "button"}
        }, [_v(_s(translate("LBL_Open_potential")))])])]), _v(" "), _c("div", {staticClass: "row mb-4 mx-2"}, [_c("span", {staticClass: "col-6"}, [_v(_s(translate("LBL_Show_opportunity_status_here")))]), _v(" "), _c("span", {staticClass: "col-6"}, [_c("button", {
            staticClass: "btn-sm btn-danger mx-2 float-right",
            attrs: {type: "button"}
        }, [_v(_s(translate("JS_CLOSED_LOST", "SalesInsights")))]), _v(" "), _c("button", {
            staticClass: "btn-sm btn-primary mx-2 float-right",
            attrs: {type: "button"}
        }, [_v(_s(translate("JS_CLOSED_WON", "SalesInsights")))])])]), _v(" "), _c("div", {staticClass: "mb-4 mx-2"}, [_c("div", {staticClass: "my-2"}, [_v(_s(translate("LBL_ADD_COMMENT")))]), _v(" "), _c("div", {staticClass: "form-group mb-2"}, [_c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: commentContent,
                expression: "commentContent"
            }],
            staticClass: "form-control",
            attrs: {id: "addingComment", rows: "4"},
            domProps: {value: commentContent},
            on: {
                input: function (t) {
                    t.target.composing || (commentContent = t.target.value)
                }
            }
        })])]), _v(" "), _c("div", {staticClass: "modal-footer submitForm"}, [_c("button", {
            staticClass: "btn-sm btn btn-primary justify-content-right",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return t.preventDefault(), postComment(t)
                }
            }
        }, [_v(_s(translate("LBL_ADD_COMMENT")))])])])
    },
    props: {
        modalId: {type: [String], default: "EventActions"},
        module: {type: [String, Object]},
        activity: {type: [Object], required: !0}
    },
    data: () => ({recordModel: new Vtiger_Record_Model, activityModel: {}, commentContent: ""}),
    computed: {
        modalTitle() {
            return void 0 === this.activity.type ? "" : this.activity.type + " > " + this.activity.label
        }, getHoldFollowUpFiled() {
            return 0 === Object.keys(this.activityModel).length ? "" : this.activityModel.fields.eventstatus
        }, getActivityIcon() {
            var t = "Mobile Call" === this.activity.type ? "Call" : this.activity.type;
            return this.getModuleIconClass(t)
        }
    },
    mounted: function () {
        this.activityModuleModel()
    },
    methods: {
        activityModuleModel() {
            this._getModuleDescribe(this.module).then(t => {
                this.activityModel = t
            })
        }, postComment() {
            if ("" === this.commentContent) return;
            let t = {
                module: "ModComments",
                source_module: this.$module,
                commentcontent: this.commentContent,
                related_to: this.$_detailRecordModel.getId()
            };
            this.appStore.request("api_put", {url: "records", params: t, key: "RECENT_COMMENT"}).then(t => {
            })
        }
    }
});
var Vtiger_Component_TasksActivity = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_UsersUtils, Vtiger_Mixin_ShowPreview], props: {data: Object}, computed: {
        detailUrl() {
            return "view/detail?id=" + this.data.id + "&module=Tasks"
        }, userDetailViewUrl() {
            return this.getUserDetailUrl(this.data.userid.id)
        }, isAdmin() {
            return !(!this.$currentUser || "on" !== this.$currentUser.is_admin)
        }, isUserDetailLinkAllowed() {
            return this.isAdmin || this.data.userid.id == this.$currentUser.id
        }
    }, methods: {
        openTaskPreview() {
            this.showRecordPreview(this.data.id, "Tasks")
        }
    }, render: function anonymous() {
        with (this) return _c("div", {attrs: {name: "Tasks"}}, [_c("div", {staticClass: "d-flex flex-grow-1 align-items-center p-3"}, [_c("i", {staticClass: "fa fa-tasks activityIconContainer icon-container-sm text-secondary d-flex align-items-center justify-content-center text-dark"}), _v(" "), _c("div", {staticClass: "d-flex-inline pl-3"}, [_c("span", [_v(_s(translate("LBL_TODOS", "Calendar")) + " ")]), _v(" "), _c("a", {
            staticClass: "mr-1",
            attrs: {href: detailUrl, target: "_blank"},
            on: {
                click: function (t) {
                    return t.preventDefault(), openTaskPreview(t)
                }
            }
        }, [_v(_s(data.subject))]), _v(" "), _c("span", {staticClass: "font-weight-normal mr-1"}, [_v(_s(translate("LBL_ASSIGNED_TO").toLowerCase()))]), _v(" "), isUserDetailLinkAllowed ? _c("a", {
            staticClass: "mr-1",
            attrs: {target: "_blank", href: userDetailViewUrl}
        }, [_v(_s(data.userid.label))]) : _e(), _v(" "), isUserDetailLinkAllowed ? _e() : _c("span", {staticClass: "mr-1"}, [_v(_s(data.userid.label))]), _v(" "), _c("span", {staticClass: "mr-1 font-weight-normal"}, [_v(_s(data.status.toLowerCase()))]), _v(" "), _c("small", {staticClass: "text-muted"}, [_c("vds-date-diff-string", {attrs: {utcTime: data.happened_on}})], 1)])])])
    }
});
var Vtiger_Component_TasksSubtasksWidget = App.vtComponent.extend({
    props: {record: {type: Object}},
    data: () => ({relatedRecords: [], section: [], relationCollection: []}),
    created() {
        this.init()
    },
    methods: {
        init() {
            this.getTasksRelations()
        }, handleDelete() {
        }, getTasksRelations() {
            this.appStore.request("api_get", {
                url: "relations",
                params: {module: this.$module},
                key: this.$module.toLowerCase() + "_relations_response"
            }).then(e => {
                if (e) {
                    this.relationCollection = BaseModel.getModuleSpecificModel(this.$module, "Relation", e);
                    for (let t of e) "Calendar" == t.relatedModuleName && this.getRelatedRecords(t)
                }
            })
        }, getRelatedRecords(e) {
            void 0 !== e && this.appStore.request("api_get", {
                url: "records/relationrecords",
                params: {module: this.$module, id: this.getRecordId, relationid: e.relation_id},
                key: "related_records_data"
            }).then(t => {
                this.relatedRecords = t.map(t => Vtiger_Record_Model.getCleanInstance(e.relatedModule, t))
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex mb-4 mx-1"}, [_c("vds-tasks-by-section", {
            staticClass: "w-100",
            attrs: {
                id: record.getId(),
                relatedRecords: relatedRecords,
                section: section,
                relationCollection: relationCollection,
                "is-task-preview-modal": !1
            },
            on: {"vds::subtask::deleted": handleDelete}
        })], 1)])
    }
});
var Vtiger_Component_UpcomingActivities = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_DetailRecord, Vtiger_Mixin_Module, Vtiger_Mixins_ShowModal, Vtiger_Mixin_DateUtils, Vtiger_Mixin_EmailActionsData],
    props: {upcomings: {}, activityModule: {}, activityView: {}, activityProps: {}},
    data() {
        return {
            modalModule: this.activityModule,
            modalData: this.activityProps,
            modalView: this.activityView,
            styleData: {}
        }
    },
    watch: {
        upcomings: {
            handler() {
                this.getStatusBackgroundColor()
            }, immediate: !0
        }
    },
    methods: {
        getActivityView(t) {
            "alert" !== t.status && ("Emails" === t.type ? (this.modalModule = "Emails", this.loadEmail(t)) : "Task" === t.type ? this.showModal({
                componentName: App.loadComponent("PreviewModal", "Tasks"),
                componentData: {module: "Tasks", record: t.id, sourceRecordId: t.id},
                modalOnModalMode: !1
            }) : this.showModal({
                componentName: App.loadComponent("PreviewModal", "Events"),
                componentData: {module: "Events", activityRecord: {id: t.id}, sourceRecordId: t.id},
                modalOnModalMode: !1
            }))
        }, loadEmail(t) {
            this.retrieveEmailActionsData(t.id, "edit").then(t => {
                this.showModal({
                    componentName: "ComposeEmailModal",
                    componentData: {emailRecord: t, module: this.$module, emailAction: "preview"},
                    modalOnModalMode: !1
                })
            })
        }, mouseoverCompleteCheck(t) {
            Vue.set(t, "hover", !0)
        }, mouseoutCompleteCheck(t) {
            Vue.set(t, "hover", !1)
        }, mouseoverActivity(t) {
            Vue.set(t, "activityHover", !0)
        }, mouseoutActivity(t) {
            Vue.set(t, "activityHover", !1)
        }, getStatusBackgroundColor() {
            for (let t in this.upcomings) {
                let e = this.upcomings[t], i = "Task" == e.type ? "Tasks" : "Events";
                this._getModuleDescribe(i).then(t => {
                    if (t.isLoaded) {
                        let i = "Task" == e.type ? t.fields.taskstatus : t.fields.eventstatus;
                        picklistValues = i.type.picklistValues;
                        for (let t in picklistValues) picklistValues[t].value == e.status && picklistValues[t].color && Vue.set(this.styleData, e.id, {
                            backgroundColor: picklistValues[t].color,
                            color: VTHelper.pickTextColorBasedOnBgColorSimple(picklistValues[t].color)
                        })
                    }
                })
            }
        }, dismissNotification(t) {
            var e = {url: "messages", params: {module: "Notifications", id: t}};
            this.appStore.request("api_delete", e).then(e => {
                e && e.success && (this.$root.$emit("vds::activity::completed", t), this.showSuccessNotification(this.translate("LBL_DISMISSED_NOTIFICATION")))
            }, t => {
                this.showErrorNotification(t)
            })
        }, getActivityIconClass(t) {
            let e = t;
            return "Mobile Call" === t ? e = "Call" : "Group Event" === t && (e = "Calendar"), this.getModuleIconClass(e)
        }, markComplete(t) {
            var e = {};
            e.id = t.id, "Task" === t.type ? (e.module = "Tasks", e.field = "taskstatus", e.value = "Completed") : (e.module = "Events", e.field = "eventstatus", e.value = "Held"), this.reviseField(e).then(e => {
                e && e.id && (this.$root.$emit("vds::activity::completed", e.id, e), this.showSuccessNotification(this.translate("JS_RECORD_UPDATED")), "Task" != t.type && this.$root.$emit("vds::event::held", t, this.$_detailRecordModel))
            }, t => {
                this.showErrorNotification(t.message)
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "mt-2 upcomingActivityContainer"}, [_c("div", {
            staticClass: "w-100 overflow-y",
            staticStyle: {"max-height": "250px"}
        }, [_l(upcomings, (function (t) {
            return _c("div", {
                staticClass: "c-pointer d-flex align-items-center bg-grey-hue-7 upcomingActivity",
                on: {
                    click: function (e) {
                        return getActivityView(t)
                    }, mouseover: function (e) {
                        return mouseoverActivity(t)
                    }, mouseout: function (e) {
                        return mouseoutActivity(t)
                    }
                }
            }, [_c("span", {
                staticClass: "activityIconContainer icon-container-sm ml-2",
                class: {highLightActivityIconContainer: t.activityHover}
            }, ["alert" !== t.status ? _c("i", {
                staticClass: "text-dark d-flex align-items-center justify-content-center w-100 h-100 activityIcon",
                class: getActivityIconClass(t.type)
            }) : _e(), _v(" "), "alert" === t.status ? _c("i", {staticClass: "fa fa-cogs mt-2 d-flex align-items-center justify-content-center activityIcon"}) : _e()]), _v(" "), _c("span", {staticClass: "flex-grow-1 p-3-5 text-truncate"}, [$isLoading ? _c("span", [_c("vds-value-progress")], 1) : _c("span", [_v("\n                        " + _s(t.label) + "\n                        ")])]), _v(" "), _c("span", {staticClass: "mr-3 badge"}, [_v(_s(getMonthAndDay(t.scheduled_date)))]), _v(" "), _c("span", {
                staticClass: "mr-3 badge badge-pill",
                style: styleData[t.id]
            }, [_v(_s(t.status))]), _v(" "), "alert" !== t.status && "Emails" !== t.type ? _c("i", {
                staticClass: "fas fa-check p-1 mr-3 baseBorderColor",
                class: {"text-primary": t.hover, "": !t.hover},
                attrs: {title: translate("JS_MARK_AS_DONE")},
                on: {
                    click: function (e) {
                        return e.stopPropagation(), markComplete(t)
                    }, mouseout: function (e) {
                        return mouseoutCompleteCheck(t)
                    }
                }
            }) : _e(), _v(" "), "alert" === t.status ? _c("i", {
                staticClass: "fas fa-check mr-3",
                attrs: {title: translate("LBL_DISMISS_NOTIFICATION")},
                on: {
                    click: function (e) {
                        return dismissNotification(t.id)
                    }
                }
            }) : _e()])
        })), _v(" "), _.isUndefined(upcomings) || Object.keys(upcomings).length ? _e() : _c("div", {staticClass: "text-center border-bottom p-3"}, [_v("\n\t\t\t\t\t" + _s(translate("LBL_NO_UPCOMING_ACTIVITIES")) + "\n\t\t\t\t")])], 2)])
    }
}), Vtiger_Component_OverdueActivities = Vtiger_Component_UpcomingActivities.extend({});
var Vtiger_Component_UpdateUpcomingModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Module, Vtiger_Mixin_DetailRecord, App.loadMixin("Record"), App.loadMixin("Record", "Emotions"), Vtiger_Mixin_ModulePermissions],
    components: {"vds-comment": App.loadComponent("Comment")},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "UpdateUpcoming",
                size: "lg",
                lazy: !0,
                "hide-header": "",
                "hide-footer": ""
            }
        }, [_c("div", {attrs: {name: "modal-title"}}, [_c("h5", {staticClass: "title"}, [_c("span", {staticClass: "mx-2 text-success"}, [_c("i", {class: getActivityIcon})]), _v("\n                            " + _s(modalTitle) + "\n                        "), _c("button", {
            staticClass: "close align-right",
            staticStyle: {outline: "none"},
            attrs: {type: "button", "aria-label": "close"}
        }, [_c("i", {
            staticClass: "fa fa-times float-right c-pointer", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "UpdateUpcoming")
                }
            }
        })])])]), _v(" "), _c("hr"), _v(" "), _c("div", {staticClass: "my-4"}, [_c("span", [_v(_s(translate("LBL_STOP_REMINDING_YOU_TO_FOLLOW_UP")))])]), _v(" "), _c("div", {staticClass: "row my-2"}, [_c("span", {staticClass: "openEvent col-md-6 col-sm-6"}, [_c("button", {
            staticClass: "btn-sm btn-success c-pointer float-left",
            attrs: {type: "button"},
            on: {click: markComplete}
        }, [_v(_s(translate("LBL_NO_LONGER_NEED_FOLLOWUP")))])])]), _v(" "), _c("hr"), _v(" "), _c("div", {staticClass: "mb-4 mx-2"}, [_c("span", {staticClass: "col-6"}, [_v(_s(translate("LBL_UPDATE_DEAL_HERE")))])]), _v(" "), _c("div", {staticClass: "mb-4 mx-2"}, [_c("span", {staticClass: "col-6"}, [_v(_s(translate("LBL_DEAL_STATUS")))]), _v(" "), _c("span", {staticClass: "col-6"}, [_c("button", {
            staticClass: "btn-sm btn-danger mx-2 float-right",
            attrs: {type: "button"},
            on: {click: closedLost}
        }, [_v(_s(translate("JS_CLOSED_LOST", "SalesInsights")))]), _v(" "), _c("button", {
            staticClass: "btn-sm btn-primary mx-2 float-right",
            attrs: {type: "button"},
            on: {click: closedWon}
        }, [_v(_s(translate("JS_CLOSED_WON", "SalesInsights")))])])]), _v(" "), isCommentsAllowed ? _c("div", {staticClass: "mb-4 mx-2"}, [_c("div", {staticClass: "form-group mb-2"}, [_c("vds-comment", {
            attrs: {
                currentModule: $module,
                relatedTo: $_detailRecordModel.getId()
            }
        })], 1)]) : _e()])
    },
    props: {
        modalId: {type: [String], default: "UpdateUpcoming"},
        module: {type: [String, Object]},
        activity: {type: [Object], required: !0}
    },
    data() {
        return {
            recordModel: Vtiger_Record_Model.getCleanInstance(this.sourceModule, {}),
            activityModel: {},
            filesAttached: [],
            sourceModule: this.module,
            emotionSupportedModules: ["Potentials", "Contacts", "Accounts"]
        }
    },
    computed: {
        modalTitle() {
            return void 0 === this.activity.type ? "" : this.activity.type + " > " + this.activity.label
        }, getActivityIcon() {
            var t = "Mobile Call" === this.activity.type ? "Call" : this.activity.type;
            return this.getModuleIconClass(t)
        }, $_moduleModel_Name: () => "Potentials"
    },
    created: function () {
        this.activityModuleModel()
    },
    mounted() {
        this.$root.$off("vds::emotion::value::saved"), this.$root.$on("vds::emotion::value::saved", t => {
            var e = t.related_to.id, i = {};
            i.parent_id = t.parent_id.id, i.sortfield = "happened_on", i.sortorder = "DESC", i.limit = 1, this.retrieveEmotionRecord(i, "Emotions").then(i => {
                if (i && i[0]) {
                    var o = i[0].related_to.id;
                    o && e && parseInt(o) == parseInt(e) && (this.$root.$emit("vds::emotion::value::updated", t.emotion), this.$root.$emit("vds::update::completed::actions"))
                }
            })
        })
    },
    methods: {
        activityModuleModel() {
            this._getModuleDescribe(this.module).then(t => {
                this.activityModel = t
            })
        }, markComplete() {
            var t = {};
            t.id = this.activity.id, "Task" === this.activity.type ? (t.module = "Tasks", t.field = "taskstatus", t.value = "Completed") : (t.module = "Events", t.field = "eventstatus", t.value = "Held"), this.reviseField(t).then(t => {
                t && t.id && (this.$root.$emit("vds::activity::completed", t.id), "Task" != this.activity.type && this.fetchEventRelatedRecords(this.activity.id).then(t => {
                    this.showEmotionModal(t)
                }))
            }, t => {
                this.showErrorNotification(t.message)
            }), this.$root.$emit("bv::hide::modal", "UpdateUpcoming")
        }, closedWon() {
            let t = this.$_currentModuleModel;
            this.recordModel.id = this.$_detailRecordModel.getId(), this.recordModel.sales_stage = "Closed Won", this.saveRecord(this.recordModel, t).then(t => {
                this.showSuccessNotification(this.translate("JS_RECORD_UPDATED"))
            }, t => {
                this.showErrorNotification(t.message)
            })
        }, closedLost() {
            let t = this.$_currentModuleModel;
            this.recordModel.id = this.$_detailRecordModel.getId(), this.recordModel.sales_stage = "Closed Lost", this.saveRecord(this.recordModel, t).then(t => {
                this.showSuccessNotification(this.translate("JS_RECORD_UPDATED"))
            }, t => {
                this.showErrorNotification(t.message)
            })
        }, showEmotionModal(t) {
            var e = {};
            e.recordId = this.activity.id, e.parentId = this.$_detailRecordModel.getId(), e.relatedRecordIds = t, e.modalTitle = this.activity.label, e.activityType = this.activity.type, e.parentModuleName = this.$_detailRecordModel.moduleName, this.$root.$emit("vds::show::emotion::modal", e)
        }, fetchEventRelatedRecords(t) {
            return new Promise((e, i) => {
                let o = [];
                this.retrieveRecord(t, "Events").then(t => {
                    if (t) {
                        var i = t.parent_id, s = t.contact_id;
                        if (i && i.id) {
                            let t = i.module;
                            t && this.emotionSupportedModules.includes(t) && o.push({module: t, parent_id: i.id})
                        }
                        if (s) for (var a in s) {
                            let t = s[a].id;
                            t && o.push({module: "Contacts", parent_id: t})
                        }
                        e(o)
                    }
                }, t => {
                    this.showErrorNotification(t.message), i(t)
                })
            })
        }
    }
});
var Vtiger_Component_ListViewComposeEmail = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_EmailCompose],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalComposeEmail",
            attrs: {
                id: "modalComposeEmail",
                lazy: !0,
                size: "xl",
                "hide-footer": "",
                "body-class": "p-0",
                "header-class": "px-4",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            }
        }, [_c("template", {slot: "modal-header"}, [_c("div", {
            staticClass: "d-flex bd-highlight align-items-center",
            staticStyle: {width: "100%"}
        }, [_c("div", {staticClass: "flex-grow-1 bd-highlight"}, [_c("h5", [_v(_s(translate("LBL_COMPOSE_EMAIL")))])]), _v(" "), showConfirmation ? _c("div", {staticClass: "bd-highlight"}, [_c("b-button", {
            attrs: {variant: "danger"},
            on: {
                click: function (e) {
                    return discardDraft()
                }
            }
        }, [_v(_s(translate("LBL_DISCARD")))])], 1) : _e(), _v(" "), _c("div", {staticClass: "bd-highlight"}, [_c("button", {
            staticClass: "close",
            attrs: {type: "button", "aria-label": "Close"},
            on: {
                click: function (e) {
                    return closeEmail()
                }
            }
        }, [_v("× ")])])])]), _v(" "), _c("vds-compose-email", {
            ref: "composeEmail",
            attrs: {
                id: "composeEmail",
                module: modulename,
                record: record,
                viewtype: viewtype,
                emailFieldName: emailfieldname,
                showrelated: showRelatedEmails
            }
        })], 2)
    },
    props: ["record", "modulename", "emailfieldname", "viewtype"],
    components: {"vds-compose-email": App.loadComponent("ComposeEmail")},
    mounted() {
        this.$root.$on("vds::hide::email::compose::modal", this.closeEmailModal), this.$root.$off("vds::show::draft::confirmation"), this.$root.$on("vds::show::draft::confirmation", e => {
            this.showConfirmation = e
        })
    },
    beforeDestroy() {
        this.$root.$off("vds::hide::email::compose::modal", this.closeEmailModal), this.injectUnwatch && this.injectUnwatch()
    },
    methods: {
        closeEmailModal() {
            this.displayedOnce = !0, this.$refs.modalComposeEmail.hide()
        }, discardDraft() {
            this.$nextTick(() => {
                this.$refs.composeEmail.discardDraft()
            })
        }, closeEmail() {
            this.emailAction || !this.showConfirmation ? this.$root.$emit("bv::hide::modal", "modalComposeEmail") : this.showConfirmation && this.discardDraft()
        }
    },
    data: () => ({showRelatedEmails: !0, showConfirmation: !1, displayedOnce: !1})
}), Vtiger_Component_ComposeEmail = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_RecordCompositeApis, Vtiger_Mixin_DateUtils, Vtiger_Mixin_AccessibleMailBoxes, Vtiger_Mixin_Validators, Vtiger_Mixin_Record, Vtiger_Mixins_ShowModal, Vtiger_Mixin_SelectEmailSequence],
    components: {
        "vds-email-verification": App.loadComponent("EmailVerification"),
        "vds-editor": App.loadComponent("ComposeEmailEditor")
    },
    render: function anonymous() {
        with (this) return _c("form", {
            staticClass: "form-horizontal mb-0",
            attrs: {role: "form"}
        }, [iscomposeEmailAllowed ? _c("div", {staticClass: "d-flex justify-content-center"}, [_v(_s(translate("JS_EMAIL_SERVER_CONFIGURATION")))]) : _c("div", [_c("div", {staticClass: "px-4 py-3"}, [_c("div", {staticClass: "d-flex mb-2"}, [_c("label", {
            staticClass: "mb-0 col-1 pl-0  align-items-center d-flex",
            attrs: {for: "recipientEmail"}
        }, [_v(_s(translate("LBL_TO", "Emails"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-100 word-break-all input-group composeEmailTo"}, [_c("div", {
            staticClass: "toEmails",
            class: showRelatedEmailModules || "preview" == emailAction ? "w-75" : "w-100"
        }, [_c("vds-email-search", {
            directives: [{
                name: "validate",
                rawName: "v-validate:selectedRecipient",
                value: {required: !0, multiEmail: !0, emailCount: [toFieldEmailLimit]},
                expression: "{required : true,multiEmail:true, emailCount: [toFieldEmailLimit]}",
                arg: "selectedRecipient"
            }],
            ref: "vt_emailsearch_ref",
            attrs: {
                emptyOption: !1,
                "data-vv-name": "to_emails",
                "data-vv-as": translate("LBL_TO", "Emails"),
                selected: recordData,
                searchModule: moduleName,
                sourceModule: isDocumentShareAsAttachment ? "" : $module,
                recordId: sourceRecordId,
                searchUsers: 1,
                searchGroups: 1,
                placeholder: translate("LBL_TYPE_TO_SEARCH", "EmailCampaigns"),
                "maximum-selection-length": toFieldEmailLimit,
                searchType: searchType
            },
            on: {vt_email_selected: updateSelectedRecipients, vt_email_unselected: modifyRecipients}
        })], 1), _v(" "), showRelatedEmailModules || "preview" == emailAction ? _c("div", {staticClass: "input-group-append w-25"}, [_c("v-select2", {
            attrs: {
                disabled: restrictedMode,
                emptyOption: !1,
                minimumResultsForSearch: -1,
                options: relatedmodules
            }, model: {
                value: relatedModuleSelected, callback: function (e) {
                    relatedModuleSelected = e
                }, expression: "relatedModuleSelected"
            }
        }), _v(" "), _c("span", {
            staticClass: "input-group-text  border-left-0 c-pointer bg-light searchRecordInEmail height-35px",
            on: {
                click: function (e) {
                    return showPopupReferenceList()
                }
            }
        }, [_c("i", {
            staticClass: "fa fa-search",
            attrs: {title: translate("LBL_SEARCH")}
        })])], 1) : _e(), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("to_emails"),
                expression: "errors.has('to_emails')"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first("to_emails")))])]), _v(" "), showMoreBtn && !restrictedMode ? _c("div", {staticClass: "pl-3"}, [_c("b-button", {
            attrs: {variant: "secondary"},
            on: {
                click: function (e) {
                    showMoreBtn = !showMoreBtn
                }
            }
        }, [_v(_s(translate("LBL_MORE")))])], 1) : _e(), _v(" "), sequenceSelected ? _c("div", {staticClass: "pl-3 pt-2"}, [_c("i", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover",
                modifiers: {hover: !0}
            }],
            staticClass: "fa fa-info-circle text-muted",
            attrs: {title: translate("LBL_SUPPORTED_RECIPIENTS_INFO", "EmailSequence")}
        })]) : _e()]), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !showMoreBtn && !restrictedMode,
                expression: "!showMoreBtn && !restrictedMode"
            }]
        }, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showFromEmail,
                expression: "showFromEmail"
            }], staticClass: "d-flex mb-2 align-items-center"
        }, [_c("label", {
            staticClass: "mb-0 col-1 pl-0 d-flex",
            attrs: {for: "fromEmail"}
        }, [_v(_s(translate("LBL_FROM"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-100 d-flex align-items-center fromEmails"}, [_c("v-select2", {
            attrs: {
                options: getFromEmailAddresses,
                emptyOption: !1
            }, model: {
                value: fromEmailAddress, callback: function (e) {
                    fromEmailAddress = e
                }, expression: "fromEmailAddress"
            }
        })], 1), _v(" "), _c("div", {
            staticClass: "position-absolute",
            staticStyle: {right: "4.5rem"}
        }, [fromEmail ? _c("vds-email-verification", {attrs: {email: fromEmail}}) : _e()], 1)]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showReplyTo,
                expression: "showReplyTo"
            }], staticClass: "d-flex mb-2 align-items-center"
        }, [_c("label", {
            staticClass: "mb-0 col-1 pl-0  d-flex",
            attrs: {for: "replyTo"}
        }, [_v(_s(translate("LBL_REPLY_TO"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-100 d-flex align-items-center replyToEmails"}, [_c("v-select2", {
            attrs: {
                options: getReplyToAddresses,
                emptyOption: !1
            }, model: {
                value: replyTo, callback: function (e) {
                    replyTo = e
                }, expression: "replyTo"
            }
        })], 1), _v(" "), _c("div", {
            staticClass: "position-absolute",
            staticStyle: {right: "4.5rem"}
        }, [replyToEmail ? _c("vds-email-verification", {attrs: {email: replyToEmail}}) : _e()], 1)]), _v(" "), showCcRecipients && showBccRecipients ? _e() : _c("div", {staticClass: "d-flex mb-2"}, [_c("div", {staticClass: "d-flex align-items-center col-1 pl-0 "}, [_c("span", [_v(_s(translate("LBL_ADD")))])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-between w-100"}, [_c("div", [showCcRecipients ? _e() : _c("a", {
            staticClass: "pr-2",
            attrs: {href: "javascript:void(0)"},
            on: {
                click: function (e) {
                    showCcRecipients = !0
                }
            }
        }, [_v(_s(translate("LBL_CC")))]), _v(" "), showBccRecipients ? _e() : _c("a", {
            staticClass: "pr-2",
            attrs: {href: "javascript:void(0)"},
            on: {
                click: function (e) {
                    showBccRecipients = !0
                }
            }
        }, [_v(_s(translate("LBL_BCC")))])]), _v(" "), _c("div", [_c("span", {
            staticClass: "text-primary c-pointer",
            on: {
                click: function (e) {
                    showMoreBtn = !showMoreBtn
                }
            }
        }, [_v(_s(translate("LBL_HIDE"))), _c("i", {staticClass: "fa fa-angle-double-up pl-1"})])])])])]), _v(" "), showCcRecipients ? _c("div", {staticClass: "d-flex mb-2"}, [_c("label", {
            staticClass: "d-flex align-items-center col-1 pl-0 ",
            attrs: {for: "carbonCopy"}
        }, [_v(_s(translate("LBL_CC")))]), _v(" "), _c("div", {staticClass: "w-100 word-break-all"}, [_c("vds-email-search", {
            directives: [{
                name: "validate",
                rawName: "v-validate:cc_emails",
                value: {emailCount: [configurationModel.get("CC_BCC_EMAIL_LIMIT")], multiEmail: !0},
                expression: "{emailCount: [configurationModel.get('CC_BCC_EMAIL_LIMIT')],multiEmail:true}",
                arg: "cc_emails"
            }],
            ref: "vt_emailsearch_cc_ref",
            staticClass: "w-60",
            attrs: {
                "data-vv-name": "cc_emails",
                selected: cc_emails,
                id: "carbonCopy",
                searchModule: moduleName,
                sourceModule: $module,
                recordId: sourceRecordId,
                searchUsers: 1,
                searchGroups: 1,
                placeholder: translate("LBL_TYPE_AND_SEARCH"),
                "maximum-selection-length": configurationModel.get("CC_BCC_EMAIL_LIMIT"),
                emptyOption: !1
            },
            on: {vt_email_selected: updateCcValues, vt_email_unselected: modifyCcRecipients}
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("cc_emails"),
                expression: "errors.has('cc_emails')"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first("cc_emails")))])], 1)]) : _e(), _v(" "), showBccRecipients ? _c("div", {staticClass: "d-flex mb-2"}, [_c("label", {
            staticClass: "d-flex align-items-center col-1 pl-0 ",
            attrs: {for: "blindCarbonCopy"}
        }, [_v(_s(translate("LBL_BCC")))]), _v(" "), _c("div", {staticClass: "w-100 word-break-all"}, [_c("vds-email-search", {
            directives: [{
                name: "validate",
                rawName: "v-validate:bcc_emails",
                value: {emailCount: [configurationModel.get("CC_BCC_EMAIL_LIMIT")], multiEmail: !0},
                expression: "{emailCount: [configurationModel.get('CC_BCC_EMAIL_LIMIT')],multiEmail:true}",
                arg: "bcc_emails"
            }],
            ref: "vt_emailsearch_bcc_ref",
            staticClass: "w-60",
            attrs: {
                "data-vv-name": "bcc_emails",
                selected: bcc_emails,
                id: "blindCarbonCopy",
                searchModule: moduleName,
                sourceModule: $module,
                recordId: sourceRecordId,
                searchUsers: 1,
                searchGroups: 1,
                placeholder: translate("LBL_TYPE_AND_SEARCH"),
                "maximum-selection-length": configurationModel.get("CC_BCC_EMAIL_LIMIT"),
                emptyOption: !1
            },
            on: {vt_email_selected: updateBccValues, vt_email_unselected: modifyBccRecipients}
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("bcc_emails"),
                expression: "errors.has('bcc_emails')"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first("bcc_emails")))])], 1)]) : _e(), _v(" "), showSubject ? _c("div", {staticClass: "d-flex mb-2"}, [_c("label", {staticClass: "d-flex align-items-center col-1 pl-0  mb-0"}, [_v(_s(translate("LBL_SUBJECT"))), _c("span", {staticClass: "text-danger"}, [_v("*")])]), _v(" "), _c("div", {staticClass: "w-100"}, [_c("input", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required:true}"
            }, {name: "model", rawName: "v-model", value: subject, expression: "subject"}],
            staticClass: "form-control",
            attrs: {
                disabled: restrictedMode,
                type: "text",
                "data-vv-as": translate("LBL_SUBJECT"),
                name: "subject",
                placeholder: translate("LBL_SUBJECT")
            },
            domProps: {value: subject},
            on: {
                input: function (e) {
                    e.target.composing || (subject = e.target.value)
                }
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("subject"),
                expression: "errors.has('subject')"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first("subject")))])])]) : _e(), _v(" "), _c("div", {staticClass: "form-group mt-3"}, [_c("vds-editor", {
            attrs: {
                parentRecord: record,
                showSignatureField: showSignatureField,
                "related-module-name": relatedModuleSelected,
                selectedRecipient: selectedRecipient,
                restrictedMode: restrictedMode,
                focusOnEditor: focusOnEditor,
                emailSequenceAllowed: emailSequenceAllowed,
                defaultTemplateId: defaultTemplateId
            },
            on: {
                "vds::emailtemplate::record::selected": setTemplateId,
                "vds-choose-file": uploadedFiles,
                "vds::update::subject": updateSubject,
                "vds::selected::sequence": setSequenceRecord
            },
            model: {
                value: description, callback: function (e) {
                    description = e
                }, expression: "description"
            }
        })], 1), _v(" "), files && files.length && !restrictedMode ? _c("div", {staticClass: "mt-3"}, _l(files, (function (e, t) {
            return _c("b-badge", {
                staticClass: "mr-3 px-3 py-2",
                attrs: {variant: "secondary"}
            }, [_v("\n                                    " + _s(e.name || e.attachment) + "\n                                    "), e.nondeletable ? _e() : _c("i", {
                staticClass: "fa fa-times-circle fa-w-16 ml-2 c-pointer",
                on: {
                    click: function (e) {
                        return removeFile(t)
                    }
                }
            })])
        })), 1) : _e()]), _v(" "), _c("hr", {staticClass: "m-0"}), _v(" "), _c("div", {staticClass: "px-4 py-2"}, [restrictedMode ? _c("div", {staticClass: "d-flex flex-row-reverse align-items-center"}, [_c("b-button", {
            attrs: {
                disabled: !emailSequenceRecord.isEditable,
                variant: "primary"
            }, on: {
                click: function (e) {
                    return updateSequenceRecord()
                }
            }
        }, [_v(" " + _s(translate("Confirm & activate")))])], 1) : _c("div", {staticClass: "d-flex align-items-center justify-content-between"}, [_c("div", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: attachmentsAllowed,
                expression: "attachmentsAllowed"
            }]
        }, [_c("b-dropdown", {
            attrs: {
                size: "md",
                variant: "link",
                "toggle-class": "text-decoration-none text-dark"
            }
        }, [_c("template", {slot: "button-content"}, [_c("i", {staticClass: "fa fa-paperclip mr-1"}), _v(_s(translate("LBL_ATTACH_FILES")))]), _v(" "), _c("b-dropdown-item-button", [_c("label", {
            staticClass: "mb-0 c-pointer",
            attrs: {for: "uploadFromComputer"}
        }, [_v(_s(translate("LBL_FROM_COMPUTER", "Documents")))]), _v(" "), _c("b-file", {
            staticClass: "fileElement",
            staticStyle: {display: "none"},
            attrs: {id: "uploadFromComputer", size: "sm", multiple: !0, plain: ""},
            model: {
                value: uploadedFiles, callback: function (e) {
                    uploadedFiles = e
                }, expression: "uploadedFiles"
            }
        })], 1), _v(" "), _c("b-dropdown-item-button", {on: {click: uploadFileFromDocuments}}, [_v("\n\t\t\t\t\t\t\t\t\t\t\t" + _s(translate("LBL_FROM_CRM", "Documents")) + "\n\t\t\t\t\t\t\t\t\t\t")])], 2)], 1), _v(" "), _c("div", {staticClass: "d-flex align-items-center"}, [_c("div", {staticClass: "form-check d-flex pr-2 align-items-center"}, [_.isUndefined(emailAction) && reminderAllowed ? _c("div", {staticClass: "d-flex align-items-center pr-3"}, [_c("vds-checkbox", {
            attrs: {status: remindMeToFollowUp},
            on: {
                change: function (e) {
                    remindMeToFollowUp = !remindMeToFollowUp
                }
            }
        }), _v(" "), _c("span", {staticClass: "pl-4 pr-2 ml-1"}, [_v(_s(translate("LBL_REMIND_ME_TO_FOLLOW_UP_IN")))]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: followUpDays,
                expression: "followUpDays"
            }],
            staticClass: "inputTextArea",
            attrs: {type: "text"},
            domProps: {value: followUpDays},
            on: {
                keyup: followUpDaysValidation, input: function (e) {
                    e.target.composing || (followUpDays = e.target.value)
                }
            }
        }), _v(" "), _c("span", {staticClass: "pl-2"}, [_v(_s(translate("LBL_DAYS")))])], 1) : _e(), _v(" "), trackingAllowed ? _c("vds-switch", {
            attrs: {
                status: emailTracking,
                disabled: "true",
                labelToRight: "true",
                label: translate("LBL_TRACKING_ON")
            }
        }) : _e()], 1), _v(" "), _c("div", {staticClass: "d-flex"}, [hasCancel ? _c("button", {
            staticClass: "btn btn-secondary m-2",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return cancelAction()
                }
            }
        }, [_v(_s(translate("LBL_CANCEL")))]) : _e(), _v(" "), draftAllowed ? _c("button", {
            staticClass: "btn btn-success  m-2",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return sendEmail("SAVED")
                }
            }
        }, [_v(_s(translate("LBL_SAVE_AS_DRAFT")))]) : _e(), _v(" "), schedulingAllowed ? [_c("b-dropdown", {
            ref: "scheduleEmail",
            staticClass: "my-2 ml-2",
            attrs: {
                id: "scheduleEmail",
                right: "",
                variant: "primary",
                split: "",
                size: "md",
                text: translate("LBL_SEND")
            },
            on: {
                click: function (e) {
                    return sendEmail("QUEUED")
                }
            }
        }, [_l(widgets, (function (e) {
            return [_c(e, {
                tag: "component",
                attrs: {id: sourceRecordId, moduleName: moduleName, recordData: recordData}
            })]
        })), _v(" "), _c("hr", {staticClass: "m-1"}), _v(" "), _c("b-dropdown-item", {staticClass: "disabled"}, [_v(_s(translate("LBL_SCHEDULE_LATER", "EmailCampaigns")))]), _v(" "), checkIsLaterToday ? _c("b-dropdown-item", {on: {click: scheduleForToday}}, [_v(_s(translate("LBL_LATER_TODAY")) + " 6 " + _s(translate("LBL_PM")))]) : _e(), _v(" "), _c("b-dropdown-item", {
            staticClass: "d-flex align-items-center",
            on: {click: scheduleToNextDay}
        }, [_c("span", {staticClass: "flex-grow-1"}, [_v(_s(translate("LBL_TOMORROW")) + " ")]), _c("span", {staticClass: "small text-grey-4 pl-3"}, [_v(" 9 " + _s(translate("LBL_AM")))])]), _v(" "), _c("b-dropdown-item", {
            staticClass: "d-flex align-items-center",
            on: {click: scheduleForTwoDays}
        }, [_c("span", {staticClass: "flex-grow-1"}, [_v(_s(translate("LBL_IN_TWO_DAYS")) + ", ")]), _c("span", {staticClass: "small text-grey-4 pl-3"}, [_v(_s(getMonthAndDay(getFutureDate("2"))) + ",  9 " + _s(translate("LBL_AM")))])]), _v(" "), _c("b-dropdown-item", {
            staticClass: "d-flex align-items-center",
            on: {click: scheduleForNextWeek}
        }, [_c("span", {staticClass: "flex-grow-1"}, [_v(_s(translate("LBL_IN_ONE_WEEK")) + ", ")]), _c("span", {staticClass: "small text-grey-4 pl-3"}, [_v(_s(getMonthAndDay(getFutureDate("7"))) + ",  9 " + _s(translate("LBL_AM")))])]), _v(" "), _c("b-dropdown-divider", {staticClass: "mb-0 pb-0"}), _v(" "), _c("div", {
            staticClass: "d-flex justify-content-center c-pointer mb-1 p-2 bg-secondary",
            on: {
                click: function (e) {
                    e.stopPropagation(), showDatePicker = !showDatePicker
                }
            }
        }, [_v(" " + _s(translate("LBL_PICK_DATE_AND_TIME")))]), _v(" "), _c("b-dropdown-form", {staticClass: "mb-0 px-0 pt-0"}, [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showDatePicker,
                expression: "showDatePicker"
            }]
        }, [_c("vds-datepicker", {
            attrs: {dateFormat: getUserDateTimeFormat()},
            model: {
                value: datePickerValue, callback: function (e) {
                    datePickerValue = e
                }, expression: "datePickerValue"
            }
        })], 1), _v(" "), _c("b-dropdown-divider"), _v(" "), showDatePicker ? _c("div", {staticClass: "d-flex justify-content-center m-0"}, [_c("b-button", {
            attrs: {
                variant: "primary",
                size: "sm"
            }, on: {
                click: function (e) {
                    return scheduleEmail(datePickerValue)
                }
            }
        }, [_v(_s(translate("LBL_SCHEDULE_EMAIL")))])], 1) : _e()], 1)], 2)] : [_c("b-button", {
            staticClass: "my-2 ml-2",
            attrs: {id: "scheduleEmail", variant: "primary", split: "", size: "md", text: "Send"},
            on: {
                click: function (e) {
                    return sendEmail("QUEUED")
                }
            }
        }, [_v(" " + _s(translate("LBL_SEND")) + " ")])]], 2)])])])])])
    },
    props: {
        recordId: {type: [String, Number], required: !1},
        record: {type: [Object], required: !1},
        recordIds: {type: [Array], required: !1},
        threadId: {type: [String]},
        emailRecord: {type: [Object]},
        emailFieldName: {required: !1},
        emailAction: {type: [String]},
        emailRecordId: {type: [String, Number]},
        module: {required: !0},
        showrelated: {required: !1, default: !1},
        showFromEmail: {type: [Boolean], default: !0},
        showReplyTo: {type: [Boolean], default: !0},
        showSubject: {type: [Boolean], default: !0},
        hasCancel: {type: [Boolean], default: !1},
        viewtype: {type: [String]},
        maximumSelectionEmailLimit: {type: [Number], default: 1},
        showConfirmation: {type: Boolean, default: !1},
        getSelectedRecords: {type: [Function], required: !1, default: () => []},
        showRelatedEmailModules: {type: [Boolean], default: !0},
        attachments: {type: Array, default: () => []},
        emailSubject: {type: String, default: ""},
        emailBody: {type: String, default: ""},
        recordShareParams: {type: Object, default: () => ({})},
        showSignatureField: {type: Boolean, default: !0},
        isDocumentShareAsAttachment: {type: Boolean, default: !1},
        searchType: {type: String, default: ""},
        emailSequenceAllowed: {type: Boolean, default: !0},
        defaultTemplateId: {type: String, default: ""}
    },
    data() {
        return {
            moduleName: this.module,
            showRelated: this.showrelated,
            recordData: new Array,
            selectedRecipient: [],
            relatedEmails: [],
            mailBoxEmails: [],
            configuredReplyToAddress: [],
            fromEmail: "",
            isFromEmailChangeAllowed: !0,
            showCc: !1,
            showBcc: !1,
            scheduledDate: "",
            cc_recipients: [],
            bcc_recipients: [],
            cc: [],
            bcc: [],
            subject: "",
            description: "",
            showDatePicker: !1,
            replyToEmail: "",
            iscomposeEmailAllowed: !1,
            files: [],
            uploadedFiles: [],
            limit: 6,
            followUpDays: "3",
            emailTracking: !1,
            remindMeToFollowUp: !1,
            relatedmodules: [],
            relatedModuleSelected: this.getRecepientEmailModules(),
            emailFlag: "",
            configurationModel: new Configuration,
            toFieldEmailLimit: 1,
            sourceRecordId: "",
            showMoreBtn: !0,
            documentIds: [],
            previousRelatedModuleSelected: "",
            datePickerValue: "",
            templateId: "",
            smtpDetails: [],
            referrerId: !1,
            focusOnEditor: !1,
            widgets: [],
            relatedModuleModel: {}
        }
    },
    created: function () {
        this.isOutgoingServerConfigured(), this.getConfiguredReplyToAddress(), this.isEmailTrackingEnabled(), this.init(), this.injectUnwatch = this.$root.vtInjector.listen("vds::composeemail::sendbutton::schedule::subscriptions", e => {
            for (var t in e) {
                let i = "vds-component-" + Math.random();
                this.widgets.push(i), this.$options.components[i] = e[t]
            }
        })
    },
    mounted() {
        if (this.emailAction && "massEmailAction" != this.emailAction && this.setFocusOnComposeEmail(), this.$on("vds::popup:record::selected", this.selectOtherModuelRecepients), this.$root.$on("vds::email::not::verified", () => {
            this.showMoreBtn = !1
        }), this.attachments && this.attachments.length) for (let t in this.attachments) {
            let i = this.attachments[t];
            if (i instanceof File) this.uploadedFiles.push(i); else {
                var e = new XMLHttpRequest;
                e.open("GET", i.path, !0), e.responseType = "blob", e.onload = () => {
                    var t = e.response;
                    let s = i;
                    i = new File([t], i.attachment, {type: i.type}), s.nondeletable && (i.nondeletable = s.nondeletable), this.uploadedFiles.push(i)
                }, e.send()
            }
        }
        Vue.set(this, "description", this.emailBody), Vue.set(this, "subject", this.emailSubject), this.record && Vue.set(this, "referrerId", "EventForms" == this.record._moduleName && this.record.id), this.getToFieldEmailLimit(), this.$root.$on("vds::eventforms::referrerid", e => {
            this.referrerId = e
        })
    },
    computed: {
        checkIsLaterToday: () => VTHelper.checkTimeUp("18"), cc_emails: {
            get() {
                return Object.keys(this.cc_recipients).length ? this.cc_recipients : []
            }, set(e) {
                Vue.set(this, "cc_recipients", e)
            }
        }, bcc_emails: {
            get() {
                return Object.keys(this.bcc_recipients).length ? this.bcc_recipients : []
            }, set(e) {
                Vue.set(this, "bcc_recipients", e)
            }
        }, showCcRecipients: {
            get() {
                return !!(this.cc_recipients && Object.keys(this.cc_recipients).length || this.emailRecord && this.emailRecord.ccmail && this.emailRecord.ccmail.length && "forward" != this.emailAction || this.showCc)
            }, set(e) {
                this.showCc = e
            }
        }, showBccRecipients: {
            get() {
                return this.bcc_recipients && Object.keys(this.bcc_recipients).length || this.emailRecord && this.emailRecord.bccmail && this.emailRecord.bccmail.length && "forward" != this.emailAction || this.showBcc
            }, set(e) {
                this.showBcc = e
            }
        }, fromEmailAddress: {
            get() {
                if (this.mailbox && "personal" != this.mailbox.type && this.smtpDetails.server && "mail.od1.vtiger.com" != this.smtpDetails.server && this.mailBoxEmails.some(e => e.value === this.smtpDetails.server_username)) return Vue.set(this, "fromEmail", this.smtpDetails.server_username), this.smtpDetails.server_username;
                for (var e in this.mailBoxEmails) {
                    if (this.$currentUser.email1 === this.mailBoxEmails[e].value && !this.mailbox) return Vue.set(this, "fromEmail", this.mailBoxEmails[e].value), this.mailBoxEmails[e].value;
                    if (this.mailbox) return Vue.set(this, "fromEmail", this.mailbox.email), Vue.set(this, "isFromEmailChangeAllowed", !1), this.mailbox.email
                }
            }, set(e) {
                Vue.set(this, "fromEmail", e)
            }
        }, replyTo: {
            get() {
                for (var e in this.getReplyToAddresses) {
                    if (!_.isEmpty(this.configuredReplyToAddress) && this.configuredReplyToAddress[0].value === this.getReplyToAddresses[e].value && !this.mailbox) return Vue.set(this, "replyToEmail", this.getReplyToAddresses[e].value), this.getReplyToAddresses[e].value;
                    if (_.isEmpty(this.configuredReplyToAddress) && this.$currentUser.email1 === this.getReplyToAddresses[e].value && !this.mailbox) return Vue.set(this, "replyToEmail", this.getReplyToAddresses[e].value), this.getReplyToAddresses[e].value;
                    if (this.mailbox) return Vue.set(this, "replyToEmail", this.mailbox.email), this.mailbox.email
                }
            }, set(e) {
                Vue.set(this, "replyToEmail", e)
            }
        }, getFromEmailAddresses() {
            if (this.mailbox && "personal" == this.mailbox.type && this.mailbox.verified && 0 != this.mailbox.verified) {
                let e = "";
                return e = this.translate("LBL_MY_MAILBOX", "Inbox"), e += "(" + this.mailbox.email + ")", [{
                    value: this.mailbox.email,
                    label: e
                }]
            }
            if (this.mailbox && "personal" != this.mailbox.type && this.smtpDetails.server && "mail.od1.vtiger.com" != this.smtpDetails.server && this.mailBoxEmails.some(e => e.value !== this.smtpDetails.server_username)) {
                var e = this.smtpDetails.server_username, t = [];
                for (var i in this.mailBoxEmails) t.push(this.mailBoxEmails[i].value);
                if (!t.includes(e)) {
                    let t = "", i = [];
                    this.$currentUser.first_name && i.push(this.$currentUser.first_name), this.$currentUser.last_name && i.push(this.$currentUser.last_name), t = i.join(" "), t += " (" + e + ")", this.mailBoxEmails.push({
                        label: t,
                        value: e
                    })
                }
                return this.mailBoxEmails
            }
            if (this.mailBoxEmails) return this.mailBoxEmails
        }, getReplyToAddresses() {
            if (this.mailBoxEmails) return _.isEmpty(this.configuredReplyToAddress) || this.mailbox ? this.mailBoxEmails : _.union(this.configuredReplyToAddress, this.mailBoxEmails)
        }, referenceParams() {
            return {module: this.relatedModuleSelected, multiple: !1, fieldname: "email"}
        }, referencePopupComponent: () => "PopupReferenceList", mailbox() {
            return this.appStore.get("active_mailbox")
        }, setMinDate() {
            if (this.$currentUser) return new moment(new Date).tz(this.$currentUser.get("time_zone")).format("YYYY-MM-DD")
        }, draftAllowed() {
            return !this.recordShareParams || !Object.keys(this.recordShareParams).length
        }, reminderAllowed() {
            return !this.recordShareParams || !Object.keys(this.recordShareParams).length
        }, trackingAllowed() {
            return !this.recordShareParams || !Object.keys(this.recordShareParams).length
        }, attachmentsAllowed() {
            return !this.recordShareParams || !Object.keys(this.recordShareParams).length
        }, schedulingAllowed() {
            return !this.recordShareParams || !Object.keys(this.recordShareParams).length
        }, restrictedMode() {
            return this.sequenceSelected
        }
    },
    methods: {
        setFocusOnComposeEmail() {
            !this.emailAction || "reply" !== this.emailAction && "replyall" !== this.emailAction && "preview" !== this.emailAction ? this.emailAction && "forward" === this.emailAction || _.isEmpty(this.recordData) ? this.focusOnToField() : this.subject ? this.focusOnEditor = !0 : this.focusOnSubjectField() : this.focusOnEditor = !0
        }, focusOnToField() {
            setTimeout(() => {
                jQuery(".toEmails").find(".select2-container").siblings("select:enabled").select2("focus"), jQuery(".toEmails").find(".select2-container").siblings("select:enabled").select2("open")
            }, 50)
        }, focusOnSubjectField() {
            setTimeout(() => {
                jQuery("input[name='subject']").focus()
            }, 0)
        }, removeFile(e) {
            var t = this.files[e] && this.files[e].fileid ? this.files[e].fileid : "";
            t && this.documentIds.includes(t) && this.documentIds.splice(this.documentIds.indexOf(t), 1), this.files.splice(e, 1)
        }, showPopupReferenceList() {
            this.showModal({
                componentName: App.loadComponent("PopupReferenceList", this.referenceParams.module),
                componentData: this.referenceParams
            })
        }, followUpDaysValidation() {
            var e = parseInt(this.followUpDays);
            (isNaN(e) || 0 == e) && (e = ""), Vue.set(this, "followUpDays", e)
        }, setRelatedModuleModel() {
            this._getModuleDescribe(this.relatedModuleSelected).then(e => {
                this.relatedModuleModel = e
            })
        }, selectOtherModuelRecepients(e, t) {
            if (_.isArray(t) && t.length > 1 && (t = t[0]), "EmailTemplates" != t._moduleName) {
                var i = {};
                this.$module != this.relatedModuleSelected && this.setRelatedModuleModel(), this.retrieveRecord(t.id, this.relatedModuleSelected).then(e => {
                    var t;
                    if (i = BaseModel.getModuleSpecificModel(this.relatedModuleSelected, "Record", e), t = this.emailFieldName ? this.emailFieldName : this.getCompositeValue("email", i, this.relatedModuleModel), "Accounts" != this.relatedModuleSelected && "Users" != this.relatedModuleSelected || (t = "email1"), i[t]) {
                        var s = {
                            id: i[t],
                            name: "Users" == this.relatedModuleSelected ? i.fullName : i.label,
                            module: this.relatedModuleSelected,
                            recordId: i.getId()
                        };
                        _.findWhere(this.selectedRecipient, {recordId: i.getId()}) || (this.selectedRecipient = new Array, this.$refs.vt_emailsearch_ref.clear(), this.$refs.vt_emailsearch_ref.markSelected(s))
                    } else this.showErrorNotification(i.label + " " + this.translate("JS_DO_NOT_HAVE_AN_EMAIL_ID"))
                }), _.isArray(e) && e.length > 1 && this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        okOnly: !0,
                        message: this.translate("LBL_LIMIT_EXCEEDED_USE_EMAILCAMPAIGNS", "Settings:Vtiger")
                    }
                }), this.relatedModuleModel = {}
            }
        }, init() {
            this.getSelectedRecipient(), this.$nextTick(() => {
                this.emailRecord && this.emailAction && this.setMailData(this.emailRecord), this.watchDescriptionChanges()
            }), (this.recordId || this.record && this.record.id) && (this.sourceRecordId = this.recordId ? this.recordId : this.record.id), this.getVerifiedEmails(), this.getRelatedModulesInformation(), this.$root.$on("vds::email::send::scheduled", this.scheduleForDate)
        }, async getSelectedRecordIds() {
            var e = [];
            return this.recordIds ? e = this.recordIds : this.recordId ? e.push(this.recordId) : this.record ? e.push(this.record.id) : e = await this.getSelectedRecords(), e
        }, async getSelectedRecipient() {
            if (!_.isEmpty(this.emailRecord)) return "";
            var e = this.relationOperation && this.relationModule ? this.relationModule : this.module,
                t = await this.getSelectedRecordIds();
            this.appStore.request("api_get", {
                url: "/records/addresses",
                key: "selected_receipients",
                params: {module: "Emails", sourceModule: e, id: t, forRecord: 1}
            }).then(e => {
                for (var t in e) for (var i in this.relatedModuleSelected && this.relatedmodules.find(e => e.value === this.relatedModuleSelected) || (this.relatedModuleSelected = t), e[t]) {
                    var s = {id: e[t][i].value, name: e[t][i].name, module: t, recordId: i, moduleRecordId: e[t][i].id};
                    this.recordData.push(s)
                }
                for (var a in this.setFocusOnComposeEmail(), this.recordData) this.$refs.vt_emailsearch_ref.markSelected(this.recordData[a])
            }).catch(e => {
                this.$root.$emit("vds::hide::email::compose::modal"), this.showErrorNotification(e.message), this.setFocusOnComposeEmail()
            })
        }, setMailData(e) {
            if (e) if ("reply" === this.emailAction || "replyall" === this.emailAction || "preview" === this.emailAction) {
                if (this.subject = e.subject, this.emailFlag = e.email_flag, e.description && (this.description = "reply" === this.emailAction || "replyall" === this.emailAction ? "<p>" + e.description : e.description), "preview" === this.emailAction && (this.files = e.attachments), this.emailFlag && "RECEIVED" == this.emailFlag.toUpperCase()) {
                    var t = {id: e.from_email, name: "", module: "", recordId: e.crmid};
                    this.recordData.push(t)
                } else for (var i in e.saved_toid) {
                    this.relatedModuleSelected = e.saved_toid[i].module ? e.saved_toid[i].module : "";
                    t = {
                        id: e.saved_toid[i].emailid,
                        name: e.saved_toid[i].label ? e.saved_toid[i].label : "",
                        module: e.saved_toid[i].module ? e.saved_toid[i].module : "",
                        recordId: e.saved_toid[i].id
                    };
                    this.recordData.push(t)
                }
                for (var s in this.recordData) this.$refs.vt_emailsearch_ref.markSelected(this.recordData[s]);
                if (e && e.ccmail && e.ccmail.length && ("replyall" === this.emailAction || "preview" === this.emailAction || "reply" === this.emailAction)) {
                    let i = [];
                    for (var a in e.ccmail) {
                        if (r = e.ccmail[a].emailid) {
                            t = {
                                id: r,
                                name: e.ccmail[a].label ? e.ccmail[a].label : "",
                                module: e.ccmail[a].module ? e.ccmail[a].module : "",
                                recordId: e.ccmail[a].id
                            };
                            _.where(i, {id: r}).length || i.push(t)
                        }
                    }
                    for (var s in Vue.set(this, "cc_emails", i), this.cc_emails) this.$refs.vt_emailsearch_cc_ref.markSelected(this.cc_emails[s])
                }
                if (e && e.bccmail && e.bccmail.length && ("replyall" === this.emailAction || "preview" === this.emailAction)) {
                    let i = [];
                    for (var l in e.bccmail) {
                        var r;
                        if (r = e.bccmail[l].emailid) {
                            t = {
                                id: r,
                                name: e.bccmail[l].label ? e.bccmail[l].label : "",
                                module: e.bccmail[l].module ? e.bccmail[l].module : "",
                                recordId: e.bccmail[l].id
                            };
                            _.where(i, {id: r}).length || i.push(t)
                        }
                    }
                    for (var s in Vue.set(this, "bcc_emails", i), this.bcc_emails) this.$refs.vt_emailsearch_bcc_ref.markSelected(this.bcc_emails[s])
                }
            } else if ("forward" === this.emailAction) {
                for (let t in e.attachments) {
                    let i = e.attachments[t];
                    if (i instanceof File) this.uploadedFiles.push(i); else {
                        var o = new XMLHttpRequest;
                        o.open("GET", i.path, !0), o.responseType = "blob", o.onload = () => {
                            var e = o.response;
                            i = new File([e], i.attachment, {type: i.type}), this.uploadedFiles.push(i)
                        }, o.send()
                    }
                }
                this.subject = e.subject, this.description = e.description
            }
        }, getRecepientEmailModules() {
            if (this.emailRecord) return;
            let e = this.relatedModuleSelected && this.relatedModuleSelected != this.module ? this.relatedModuleSelected : this.module;
            return "Potentials" == e ? "Contacts" : e
        }, getVerifiedEmails() {
            this.appStore.request("api_get", {
                url: "/config",
                params: {module: "Emails", name: "MAILBOX"},
                key: "from_email"
            }).then(e => {
                for (var t in e.MAILBOX) {
                    var i = {};
                    i.value = t, i.label = e.MAILBOX[t], this.mailBoxEmails.push(i)
                }
            })
        }, getConfiguredReplyToAddress() {
            this.appStore.request("api_get", {url: "/config", params: {module: "Emails", name: "FROM"}}).then(e => {
                if (e && e.FROM && e.FROM.length) {
                    var t = {};
                    t.value = e.FROM.email, t.label = e.FROM.name + " (" + e.FROM.email + ")", this.configuredReplyToAddress.push(t)
                }
            })
        }, isOutgoingServerConfigured() {
            this.appStore.request("api_get", {url: "/config", params: {module: "Emails", name: "SMTP"}}).then(e => {
                e.SMTP.server ? e.SMTP.server && (this.smtpDetails = e.SMTP) : this.iscomposeEmailAllowed = !1
            })
        }, getRelatedModulesInformation() {
            this.appStore.request("api_get", {
                url: "/relatedmodules",
                params: {module: "Emails"},
                key: "related_modules_data"
            }).then(e => {
                for (let t in e) {
                    let i = {value: t, label: e[t]};
                    this.relatedmodules.push(i)
                }
            })
        }, isEmailTrackingEnabled() {
            this.appStore.request("api_get", {
                url: "/config",
                params: {module: "Emails", name: "EMAIL_TRACKING"}
            }).then(e => {
                e.EMAIL_TRACKING && (this.emailTracking = "Yes" == e.EMAIL_TRACKING)
            })
        }, getRelatedRecordsEmail(e, t) {
            let i = this.moduleName;
            var s = "";
            for (var a in e) if (e[a] && e[a].relatedModuleName === t) {
                s = e[a].relation_id;
                break
            }
            return this.relatedEmails[t] = [], this.appStore.request("api_get", {
                url: "/records/relationrecords",
                params: {module: i, id: this.record.id, relationid: s},
                key: "related_records_data"
            }).then(e => {
                for (var i in e) {
                    var s = {id: e[i].email, name: e[i].firstname, module: t, recordId: e[i].id};
                    this.relatedEmails.push(s)
                }
            }), this.relatedEmails
        }, updateSelectedRecipients(e) {
            _.findWhere(this.selectedRecipient, {id: e.id}) || (this.selectedRecipient.push(e), Vue.set(this, "relatedModuleSelected", e.module), this.$root.$emit("vds::compose::email::to::added", e))
        }, updateCcValues(e) {
            _.findWhere(this.cc_recipients, {id: e.id}) || this.cc_recipients.push(e), this.cc.indexOf(e.id) < 0 && this.cc.push(e.id)
        }, updateBccValues(e) {
            _.findWhere(this.bcc_recipients, {id: e.id}) || this.bcc_recipients.push(e), this.bcc.indexOf(e.id) < 0 && this.bcc.push(e.id)
        }, selectedEmailRecipients(e) {
            this.$refs.vt_emailsearch_ref.markSelected(e)
        }, modifyRecipients(e) {
            var t = _.findWhere(this.selectedRecipient, {id: e.id});
            this.selectedRecipient.splice(this.selectedRecipient.indexOf(t), 1);
            var i = this.selectedRecipient;
            for (var s in this.$refs.vt_emailsearch_ref.clear(), this.selectedRecipient = new Array, this.$refs.vt_emailsearch_ref.clear(), i) this.$refs.vt_emailsearch_ref.markSelected(i[s]);
            this.$root.$emit("vds::compose::email::to::removed", e)
        }, modifyCcRecipients(e) {
            var t = _.findWhere(this.cc_recipients, {id: e.id});
            this.cc_recipients.splice(this.cc_recipients.indexOf(t), 1);
            var i = this.cc.indexOf(e.id);
            this.cc.splice(i, 1);
            var s = this.cc_recipients;
            for (var a in this.$refs.vt_emailsearch_cc_ref.clear(), this.cc_recipients = new Array, this.$refs.vt_emailsearch_cc_ref.clear(), s) this.$refs.vt_emailsearch_cc_ref.markSelected(s[a])
        }, modifyBccRecipients(e) {
            var t = _.findWhere(this.bcc_recipients, {id: e.id});
            this.bcc_recipients.splice(this.bcc_recipients.indexOf(t), 1);
            var i = this.bcc.indexOf(e.id);
            this.bcc.splice(i, 1);
            var s = this.bcc_recipients;
            for (var a in this.$refs.vt_emailsearch_bcc_ref.clear(), this.bcc_recipients = new Array, this.$refs.vt_emailsearch_bcc_ref.clear(), s) this.$refs.vt_emailsearch_bcc_ref.markSelected(s[a])
        }, scheduleForToday() {
            VTHelper.checkTimeUp("18") && (this.scheduledDate = this.convertDateToUserFormat(this.getFutureDate("0")) + " " + this.convertTimeToUserFormat("18"), this.sendEmail("SCHEDULED"))
        }, scheduleToNextDay() {
            this.scheduledDate = this.convertDateToUserFormat(this.getFutureDate("1")) + " " + this.convertTimeToUserFormat("9"), this.sendEmail("SCHEDULED")
        }, scheduleForTwoDays() {
            this.scheduledDate = this.convertDateToUserFormat(this.getFutureDate("2")) + " " + this.convertTimeToUserFormat("9"), this.sendEmail("SCHEDULED")
        }, scheduleForNextWeek() {
            this.scheduledDate = this.convertDateToUserFormat(this.getFutureDate("7")) + " " + this.convertTimeToUserFormat("9"), this.sendEmail("SCHEDULED")
        }, scheduleForDate(e) {
            this.$refs.scheduleEmail.visible = !1, this.scheduledDate = e, this.sendEmail("SCHEDULED")
        }, uploadFileFromDocuments() {
            this.showModal({
                componentName: "PopupReferenceList",
                componentData: {
                    module: "Documents",
                    q: '[[["filename","isnotempty",""],["filelocationtype","e","I"],["filesize","n","0"]]]'
                }
            }), this.$off("vds::popup:record::selected"), this.$once("vds::popup:record::selected", this.setDocuments)
        }, setDocuments(e, t) {
            let i = this.configurationModel.get("UPLOAD_LIMIT");
            if (t && t.filesize > 1024 * i * 1024) this.showErrorNotification(this.translate("JS_MAX_FILE_UPLOAD_EXCEEDS", "Vtiger") + " 25MB"); else {
                for (var s in this.documentIds.push(e), this.files) if (this.files[s].name == t.filename) return void this.showErrorNotification(this.translate("JS_THIS_FILE_HAS_ALREADY_BEEN_SELECTED"));
                var a = new File([], t.filename, {size: t.filesize, type: t.extension});
                a.fileid = e, this.uploadedFiles = [], this.uploadedFiles.push(a)
            }
        }, scheduleEmail(e) {
            if (!e) return this.showErrorNotification(this.translate("JS_DATE_TIME_IS_MANDATORY_FOR_SCHEDULING_EMAIL")), !1;
            this.scheduledDate = e, e && (this.isGreaterThanNow(this.scheduledDate) ? this.sendEmail("SCHEDULED") : this.showErrorNotification(this.translate("JS_EMAIL_CANT_BE_SCHEDULED_ON_PASSED_TIME")))
        }, sendEmail(e) {
            var t = {}, i = [], s = "";
            for (var a in this.selectedRecipient) t[this.selectedRecipient[a].recordId] = [this.selectedRecipient[a].id], _.includes(i, this.selectedRecipient[a].id) || i.push(this.selectedRecipient[a].id);
            (this.remindMeToFollowUp || this.emailAction) && (s = moment(Date()).add(this.followUpDays, "day").format("YYYY-MM-DD HH:mm:ss"));
            var l = {
                module: "Emails",
                source_module: this.$module,
                replyTo: this.replyToEmail,
                from: this.fromEmail,
                toEmail: t,
                toemailinfo: t,
                to: i,
                subject: this.subject,
                description: this.description,
                flag: e,
                reminder: s,
                templateid: this.templateId
            };
            this.referrerId && (l.referrerid = this.referrerId), this.cc_recipients && (l.ccInfo = this.cc_recipients), this.bcc_recipients && (l.bccInfo = this.bcc_recipients), this.cc && (l.cc = this.cc.join(",")), this.bcc && (l.bcc = this.bcc.join(",")), this.threadId && (l.threadId = this.threadId, l.emailType = "0"), this.emailRecordId && (l.record = this.emailRecordId), this.scheduledDate && (l.do_after = this.scheduledDate), null === this.files || this.emailRecordId ? (l._files = this.files, l.attachments = this.files, l.emailMode = "edit") : (l._files = this.files, l.documentids = this.documentIds), this.recordShareParams && (l = jQuery.extend({}, l, this.recordShareParams)), this.$validator.validate().then(e => {
                e && this.sendEmailRequest(l).then(e => {
                    this.$root.$emit("vds::hide::email::compose::modal"), this.$emit("vds::post::send::email"), this.$root.$emit("vds::post::email::sent::refresh::activity"), this.$root.$emit("vds::post::email::sent::refresh::upcomming"), this.$root.$emit("bv::hide::modal", "startActivity")
                }, e => {
                    this.showErrorNotification({message: e})
                })
            })
        }, sendEmailRequest(e) {
            return new Promise((t, i) => {
                this.appStore.request("api_post", {url: "/records/send", params: e, key: "recent_emails"}).then(e => {
                    this.sendResponse = e, t(e)
                }, e => i(e))
            })
        }, cancelAction() {
            this.$emit("vds::cancel::confirmation")
        }, updateSubject(e) {
            Vue.set(this, "subject", e)
        }, watchDescriptionChanges() {
            this.$watch("description", (e, t) => {
                if (this.emailAction) this.showConfirmation || this.$emit("vds::show::draft::confirmation", !0); else {
                    let t = jQuery("<div/>");
                    description = t.html(e).text().trim(), description.length && !this.showConfirmation ? this.$root.$emit("vds::show::draft::confirmation", !0) : 0 == description.length && this.$emit("vds::show::draft::confirmation", !1)
                }
            })
        }, discardDraft(e) {
            this.showModal({
                componentName: "DiscardDraft",
                componentData: {modulename: this.modulename, composeModalId: "modalComposeEmail", recordId: e},
                modalOnModalMode: !0
            })
        }, relatedModuleChange() {
            (this.emailRecord || this.templateId) && this.showConfirmationBox({message: this.translate("JS_CLEAR_TEMPLATE_CONTENT_RECIPIENTS")}).then(() => {
                this.subject = "", this.description = "", this.files = [], this.selectedRecipient = new Array, this.recordData = new Array, this.$validator.pause(), this.$refs.vt_emailsearch_ref.clear(), Vue.nextTick(() => {
                    this.$validator.resume()
                })
            })
        }, setTemplateId(e) {
            this.templateId = e
        }, getToFieldEmailLimit() {
            "massEmailAction" == this.emailAction && this.appStore.request("api_get", {
                url: "/editionlimit",
                params: {module: "Ondemand", name: "MASSEMAIL_EDITION_LIMIT", rule: "THRESHOLD"},
                key: "to_email"
            }).then(e => {
                this.toFieldEmailLimit = e
            })
        }
    },
    $_veeValidate: {validator: "new"},
    watch: {
        toFieldEmailLimit(e) {
            setTimeout(() => {
                this.$refs.vt_emailsearch_ref.$refs.Vt_Select_Component_Reference.reInitialize()
            }, 50)
        }, uploadedFiles: {
            handler() {
                if (0 == this.uploadedFiles.length) return;
                let e = this.configurationModel.get("UPLOAD_LIMIT");
                for (var t in this.uploadedFiles) {
                    for (var i in this.files) this.uploadedFiles[t] && this.files[i].name == this.uploadedFiles[t].name && (this.showErrorNotification(this.translate("JS_THIS_FILE_HAS_ALREADY_BEEN_SELECTED")), this.uploadedFiles.splice(t, 1));
                    this.uploadedFiles[t] && this.uploadedFiles[t].size > 1024 * e * 1024 && (this.showErrorNotification(this.translate("JS_MAX_FILE_UPLOAD_EXCEEDS", "Vtiger") + " 25MB"), this.uploadedFiles.splice(t, 1))
                }
                if (this.uploadedFiles.length + this.files.length > this.limit) this.showErrorNotification(this.translate("JS_MAX_FILE_SELECT_LIMIT_EXCEEDS", "Vtiger", this.limit)); else {
                    for (var i in this.uploadedFiles) this.files.push(this.uploadedFiles[i]);
                    this.uploadedFiles = []
                }
            }, immediate: !0
        }, relatedModuleSelected: {
            handler(e, t) {
                e && t && e != t && !this.sequenceSelected && this.relatedModuleChange()
            }
        }
    }
});
var Vtiger_Component_ComposeEmailEditor = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_Record, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_SelectEmailSequence],
    model: {prop: "description", event: "update:description"},
    components: {
        "vds-editor-related-links": App.loadComponent("EditorRelatedLinks"),
        "vds-select-email-sequence": App.loadComponent("SelectEmailSequence", "EmailSequence"),
        "vds-selected-sequence-stages": App.loadComponent("SelectedSequenceStages", "EmailSequence")
    },
    data() {
        return {
            includeSignature: !0,
            sequenceRecord: !1,
            ckEditorInstance: "",
            emailEditorConfig: {
                toolbar: [{
                    name: "basicstyles",
                    items: ["Font", "FontSize", "Bold", "Italic", "Underline", "Strike"]
                }, {name: "colors", items: ["TextColor", "BGColor"]}, {
                    name: "paragraph",
                    items: ["NumberedList", "BulletedList", "-", "Outdent", "Indent", "-", "Blockquote", "-", "JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock"]
                }, {name: "insert", items: ["Image", "Table"]}, {
                    name: "links",
                    items: ["Link", "Unlink"]
                }, {name: "format", items: ["RemoveFormat"]}]
            },
            modalShown: !1,
            linkName: this.parentRecord.label
        }
    },
    computed: {
        getLinkName() {
            return this.linkName
        }
    },
    props: {
        description: {type: String, default: ""},
        fieldName: {type: String, default: "description"},
        disabled: {type: Boolean, default: !1},
        relatedModuleName: {type: [String, Array], default: ""},
        selectedRecipient: {type: [Array, Object], default: () => []},
        restrictedMode: {type: Boolean, default: !1},
        showSignatureField: {type: Boolean, default: !0},
        emailSequenceAllowed: {type: Boolean, default: !0},
        focusOnEditor: {type: Boolean, default: !0},
        parentRecord: {type: Object, default: () => ({})},
        defaultTemplateId: {type: String, default: ""},
        hideSearch: {default: !1}
    },
    methods: {
        updateSubject(e) {
            this.$emit("vds::update::subject", e)
        }, updateContent(e) {
            this.$emit("update:description", e)
        }, showEmailTemplates() {
            this.showModal({
                componentName: App.loadComponent("PopupReferenceList", "EmailTemplates"),
                componentData: {
                    module: "EmailTemplates",
                    relatedModuleName: this.relatedModuleName,
                    parentModule: this.$attrs.parentModule,
                    hideSearch: this.hideSearch
                },
                modalOnModalMode: !0
            })
        }, setDescritpionWithDefaultTemplate(e) {
            this.appStore.request("api_get", {
                url: "template",
                params: e,
                key: "eventforms_default_template"
            }).then(e => {
                var t = e.result;
                let i = '<div class="__eventFormTemplateContent">' + t.description + "</div><br />";
                this.ckEditorInstance.insertHtml(i);
                var s = t.subject;
                this.updateSubject(s)
            })
        }, insertRecord(e, t) {
            var i = [];
            if (_.isArray(t)) {
                for (var s in t) if ("Documents" === t[s]._moduleName) {
                    var a = '<div><a href="$document_share_url::' + t[s].id + '$">' + t[s].label + "</a></div>";
                    i.push(a)
                }
            } else if ("Documents" === t._moduleName) {
                a = '<div><a href="$document_share_url::' + t.id + '$">' + t.label + "</a></div>";
                i.push(a)
            }
            if (i = i.join(" "), this.ckEditorInstance.insertHtml(i), "EventForms" == t._moduleName) {
                var n = {module: t._moduleName, eventformtype: t.type};
                this.setDescritpionWithDefaultTemplate(n), this.$root.$emit("vds::eventforms::referrerid", t.id)
            }
            if ("Surveys" == t._moduleName) {
                n = {module: t._moduleName, surveytype: t.survey_type};
                this.setDescritpionWithDefaultTemplate(n)
            }
        }, showDocumentShareLink() {
            this.modalShown || (this.showModal({
                componentName: "DocumentShareLinkEdit",
                componentData: {name: this.getLinkName, parentRecordId: this.parentRecord.id},
                modalOnModalMode: !1
            }), Vue.set(this, "modalShown", !0), this.$on("vds::documents::sharelink", e => {
                if (this.$root.$emit("bv::hide::modal", "documentShareLinkEditModel"), this.ckEditorInstance = this.$refs.composeEditor ? this.$refs.composeEditor.editorInstance : "", this.ckEditorInstance) {
                    let t = this.ckEditorInstance.editable(), i = jQuery(t.$);
                    i.find('a[data-linktype="shareUrl"]').length && (i.find('a[data-linktype="shareUrl"]').html(e), this.updateContent(this.ckEditorInstance.getData()))
                }
                Vue.set(this, "linkName", e), Vue.set(this, "modalShown", !1)
            }))
        }, initializeTemplateContent(e) {
            this.appStore.request("api_get", {
                url: "/records",
                params: {module: "EmailTemplates", id: e},
                key: "emailtemplates_content_retrieve"
            }).then(t => {
                this.$emit("vds::emailtemplate::record::selected", e);
                let i = '<div class="__emailTemplateContent">' + t.body.replace(/<title>(.*)<\/title>/, "") + "</div><br />";
                this.ckEditorInstance.insertHtml(i), this.updateSubject(t.subject)
            })
        }
    },
    mounted() {
        this.$root.$off("vds::rte::ready"), this.$root.$on("vds::rte::ready", e => {
            if (_.size(e)) {
                if (this.ckEditorInstance = this.$refs.composeEditor ? this.$refs.composeEditor.editorInstance : "", this.ckEditorInstance && this.includeSignature && this.$currentUser.signature && "EmailSequence" != this.$module) {
                    let e = '<div class="__vtUserSignature">' + this.purifyContent(this.$currentUser.signature) + "</div>",
                        t = this.description, i = this.ckEditorInstance.editable(), s = jQuery(i.$);
                    s.find("div.__vtUserSignature").length < 1 && (s.append(e), t = s.html().trim())
                }
                this.defaultTemplateId && this.initializeTemplateContent(this.defaultTemplateId)
            }
        }), this.$off("vds::popup:record::selected"), this.$on("vds::popup:record::selected", (e, t) => {
            this.initializeTemplateContent(e)
        }), this.$on("vds::related::document::created", e => {
            if (e.filetype && "application/pdf" == e.filetype && "Public" == e.document_type) {
                var t = '<a href="$document_share_url::' + e.id + '$">' + e.label + "</a><br />";
                this.ckEditorInstance.insertHtml(t)
            }
        }), this.$root.$on("vds::share::link::closed", () => {
            Vue.set(this, "modalShown", !1)
        })
    },
    watch: {
        includeSignature: {
            handler(e, t) {
                let i = this.description, s = this.ckEditorInstance.editable(), a = jQuery(s.$);
                if (e) {
                    let e = '<div class="__vtUserSignature">' + this.purifyContent(this.$currentUser.signature) + "</div>";
                    a.append(e), i = a.html().trim()
                } else a.find("div.__vtUserSignature").remove(), i = a.html().trim();
                this.updateContent(i)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [disabled ? _e() : _c("div", {staticClass: "d-flex align-items-center py-1 border border-bottom-0"}, [_c("vds-editor-related-links", {
            attrs: {disabled: restrictedMode},
            on: {"vds::link::record::selected": insertRecord}
        }), _v(" "), _c("button", {
            staticClass: "btn shadow-none text-dark-0",
            attrs: {id: "selectEmailTemplate", disabled: restrictedMode, type: "button"},
            on: {click: showEmailTemplates}
        }, [_c("i", {staticClass: "fa fa-emailtemplates mr-2"}), _v(" " + _s(translate("LBL_SELECT_EMAIL_TEMPLATE")) + " ")]), _v(" "), _c("div", {staticClass: "justify-content-end"}, [showSignatureField ? _c("b-form-checkbox", {
            staticClass: "float-right",
            attrs: {disabled: restrictedMode, id: "includesignature", name: "includesignature"},
            model: {
                value: includeSignature, callback: function (e) {
                    includeSignature = e
                }, expression: "includeSignature"
            }
        }, [_v("\n\t\t\t\t\t\t\t\t" + _s(translate("LBL_INCLUDE_SIGNATURE")) + "\n\t\t\t\t\t\t\t")]) : _e()], 1), _v(" "), showSequence && emailSequenceAllowed ? _c("vds-select-email-sequence", {
            attrs: {
                id: "selectEmailSequence",
                selectedRecipient: selectedRecipient,
                isSequenceSelected: sequenceSelected
            }, on: {"vds::sequence::selected": selectedSequence}
        }) : _e()], 1), _v(" "), _c("div", {class: restrictedMode ? "composeEmailSequenceSelected" : ""}, [_c("vds-rte", {
            directives: [{
                name: "validate",
                rawName: "v-validate:description",
                value: {required: !0},
                expression: "{required:true}",
                arg: "description"
            }],
            ref: "composeEditor",
            attrs: {
                content: description,
                "extra-config": emailEditorConfig,
                disabled: disabled || restrictedMode,
                name: fieldName,
                "placeholder-text": translate("LBL_BODY", "Inbox"),
                focus: focusOnEditor,
                cursorPosition: "start"
            },
            on: {
                "vds::sharelink::clicked": function (e) {
                    return showDocumentShareLink()
                }, "update:content": updateContent
            }
        }), _v(" "), sequenceRecord ? _c("vds-selected-sequence-stages", {
            attrs: {sequenceRecord: sequenceRecord},
            on: {"vds::sequence::selected": selectedSequence}
        }) : _e()], 1)])
    }
});
var Vtiger_Component_ConfigListColumnsModal = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter],
    components: {"vds-manage-filter-fields": App.loadComponent("ManageFilterFields")},
    props: {filterId: {type: [String, Number]}},
    data: () => ({filterModel: new Vtiger_Filter_Model, loadModuleFields: !1, filterLoaded: !1}),
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "configListColumns",
                scrollable: "",
                size: "lg",
                "ok-only": !0,
                title: modalTitle
            }
        }, [filterLoaded ? _c("vds-manage-filter-fields", {
            attrs: {
                "filter-details": filterModel,
                "filter-enabled-fields": filterEnabledFields,
                "editing-filter": filterModel.id
            }
        }) : _e(), _v(" "), _c("div", {
            staticClass: "submitForm d-flex w-100 justify-content-start",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn-group btn btn-primary text-white",
            attrs: {type: "button"},
            on: {
                click: function (t) {
                    return t.preventDefault(), saveFilterColumnsOrder()
                }
            }
        }, [_v(_s(translate("LBL_UPDATE_LIST")))])])], 1)
    },
    created() {
        this.getFilterDetails()
    },
    mounted() {
        setTimeout(() => this.loadModuleFields = !0, 500)
    },
    computed: {
        filterEnabledFields() {
            return this.getFilterEnabledFields
        }, modalTitle() {
            return this.translate("LBL_CONFIG_COLUMNS") + " - " + this.filterModel.viewname
        }
    },
    methods: {
        saveFilterColumnsOrder() {
            var t = {module: this.filterModel.module, id: this.filterModel.id, columnslist: this.filterModel.fields};
            this.appStore.request("api_post", {url: "/filters/managelist", params: t}).then(t => {
                this.postSaveFilter(), this.showSuccessNotification(this.translate("JS_LIST_SAVED"))
            }, t => {
                this.showErrorNotification(t)
            })
        }, getFilterDetails: function () {
            this.appStore.request("api_get", {
                url: "/filters",
                params: {module: this.$module, id: this.filterId},
                key: "list_quick_filter_details"
            }).then(t => {
                "object" == typeof t && (this.filterLoaded = !0, this.filterModel = BaseModel.getModuleSpecificModel(this.$module, "Filter", t))
            })
        }, postSaveFilter() {
            this.$root.$emit("bv::hide::modal", "configListColumns"), this.$root.$emit("vds::list::reloadHeaderFields")
        }
    }
});
var Vtiger_Component_EditorRelatedLinks = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixins_ShowModal],
    props: {disabled: {type: Boolean, default: !1}},
    created() {
        this.$_moduleModel_init("Documents")
    },
    computed: {
        moduleModel() {
            return this.$_currentModuleModel
        }
    },
    mounted() {
        this.$off("vds::popup:record::selected"), this.$on("vds::popup:record::selected", (e, t) => {
            this.$emit("vds::link::record::selected", e, t)
        })
    },
    methods: {
        uploadDocuments() {
            this.showModal({
                componentName: App.loadComponent("UploadNewDocument", "Documents"),
                componentData: {moduleName: "Documents", insertDocumentLink: !0},
                modalOnModalMode: !0
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("b-dropdown", {
            attrs: {
                disabled: disabled,
                left: "",
                variant: "btn shadow-none",
                size: "md"
            }
        }, [_c("template", {slot: "button-content"}, [_c("span", {staticClass: "text-dark-0"}, [_c("i", {staticClass: "pr-2 fa fa-link"}), _v(_s(translate("LBL_INSERT_LINKS")))])]), _v(" "), _c("b-dropdown-item", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {module: "EventForms"},
                expression: "{'module': 'EventForms'}",
                modifiers: {PopupReferenceList: !0}
            }], staticClass: "border-bottom"
        }, [_c("i", {staticClass: "py-2 fa fa-eventforms mr-2"}), _v(_s(translate("LBL_INSERT_APPOINTMENT_LINK", "EventForms")) + " ")]), _v(" "), _c("b-dropdown-item", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {module: "Surveys"},
                expression: "{'module': 'Surveys'}",
                modifiers: {PopupReferenceList: !0}
            }], staticClass: "border-bottom"
        }, [_c("i", {staticClass: "py-2 fa fa-surveys mr-2"}), _v(_s(translate("LBL_INSERT_SURVEYS_LINK", "Surveys")))]), _v(" "), _c("b-dropdown-divider", {staticClass: "m-0"}), _v(" "), _c("b-dropdown-header", {staticClass: "border-bottom px-3"}, [_c("i", {staticClass: "fa fa-link mr-2"}), _v(_s(translate("LBL_INSERT_PDF_DOCS", "Settings:Workflows")))]), _v(" "), _c("b-dropdown-item", {
            directives: [{
                name: "showModal",
                rawName: "v-showModal.PopupReferenceList",
                value: {module: "Documents", multiple: !0, q: JSON.stringify([[["filetype", "c", "application/pdf"]]])},
                expression: "{module : 'Documents',multiple: true,q:JSON.stringify([[['filetype', 'c','application/pdf']]])}",
                modifiers: {PopupReferenceList: !0}
            }], staticClass: "border-bottom"
        }, [_c("i", {staticClass: "py-2 fa vicon-documents mr-2"}), _v(_s(translate("LBL_VTIGER_DOCUMENT", "Documents")))]), _v(" "), _c("b-dropdown-item", {
            staticClass: "border-bottom",
            on: {
                click: function (e) {
                    return uploadDocuments()
                }
            }
        }, [_c("i", {staticClass: "py-2 fa fa-upload mr-2"}), _v(_s(translate("LBL_UPLOAD_AND_INSERT", "Documents")))]), _v(" "), _e()], 2)], 1)
    }
});
var Vtiger_Component_ExportData = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    props: {
        record: {type: [Object], required: !1},
        getSelectedRecords: {type: [Function], required: !1},
        listParams: {type: Object, required: !1},
        getSelectAllRecordParams: {type: [Function], required: !1}
    },
    data: () => ({exportType: "csv", exportMode: "ExportSelectedRecords", selectedCurrency: "UserCurrency"}),
    computed: {
        showCurrencyOption() {
            return !(!this.$_currentModuleModel || !this.$_currentModuleModel.isInventoryModule && !this.$_currentModuleModel.isItemModule)
        }
    },
    methods: {
        async getSelectedRecordIds() {
            var t = [];
            return this.record ? t.push(this.record.id) : t = await this.getSelectedRecords(), t
        }, async exportData() {
            var t = "ui-api/records/download?module=" + this.$module + "&type=" + this.exportType;
            if ("csv" === this.exportType) {
                if (t += "&mode=" + this.exportMode, "ExportSelectedRecords" === this.exportMode) {
                    let s = this.getSelectAllRecordParams();
                    if (_.isEmpty(s)) {
                        var e = await this.getSelectedRecordIds();
                        t += "&id=" + JSON.stringify(e)
                    } else {
                        delete s.module, delete s.page, s.orderby = s.sortfield, delete s.sortfield, delete s.viewtype, delete s.page;
                        for (let e in s) t += "&" + e + "=" + s[e]
                    }
                }
                this.listParams && "object" == typeof this.listParams && (this.listParams.page && (t += "&page=" + this.listParams.page), this.listParams.filterid && (t += "&filterid=" + this.listParams.filterid), this.listParams.q && (t += "&q=" + JSON.stringify(this.listParams.q.data)), this.listParams.text && (t += "&text=" + JSON.stringify(this.listParams.text)), this.listParams.tag_params && (t += "&tag_params=" + JSON.stringify(this.listParams.tag_params.data)), this.listParams.sortfield ? t += "&sortfield=" + this.listParams.sortfield + "&sortorder=" + this.listParams.sortorder : t += "&sortfield=modifiedtime&sortorder=desc")
            }
            this.showCurrencyOption && (t += "&selected_currency=" + this.selectedCurrency), this.$root.$emit("bv::hide::modal", "exportData"), window.location.href = t
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "exportData",
                "hide-footer": "",
                lazy: !0,
                size: "md",
                title: translate("LBL_EXPORT")
            }
        }, ["Tasks" === $module || "Events" === $module ? _c("div", {staticClass: "mb-3"}, [_c("div", {staticClass: "d-flex justify-content-start"}, [_c("span", {staticClass: "mr-3 mt-2"}, [_v(_s(translate("LBL_EXPORT_FORMAT")))]), _v(" "), _c("button", {
            staticClass: "btn mr-3",
            class: ["csv" === exportType ? "btn-outline-primary" : "btn-outline-secondary"],
            on: {
                click: function (t) {
                    exportType = "csv"
                }
            }
        }, [_v(_s(translate("LBL_CSV_FILE", "Import")))]), _v(" "), _c("button", {
            staticClass: "btn",
            class: ["ics" === exportType ? "btn-outline-primary" : "btn-outline-secondary"],
            on: {
                click: function (t) {
                    exportType = "ics"
                }
            }
        }, [_v(_s(translate("LBL_ICS_FILE", "Import")))])])]) : _e(), _v(" "), "csv" === exportType ? _c("div", {staticClass: "mb-3"}, [_c("div", {staticClass: "form-group"}, [_c("b-form-radio-group", {
            attrs: {stacked: ""},
            model: {
                value: exportMode, callback: function (t) {
                    exportMode = t
                }, expression: "exportMode"
            }
        }, [_c("b-form-radio", {
            staticClass: "mb-2",
            attrs: {value: "ExportSelectedRecords"}
        }, [_v(_s(translate("LBL_EXPORT_SELECTED_RECORDS")))]), _v(" "), _c("b-form-radio", {
            staticClass: "mb-2",
            attrs: {value: "ExportCurrentPage"}
        }, [_v(_s(translate("LBL_EXPORT_DATA_IN_CURRENT_PAGE")))]), _v(" "), _c("b-form-radio", {
            staticClass: "mb-2",
            attrs: {value: "ExportAllData"}
        }, [_v(_s(translate("LBL_EXPORT_ALL_DATA")))])], 1)], 1)]) : _e(), _v(" "), showCurrencyOption ? _c("div", [_c("div", {staticClass: "mb-2"}, [_v(_s(translate("LBL_EXPORT_LINEITEM_CURRENCY")))]), _v(" "), _c("div", {staticClass: "form-group"}, [_c("b-form-radio-group", {
            model: {
                value: selectedCurrency,
                callback: function (t) {
                    selectedCurrency = t
                },
                expression: "selectedCurrency"
            }
        }, [_c("b-form-radio", {attrs: {value: "UserCurrency"}}, [_v(_s(translate("LBL_EXPORT_USER_CURRENCY")))]), _v(" "), _c("b-form-radio", {attrs: {value: "RecordCurrency"}}, [_v(_s(translate("LBL_EXPORT_RECORD_CURRENCY")))])], 1)], 1)]) : _e(), _v(" "), _c("div", {staticClass: "d-flex justify-content-center mt-4"}, [_c("button", {
            staticClass: "btn btn-primary",
            on: {
                click: function (t) {
                    return exportData()
                }
            }
        }, [_v(_s(translate("LBL_EXPORT")))])])])
    }
});
var Vtiger_Component_FilterConditionRow = App.vtComponent.extend({
    inject: ["$validator"],
    components: {
        "vds-owner-edit": App.loadComponent("OwnerEdit"),
        "vds-coowner-edit": App.loadComponent("CoownerEdit"),
        "vds-ownergroup-edit": App.loadComponent("OwnergroupEdit"),
        "vds-rich-text-edit": App.loadComponent("RichTextEdit"),
        "vds-multicurrency-edit": App.loadComponent("MulticurrencyEdit"),
        "vds-currency-list-edit": App.loadComponent("CurrencyListEdit"),
        "vds-phone-edit": App.loadComponent("PhoneEdit")
    },
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_FilterUtils],
    render: function anonymous() {
        with (this) return _c("div", [_t("default", [_c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-3 col-form-label"}, [_v(_s(translate("LBL_SELECT_FIELD")))]), _v(" "), _c("div", {staticClass: "col-9 select2Container"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required: true}"
            }],
            ref: "selectField",
            staticClass: "form-control w-100",
            attrs: {name: "select field", "data-value": condition.columnname},
            model: {
                value: condition.columnname, callback: function (e) {
                    $set(condition, "columnname", e)
                }, expression: "condition.columnname"
            }
        }, [_c("option", {attrs: {value: ""}}, [_v(_s(translate("LBL_SELECT_OPTION")))]), _v(" "), _l(groupedFields, (function (e, i) {
            return _c("optgroup", {attrs: {label: translate(i, $module)}}, _l(e, (function (e, i) {
                return _c("option", {
                    domProps: {
                        value: i,
                        selected: checkSelectedFilterField(i)
                    }
                }, [i.indexOf(".") > -1 ? [_v(_s(getReferenceFieldLabel(i)) + " - ")] : _e(), _v("\n\t\t\t\t\t\t\t" + _s(translate(e.label, $module)) + "\n\t\t\t\t\t\t")], 2)
            })), 0)
        }))], 2), _v(" "), _c("div", {staticClass: "text-danger position-absolute text-truncate"}, [_v(_s(errors.first("select field")))])], 1)]), _v(" "), hasMetricFieldCondition && fieldModel ? _c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-3 col-form-label"}, [_v(" ")]), _v(" "), _c("div", {staticClass: "col-9 select2Container"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required: true}"
            }],
            staticClass: "form-control w-100",
            attrs: {name: "select field", options: fieldModel.type.picklistValues, "empty-option": !1},
            on: {change: metricValueChange},
            model: {
                value: metricpicklistValueInfo.picklist, callback: function (e) {
                    $set(metricpicklistValueInfo, "picklist", e)
                }, expression: "metricpicklistValueInfo.picklist"
            }
        }), _v(" "), _c("div", {staticClass: "text-danger position-absolute text-truncate"}, [_v(_s(errors.first("select field")))])], 1)]) : _e(), _v(" "), _c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-3 col-form-label"}, [_v(_s(translate("LBL_CHOOSE_FILTER_CONDITIONS")))]), _v(" "), _c("div", {staticClass: "col-9"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required: true}"
            }],
            ref: "comparator",
            staticClass: "form-control w-100",
            attrs: {name: "condition", "empty-option": !condition.columnname},
            model: {
                value: getComparator, callback: function (e) {
                    getComparator = e
                }, expression: "getComparator"
            }
        }, _l(getComparators, (function (e, i) {
            return _c("option", {
                key: i,
                domProps: {value: i, selected: checkSelectedComparator(i)}
            }, [_v(_s(translate(e, $module)))])
        })), 0), _v(" "), _c("div", {staticClass: "text-danger position-absolute text-truncate"}, [_v(_s(errors.first("condition")))])], 1)]), _v(" "), isEmptyValueComparator ? _e() : _c("div", {staticClass: "form-group row"}, [_c("label", {staticClass: "col-3 col-form-label"}, [_v(" ")]), _v(" "), _c("div", {staticClass: "col-9"}, [_c(getFilterComponent, _b({
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: getFilterValidators,
                expression: "getFilterValidators"
            }],
            key: getValueKey,
            tag: "component",
            attrs: {validators: validators, name: "value", "data-vv-scope": getValueKey, field: fieldModel},
            model: {
                value: getValue, callback: function (e) {
                    getValue = e
                }, expression: "getValue"
            }
        }, "component", setFilterFieldComponentData, !1)), _v(" "), _c("div", {staticClass: "text-danger position-absolute text-truncate"}, [_v(_s(errors.first("value", getValueKey)))])], 1)])], {
            condition: condition,
            filterRecord: conditionFilterRecord,
            groupedFields: groupedFields,
            getComparators: getComparators
        })], 2)
    },
    props: ["condition", "filterEnabledFields", "showOwnerExtraFilters"],
    data() {
        return {
            conditionFilterRecord: BaseModel.getModuleSpecificModel(this.$module, "Record", {}),
            usersAndGroups: {},
            hasMetricFieldCondition: !1,
            metricpicklistValueInfo: {picklist: "", comparator: "", time: ""},
            validators: {},
            allowUsersOfGroup: !0,
            emptyValue: !1,
            fieldModel: {}
        }
    },
    created() {
        let e = function () {
        };
        e = this.$watch(() => ({loaded: this.$_currentModuleModel._loaded}), i => {
            i && (e(), this.init())
        }, {immediate: !0}), this.usersAndGroups = this.appStore.get("users_groups_info", !1), _.isUndefined(this.usersAndGroups) && this.appStore.request("api_get", {
            url: "records",
            params: {module: "Users", shared: "1"},
            key: "users_groups_info"
        }).then(e => {
            this.usersAndGroups = e
        })
    },
    computed: {
        getComparator: {
            get() {
                if (this.hasMetricFieldCondition) {
                    if ("" == this.metricpicklistValueInfo.comparator || void 0 === this.metricpicklistValueInfo.comparator) {
                        let e = this.getComparators;
                        this.condition.comparator = this.fieldModel.metriccomparator, this.metricpicklistValueInfo.comparator = e ? Object.keys(e)[0] : ""
                    }
                    return this.metricpicklistValueInfo.comparator
                }
                if ("" == this.condition.comparator || void 0 === this.condition.comparator) {
                    let e = this.getComparators;
                    this.condition.comparator = e ? Object.keys(e)[0] : ""
                }
                return this.condition.comparator
            }, set(e) {
                this.hasMetricFieldCondition ? (this.metricpicklistValueInfo.comparator = e, this.condition.value = JSON.stringify(this.metricpicklistValueInfo)) : this.condition.comparator = e
            }
        }, getValue: {
            get() {
                return this.isDropdownField ? this.getPicklistValue : this.isDateRangeField ? this.getDateRangeValue : this.isDateField ? this.getDateValue : this.isTimeField ? this.getTimeValue : this.isOwnerField || this.isCoownerField ? this.getOwnerValue : this.isOwnerGroupField ? this.getOwnerGroupValue : this.hasMetricFieldCondition ? this.getMetricFieldValue : this.condition.value
            }, set(e) {
                this.isDropdownField ? this.getPicklistValue = e : this.isDateField ? this.getDateValue = e : this.isTimeField ? this.getTimeValue = e : this.isDateRangeField ? this.getDateRangeValue = e : this.isOwnerField || this.isCoownerField ? this.getOwnerValue = e : this.isOwnerGroupField ? this.getOwnerGroupValue = e : this.hasMetricFieldCondition ? this.getMetricFieldValue = e : this.condition.value = e
            }
        }, setFilterFieldComponentData: {
            get() {
                if (this.isDropdownField) {
                    let e = {
                        multiple: this.isMultipleEnabled,
                        name: this.condition.columnname,
                        options: this.updateOptions(),
                        emptyOption: !1
                    };
                    return "multipicklist" == this.fieldModel.fieldType && ["equal", "notequal"].includes(this.condition.comparator) && (e.maximumSelectionLength = 3), e
                }
                return this.isDateRangeField || this.isDateField || this.isTimeField ? {name: this.condition.columnname} : this.isOwnerField ? {
                    multiple: !0,
                    fieldName: this.condition.columnname,
                    field: this.filterEnabledFields[this.condition.columnname],
                    extraOptions: this.getOwnerExtraFilterOptions,
                    usersOfGroup: this.allowUsersOfGroup,
                    columnCondition: this.condition
                } : this.isCoownerField ? {
                    multiple: !0,
                    fieldName: this.condition.columnname,
                    field: this.filterEnabledFields[this.condition.columnname],
                    columnCondition: this.condition,
                    maximumSelectionLength: 0
                } : this.isOwnerGroupField ? {
                    multiple: !0,
                    fieldName: this.condition.columnname,
                    field: this.filterEnabledFields[this.condition.columnname],
                    extraOptions: this.getOwnerGroupExtraFilterOptions,
                    columnCondition: this.condition,
                    emptyOption: !1
                } : this.fieldModel && "richtext" == this.fieldModel.fieldType ? {} : this.fieldModel && "multicurrency" == this.fieldModel.fieldType ? {
                    fieldName: this.condition.columnname,
                    field: this.filterEnabledFields[this.condition.columnname],
                    record_currency_id: this.$currentUser.currency_id,
                    currencyChange: !1
                } : this.fieldModel && "phone" == this.fieldModel.fieldType.toLowerCase() && ["equal", "notequal"].indexOf(this.getComparator) >= 0 ? {
                    fieldName: this.condition.columnname,
                    field: this.filterEnabledFields[this.condition.columnname]
                } : {type: "text", class: "form-control"}
            }
        }, getFilterComponent() {
            return this.isDropdownField ? "v-select2" : this.isDateRangeField ? "vds-daterange-picker" : this.isDateField ? "vds-datepicker" : this.isTimeField ? "vds-timepicker" : this.isOwnerField ? "vds-owner-edit" : this.isCoownerField ? "vds-coowner-edit" : this.isOwnerGroupField ? "vds-ownergroup-edit" : this.fieldModel && "richtext" == this.fieldModel.fieldType ? "vds-rich-text-edit" : this.fieldModel && "multicurrency" == this.fieldModel.fieldType ? "vds-multicurrency-edit" : this.fieldModel && "phone" == this.fieldModel.fieldType.toLowerCase() && ["equal", "notequal"].indexOf(this.getComparator) >= 0 ? "vds-phone-edit" : "vds-custom-input"
        }, getFilterValidators() {
            let e, i = {},
                t = ["equal", "notequal", "lessthan", "greaterthan", "lessthanorequal", "greaterthanorequal"], l = !1,
                s = !1, o = !1;
            if (!this.fieldModel || "currency" != this.fieldModel.fieldType && "multicurrency" != this.fieldModel.fieldType || (s = !0), this.fieldModel && this.fieldModel.typeofdata && !this.fieldModel.isReferenceField) {
                let e = this.fieldModel.typeofdata.split("~");
                ["N", "I", "NN"].includes(e[0]) && !s && (l = !0), "METRICPICKLIST" === e[0] && (o = !0, i.required = !0)
            }
            if (o && this.condition.value) {
                e = JSON.parse(this.condition.value).comparator
            }
            return (["lessthanhoursbefore", "lessthanhourslater", "morethanhoursbefore", "morethanhourslater", "lessthandaysago", "morethandaysago", "inlessthan", "inmorethan", "daysago", "dayslater", "weekdayslater", "morethanweekdayslater", "lessthanweekdayslater", "weekdaysago", "morethanweekdaysago", "lessthanweekdaysago"].includes(this.condition.comparator) || l && t.includes(this.condition.comparator) || t.includes(e)) && ("double" != this.fieldModel.fieldType && "percentage" != this.fieldModel.fieldType ? i.numeric = !0 : i.decimal = this.fieldModel.validator), this.fieldModel && this.fieldModel.type && "email" === this.fieldModel.type.name && ["equal", "notequal"].includes(this.condition.comparator) && (i.email = !0), this.fieldModel && this.fieldModel.type && ("currency" === this.fieldModel.fieldType || "multicurrency" === this.fieldModel.fieldType) && (i.decimal = !0, i.currency = !0), i
        }, isEmptyValueComparator() {
            return !!(BaseFieldModel.getDateCustomComparators().includes(this.condition.comparator) || ["isempty", "isnotempty"].includes(this.condition.comparator) || this.emptyValue)
        }, isMultipleEnabled() {
            return "boolean" != this.fieldModel.type.name
        }, isDateRangeField: {
            get() {
                return !(!this.fieldModel || !["date", "datetime"].includes(this.fieldModel.type.name) || "between" != this.condition.comparator)
            }
        }, isDateField: {
            get() {
                return !(!this.fieldModel || !["date", "datetime"].includes(this.fieldModel.type.name) || BaseFieldModel.getDateSpecialComparators().includes(this.condition.comparator))
            }
        }, isTimeField: {
            get() {
                return !(!this.fieldModel || !["time"].includes(this.fieldModel.type.name))
            }
        }, isDropdownField: {
            get() {
                return !this.hasMetricFieldCondition && (!!this.fieldModel && ["picklist", "metricpicklist", "multipicklist", "boolean", "fileLocationType", "currencyList"].includes(this.fieldModel.type.name))
            }
        }, isOwnerField: {
            get() {
                return !!this.fieldModel && (!("reference" != this.fieldModel.type.name || !this.fieldModel.type.relatedModules.includes("Users")) || ["owner"].includes(this.fieldModel.type.name))
            }
        }, isCoownerField: {
            get() {
                return !!this.fieldModel && ["coowner"].includes(this.fieldModel.type.name)
            }
        }, isOwnerGroupField: {
            get() {
                return !!this.fieldModel && ["ownergroup"].includes(this.fieldModel.type.name)
            }
        }, getComparators() {
            if (!this.fieldModel) return {};
            let e = this.fieldModel.getFilterOptions();
            return this.hasMetricFieldCondition ? this.metricpicklistValueInfo.comparator in e || (this.condition.comparator = this.fieldModel.metriccomparator, this.metricpicklistValueInfo.comparator = Object.keys(e)[0]) : this.condition.comparator in e || (this.condition.comparator = Object.keys(e)[0]), e
        }, groupedFields() {
            let e = {};
            for (let i in this.filterEnabledFields) {
                let t = this.filterEnabledFields[i];
                if (!1 !== t.allowedinfilters) {
                    if ("multicurrency" == t.fieldType && "1" == t.displaytype) {
                        let e = i.replace("_currency_value", ""), l = t.moduleModel.getField(e);
                        l && (t = l, i = l.name)
                    }
                    if (i.includes(".")) {
                        let l = i.split("."),
                            s = this.filterEnabledFields[l[0]] ? this.filterEnabledFields[l[0]].label : l[0];
                        3 == _.size(l) && this.filterEnabledFields[l[0]] && (s = s + " - " + this.translate(l[1], l[1])), e[s] || (e[s] = {}), e[s][i] = t
                    } else {
                        let l = this.translate(this.$module) + " fields";
                        e[l] || (e[l] = {}), e[l][i] = t
                    }
                }
            }
            return e
        }, getMetricFieldValue: {
            get() {
                return this.metricpicklistValueInfo.time
            }, set(e) {
                this.metricpicklistValueInfo.time = e, this.condition.value = JSON.stringify(this.metricpicklistValueInfo)
            }
        }, getDateRangeValue: {
            get() {
                return this.condition.value
            }, set(e) {
                this.condition.value = e
            }
        }, getDateValue: {
            get() {
                return this.condition.value.split(" ")[0]
            }, set(e) {
                this.condition.value = e
            }
        }, getTimeValue: {
            get() {
                return this.condition.value
            }, set(e) {
                this.condition.value = e
            }
        }, getOwnerValue: {
            get() {
                if (!this.usersAndGroups) return;
                let e = this.filterEnabledFields[this.condition.columnname];
                var i = this.condition.value;
                let t = [];
                if (e.isCustomField) return i.split(",");
                {
                    let e = [], l = [];
                    for (let i in this.usersAndGroups.Users) e.push(i.split(":")[1]), l.push(this.usersAndGroups.Users[i]);
                    for (let i in this.usersAndGroups.Groups) e.push(i.split(":")[1]), l.push(this.usersAndGroups.Groups[i]);
                    if (i) {
                        i = i.split(",");
                        for (let s in i) {
                            let o = i[s];
                            0 === o.indexOf("$") ? t.push(o) : l.indexOf(o) > -1 && t.push(e[l.indexOf(o)])
                        }
                    }
                }
                return t
            }, set(e) {
                let i = [];
                if (this.filterEnabledFields[this.condition.columnname].isCustomField) i = e; else {
                    this.condition.value;
                    let t = [], l = [];
                    for (let e in this.usersAndGroups.Users) t.push(e.split(":")[1]), l.push(this.usersAndGroups.Users[e]);
                    for (let e in this.usersAndGroups.Groups) t.push(e.split(":")[1]), l.push(this.usersAndGroups.Groups[e]);
                    if (e) {
                        let s = e;
                        for (let e in s) {
                            let o = s[e];
                            0 === o.indexOf("$") ? i.push(o) : t.indexOf(o) > -1 && i.push(l[t.indexOf(o)])
                        }
                    }
                }
                this.condition.value = i.join(",")
            }
        }, getOwnerGroupValue: {
            get() {
                if (!this.usersAndGroups) return;
                var e = this.condition.value;
                let i = [], t = [], l = [];
                for (let e in this.usersAndGroups.Groups) t.push(e.split(":")[1]), l.push(this.usersAndGroups.Groups[e]);
                if (e && e.length) {
                    e = e.split(",");
                    for (let s in e) {
                        let o = e[s];
                        0 === o.indexOf("$") ? i.push(o) : l.indexOf(o) > -1 && i.push(t[l.indexOf(o)])
                    }
                }
                return i
            }, set(e) {
                let i = [], t = [], l = [];
                for (let e in this.usersAndGroups.Groups) t.push(e.split(":")[1]), l.push(this.usersAndGroups.Groups[e]);
                if (e) for (let s in e) {
                    let o = e[s];
                    0 === o.indexOf("$") ? i.push(o) : t.indexOf(o) > -1 && i.push(l[t.indexOf(o)])
                }
                this.condition.value = i.join(",")
            }
        }, getPicklistValue: {
            get() {
                if (this.fieldModel && ["picklist", "metricpicklist", "multipicklist", "fileLocationType"].includes(this.fieldModel.fieldType)) {
                    let e = this.condition.value.split(",");
                    if ("multipicklist" == this.fieldModel.fieldType && ["equal", "notequal"].includes(this.condition.comparator)) {
                        let i = this.setFilterFieldComponentData;
                        e.splice(i.maximumSelectionLength, e.length - i.maximumSelectionLength), this.condition.value = e.join(",")
                    }
                    return e
                }
                return this.condition.value
            }, set(e) {
                _.isArray(e) ? this.condition.value = e.join(",") : this.condition.value = e
            }
        }, getOwnerExtraFilterOptions() {
            if (!1 === this.showOwnerExtraFilters) return {Users: []};
            let e = {};
            return e.Users = [{
                label: this.translate("LBL_CURRENT_USER"),
                value: "$current-user$"
            }, {
                label: this.translate("LBL_MY_GROUPS", "Users"),
                value: "$my-groups$"
            }, {label: this.translate("LBL_MY_REPORTEES"), value: "$my-reportees$"}], e
        }, getOwnerGroupExtraFilterOptions() {
            if (!1 === this.showOwnerExtraFilters) return {Groups: []};
            let e = {};
            return e.Groups = [{label: this.translate("LBL_MY_GROUPS", "Users"), value: "$my-groups$"}], e
        }, getValueKey() {
            let e;
            return this.condition.columnname ? (e = this.condition.columnname, this.fieldModel && "multipicklist" == this.fieldModel.fieldType && (e += "_" + this.condition.comparator), e += "_" + parseInt(100 * this.condition.key)) : e = Math.random(), e
        }
    },
    activated() {
        "richtext" == this.fieldModel.fieldType && (this.emptyValue = !0, this.$nextTick(() => {
            this.emptyValue = !1
        }, 300))
    },
    watch: {
        conditionFilterRecord: {
            handler(e) {
                Vue.set(this.condition, "value", e.get(this.condition.columnname))
            }, deep: !0
        }, "condition.columnname": {
            handler(e, i) {
                this.init(e), this.isEmptyValueComparator
            }, deep: !0
        }, filterEnabledFields() {
            this.calculateFieldModel()
        }
    },
    methods: {
        init(e) {
            this.calculateFieldModel(), this.fieldModel && "metricpicklist" == this.fieldModel.type.name && null != this.fieldModel.metriccomparator ? (this.hasMetricFieldCondition = !0, this.condition.value && (this.metricpicklistValueInfo = JSON.parse(this.condition.value)), e && (this.condition.value = "", this.condition.comparator = this.fieldModel.metriccomparator)) : (this.condition.value = e ? "" : this.condition.value, this.hasMetricFieldCondition = !1)
        }, calculateFieldModel() {
            let e = this.groupedFields;
            for (let i in e) {
                let t = e[i];
                if (this.condition.columnname in t) return void (this.fieldModel = t[this.condition.columnname])
            }
            this.fieldModel = this.filterEnabledFields[this.condition.columnname]
        }, updateOptions() {
            if (this.fieldModel && ["picklist", "metricpicklist", "multipicklist", "fileLocationType", "currencyList"].includes(this.fieldModel.type.name)) {
                if ("currencyList" == this.fieldModel.fieldType) {
                    let i = this.fieldModel.currencyList, t = [];
                    for (var e in i) {
                        let l = i[e];
                        t.push({value: l, label: l}), t[l] = l
                    }
                    return t
                }
                return this.fieldModel.type.picklistValues
            }
            if ("boolean" == this.fieldModel.type.name) return [{
                label: this.translate("LBL_ENABLED"),
                value: 1
            }, {label: this.translate("LBL_DISABLED"), value: 0}];
            this.fieldModel.typeofdata.indexOf("TAG")
        }, checkSelectedFilterField(e) {
            return this.condition.columnname == e || this.condition.columnname + "_currency_value" == e
        }, checkSelectedComparator(e) {
            if (this.hasMetricFieldCondition) if (this.condition.value) {
                if (e == JSON.parse(this.condition.value).comparator) return !0
            } else this.metricpicklistValueInfo.comparator = e, this.condition.value = JSON.stringify(this.metricpicklistValueInfo), this.condition.comparator = this.fieldModel.metriccomparator; else if (this.condition.comparator == e) return !0;
            return !1
        }, metricValueChange(e) {
            this.metricpicklistValueInfo.picklist = e, this.condition.value = JSON.stringify(this.metricpicklistValueInfo)
        }
    }
});
var Vtiger_Component_FilterConditions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Validators],
    inject: ["goToStep", "validateAndSaveFilter", "$validator"],
    components: {"vds-filter-condition-row": App.loadComponent("FilterConditionRow")},
    render: function anonymous() {
        with (this) return _c("div", [_t("default", [_l(getConditions, (function (t, e) {
            return _c("div", {staticClass: "my-4"}, [_c("strong", [_v(_s(translate(t.label, "Vtiger")))]), _v("\n                     (\n                        "), "all" == e ? _c("span", [_v(_s(translate("LBL_ALL_CONDITIONS_DESC")))]) : _c("span", [_v(_s(translate("LBL_ANY_CONDITIONS_DESC")))]), _v("\n                        )\n\t\t\t\t\t"), _c("div", {staticClass: "mt-2"}, [_c("div", _l(t.advancedfilter, (function (t, i) {
                return _c("div", {
                    key: t.key,
                    staticClass: "p-3 border mb-3 position-relative"
                }, [_c("span", {
                    staticClass: "position-absolute closeFilterColumns c-pointer",
                    on: {
                        click: function (t) {
                            return removeBlock(i, e)
                        }
                    }
                }, [_c("i", {staticClass: "fa fa-times-circle"})]), _v(" "), _c("vds-filter-condition-row", {
                    attrs: {
                        condition: t,
                        "filter-enabled-fields": filterEnabledFields,
                        "show-owner-extra-filters": showOwnerExtraFilters
                    }
                })], 1)
            })), 0), _v(" "), _c("button", {
                staticClass: "btn btn-outline-secondary btn-block",
                on: {
                    click: function (t) {
                        return t.preventDefault(), addNewBlock(e)
                    }
                }
            }, [_v("+ " + _s(translate("LBL_ADD_CONDITION")))])])])
        })), _v(" "), showFooter ? _c("div", {staticClass: "d-flex justify-content-center"}, [_c("button", {
            staticClass: "btn btn-outline-secondary mr-3",
            attrs: {id: "back"},
            on: {
                click: function (t) {
                    return goToStep("filter-configure-view")
                }
            }
        }, [_c("i", {staticClass: "fa fa-angle-left mr-2"}), _v(_s(translate("LBL_BACK")))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary mr-3",
            attrs: {id: "save"},
            on: {click: validateAndSaveFilter}
        }, [_v(_s(translate("LBL_SAVE")))]), _v(" "), _c("button", {
            staticClass: "btn btn-outline-secondary",
            attrs: {id: "next"},
            on: {
                click: function (t) {
                    return goToStep("filter-share-view")
                }
            }
        }, [_v(_s(translate("LBL_NEXT"))), _c("i", {staticClass: "fa fa-angle-right ml-2"})])]) : _e()], {conditions: getConditions})], 2)
    },
    props: {
        filterDetails: Object,
        filterEnabledFields: Object,
        showFooter: {type: Boolean, default: !0},
        showOwnerExtraFilters: {type: Boolean, default: !0}
    },
    computed: {
        getConditions() {
            let t = {
                all: {label: "LBL_ALL_CONDITIONS", advancedfilter: []},
                any: {label: "LBL_ANY_CONDITIONS", advancedfilter: []}
            };
            if (this.filterDetails.advancedfilter[1]) {
                let i = this.filterDetails.advancedfilter[1];
                for (var e in i.columns) {
                    let t = i.columns[e];
                    t.key || (t.key = Math.random(10, 1e3))
                }
                t.all.advancedfilter = i.columns
            }
            if (this.filterDetails.advancedfilter[2]) {
                let i = this.filterDetails.advancedfilter[2];
                for (var e in i.columns) {
                    let t = i.columns[e];
                    t.key || (t.key = Math.random(10, 1e3))
                }
                t.any.advancedfilter = i.columns
            }
            return t
        }
    },
    methods: {
        addNewBlock: function (t) {
            if ("all" == t) {
                let t = {column_condition: "and", columnname: "", comparator: "", value: ""},
                    e = this.filterDetails.advancedfilter[1].columns.length;
                if (e > 0) {
                    let t = this.filterDetails.advancedfilter[1].columns[e - 1];
                    t.column_condition = "and", Vue.set(this.filterDetails.advancedfilter[1].columns, e - 1, t)
                }
                Vue.set(this.filterDetails.advancedfilter[1].columns, e, t)
            } else if ("any" == t) {
                let t = {column_condition: "or", columnname: "", comparator: "", value: ""},
                    e = this.filterDetails.advancedfilter[2].columns.length;
                if (e > 0) {
                    let t = this.filterDetails.advancedfilter[2].columns[e - 1];
                    t.column_condition = "or", Vue.set(this.filterDetails.advancedfilter[2].columns, e - 1, t)
                }
                Vue.set(this.filterDetails.advancedfilter[1], "condition", "and"), Vue.set(this.filterDetails.advancedfilter[2].columns, e, t)
            }
        }, removeBlock: function (t, e) {
            this.$validator.pause(), "all" == e ? this.filterDetails.advancedfilter[1].columns.splice(t, 1) : "any" == e && this.filterDetails.advancedfilter[2].columns.splice(t, 1), this.$emit("update:filterConditionChanged", !0), Vue.nextTick(() => {
                this.$validator.resume()
            })
        }
    }
});
var Vtiger_Component_FilterConfigureView = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_FilterUtils],
    inject: ["goToStep", "updateFilterFields"],
    components: {"vds-manage-filter-fields": App.loadComponent("ManageFilterFields")},
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "mb-4"}, [_c("div", {staticClass: "form-check-inline mr-5"}, [_c("vds-checkbox", {
            attrs: {label: translate("LBL_SET_AS_DEFAULT")},
            model: {
                value: filterSetDefault, callback: function (e) {
                    filterSetDefault = e
                }, expression: "filterSetDefault"
            }
        })], 1), _v(" "), _c("div", {staticClass: "form-check-inline"}, [_c("vds-checkbox", {
            attrs: {label: translate("LBL_LIST_IN_METRICS")},
            model: {
                value: filterSetMetrics, callback: function (e) {
                    filterSetMetrics = e
                }, expression: "filterSetMetrics"
            }
        })], 1)]), _v(" "), _c("div", {staticClass: "mb-4"}, [_c("strong", [_v(_s(translate("LBL_DEFAULT_SORT_ORDER")))]), _v(" "), _c("div", {staticClass: "row my-3"}, [_c("div", {staticClass: "col-6"}, [_c("v-select2", {
            model: {
                value: filterDetails.sortfield,
                callback: function (e) {
                    $set(filterDetails, "sortfield", e)
                },
                expression: "filterDetails.sortfield"
            }
        }, _l(sortOrderFields, (function (e, t) {
            return _c("option", {
                domProps: {
                    value: t,
                    selected: t == filterDetails.sortfield
                }
            }, [t.indexOf(".") > -1 ? [_v(_s(getReferenceFieldLabel(t)) + " - ")] : _e(), _v("\n\t\t\t\t\t\t\t" + _s(translate(e, $module)) + "\n\t\t\t\t\t\t")], 2)
        })), 0)], 1), _v(" "), _c("div", {staticClass: "col-6"}, [_c("v-select2", {
            model: {
                value: filterDetails.sortorder,
                callback: function (e) {
                    $set(filterDetails, "sortorder", e)
                },
                expression: "filterDetails.sortorder"
            }
        }, [_c("option", {
            attrs: {value: "DESC"},
            domProps: {selected: "DESC" == filterDetails.sortorder}
        }, [_v(_s(translate("LBL_DESCENDING")))]), _v(" "), _c("option", {
            attrs: {value: "ASC"},
            domProps: {selected: "ASC" == filterDetails.sortorder}
        }, [_v(_s(translate("LBL_ASCENDING")))])])], 1)])]), _v(" "), _c("vds-manage-filter-fields", {
            attrs: {
                filterDetails: filterDetails,
                filterEnabledFields: filterEnabledFields,
                "editing-filter": editingFilter
            }
        }), _v(" "), _c("div", {staticClass: "text-center"}, [_c("button", {
            staticClass: "btn btn-outline-secondary",
            on: {
                click: function (e) {
                    return goToNextStep()
                }
            }
        }, [_v(_s(translate("LBL_NEXT"))), _c("i", {staticClass: "fa fa-arrow-right ml-2"})])])], 1)
    },
    props: ["filterDetails", "filterEnabledFields", "editingFilter"],
    computed: {
        sortOrderFields: function () {
            let e = {}, t = this.getFilterSkippedFields();
            for (let i in this.allowedFilterFields) {
                let l = this.allowedFilterFields[i];
                t.indexOf(i) >= 0 || (e[i] = this.translate(l.label, this.$module))
            }
            return this.filterDetails.sortfield || Vue.set(this.filterDetails, "sortfield", "modifiedtime"), e
        }, filterSetMetrics: {
            get() {
                return "1" == this.filterDetails.setmetrics
            }, set(e) {
                this.filterDetails.setmetrics = e
            }
        }, filterSetDefault: {
            get() {
                return this.filterDetails.setdefault
            }, set(e) {
                this.filterDetails.setdefault = e
            }
        }, allowedFilterFields() {
            var e = {};
            for (let t in this.filterEnabledFields) {
                let i = this.filterEnabledFields[t];
                "6" != i.displaytype && (e[t] = i)
            }
            return e
        }
    },
    methods: {
        goToNextStep() {
            this.filterDetails.fields && this.filterDetails.fields.length > 0 ? this.goToStep("filter-conditions") : this.showErrorNotification(this.translate("JS_PLEASE_SELECT_ATLEAST_ONE_OPTION"))
        }, getFilterSkippedFields() {
            let e = this._getModuleDesc(this.$module).getMetricFieldFilterableFields();
            return Object.keys(e)
        }, getFilterColumnSkipFields() {
            let e = this._getModuleDesc(this.$module).getMetricFieldFilterableFields(), t = [];
            for (var i in e) e[i].allowedinselectcolumns || t.push(i);
            return t
        }, clearSearchString() {
            this.searchKey = ""
        }
    }
});
var Vtiger_Component_FilterEditOptions = App.vtComponent.extend({
    components: {
        "vds-list-filter-edit": App.loadComponent("ListFilterEdit"),
        "vds-delete-confirmation": App.loadComponent("DeleteConfirmation")
    },
    mixins: [Vtiger_Mixin_Filter],
    render: function anonymous() {
        with (this) return _c("div", [showFilterEdit ? _c("div", [showFilterEdit ? _c("vds-list-filter-edit", {
            attrs: {
                "editing-filter": editingFilter,
                mode: editMode,
                filterEnabledFields: getFilterEnabledFields
            }, model: {
                value: showFilterEdit, callback: function (t) {
                    showFilterEdit = t
                }, expression: "showFilterEdit"
            }
        }) : _e()], 1) : _e()])
    },
    props: {
        editingFilter: "",
        showEditOptionsProp: !1,
        filterType: "",
        isSharedFilter: !1,
        isShareEnableFilter: {type: Boolean, default: !0},
        isDuplicateEnableFilter: {type: Boolean, default: !0},
        editModeProp: {type: String, default: "create"},
        module: {type: String, default: this.$module}
    },
    data() {
        return {
            editMode: this.editModeProp,
            showEditOptions: !1,
            showFilterEdit: this.showEditOptionsProp,
            loadModuleFields: !1,
            nextStepShown: !1
        }
    },
    computed: {
        deleteConfirmationMessage() {
            return this.isSharedFilter ? this.translate("JS_SHARED_LIST_DELETE_CONFIRMATION") : this.translate("JS_LBL_ARE_YOU_SURE_YOU_WANT_TO_DELETE")
        }, getModalTitle() {
            return this.translate("LBL_LIST_ACTIONS")
        }, getEditListHeader() {
            return this.translate("LBL_EDIT_CUSTOM")
        }, getDeleteListHeader() {
            return this.translate("LBL_DELETE_LIST")
        }
    },
    mounted() {
        this.editingFilter ? this.showEditOptions = !0 : this.showFilterEdit = !0, setTimeout(() => this.loadModuleFields = !0, 500)
    },
    watch: {
        showEditOptions: function (t) {
            this.showFilterEdit || this.nextStepShown || this.$emit("update:showEditOptionsProp", t)
        }, showFilterEdit: function (t) {
            this.$emit("update:showEditOptionsProp", t)
        }, nextStepShown: function () {
            this.$emit("update:showEditOptionsProp", !0)
        }
    },
    methods: {
        showModalController() {
        }
    }
});
var Vtiger_Component_FilterShareActions = App.vtComponent.extend({
    functional: !0, render(t, {parent: n}) {
        let e = t(!1);
        "share" != n.mode && (e = t("button", {
            class: "btn btn-outline-secondary mr-3", on: {
                click: function () {
                    n.goToStep("filter-conditions")
                }
            }
        }, [t("i", {class: "fa fa-angle-left mr-2"}), n.translate("LBL_BACK")]));
        let a = t("button", {
            class: "btn btn-primary",
            on: {click: n.validateAndSaveFilter}
        }, [n.translate("LBL_SAVE_AND_SHARE")]);
        return t("div", {class: "d-flex justify-content-center"}, [e, a])
    }
});
var Vtiger_Component_FilterShareView = App.vtComponent.extend({
    components: {"vds-filter-share-actions": App.loadComponent("FilterShareActions")},
    inject: ["goToStep", "validateAndSaveFilter"],
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {class: hideLabel ? "" : "my-4"}, [hideLabel ? _e() : _c("strong", [_v(_s(translate("LBL_ADD_USERS_ROLES")))]), _v(" "), _c("div", {staticClass: "form-inline has-search w-100 d-flex"}, [_c("div", {
            staticClass: "col-12 p-0 mb-2",
            class: hideLabel ? "" : "mt-3"
        }, [_c("div", {staticClass: "d-flex"}, [_c("v-select2", {
            ref: "sharedToSelector",
            staticClass: "form-control w-100",
            attrs: {name: "sharedTo", multiple: !0},
            model: {
                value: sharedTo, callback: function (e) {
                    sharedTo = e
                }, expression: "sharedTo"
            }
        }, _l(availableMembers, (function (e, s) {
            return _c("optgroup", {attrs: {label: s}}, _l(e, (function (e, s) {
                return _c("option", {
                    key: s,
                    attrs: {disabled: !(!sharedTo.includes("All::Users") || "All::Users" == s)},
                    domProps: {value: s, selected: sharedTo.includes(s)}
                }, [_v(_s(e))])
            })), 0)
        })), 0)], 1)])]), _v(" "), _l(sharedMembers, (function (e, s) {
            return hideQuickOption ? _e() : _c("div", [sharedMembers[s].length ? _c("strong", [_v(_s(s))]) : _e(), _v(" "), _c("div", [_l(e, (function (e) {
                return e.hide ? _e() : [_c("vds-quick-option", {
                    key: e.id,
                    staticClass: "mr-2 d-inline-block",
                    attrs: {data: e.id, pill: !0, "select-icon": "fa-times"},
                    on: {selected: deSelectMember}
                }, [_v(_s(e.label))])]
            }))], 2)])
        }))], 2), _v(" "), _c("vds-filter-share-actions")], 1)
    },
    props: ["filterDetails", "mode", "hideLabel", "hideQuickOption"],
    data: () => ({availableMembers: {All: {}, Users: {}, Groups: {}, Roles: {}, RoleAndSubordinates: {}}}),
    computed: {
        sharedTo: {
            get() {
                return this.filterDetails.sharemembers
            }, set(e) {
                let s = this.$refs.sharedToSelector;
                e.includes("All::Users") && !_.isUndefined(s) && (e = ["All::Users"], _.defer(s.reInitialize)), this.filterDetails.sharemembers && this.filterDetails.sharemembers.includes("All::Users") && "" == e && !_.isUndefined(s) && s.reInitialize(), Vue.set(this.filterDetails, "sharemembers", e)
            }
        }, sharedMembers() {
            sharedMembersList = {};
            let e = [], s = [], t = [], r = [];
            for (let i in this.filterDetails.sharemembers) {
                let l = this.filterDetails.sharemembers[i], a = l.split(":")[0];
                this.availableMembers[a][l] && ("Users" == a || "All" == a ? (e.push({
                    id: l,
                    label: this.availableMembers[a][l]
                }), Vue.set(sharedMembersList, a, e)) : "Groups" == a ? (s.push({
                    id: l,
                    label: this.availableMembers[a][l]
                }), Vue.set(sharedMembersList, a, s)) : "Roles" == a ? (t.push({
                    id: l,
                    label: this.availableMembers[a][l]
                }), Vue.set(sharedMembersList, a, t)) : "RoleAndSubordinates" == a && (r.push({
                    id: l,
                    label: this.availableMembers[a][l]
                }), Vue.set(sharedMembersList, a, r)))
            }
            return sharedMembersList
        }
    },
    mounted() {
        this.loadUserDetails(), jQuery("#memberDropdown").select2({
            dropdownParent: jQuery("#memberDropdown").parent(),
            tags: !1
        }).on("change", e => {
            this.$emit("input", jQuery(e.currentTarget).val())
        })
    },
    methods: {
        deSelectMember(e) {
            this.filterDetails.sharemembers.splice(this.filterDetails.sharemembers.indexOf(e), 1)
        }, loadUserDetails() {
            this.appStore.request("api_get", {
                url: "records",
                params: {module: "Users", shared: "1"},
                key: "list_filter_users_info"
            }).then(e => {
                Vue.set(this.availableMembers, "All", {"All::Users": this.translate("LBL_ALL_USERS")});
                for (let s in e) {
                    Vue.set(this.availableMembers, s, {});
                    for (let t in e[s]) {
                        let r = e[s][t];
                        Vue.set(this.availableMembers[s], t, r)
                    }
                }
            })
        }
    }
});
var Vtiger_Component_Grid = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("span")
    }
});
var Vtiger_Component_GridActions = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("span")
    }
});
var Vtiger_Component_GridView = App.vtComponent.extend({
    components: {"vds-grid": App.loadComponent("Grid")},
    props: {
        listParams: {},
        viewHeight: {},
        forceReload: {},
        showEmptyStateAction: {type: Boolean, default: !0},
        records: {}
    },
    data: () => ({showByIndex: null}),
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex flex-wrap"}, _l(records, (function (t) {
            return _c("div", {
                staticClass: "d-flex flex-column m-2 align-items-center mb-4",
                staticStyle: {width: "211px", height: "249px", position: "relative"}
            }, [_c("vds-grid", {attrs: {record: t}})], 1)
        })), 0)])
    }
});
var Vtiger_Component_GroupByFilter = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("v-select2", {
            attrs: {name: "viewBy"},
            on: {change: updateGroupByField},
            model: {
                value: groupByField, callback: function (e) {
                    groupByField = e
                }, expression: "groupByField"
            }
        }, _l(groupByFields, (function (e, t) {
            return _c("option", {domProps: {selected: t == groupByField, value: t}}, [_v(_s(e))])
        })), 0)
    },
    data: () => ({allowedFieldTypes: ["picklist", "metricpicklist", "multiselect", "owner"], groupByField: ""}),
    computed: {
        groupByFields() {
            let e = {}, t = App.module(), l = this._getModuleDesc(t).getFieldsOfType(this.allowedFieldTypes);
            for (let t in l) l[t].isViewable && (e[t] = l[t].label);
            return this.groupByField || (this.groupByField = Object.keys(e).length ? this.getDefaultGroupByField(e) : ""), e
        }
    },
    created() {
        this.groupByField = this.appStore.get("listParams").groupby || ""
    },
    methods: {
        getDefaultGroupByField: e => Object.keys(e).length ? Object.keys(e)[0] : "", updateGroupByField(e) {
            let t = this.appStore.get("listParams");
            Vue.set(t, "groupby", e), this.appStore.set({key: "listParams", data: t})
        }
    }
});
var Vtiger_Component_Kanban = App.vtComponent.extend({
    components: {
        "vds-kanban-card": App.loadComponent("KanbanCard"),
        "vds-kanban-column-header": App.loadComponent("KanbanColumnHeader"),
        "vds-kanban-view-footer": App.loadComponent("KanbanViewFooter"),
        "vds-kanban-add-task": App.loadComponent("KanbanAddTask"),
        "vds-empty-state-card": App.loadComponent("EmptyStateCard")
    },
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_CurrencyUtils, App.loadMixin("PicklistDependency"), App.loadMixin("DependentFields"), App.loadMixin("DependencyValidator")],
    provide: function () {
        return {onPostAddCard: this.onPostAddCard}
    },
    props: {listParams: {}, viewHeight: {}, forceReload: {}, showEmptyStateAction: {type: Boolean, default: !0}},
    data() {
        return {
            kanbanRecords: {},
            kanbanSortRecords: {},
            currentModule: "",
            kanbanParams: {filterid: "", page: 1},
            showKanbanFooter: !1,
            draggedOutCards: {},
            usersDetail: {},
            addRecord: !1,
            groupFieldValue: "",
            groupName: "",
            noRecordInStage: {},
            groupAmountSum: {},
            dataLoaded: !1,
            loading: !1,
            cardContainerMaxHeight: window.innerHeight,
            showAddCard: !1,
            addCardLabel: "",
            groupByFieldName: "",
            closedStageDealInfoMessage: "",
            hideEmptyColumns: !_.isUndefined(AppStorage.get("hideColumnsStatus")) && AppStorage.get("hideColumnsStatus"),
            illustrationName: "",
            kanbanRecordsSortOrder: "",
            recordModel: Vtiger_Record_Model.getCleanInstance(this.$module, {}),
            kanbanCardSaved: !1,
            userImageInfo: {},
            kanbanRecordsSortOrderValue: {},
            dependencySave: !1
        }
    },
    computed: {
        defaultGroupByField() {
            let e = this.groupByFields, t = Object.keys(e).length ? Object.keys(e)[0] : "",
                a = this.appStore.get("listParams");
            return a.groupby || (Vue.set(a, "groupby", t), this.appStore.set({key: "listParams", data: a})), t
        }, groupByFields() {
            let e = {};
            let t = this.$_currentModuleModel.getFieldsOfType(["picklist", "metricpicklist", "multiselect"]);
            for (let a in t) e[a] = t[a];
            return e
        }, groupByFieldValue() {
            let e = "", t = this.appStore.get("listParams");
            return t.groupby && (e = t.groupby), e
        }, isAllGroupRecordsEmpty() {
            var e = !0;
            for (var t in this.kanbanRecords) if (Object.keys(this.kanbanRecords[t].records).length > 0) {
                e = !1;
                break
            }
            return e
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, masterRecordModel() {
            return this.recordModel
        }
    },
    watch: {
        "kanbanParams.page": {
            handler() {
                this.getKanbanRecords()
            }, deep: !0
        }, groupByFieldValue() {
            this.resetToFirstpage()
        }, listParams: {
            handler() {
                this.kanbanRecords = {}, this.getKanbanRecords(), this.getKanbanTotals()
            }, deep: !0
        }, forceReload(e, t) {
            e && this.reloadRecords()
        }, kanbanRecords() {
            this.kanbanRecordsSortOrder = _.keys(this.kanbanRecords);
            let e = {};
            for (var t in this.kanbanRecordsSortOrder) {
                let a = this.kanbanRecordsSortOrder[t];
                e[a] = a.toString().split()
            }
            this.kanbanRecordsSortOrderValue = e, this.registerSlimScroll()
        }
    },
    mounted: function () {
        this.currentModule = this.$module, this.resetToFirstpage(), this.$root.$on("vds::kanbanview::hideEmptyColumn::value::change", e => {
            this.hideEmptyColumns = e
        }), this.calUserImageInfo()
    },
    methods: {
        calUserImageInfo() {
            let e = function () {
            };
            e = this.$watch("$store.state.users_info", t => {
                if (t) {
                    let a = {};
                    e(), t.forEach(e => {
                        a[e.id] = {}, e.imagename && (a[e.id].image = e.imagename[0]), a[e.id].fullname = e.label, a[e.id].label = e.label
                    }), this.userImageInfo = a
                }
            }, {immediate: !0})
        },
        isAllowedToAddActivity: e => !0,
        getKanbanRecords: function () {
            var e = this.currentModule, t = {module: e};
            let a = _.extend({}, this.appStore.get("listParams"));
            a = _.extend(a, this.kanbanParams), a.filterid = this.listParams ? this.listParams.filterid : "";
            var s = (t = Object.assign(a, t)).q;
            _.size(s.data[0]) <= 0 || s.data[0][0].length <= 0 ? delete t.q : t.q = JSON.stringify(s.data);
            s = t.tag_params;
            _.size(s.data[0]) <= 0 || s.data[0][0].length <= 0 ? delete t.tag_params : t.tag_params = JSON.stringify(s.data), t.filterid && t.groupby && (t.viewtype = "Kanban", this.dataLoaded = !1, this.loading = !0, this.appStore.request("api_pjax", {
                url: "records",
                params: t,
                key: "kanban_records"
            }).then(a => {
                "1" == t.page && (this.kanbanRecords = {}), this.dataLoaded = !0, a = this.resolveKanbanRecords(e, a), this.loadKanbanRecords(a), this.loading = !1
            }))
        },
        loadKanbanRecords(e) {
            let t = this.kanbanRecords, a = this.appStore.get("listParams").groupby;
            if (this.groupByFieldName = a, a) {
                var s = s => {
                    let r = s.getField(a);
                    if (r) {
                        let s = this.getGroupByFieldValues(r);
                        r.type && "owner" == r.type.name && (s = _.union(s.users, s.groups));
                        for (let d in s) {
                            let o = s[d].value, n = s[d].label, i = t[n] && t[n].records ? t[n].records : {};
                            e[o] || (e[o] = {records: new Array, nextpageexist: !1});
                            let l = e[o].records, c = e[o].nextpageexist;
                            for (let e in l) {
                                let t = l[e];
                                if ((r.type && "owner" == r.type.name ? t.getRawValue(a).id : t.getRawValue(a)) == o) {
                                    let e = '"' + t.getId() + '"';
                                    Vue.set(i, e, t)
                                }
                            }
                            t[n] || Vue.set(t, n, {}), Vue.set(t[n], "records", i), Vue.set(t[n], "nextpageexist", c)
                        }
                        this.kanbanRecords = t, this.getCardContainerMaxHeight()
                    }
                };
                let r = function () {
                };
                r = this.$watch("$_currentModuleModel.isLoaded", e => {
                    e && (r(), s(this.$_currentModuleModel))
                }, {immediate: !0})
            }
        },
        getGroupByFieldValues: e => e && e.isOwnerField ? e.allOwners : e.type.picklistValues,
        resolveKanbanRecords: function (e, t) {
            if (t) {
                for (let a in t) {
                    let s = t[a];
                    for (i in s.records) s.records[i] = BaseModel.getModuleSpecificModel(e, "Record", s.records[i]);
                    t[a] = s
                }
                return t
            }
            return {}
        },
        loadNextPageRecords(e, t) {
            this.kanbanRecords[t].nextpageexist && this.dataLoaded && Math.ceil(e.target.clientHeight + e.target.scrollTop) >= Math.ceil(e.target.scrollHeight) && Vue.set(this.kanbanParams, "page", this.kanbanParams.page + 1)
        },
        resetToFirstpage: function () {
            this.kanbanRecords = {}, this.setEmptyRecords(), Vue.set(this.kanbanParams, "page", 1), this.getKanbanRecords(), this.getKanbanTotals()
        },
        onStart: function () {
            this.showKanbanFooter = !0
        },
        onEventMove: function (e, t) {
            if (width = window.innerWidth, cardWidth = $("div.kanbanRecordGroup")[0].offsetWidth, e.draggedRect.right >= .7 * width) {
                var a = $("div.kanbanViewBody").scrollLeft();
                $("div.kanbanViewBody").animate({scrollLeft: a + cardWidth})
            } else if (e.draggedRect.left <= .3 * width) {
                a = $("div.kanbanViewBody").scrollLeft();
                $("div.kanbanViewBody").animate({scrollLeft: a - cardWidth})
            }
            this.groupName = jQuery(e.to).attr("data-group"), Vue.set(this.noRecordInStage, this.groupName, !0);
            for (let e in this.noRecordInStage) this.groupName !== e && Vue.set(this.noRecordInStage, e, !1);
            var s = "";
            if (e && (s = e.dragged.dataset.isClosed), s && 0 != s) return e.dragged.animated = setTimeout((function () {
            }), 1), !1
        },
        onEnd: function (e) {
            for (let e in this.noRecordInStage) Vue.set(this.noRecordInStage, e, !1);
            var t = "";
            e && (t = e.clone.dataset.isClosed), t && 0 != t && this.showErrorNotification({message: this.translate("LBL_CLOSED_RECORD_NOT_DRAGGABLE")}), this.showKanbanFooter = !1
        },
        onAdd(e, t, a = {}) {
            let s = jQuery(e.item).data("id"), r = this.appStore.get("listParams").groupby, d = {};
            d.module = this.currentModule, d.field = r, d.value = t, d.id = s, Object.keys(a).length > 0 && (d = jQuery.extend(d, a)), this.masterModuleModel.dependentTriggererFields.includes(r) && !this.dependencySave ? this.retrieveRecord(s, this.currentModule).then(a => {
                this.recordModel = a, Vue.set(this.recordModel, r, t), this.handleDependentFields(e, d)
            }) : this.saveKanbanCard(e, d)
        },
        saveKanbanCard: function (e, t) {
            let a = jQuery(e.item).data("group"), s = jQuery(e.item).data("id");
            if (_.size(t.dependentFields) > 0) {
                let a = {module: this.currentModule, id: s};
                a[t.field] = t.value, a = jQuery.extend(a, t.dependentFields);
                let o = BaseModel.getModuleSpecificModel(this.$module, "Record", a), n = ["assigned_user_id"];
                for (var r in n) if (!this.recordModel.get(d)) {
                    var d = n[r];
                    o.set(d, this.recordModel[d])
                }
                this.saveRecord(o, this.$_currentModuleModel).then(a => {
                    this.kanbanCardUpdate(a, t, e)
                }, a => {
                    a.message == this.translate("LBL_DEALS_NOT_ALLOWED_TO_SAVE", this.currentModule) && "Potentials" == this.currentModule ? this.showConfirmationToSkipTasks(e, t.value) : this.showErrorNotification(a.message)
                })
            } else this.reviseField(t).then(a => {
                this.kanbanCardUpdate(a, t, e)
            }, a => {
                a.message == "Error: " + this.translate("LBL_DEALS_NOT_ALLOWED_TO_SAVE", this.currentModule) && "Potentials" == this.currentModule ? this.showConfirmationToSkipTasks(e, t.value) : this.showErrorNotification(a.message)
            });
            this.dependencySave = !1, Vue.set(this.draggedOutCards, a, s), this.kanbanCardSaved = !1
        },
        kanbanCardUpdate: function (e, t, a) {
            let s = jQuery(a.item).data("group");
            this.showSuccessNotification(this.translate("JS_RECORD_UPDATED")), e = BaseModel.getModuleSpecificModel(this.currentModule, "Record", e);
            let r = t.field, d = e.getRawValue(r), o = e.getId();
            if (o = `"${o}"`, Vue.set(this.kanbanRecords[d].records, o, e), Object.keys(this.draggedOutCards).length > 0) for (let e in this.draggedOutCards) {
                let t = this.draggedOutCards[e];
                t = `"${t}"`, Vue.delete(this.kanbanRecords[e].records, t), Vue.delete(this.draggedOutCards, e, t)
            }
            this.updateRecordCounts(s, t.value), this.updateTotalAmounts(a, t.value), this.emitModuleSpecificEvents(a, e)
        },
        handleDependentFields(e, t) {
            if (this.masterModuleModel.dependentTriggererFields.includes(t.field)) {
                this.$watch("dynamicUpdatedFields", (a, s) => {
                    if (_.isEqual(a, s)) return;
                    let r = Object.keys(this.dynamicUpdatedFields);
                    if (r.length > 0) {
                        this.kanbanCardSaved = !0;
                        let a = JSON.parse(JSON.stringify(this.recordModel)),
                            s = BaseModel.getModuleSpecificModel(this.currentModule, "Record", a);
                        this.showModal({
                            componentName: App.loadComponent("DependentFieldsModal", this.currentModule),
                            componentData: {
                                module: this.currentModule,
                                record: s,
                                triggerFieldModel: this.masterModuleModel.getField(t.field),
                                targetFields: r
                            },
                            modalOnModalMode: !1
                        }), this.$off("vds::dependentfields::save"), this.$on("vds::dependentfields::save", a => {
                            let r = a.targetFieldModelList, d = {};
                            for (var o in r) {
                                let e = s.get(o);
                                this.recordModel.set(o, e), d[o] = e
                            }
                            _.isEmpty(d) || (t.dependentFields = d), this.saveKanbanCard(e, t)
                        })
                    }
                    this.dynamicUpdatedFields = {}
                });
                this.$nextTick(() => {
                    this.kanbanCardSaved || this.saveKanbanCard(e, t)
                })
            } else this.saveKanbanCard(e, t);
            this.kanbanCardSaved = !1
        },
        showConfirmationToSkipTasks(e, t) {
            let a = this.translate("JS_SKIP_STAGE_TASKS_INFO", "Potentials");
            this.showModal({
                componentName: "ConfirmationBox",
                componentData: {
                    onConfirm: ({e: e, value: t, confirm: a}) => {
                        this.dependencySave = !0, this.onAdd(e, t, a)
                    }, confirmEntity: {e: e, value: t, confirm: {confirmbyuser: 1}}, message: a
                },
                modalOnModalMode: !1
            })
        },
        loadUsersDetails: function () {
            this.appStore.request("api_get", {
                url: "records",
                params: {module: "Users", pagelimit: 100},
                key: "users_info"
            }).then(e => {
                let t = [];
                for (var a of e) t.push(BaseModel.getModuleSpecificModel(this.currentModule, "Record", a));
                for (let e in t) {
                    let a = t[e], s = a.getRawValue("id"),
                        r = {fullname: (a.getDisplayValue("first_name") + " " + a.getDisplayValue("last_name")).trim()};
                    _.isEmpty(a.getRawValue("imagename")) || (r.image = {
                        label: a.getRawValue("imagename")[0].name,
                        url: a.getRawValue("imagename")[0].url
                    }), Vue.set(this.usersDetail, s, r)
                }
            })
        },
        onPostDeleteRecord(e) {
            let t = this.appStore.get("listParams").groupby, a = e.getRawValue(t);
            setTimeout(() => {
                if (this.kanbanRecords[a]) {
                    let t = `"${e.getId()}"`;
                    (e = this.kanbanRecords[a].records[t]) && Vue.delete(this.kanbanRecords[a].records, t)
                }
            }, 500);
            let s = this.groupAmountSum;
            s[a] && (s[a].count = (s[a].count ? parseFloat(s[a].count) : 0) - 1), this.groupAmountSum = s, this.updateTotalAmountOnCardDelete(e)
        },
        onPostAddCard(e) {
            let t = this.appStore.get("listParams").groupby,
                a = (e = BaseModel.getModuleSpecificModel(this.currentModule, "Record", e)).getRawValue(t),
                s = e.getId();
            s = `"${s}"`, Vue.set(this.kanbanRecords[a].records, s, e)
        },
        createAction(e) {
            this.addRecord = !0, this.groupFieldValue = e
        },
        postKanbanTaskCreate(e) {
            this.onPostAddCard(e), this.addRecord = !1
        },
        reloadRecords() {
            this.kanbanRecords = {}, this.getKanbanRecords(), this.$emit("update:forceReload", !1), this.getKanbanTotals()
        },
        getKanbanTotals() {
            let e = _.extend({}, this.appStore.get("listParams"));
            e.filterid = this.listParams ? this.listParams.filterid : "", e.module = this.currentModule;
            var t = e.q;
            _.size(t.data[0]) <= 0 || t.data[0][0].length <= 0 ? delete e.q : e.q = JSON.stringify(t.data);
            t = e.tag_params;
            _.size(t.data[0]) <= 0 || t.data[0][0].length <= 0 ? delete e.tag_params : e.tag_params = JSON.stringify(t.data), e.filterid && e.groupby && (delete e.page, delete e.sortfield, delete e.sortorder, delete e.text, e.viewtype = "Kanban", this.appStore.request("api_get", {
                url: "records/totalcount",
                params: e,
                key: "kanban_records_totalscount"
            }).then(e => {
                this.groupAmountSum = e
            }))
        },
        updateRecordCounts(e, t) {
            let a = this.groupAmountSum;
            if (a[e] && (a[e].count = (a[e].count ? parseFloat(a[e].count) : 0) - 1), a[t] || Vue.set(a, t, {
                count: 0,
                sum: 0
            }), a[t]) {
                var s = (a[t].count ? parseFloat(a[t].count) : 0) + 1;
                Vue.set(a[t], "count", s)
            }
            this.groupAmountSum = a
        },
        updateTotalAmounts(e, t) {
        },
        updateTotalAmountOnCardDelete(e) {
        },
        emitModuleSpecificEvents(e, t) {
        },
        setEmptyRecords() {
            let e = this.groupByFieldValue;
            if (e) {
                let t = "";
                t = this.$watch(() => this.$_currentModuleModel.isLoaded, a => {
                    if (a) {
                        t && t();
                        let a = this.$_currentModuleModel.getField(e), s = this.getGroupByFieldValues(a), r = {};
                        if (a && a.isOwnerField) {
                            let e = this.setKanbanEmptyStateRecord(s.users),
                                t = this.setKanbanEmptyStateRecord(s.groups);
                            r = Object.assign(e, t)
                        } else r = this.setKanbanEmptyStateRecord(s);
                        this.kanbanRecords = r
                    }
                }, {immediate: !0})
            }
        },
        setKanbanEmptyStateRecord(e) {
            let t = {};
            for (let {value: s} of e) {
                let e = 7, r = [];
                for (var a = 0; a < e;) {
                    let e = {
                        assigned_user_id: {id: this.$currentUser.id},
                        related_to: {id: 0},
                        contact_id: {id: 0, label: ""},
                        loaded: !1
                    };
                    r.push(BaseModel.getModuleSpecificModel(this.$module, "Record", e)), a++
                }
                t[s] = {}, t[s].records = r
            }
            return t
        },
        registerSlimScroll() {
            setTimeout(() => {
                let e = jQuery(window).height(), t = jQuery(jQuery(".kanbanCardsContainer").get(0));
                if (t && t.offset()) {
                    t.offset().top
                }
            }, 100)
        },
        getCardContainerMaxHeight() {
            let e = 415, t = document.getElementsByClassName("kanbanRecordGroup")[0];
            if (t) {
                let a = window.getComputedStyle(t).getPropertyValue("height").slice(0, -2);
                e = parseInt(a) - 72, this.showAddCard && (e -= 20)
            }
            this.cardContainerMaxHeight = e
        },
        showEmptyRecordsKanbanGroup(e) {
            return _.size(e) > 0 || !this.hideEmptyColumns
        },
        updateCard() {
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {
            staticClass: "kanbanViewBody bg-blue-0 px-4 py-3",
            style: {height: viewHeight + "px"}
        }, [_l(kanbanRecordsSortOrder, (function (e, t) {
            return kanbanRecords[e] && showEmptyRecordsKanbanGroup(kanbanRecords[e].records) ? _c("div", {staticClass: "kanbanRecordGroup mr-3"}, [_c("div", {staticClass: "kanbanCardsContainer bg-grey-hue-11 border-grey-1 rounded-6 p-3"}, [_c("vds-kanban-column-header", {
                attrs: {
                    "current-group-by-field": groupByFieldName,
                    "records-group": kanbanRecords[e].records,
                    "group-name": e
                }, on: {"vds::kanban::record::create::action": createAction}
            }), _v(" "), _c("div", {
                staticClass: "overflow-y",
                style: {"max-height": addRecord && groupFieldValue === e ? cardContainerMaxHeight - 100 + "px" : cardContainerMaxHeight + "px"},
                on: {
                    scroll: function (t) {
                        return loadNextPageRecords(t, e)
                    }
                }
            }, [_c("draggable", {
                staticClass: "dragArea",
                class: {"mb-2": addRecord && groupFieldValue === e},
                attrs: {
                    value: kanbanRecordsSortOrderValue[e],
                    "data-group": e,
                    options: {group: "kanbanColumn", ghostClass: "kanbanCardClone", handle: ".kanbanCard"},
                    move: onEventMove,
                    disabled: "JourneyTemplates" === $module,
                    test: "test"
                },
                on: {
                    start: onStart, end: onEnd, add: function (t) {
                        return onAdd(t, e)
                    }
                }
            }, [_.size(kanbanRecords[e].records) || noRecordInStage[e] || addRecord && groupFieldValue === e ? _e() : _c("div", _g({
                staticClass: "norecords d-flex justify-content-center align-items-center border rounded-6 border-grey-2 bg-grey-hue-12 p-auto mb-3",
                class: {"c-pointer": showAddCard && isAllowedToAddActivity(e)}
            }, showAddCard && isAllowedToAddActivity(e) ? {click: () => createAction(e)} : {}), [_c("h6", {staticClass: "mb-0"}, [isAllowedToAddActivity(e) ? showAddCard ? _c("span", [_v(_s(addCardLabel))]) : _c("span", [_v(_s(translate("LBL_NO_ENTITIES_FOUND", $module, translate($module, $module))))]) : _c("div", {staticClass: "ml-2"}, [_c("span", {staticClass: "text-grey-4"}, [_c("i", {staticClass: "fa-info-circle mr-2"}), _v(_s(closedStageDealInfoMessage) + "\n\t\t\t\t\t\t\t\t\t\t\t")])])])]), _v(" "), _l(kanbanRecords[e].records, (function (t, a) {
                return [_c("vds-kanban-card", {
                    key: a + "_" + e,
                    attrs: {
                        record: t,
                        stageRecords: kanbanRecords[e].records,
                        index: a,
                        "group-name": e,
                        "users-info": userImageInfo,
                        "on-post-delete-record": onPostDeleteRecord
                    },
                    on: {"vds::kanbancard::update": updateCard}
                })]
            }))], 2)], 1), _v(" "), addRecord && groupFieldValue === e ? _c("div", [_c("vds-kanban-add-task", {
                attrs: {"current-status": e},
                on: {
                    "vds::kanban::task::added": postKanbanTaskCreate, "vds::kanban::add::task::cancel": function (e) {
                        addRecord = !1
                    }
                }
            })], 1) : _e(), _v(" "), showAddCard && _.size(kanbanRecords[e].records) ? _c("span", {
                staticClass: "d-inline-block text-grey-4 c-pointer mt-2",
                on: {
                    click: function (t) {
                        return createAction(e)
                    }
                }
            }, [_c("i", {staticClass: "fa-plus"}), _v("\n                            " + _s(addCardLabel) + "\n                        ")]) : _e()], 1)]) : _e()
        })), _v(" "), _c("div", {staticClass: "px-1"})], 2), _v(" "), _c("vds-kanban-view-footer", {
            attrs: {
                defaultGroupByField: defaultGroupByField,
                "show-footer": showKanbanFooter
            }, on: {
                updateStatus: function (e) {
                    return onAdd(...arguments)
                }
            }
        })], 1)
    }
});
var Vtiger_Component_KanbanCard = App.vtComponent.extend({
    components: {"vds-field-display": App.loadComponent("FieldDisplay")},
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Record"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_UsersUtils],
    inject: ["getCurrentModule"],
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "kanbanCard c-pointer border-grey-5 rounded-6 mb-3 bg-white",
            attrs: {"data-id": record.getId(), "data-is-closed": record.isclosed, "data-group": groupName}
        }, [_c("div", {
            staticClass: "card-body kanbanCardContents px-3 py-2", on: {
                click: function (e) {
                    kanbanCardClick(e, record.getId())
                }
            }
        }, [_c("h6", {staticClass: "card-title textOverflowEllipsis"}, [_c("vds-field-display", {
            attrs: {
                className: "textOverflowEllipsis",
                record: record,
                field: "label",
                modulemodel: $_currentModuleModel
            }
        })], 1)])])
    },
    props: ["record", "groupName"],
    methods: {
        kanbanCardClick(e, o, t) {
            this.showModal({
                componentName: "DetailPreview",
                componentData: {id: o, module: this.getCurrentModule(), viewtype: t}
            })
        }, getColor: e => VTHelper.getColorCode(e)
    }
});
var Vtiger_Component_KanbanCardActions = App.vtComponent.extend({
    inject: ["kanbanCardClick", "onPostDeleteRecord"], mixins: [Vtiger_Mixin_Record], render: function anonymous() {
        with (this) return _c("div", {staticClass: "kanbanCardActions"}, [_c("a", {
            staticClass: "btn btn-link text-decoration-none",
            attrs: {tabindex: "0", id: record.getId() + "_actions"},
            on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [_c("i", {
            staticClass: "h5 m-0 text-grey-4 align-middle",
            class: {"fa-angle-double-left": 1 == actionPopoverShown, "fa-angle-double-right": 0 == actionPopoverShown}
        })]), _v(" "), _c("b-popover", {
            attrs: {
                placement: "right",
                target: record.getId() + "_actions",
                triggers: "click blur",
                boundary: "viewport",
                "custom-class": "text-14 no-arrow"
            }, on: {
                shown: onActionsPopoverShown, hidden: function (e) {
                    actionPopoverShown = !1
                }
            }
        }, [!record.isClosed && record.isEditable ? _c("div", {
            staticClass: "px-2 py-1 c-pointer",
            on: {
                click: function (e) {
                    kanbanCardClick(e, record.getId())
                }
            }
        }, [_c("i", {staticClass: "fa fa-pencil-alt mr-2 text-grey-4"}), _v(_s(translate("LBL_EDIT")) + "\n\t\t\t\t")]) : _e(), _v(" "), record.isDeleteable ? _c("div", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.RecordDelete",
                value: {
                    module: $module,
                    record: record,
                    recordId: record.getId(),
                    postDeleteEvent: onPostDeleteKanbanRecord
                },
                expression: "{'module':$module,'record': record, 'recordId':record.getId(),'postDeleteEvent':onPostDeleteKanbanRecord}",
                modifiers: {RecordDelete: !0}
            }], staticClass: "px-2 py-1 c-pointer"
        }, [_c("i", {staticClass: "fa fa-trash-alt mr-2 text-grey-4"}), _v(_s(translate("LBL_DELETE")) + "\n\t\t\t\t")]) : _e()])], 1)
    }, props: ["record"], data: () => ({actionPopoverShown: !1}), methods: {
        onPostDeleteKanbanRecord() {
            this.$root.$emit("bv::hide::modal", "deleteRecord"), this.onPostDeleteRecord(this.record)
        }, isToggleOpen() {
            return !!this.$refs.collapse && this.$refs.collapse.show
        }, onActionsPopoverShown() {
            this.actionPopoverShown = !0
        }
    }
});
var Vtiger_Component_KanbanColumnHeader = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "kanbanColumnHeader d-flex justify-content-between align-items-center text-truncate mb-3"}, [_c("div", {staticClass: "flex-grow-1 text-truncate"}, [$isLoading ? _c("vds-value-progress", {attrs: {"min-width": "40"}}) : [_c("i", {
            staticClass: "fa-circle mr-1 align-middle",
            style: {color: groupByFieldPicklistColors[groupName]}
        }), _v(" "), _c("strong", {
            staticClass: "py-1",
            attrs: {title: groupName}
        }, [_v(_s(groupName))])]], 2), _v(" "), _c("div", {staticClass: "ml-2"}, [$isLoading ? _c("vds-value-progress", {attrs: {"min-width": "40"}}) : [_c("span", {staticClass: "badge badge-pill badge-primary"}, [_v(_s(getTotalRecordsCount))])]], 2)])
    },
    props: ["recordsGroup", "groupName", "currentGroupByField"],
    data: () => ({groupByFieldPicklistColors: {}}),
    computed: {
        getTotalRecordsCount: function () {
            if (this.$parent.groupAmountSum && this.$parent.groupAmountSum[this.groupName] && this.$parent.groupAmountSum[this.groupName].count) return this.$parent.groupAmountSum[this.groupName].count
        }
    },
    created() {
        if (this.currentGroupByField) this.calGroupByFieldPicklistColors(); else {
            let t = this.$watch(() => ({field: this.$_currentModuleModel.getField(this.currentGroupByField)}), () => {
                t(), this.calGroupByFieldPicklistColors()
            })
        }
    },
    methods: {
        calGroupByFieldPicklistColors() {
            let t = {};
            if (this.currentGroupByField) {
                let e = this.$_currentModuleModel.getField(this.currentGroupByField);
                if (e) {
                    let i = e.picklistValues;
                    for (let e in i) {
                        t[i[e].value] = i[e].color
                    }
                }
            }
            return this.groupByFieldPicklistColors = t, this.groupByFieldPicklistColors
        }
    }
});
var Vtiger_Component_KanbanView = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("list-view", {attrs: {propListViewMode: "Kanban"}})
    }, components: {"list-view": App.loadComponent("ListView")}
});
var Vtiger_Component_KanbanViewFooter = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ListActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixins_ShowModal],
    components: {
        "vds-quick-filter-button": App.loadComponent("QuickFilterButton"),
        "vds-list-mode-actions": App.loadComponent("ListModeActions"),
        "vds-list-add-action": App.loadComponent("ListAddAction"),
        "vds-list-sync-action": App.loadComponent("ListSyncAction")
    },
    props: {
        currentListMode: {default: "List"},
        selectedFilter: [String, Number],
        filterSupport: {type: Boolean, default: !0},
        addActionAllowed: {type: Boolean, default: !0}
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "row mx-0 align-items-center justify-content-end"}, [_c("vds-list-sync-action"), _v(" "), _c("vds-list-add-action", {
            staticClass: "d-flex justify-content-end mr-3",
            attrs: {"selected-filter": selectedFilter, "add-action-allowed": addActionAllowed}
        }), _v(" "), _c("div", [_c("vds-list-mode-actions", {
            attrs: {"current-list-mode": currentListMode},
            on: {"vds::list::mode::switch": switchListViewMode}
        })], 1), _v(" "), filterSupport && "List" != currentListMode ? _c("vds-quick-filter-button", {
            attrs: {
                "selected-filter": selectedFilter,
                "current-list-mode": currentListMode
            }
        }) : _e()], 1)
    },
    computed: {
        record() {
            return Vtiger_Record_Model.getCleanInstance(this.$module, {})
        }
    },
    methods: {
        switchListViewMode(t) {
            this.$emit("update:currentListMode", t), "List" == t ? App.root.$emit("vds::list::view::click", this.$module) : "Kanban" == t && (this.$root.$emit("vds::kanban::click::show::PipeLineMessage"), App.root.$emit("vds::kanban::view::click", this.$module))
        }
    }
});
var Vtiger_Component_ListAddAction = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixins_ShowModal],
    props: {addActionAllowed: {type: Boolean, default: !0}},
    methods: {
        addNew() {
            this.$_currentModuleModel.isInventoryModule ? this.redirectUrl("view/edit?module=" + this.$module) : this.showModal({
                componentName: "QuickCreateModal",
                componentData: {module: this.$module, postQuickCreateSave: this.postQuickCreateSave}
            })
        }, postQuickCreateSave(e) {
            this.$root.$emit("vds::list::reload", !0), this.$bubble("vds::list::reload", {reloadCount: !0})
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [$_currentModuleModel.isCreateable ? _c("button", {
            staticClass: "btn btn-success addButton py-2",
            attrs: {
                id: $module + "_listView_addRecord",
                type: "button",
                "data-track-name": "add record",
                "data-track-view-name": "list",
                "data-track-primary-module": $module,
                "data-track-stage": "start"
            },
            on: {click: addNew}
        }, [_c("i", {staticClass: "fa fa-plus mr-1 py-1"}), _v(_s(translate("LBL_ADD_RECORD", $module)))]) : _e()])
    },
    $_onBoard: {steps: {onboard_managepipeline: ["onboard_managepipeline_adddeal"]}}
});
var Vtiger_Component_ListAddTags = App.vtComponent.extend({
    inject: ["$validator"],
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_Tags],
    props: ["recordIds", "modulename", "getSelectedRecords", "reloadList"],
    data: () => ({visible: !1, availableTags: {}, selectedTags: [], newTag: "", myTags: {}}),
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "addTags",
                "footer-border-variant": "top-0",
                "body-class": "p-4",
                "footer-class": "pt-0 px-4 pb-4",
                "header-class": "px-4 py-3 bgLtGrey"
            }, model: {
                value: visible, callback: function (t) {
                    visible = t
                }, expression: "visible"
            }
        }, [_c("div", {
            attrs: {slot: "modal-title", id: "modalTitle"},
            slot: "modal-title"
        }, [_v(_s(translate("LBL_ADD_OR_SELECT_TAG")))]), _v(" "), _c("div", {staticClass: "p-2 rounded bg-blue-3 tags-info mb-3"}, [_c("ul", [_c("li", [_v(_s(translate("LBL_TAG_SEPERATOR_DESC")))]), _v(" "), _c("li", [_v(_s(translate("LBL_SHARED_TAGS_ACCESS")))]), _v(" "), _c("li", [_v(_s(translate("LBL_GOTO_TAGS")))])])]), _v(" "), _c("div", {staticClass: "d-flex justify-content-center"}, [_c("v-select2", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required : true}"
            }],
            attrs: {
                multiple: !0,
                tags: !0,
                tokenSeparators: [","],
                name: "tag_name",
                "data-vv-as": "tag name",
                placeholder: translate("LBL_CREATE_NEW_TAG")
            },
            model: {
                value: selectedTags, callback: function (t) {
                    selectedTags = t
                }, expression: "selectedTags"
            }
        }, _l(availableTags, (function (t) {
            return _c("option", {domProps: {value: t.tag}}, [_v(_s(t.tag))])
        })), 0)], 1), _v(" "), errors.has("tag_name") ? _c("div", {staticClass: "d-flex justify-content-center mt-1 text-danger text-truncate"}, [_v(_s(errors.first("tag_name")))]) : _e(), _v(" "), _c("div", {
            staticClass: "submitForm d-flex w-100 justify-content-center",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn-group btn btn-primary text-white",
            attrs: {disabled: 0 == selectedTags.length, type: "button"},
            on: {
                click: function (t) {
                    return t.preventDefault(), validateAndSave()
                }
            }
        }, [_c("div", [_v(_s(translate("LBL_ADD_TAG")))])])])])
    },
    mounted() {
        this.init()
    },
    methods: {
        init() {
            this.getMyTags().then(t => {
                this.myTags = t, this.availableTags = t
            })
        }, clearModalData() {
            this.selectedTags = [], this.reloadList()
        }, validateAndSave() {
            this.$validator.validate().then(t => {
                t && this.saveTags()
            })
        }, async saveTags() {
            let t = [], e = [];
            this.selectedTags.forEach((a, s) => {
                let i = _.findKey(this.myTags, {tag: a});
                i ? t.push(i) : e.push(a)
            });
            let a = await this.getSelectedRecords(),
                s = {module: this.modulename, selected_ids: a, tagsList: {existing: t, new: e}};
            this.appStore.request("api_post", {url: "masstagging", params: s}).then(t => {
                for (var e of (this.visible = !1, this.clearTagsCache({module: this.$module}), a)) this.clearRecordFromCache(e);
                this.$root.$emit("vds::" + this.$module + "tags::reload"), this.clearModalData(), this.showSuccessNotification(this.translate("JS_TAG_ADDED"))
            }, t => {
                this.waiting = !1, this.showErrorNotification({message: t})
            })
        }
    }
});
var Vtiger_Component_ListFilter = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter, Vtiger_Mixins_ShowModal, Vtiger_Mixin_Tags, Vtiger_Mixin_ModuleModel, Vtiger_Mixin_FilterUtils, Vtiger_Mixin_UsersUtils],
    components: {
        "vds-filter-edit-options": App.loadComponent("FilterEditOptions"),
        "vds-recent-filters-list": App.loadComponent("RecentFiltersList"),
        "vds-delete-confirmation": App.loadComponent("DeleteConfirmation")
    },
    provide: function () {
        return {changeFilter: this.onChangeFilter, updateCurrentFilterDetails: this.updateFilterDetails}
    },
    inject: ["getListParams"],
    props: ["moduleProp", "selectedFilterProp", "selectedTagProp", "viewtype", "currentFilterDetails"],
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "form-group mb-0 mw-100"}, [_c("a", {
            staticClass: "p-0 text-decoration-none d-flex align-items-center w-100 btn btn-link",
            class: $module + "_filters",
            attrs: {id: "listFilter", tabindex: "0", href: "javascript:void(0)"}
        }, [$isLoading ? _c("span", {staticStyle: {"min-width": "150px"}}, [_c("vds-value-progress")], 1) : [_c("div", {
            staticClass: "h5 text-truncate selectedFilter mb-0",
            attrs: {title: selectedfilterlabel}
        }, [_v("\n                        " + _s(selectedfilterlabel) + "\n                    ")]), _v(" "), _c("i", {
            staticClass: "fa p-1",
            class: [showFilterIcon ? "fa-angle-up" : "fa-angle-down"]
        })]], 2), _v(" "), _c("b-popover", {
            ref: "popover",
            attrs: {
                show: showFilterIcon,
                target: "listFilter",
                placement: "bottom",
                boundaryPadding: popoverPosition,
                triggers: "click blur"
            },
            on: {
                "update:show": function (t) {
                    showFilterIcon = t
                }, show: onPopoverShow, shown: showListFilters
            }
        }, [buildFilterDOM ? _c("div", [_c("div", {
            staticClass: "listViewFilters p-3", on: {
                mouseover: function (t) {
                    showFilterIcon = !0
                }, mouseout: function (t) {
                    showFilterIcon = !1
                }
            }
        }, [_c("div", {staticClass: "d-flex bd-highlight align-items-center"}, [_c("div", {staticClass: "flex-grow-1 bd-highlight form-inline has-search position-relative"}, [_c("div", {staticClass: "form-control-feedback c-pointer"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: searchValue,
                expression: "searchValue"
            }],
            staticClass: "form-control w-100",
            attrs: {placeholder: getListFilterSearchPlaceHolder},
            domProps: {value: searchValue},
            on: {
                input: [function (t) {
                    t.target.composing || (searchValue = t.target.value)
                }, onSearchListFilter]
            }
        }), _v(" "), searchValue ? _c("div", {staticClass: "clearSearch c-pointer"}, [_c("span", {
            staticClass: "fa fa-times-circle text-grey-4 r-8  lh-0 position-absolute",
            on: {
                click: function (t) {
                    return clearSearch()
                }
            }
        })]) : _e()]), _v(" "), isFilterCreatable ? _c("div", {
            staticClass: "pl-2 bd-highlight c-pointer",
            on: {
                click: function (t) {
                    return showFilterEditModal("")
                }
            }
        }, [_c("button", {staticClass: "btn circle-icon-md"}, [_c("i", {staticClass: "fa fa-plus"})])]) : _e()]), _v(" "), _c("vds-recent-filters-list", {
            ref: "recentFiltersList",
            attrs: {"selected-filter-id": resolvedSelectedFilterId}
        }), _v(" "), _c("div", {staticClass: "filterLists"}, [_l(filters, (function (t, e) {
            return [_c("div", {staticClass: "filterList"}, [_c("div", {staticClass: "filterType py-2  m-0 defaultFontColor h6"}, [_v(_s("Mine" == e ? getMyFilterText : getSharedFilterText))]), _v(" "), _c("hr", {staticClass: "mt-1 mb-1"}), _v(" "), isAnyFilterShowINGroup(t) ? _c("div", {staticClass: "d-flex justify-content-center align-items-center h-100 "}, [_c("span", [_v(" " + _s(translate("LBL_NO")) + " " + _s(translate("LBL_LISTS").toLowerCase()) + " " + _s(translate("LBL_FOUND").toLowerCase()))])]) : _e(), _v(" "), _c("div", {staticClass: "row mx-0"}, [_l(t, (function (t, i, s) {
                return [_c("b-dropdown-item", {
                    directives: [{
                        name: "show",
                        rawName: "v-show",
                        value: !t.hide,
                        expression: "!filter.hide"
                    }],
                    key: t.id,
                    staticClass: "px-2",
                    class: {
                        active: resolvedSelectedFilterId == t.id,
                        "col-6 mr-3": s % 2 == 0,
                        col: s % 2 != 0,
                        "d-flex": !t.hide
                    },
                    attrs: {name: ["All" == t.viewname ? "allCvId" : ""], value: t.id}
                }, [_c("div", {
                    staticClass: "filterName py-1 d-flex w-100 rounded c-pointer align-items-center",
                    class: {active: resolvedSelectedFilterId == t.id}
                }, [_c("i", {
                    staticClass: "fa pr-2",
                    class: getFilterIconClass
                }), _v(" "), _c("a", {
                    staticClass: "text-decoration-none text-dark textOverflowEllipsis",
                    attrs: {href: getFilterRedirectUrl(t.id)},
                    on: {
                        click: function (e) {
                            return e.preventDefault(), onChangeFilter(t.id)
                        }
                    }
                }, [_c("span", {
                    directives: [{name: "b-tooltip", rawName: "v-b-tooltip"}],
                    staticClass: "h6 m-0 text-truncate filterTrigger",
                    attrs: {title: getViewTitle(t)}
                }, [_v(_s(getViewName(t)))])]), _v(" "), _c("div", {
                    staticClass: "sharedUserList",
                    attrs: {id: "sharedUserList" + t.id}
                }, [t.sharemembers && t.sharemembers.length > 0 && "Mine" == e ? _c("a", {
                    staticClass: "text-decoration-none text-dark outline-none",
                    attrs: {tabindex: "0", id: "sharedUsersList" + t.id}
                }, [_c("i", {staticClass: "fa-users px-2"})]) : _e(), _v(" "), _c("b-popover", {
                    attrs: {
                        container: "sharedUserList" + t.id,
                        target: "sharedUsersList" + t.id,
                        triggers: "focus"
                    }
                }, [_c("div", {staticClass: "px-3 py-2 sharedUsersPopover"}, [_c("div", {staticClass: "font-13 my-1"}, [_v(_s(translate("LBL_SHARED_MEMBERS")))]), _v(" "), _c("div", [_l(t.sharemembers, (function (t) {
                    return [_c("div", {
                        staticClass: "mw-100 text-truncate badge badge-secondary px-3 height-25px badge-pill my-1 font-13",
                        attrs: {title: getUserLabel(t)}
                    }, [_v(_s(getUserLabel(t)))])]
                }))], 2)])])], 1), _v(" "), t.editDisable ? _e() : [_c("b-dropdown", {
                    staticClass: "p-0 listFilterSettings",
                    attrs: {"no-caret": !0, variant: "link", left: "", title: translate("LBL_MORE")}
                }, [_c("i", {
                    staticClass: "fa fa-ellipsis-v text-grey-4",
                    attrs: {slot: "button-content"},
                    slot: "button-content"
                }), _v(" "), "Mine" == editFilterType && "Mine" == e ? _c("b-dropdown-item", [_c("div", {
                    on: {
                        click: function (e) {
                            return showFilterEditModal(t.id)
                        }
                    }
                }, [_c("i", {staticClass: "fa fa-pencil mr-1"}), _v("\n                                                            " + _s(translate("LBL_EDIT")) + "\n                                                        ")])]) : _e(), _v(" "), isFilterDuplicatable ? _c("b-dropdown-item", [_c("div", {
                    on: {
                        click: function (e) {
                            return showFilterEditModal(t.id, "duplicate")
                        }
                    }
                }, [_c("i", {staticClass: "fa fa-copy mr-1"}), _v("\n                                                            " + _s(translate("LBL_DUPLICATE")) + "\n                                                        ")])]) : _e(), _v(" "), "Mine" == editFilterType && "Mine" == e && isFilterShareable ? _c("b-dropdown-item", [_c("div", {
                    on: {
                        click: function (e) {
                            return showFilterEditModal(t.id, "share")
                        }
                    }
                }, [_c("i", {staticClass: "fa fa-share-alt mr-1"}), _v("\n                                                            " + _s(translate("LBL_SHARE")) + "\n                                                        ")])]) : _e(), _v(" "), "Mine" == editFilterType && "Mine" == e ? _c("b-dropdown-item", [_c("div", {
                    on: {
                        click: function (e) {
                            return showDeleteModalFn(t.id)
                        }
                    }
                }, [_c("i", {staticClass: "fa fa-trash mr-1"}), _v("\n                                                            " + _s(translate("LBL_DELETE")) + "\n                                                        ")])]) : _e(), _v(" "), isDefaultSelectable ? _c("b-dropdown-item", {
                    staticClass: "border-top",
                    class: [1 == t.setdefault || parseInt(t.setdefault) ? "bgLtGrey" : ""]
                }, [_c("div", {
                    on: {
                        click: function (e) {
                            return markDefault(t)
                        }
                    }
                }, [_c("i", {staticClass: "fa mr-1 fa-check"}), _v(" "), 1 == t.setdefault || parseInt(t.setdefault) ? _c("span", [_v(_s(translate("LBL_DEFAULT") + " " + translate("LBL_FILTER")))]) : _c("span", [_v(_s(translate("LBL_SET_AS_DEFAULT")))])])]) : _e()], 1)]], 2)])]
            })), _v(" "), Object.keys(t).length % 2 == 1 ? _c("div", {staticClass: "d-flex w-50 justify-content-start"}) : _e()], 2)])]
        }))], 2), _v(" "), _c("div", {staticClass: "filterLists"}, [_l(tags, (function (t, e) {
            return [_c("div", {staticClass: "filterList"}, [_c("div", {staticClass: "filterType py-2  m-0 defaultFontColor h6"}, [_v(_s("LBL_MINE" == e ? translate("LBL_MY_TAGS", "Settings:Vtiger") : translate("LBL_SHARED_TAGS")))]), _v(" "), _c("hr", {staticClass: "mt-1 mb-1"}), _v(" "), isAnyFilterShowINGroup(t) ? _c("div", {staticClass: "d-flex justify-content-center align-items-center h-100 "}, [_c("span", [_v(" " + _s(translate("LBL_NO")) + " " + _s(translate("LBL_TAGS").toLowerCase()) + " " + _s(translate("LBL_FOUND").toLowerCase()))])]) : _e(), _v(" "), _c("div", {staticClass: "row mx-0"}, _l(t, (function (t, e, i) {
                return _c("b-dropdown-item", {
                    directives: [{
                        name: "show",
                        rawName: "v-show",
                        value: !t.hide,
                        expression: "!tag.hide"
                    }],
                    key: t.id,
                    staticClass: "px-2",
                    class: {active: selectedTagId == t.id, "col-6 mr-3": i % 2 == 0, col: i % 2 != 0},
                    attrs: {value: t.id}
                }, [_c("div", {staticClass: "filterName py-1"}, [_c("i", {staticClass: "fa fa-tag pr-2 text-grey-4"}), _v(" "), _c("a", {
                    staticClass: "text-decoration-none text-dark textOverflowEllipsis",
                    attrs: {href: getFilterRedirectUrl(t.id, "tags")},
                    on: {
                        click: function (e) {
                            return e.preventDefault(), onChangeTag(t.id)
                        }
                    }
                }, [_c("span", {
                    directives: [{name: "b-tooltip", rawName: "v-b-tooltip"}],
                    staticClass: "w-100 h6 m-0 text-truncate",
                    attrs: {title: t.tag}
                }, [_v(_s(t.tag))])])])])
            })), 1)])]
        }))], 2)], 1)]) : _c("div", {
            staticStyle: {
                "min-height": "100px",
                "min-width": "250px"
            }
        }, [_v("\n                    " + _s(translate("LBL_LOADING")) + "...\n                ")])]), _v(" "), _c("vds-delete-confirmation", {
            ref: "deleteModal",
            attrs: {"modal-id": "showDeleteConfirmModal", "entity-type": "List"},
            on: {ok: deleteFilter, cancel: cancelDelete, hidden: onDeleteFilterModalHidden}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(getDeleteListHeader))]), _v(" "), _c("div", {
            attrs: {slot: "message"},
            domProps: {innerHTML: _s(deleteConfirmationMessage)},
            slot: "message"
        }), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_NO")))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_YES")))])])], 1)
    },
    data() {
        return {
            selectedFilterId: this.selectedFilterProp,
            selectedTagId: this.selectedTagProp,
            filters: {},
            editingFilter: "",
            showFilterEdit: !1,
            editFilterType: "Mine",
            show: !1,
            isSharedFilter: !1,
            showFilterIcon: !1,
            tags: {},
            allTags: {},
            loading: !1,
            popoverPosition: 0,
            searchValue: "",
            buildFilterDOM: !1
        }
    },
    computed: {
        selectedfilterlabel: function () {
            if (0 == Object.keys(this.filters).length && this.currentFilterDetails && this.currentFilterDetails.data) {
                let t = BaseModel.getModuleSpecificModel(this.$module, "Filter", this.currentFilterDetails.data);
                return t ? this.getViewName(t) : this.currentFilterDetails.data.viewname
            }
            if (Object.keys(this.filters).length <= 0) return "";
            var t;
            for (let e in this.filters) if (this.filters[e][this.resolvedSelectedFilterId]) {
                t = this.filters[e][this.resolvedSelectedFilterId];
                break
            }
            return t ? this.getViewName(t) : this.selectedTagLabel
        },
        resolvedSelectedFilterId() {
            return this.selectedTagId ? "" : this.selectedFilterId
        },
        selectedTagLabel() {
            return this.selectedTagId && this.allTags[this.selectedTagId] ? this.allTags[this.selectedTagId].tag : ""
        },
        getFilterIconClass: () => "fa-list text-grey-4",
        getListFilterSearchPlaceHolder() {
            return this.translate("LBL_SEARCH_FOR_LIST")
        },
        getMyFilterText() {
            return this.translate("LBL_MY_LIST")
        },
        getSharedFilterText() {
            return this.translate("LBL_SHARED_LIST")
        },
        getDeleteListHeader() {
            return this.translate("LBL_DELETE_LIST")
        },
        deleteConfirmationMessage() {
            return this.isSharedFilter ? this.translate("JS_SHARED_LIST_DELETE_CONFIRMATION") : this.translate("JS_LBL_ARE_YOU_SURE_YOU_WANT_TO_DELETE")
        },
        isFilterDuplicatable: () => !0,
        isFilterShareable: () => !0,
        isDefaultSelectable: () => !0,
        isFilterCreatable() {
            return this.$_currentModuleModel.isListCreatable
        }
    },
    mounted: function () {
        this.init(), this.getBoundaryPaddingValue()
    },
    created() {
        this.usersList = {}, this.getUserAndGroups(!1).then(t => {
            t && this.getSharedUserLables()
        })
    },
    methods: {
        getSharedUserLables() {
            this.usersList["All::Users"] = this.translate("LBL_ALL_USERS");
            let t = this.appStore.get("users_groups_info");
            for (let e in t) {
                let i = t[e];
                for (let t in i) this.usersList[t] = i[t]
            }
        }, getUserLabel(t) {
            if (this.usersList[t]) return this.usersList[t]
        }, getBoundaryPaddingValue() {
            setTimeout(() => {
                this.popoverPosition = $("#listFilter").offset().left
            }, 0)
        }, init() {
            this.buildFilterDOM && (this.loadFilters(), this.initTags(), this.$root.$on("vds::change::filter", this.onChangeFilter), this.$on("vds::update::current::filter::details", this.updateFilterDetails), this.$root.$off("vds::load::filters"), this.$root.$on("vds::load::filters", this.loadFilters))
        }, initTags() {
            this.loadModuleTags(), this.$root.$on("vds::" + this.$module + "tags::reload", () => {
                this.loadModuleTags(!0)
            })
        }, showFilterEditModal: function (t, e) {
            this.editingFilter = t, this.onClose(), this.showModal({
                componentName: "FilterEditOptions",
                componentData: {
                    "editing-filter": t,
                    "show-edit-options-prop": !0,
                    "edit-mode-prop": e,
                    isSharedFilter: this.isSharedFilter,
                    module: this.$module
                },
                modalOnModalMode: !1
            }), this.$once("vds::change::filter", this.triggerFilterChange), this.$once("vds::remove::filter", this.triggerFilterRemove), App.root.$emit("vds::list::filter::add::click", this.$module)
        }, showDeleteModalFn(t) {
            this.editingFilter = t, this.onClose(), this.$refs.deleteModal.$refs.deleteConfirmation.show(), this.$once("vds::change::filter", this.triggerFilterChange), this.$once("vds::remove::filter", this.triggerFilterRemove)
        }, loadFilters: function () {
            this.filters = {}, this.loading = !0, this.getModuleFilters(this.$module).then(t => {
                this.loading = !1, this.filters = t
            })
        }, loadModuleTags(t = !1) {
            let e = "Tasks" == this.$module ? "Calendar" : this.$module;
            this.getMyTags({module: e, ignoreCache: t}).then(t => {
                this.tags = t;
                let e = {};
                for (let t in this.tags) $.extend(e, this.tags[t]);
                this.allTags = e, this.validateSelectedTag()
            })
        }, loadFilterDetails: function () {
            var t = {module: this.$module, id: this.selectedFilterId};
            this.getFilterDetails(t).then(t => {
                this.$emit("filterchange", t)
            })
        }, onChangeFilter: function (t) {
            let e = this.getListParams(), i = new SearchParams;
            e.tag_params = i, e.text = "", this.selectedFilterId = t, this.selectedTagId = "", this.appStore.set({
                key: "List_Filter_Change",
                data: t
            }), this.removeFilterConditions(e), this.appStore.set({
                key: "listParams",
                data: e
            }), this.$emit("update:selectedFilterProp", this.selectedFilterId), this.$emit("update:selectedTagProp", this.selectedTagId), this.onClose(), App.root.$emit("vds::list::filter::change", {
                moduleName: this.$module,
                filterName: this.selectedfilterlabel
            })
        }, onChangeTag: function (t) {
            this.getAllFilterId(this.$module).then(e => {
                let i = this.getListParams(), s = new SearchParams;
                s.pushAll("tags", "e", t), i.tag_params = s, this.appStore.set({key: "listParams", data: i});
                this.selectedFilterId;
                this.selectedFilterId = e, this.$emit("update:selectedFilterProp", e), this.selectedTagId = t, this.$emit("update:selectedTagProp", t), this.onClose()
            })
        }, updateFilterDetails(t) {
            this.appStore.request("api_get", {
                url: "/filters",
                params: {module: this.$module, id: t},
                key: "list_filter_details"
            }).then(e => {
                if (1 == e.data.status || 3 == e.data.status && this.$currentUser && this.$currentUser.id == e.data.userid) {
                    let i = BaseModel.getModuleSpecificModel(this.$module, "Filter", jQuery.extend(!0, {}, e));
                    Vue.set(this.filters.Mine, t, i)
                }
                this.$emit("vds::resolve::filterfields", e), this.appStore.set({key: "list_filter_updated", data: e});
                let i = this.$refs.recentFiltersList.recentFiltersList;
                if (i) {
                    let s = _.findWhere(i, {id: t});
                    s && (s.name = e.data.viewname)
                }
            })
        }, onSearchListFilter: function (t) {
            let e = this.searchValue;
            for (let t in this.filters) {
                let i = this.filters[t];
                for (let t in i) i[t].viewname.toLowerCase().includes(e.toLowerCase()) ? Vue.set(i[t], "hide", !1) : Vue.set(i[t], "hide", !0)
            }
            for (let t in this.tags) {
                let i = this.tags[t];
                for (let t in i) {
                    let s = i[t];
                    s.tag.toLowerCase().includes(e.toLowerCase()) ? Vue.set(s, "hide", !1) : Vue.set(s, "hide", !0)
                }
            }
        }, clearSearch() {
            this.searchValue = "", this.onSearchListFilter()
        }, showListActionModal: function (t) {
            this.editingFilter = t, this.$refs.listActionModal.show()
        }, onClose() {
            this.$refs.popover.$emit("close")
        }, isAnyFilterShowINGroup: function (t) {
            let e = _.pluck(Object.values(t), "hide");
            return !_.contains(e, !1) && !_.contains(e, void 0)
        }, triggerFilterChange(t) {
            this.$emit("update:selectedFilterProp", t)
        }, triggerFilterRemove(t) {
            Vue.delete(this.filters.Mine, t), this.$refs.recentFiltersList.getRecentFiltersList()
        }, onPopoverShow() {
            "Kanban" != this.viewtype && this.$refs.popover._toolpop.getTipElement().classList.add("listFilterPopover")
        }, validateSelectedTag() {
            if (this.selectedTagId && !(this.selectedTagId in this.allTags)) {
                this.selectedTagId = "";
                let t = this.getListParams(), e = new SearchParams;
                t.tag_params = e, this.$emit("update:selectedTagProp", this.selectedTagId)
            }
        }, getViewName(t) {
            return t.getViewName(t.viewname, this.$module)
        }, getViewTitle(t) {
            return t.getTitle(t.viewname, this.$module)
        }, deleteFilter: function () {
            let t = this.editingFilter;
            if (!t) return void this.$root.$emit("bv::hide::modal", "showDeleteConfirmModal");
            let e = {id: t, module: this.$module};
            this.appStore.request("api_delete", {url: "/filters", params: e}).then(e => {
                e.success && (this.showSuccessNotification(this.translate("LBL_DELETED_SUCCESSFULLY", "Settings:Vtiger")), this.updateFilterChangeToListView(t))
            }, t => {
                this.showErrorNotification(t)
            })
        }, updateFilterChangeToListView(t) {
            var e = AppStorage.get(this.$module + "_listParams");
            if (e) {
                var i = e.filterid;
                i && i == t ? this.getDefaultFilterDetails(this.$module).then(t => {
                    t && t.id && (this.$root.$emit("bv::hide::modal", "showDeleteConfirmModal"), this.$emit("vds::change::filter", t.id))
                }) : this.$root.$emit("bv::hide::modal", "showDeleteConfirmModal")
            } else this.$root.$emit("bv::hide::modal", "showDeleteConfirmModal");
            this.$emit("vds::remove::filter", t), this.$root.$emit("bv::hide::modal", "list-action-modal")
        }, cancelDelete: function () {
            this.$root.$emit("bv::hide::modal", "showDeleteConfirmModal")
        }, onDeleteFilterModalHidden: function () {
            this.showFilterEdit = !1
        }, markDefault(t) {
            let e = {module: this.$module, id: t.id};
            e.setdefault = !t.setdefault;
            let i, s = this.filters, l = !1;
            for (var a in s) {
                let e = s[a];
                for (var r in e) {
                    let s = e[r];
                    if (s.setdefault && t.id != s.id) {
                        s.setdefault = !s.setdefault, i = s, l = !0;
                        break
                    }
                }
                if (l) break
            }
            this.appStore.request("api_patch", {url: "filters", params: e}).then(() => {
                t.setdefault = !t.setdefault, t.setdefault && this.showSuccessNotification(this.translate("JS_YOUR_DEFAULT_LIST", this.$module, t.viewname))
            })
        }, showListFilters() {
            this.buildFilterDOM = !0, App.root.$emit("vds::list::filter::click", this.$module)
        }
    },
    watch: {
        selectedFilterProp: function (t) {
            "" != t && (this.selectedFilterId = t)
        }, selectedFilterId: function (t) {
            "" != t && this.loadFilterDetails()
        }, selectedTagId(t) {
            this.$emit("filterchange")
        }, viewtype: {
            handler() {
                this.getBoundaryPaddingValue()
            }
        }, buildFilterDOM(t) {
            t && this.init()
        }
    },
    $_onBoard: {steps: {onboard_managepipeline: ["onboard_managepipeline_step1"]}}
});
var Vtiger_Component_ListFilterEdit = App.vtComponent.extend({
    model: {prop: "showFilterEdit", event: "vds::filter::modal::visible::status"},
    components: {
        "vds-filter-configure-view": App.loadComponent("FilterConfigureView"),
        "vds-filter-conditions": App.loadComponent("FilterConditions"),
        "vds-filter-share-view": App.loadComponent("FilterShareView")
    },
    mixins: [Vtiger_Mixin_Filter, Vtiger_Mixin_Validators],
    provide: function () {
        return {
            goToStep: this.goToStep,
            updateFilterFields: this.updateFilterFields,
            validateAndSaveFilter: this.validateAndSaveFilter
        }
    },
    props: ["editingFilter", "mode", "filterEnabledFields", "showFilterEdit"],
    data() {
        return {
            filterEditSteps: {
                "filter-configure-view": "LBL_LIST_INFORMATION",
                "filter-conditions": "LBL_CHOOSE_FILTER_CONDITIONS",
                "filter-share-view": "LBL_SHARE_THIS_LIST"
            }, currentFilterEditStep: "", filterModel: new Vtiger_Filter_Model, showModal: this.showFilterEdit
        }
    },
    computed: {
        getTabbleSteps() {
            return this.filterEditSteps
        }
    },
    watch: {
        showFilterEdit(t) {
            this.showModal = this.showFilterEdit
        }, showModal(t) {
            this.$emit("vds::filter::modal::visible::status", t)
        }
    },
    mounted() {
        this.currentFilterEditStep = Object.keys(this.filterEditSteps)[0], this.changeCurrentFilterEditStep(), this.getFilterDetails()
    },
    methods: {
        changeCurrentFilterEditStep() {
            this.editingFilter && "duplicate" != this.mode && (this.currentFilterEditStep = Object.keys(this.filterEditSteps)[1])
        }, goToStep(t) {
            this.currentFilterEditStep = t
        }, isStepActive(t) {
            return this.currentFilterEditStep == t
        }, getFilterDetails: function () {
            this.editingFilter && this.appStore.request("api_get", {
                url: "/filters",
                params: {module: this.$module, id: this.editingFilter},
                key: "list_quick_filter_details"
            }).then(t => {
                "object" == typeof t && (this.filterModel = BaseModel.getModuleSpecificModel(this.$module, "Filter", t), "duplicate" == this.mode && Vue.set(this.filterModel, "id", ""))
            })
        }, updateFilterFields: function (t) {
            Vue.set(this.filterModel, "fields", t)
        }, postSaveFilter(t) {
            this.$root.$emit("vds::change::filter", t.id), this.$bubble("vds::update::current::filter::details", t.id), this.appStore.set({
                key: "List_Filter_Change",
                data: t.id
            });
            let e = this.appStore.get("listParams");
            e.sortfield = this.filterModel.sortfield, e.sortorder = this.filterModel.sortorder, this.appStore.set({
                key: "listParams",
                data: e
            }), this.postSaveActions(), this.displayMessage()
        }, displayMessage() {
            this.showSuccessNotification(this.translate("JS_LIST_SAVED"))
        }, postSaveActions() {
            this.$root.$emit("bv::hide::modal", "modal-list-edit"), this.$root.$emit("bv::hide::modal", "list-action-modal"), this.$bubble("vds::list::reload", {reloadCount: !0})
        }, validateAndSaveFilter() {
            this.$validator.validate().then(t => {
                if (t) this.saveFilter(); else {
                    let t = this.$validator.fields.items, i = this.$validator.errors.items, s = !1;
                    for (var e in i) {
                        let l = i[e].id, r = t[_.findKey(t, {id: l})];
                        if (jQuery(r.el).closest(".tabs").length) {
                            s = !0;
                            break
                        }
                    }
                    s && this.goToStep("filter-conditions")
                }
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "modalListEdit",
            attrs: {
                id: "modal-list-edit",
                lazy: !0,
                "hide-footer": "",
                "hide-header": "",
                size: "lg",
                title: "",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0
            },
            model: {
                value: showModal, callback: function (t) {
                    showModal = t
                }, expression: "showModal"
            }
        }, [_c("div", ["share" == mode ? _c("div", [_c("div", {staticClass: "form-inline border-bottom border-2"}, [_c("span", {staticClass: "w-75"}, [_v(_s(translate("LBL_SHARE_THIS_LIST")))]), _v(" "), _c("span", {
            staticClass: "ml-auto c-pointer h4",
            on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "modal-list-edit")
                }
            }
        }, [_c("i", {staticClass: "fa fa-times-circle fa-w-16"})])]), _v(" "), _c("div", {staticClass: "m-3"}, [_c("vds-filter-share-view", {
            attrs: {
                "filter-details": filterModel,
                mode: mode
            }
        })], 1)]) : _c("div", [_c("div", {staticClass: "form-inline border-bottom border-2"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: filterModel.viewname,
                expression: "filterModel.viewname"
            }, {name: "validate", rawName: "v-validate", value: {required: !0}, expression: "{required:true}"}],
            staticClass: "border-0 form-control w-75",
            attrs: {type: "text", placeholder: translate("LBL_ENTER_LISTNAME"), name: "listName"},
            domProps: {value: filterModel.viewname},
            on: {
                input: function (t) {
                    t.target.composing || $set(filterModel, "viewname", t.target.value)
                }
            }
        }), _v(" "), _c("span", {
            staticClass: "ml-auto c-pointer h4", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "modal-list-edit")
                }
            }
        }, [_c("i", {staticClass: "fa fa-times-circle fa-w-16"})])]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("listName"),
                expression: "errors.has('listName')"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))]), _v(" "), _c("div", {staticClass: "m-3"}, [Object.keys(getTabbleSteps).length > 1 ? _c("div", {
            staticClass: "btn-group d-flex justify-content-center mb-4",
            attrs: {role: "group"}
        }, _l(filterEditSteps, (function (t, e) {
            return _c("button", {
                staticClass: "btn ",
                class: [isStepActive(e) ? "active btn-primary" : "btn-outline-secondary"],
                attrs: {type: "button"},
                on: {
                    click: function (t) {
                        return goToStep(e)
                    }
                }
            }, [_v(_s(translate(t)))])
        })), 0) : _e(), _v(" "), _c("keep-alive", _l(filterEditSteps, (function (t, e) {
            return isStepActive(e) ? _c("vds-" + e, {
                key: e,
                ref: e,
                refInFor: !0,
                tag: "component",
                staticClass: "tabs",
                attrs: {
                    "filter-id": editingFilter,
                    "filter-details": filterModel,
                    "filter-enabled-fields": filterEnabledFields,
                    mode: mode,
                    "editing-filter": editingFilter
                }
            }) : _e()
        })), 1)], 1)])])])
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_ListHeader = App.vtComponent.extend({
    functional: !0, render(e, {props: t, parent: l}) {
        let i = e("vds-list-filter", {
                props: {"module-prop": l.module, "selected-filter-prop": l.listParams.filterid},
                on: {
                    "update:selectedFilterProp"(e) {
                        l.listParams.filterid = e
                    }, filterchange: l.filterChange
                },
                ref: "filterComponent"
            }),
            r = e("div", {class: ["col-3", "justify-content-start", "pl-0"]}, [e("div", {class: ["d-flex", "w-100", "justify-content-start"]}, [i])]),
            s = e(!1);
        "Calendar" == l.listViewMode && (s = e("vds-calendar-view-header", {}));
        let d = e("div", {class: "flex-grow-1 d-flex justify-content-start pl-0"}, [s]), a = e("vds-list-actions", {
                props: {
                    "current-list-mode": l.listViewMode,
                    "groupby-field": l.kanbanGroupByField,
                    "selected-filter": l.listParams.filterid
                }, on: {
                    "update:currentListMode"(e) {
                        l.listViewMode = e
                    }, "update:selectedFilter"(e) {
                        l.kanbanGroupByField = e
                    }
                }
            }), n = e("div", {class: ["col-auto", "px-0"]}, [a]),
            o = e("div", {class: ["d-flex", "align-items-center", "pl-4", "pr-2"]}, [r, d, n]);
        return e("div", {class: ["container-fluid", "py-2", "px-0", "bg-light"], attrs: {id: "moduleHeader"}}, [o])
    }
});
var Vtiger_Component_ListLimitAlert = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ListLoadingTable = App.vtComponent.extend({
    functional: !0,
    props: {list: {type: [Array, Object]}},
    render(e, t) {
        var {props: r} = t, s = [];
        for (var a in r.list) {
            var l = e("tr", {class: ["height-56px"]}, [e("td", {
                class: ["empty"],
                style: {"vertical-align": "middle"}
            }, [e("vds-value-progress", {}, [])])]);
            s.push(l)
        }
        var d = e("table", {class: ["table fixed_header w-100 border"]}, [e("thead", {class: ["bg-light"]}, [e("tr", {class: ["text-dark"]}, [e("th", {class: ["empty"]}, [e("vds-value-progress", {}, [])])])]), e("tbody", {}, s)]);
        return e("div", {}, [d])
    }
});
var Vtiger_Component_ListMassComment = Vtiger_Component_Comment.extend({
    props: ["recordIds", "modulename", "getSelectedRecords", "reloadList"], data() {
        return {
            visible: !1,
            waiting: !1,
            content: "",
            selectedRecords: this.recordIds,
            usersAndGroups: [],
            documentIds: [],
            postingComment: !1
        }
    }, render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "massComment",
                size: "lg",
                lazy: !0,
                title: translate("LBL_COMMENT"),
                "hide-footer": "",
                noCloseOnEsc: !0,
                noCloseOnBackdrop: !0,
                "header-class": "px-4 py-3 bgLtGrey"
            }, model: {
                value: visible, callback: function (t) {
                    visible = t
                }, expression: "visible"
            }
        }, [_c("div", {staticClass: "justify-content-center commentContainer"}, [_c("div", [_c("vds-rte", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: {required: !0},
                expression: "{required : true}"
            }],
            attrs: {
                "extra-config": commentEditorConfig,
                "placeholder-text": translate("LBL_POST_YOUR_COMMENT_HERE"),
                name: "commentcontent",
                "data-vv-validate-on": "null"
            },
            model: {
                value: content, callback: function (t) {
                    content = t
                }, expression: "content"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("commentcontent"),
                expression: "errors.has('commentcontent')"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_LBL_COMMENT_VALUE_CANT_BE_EMPTY")))]), _v(" "), _c("div", {
            staticClass: "d-flex justify-content-between align-items-center px-2 commentBottomBar",
            on: {
                click: function (t) {
                    return hideEditor("false")
                }
            }
        }, [_c("div", {staticClass: "d-flex justify-content-start w-75"}, [_c("b-dropdown", {
            attrs: {
                size: "md",
                variant: "link",
                "toggle-class": "text-decoration-none text-dark"
            }
        }, [_c("template", {slot: "button-content"}, [_c("i", {staticClass: "fa fa-upload mr-1"}), _v(_s(translate("LBL_ATTACH_FILES")))]), _v(" "), _c("b-dropdown-item-button", [_c("label", {
            staticClass: "mb-0 c-pointer",
            attrs: {for: "uploadFromComputer"}
        }, [_v(_s(translate("LBL_FROM_COMPUTER", "Documents")))]), _v(" "), _c("b-file", {
            staticClass: "fileElement",
            staticStyle: {display: "none"},
            attrs: {id: "uploadFromComputer", size: "sm", multiple: !0, plain: ""},
            model: {
                value: uploadedFiles, callback: function (t) {
                    uploadedFiles = t
                }, expression: "uploadedFiles"
            }
        })], 1), _v(" "), _c("b-dropdown-item-button", {on: {click: uploadFileFromDocuments}}, [_v("\n\t\t\t\t\t\t\t\t\t\t\t" + _s(translate("LBL_FROM_CRM", "Documents")) + "\n\t\t\t\t\t\t\t\t\t\t")])], 2), _v(" "), _c("span", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover",
                modifiers: {hover: !0}
            }],
            staticClass: "fa fa-info-circle mt-2",
            attrs: {title: translate("LBL_MAX_UPLOAD_SIZE") + " " + maxUploadSize + " " + translate("LBL_MB")}
        })], 1), _v(" "), _c("div", {staticClass: "d-flex  justify-content-end w-25"}, [isPrivateModule ? _c("b-dropdown", {
            staticClass: "my-2 mx-1",
            attrs: {
                variant: "primary",
                disabled: postingComment,
                split: "",
                size: "md",
                text: translate(okBtnTitle, $module)
            },
            on: {
                click: function (t) {
                    return validateAndSave(!0)
                }
            }
        }, [_c("b-dropdown-item", {
            attrs: {disabled: postingComment}, on: {
                click: function (t) {
                    return validateAndSave(!1)
                }
            }
        }, [_v("\n                                            " + _s(translate("LBL_POST_PUBLISH", $module)) + "\n                                        ")])], 1) : _c("button", {
            staticClass: "btn btn btn-primary rounded my-2 mx-1",
            attrs: {disabled: postingComment, type: "button"},
            on: {
                click: function (t) {
                    return validateAndSave(!0)
                }
            }
        }, [_v(_s(translate(okBtnTitle, $module)))])], 1)]), _v(" "), files.length ? _c("div", {staticClass: "row mx-0 mt-1"}, _l(files, (function (t, e) {
            return _c("span", {staticClass: "mx-2 my-1 p-2 rounded bg-grey-hue-4"}, [_v("\n                                    " + _s(t.name) + "\n                                    "), _c("i", {
                staticClass: "fa fa-times-circle fa-w-16 ml-2 c-pointer",
                on: {
                    click: function (t) {
                        return files.splice(e, 1)
                    }
                }
            })])
        })), 0) : _e()], 1)])])
    }, created() {
        this.init()
    }, methods: {
        init() {
            this.getUsersAndGroups()
        }, save() {
            this.saveComment()
        }, async saveComment() {
            this.postingComment = !0, this.waiting = !0;
            var t = await this.getSelectedRecords();
            let e = {
                module: "ModComments",
                source_module: this.modulename,
                commentcontent: this.content,
                assigned_user_id: this.$currentUser.id,
                related_to: "",
                documentids: this.documentIds,
                selected_ids: t,
                _files: this.files
            };
            this.appStore.request("api_post", {url: "masscomment", params: e}).then(t => {
                this.postingComment = !1, this.showSuccessNotification(this.translate("JS_COMMENT_POSTED_SUCCESSFULLY")), this.selectedRecords.splice(0), this.visible = !1, this.reloadList()
            }, t => {
                this.waiting = !1, this.showErrorNotification({message: t})
            })
        }, registerWatchForDraft() {
        }
    }
});
var Vtiger_Component_ListMassEditFields = App.vtComponent.extend({
    props: ["recordIds", "reloadList"],
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_Validators, Vtiger_Mixin_ReferenceAutoSelect, Vtiger_Mixin_PicklistDependency, App.loadMixin("Record"), App.loadMixin("SalesStageProbability", "Potentials")],
    data() {
        return {
            selectedRecords: this.recordIds,
            record: Vtiger_Record_Model.getCleanInstance(this.$module),
            massEditSelectedFields: [],
            hasClosedRecords: !1
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "massEditFields",
                size: "lg",
                lazy: !0,
                title: translate("LBL_MASS_EDITING"),
                "ok-only": "",
                "ok-title": translate("LBL_SAVE"),
                "no-close-on-backdrop": !0,
                "header-class": "px-4 py-3 bgLtGrey"
            }, on: {
                ok: function (e) {
                    return e.preventDefault(), validateAndSave()
                }
            }
        }, [hasClosedRecords ? _c("div", {staticClass: "d-flex"}, [_c("span", {staticClass: "alert alert-warning rounded"}, [_v("\n                            " + _s(translate("LBL_CLOSED_RECORDS_SELECTED", "ClosedState")) + "\n                        ")])]) : _e(), _v(" "), _c("div", {staticClass: "mb-2"}, [_v("\n                        " + _s(translate("LBL_AVAILABLE_FIELDS")) + "\n                    ")]), _v(" "), _c("div", {staticClass: "d-flex mb-4"}, [_c("span", {staticClass: "col-6 p-0"}, [_c("v-select2", {
            attrs: {
                name: "massEdit",
                options: massEditableFields
            }, on: {change: updateFields}
        })], 1)]), _v(" "), massEditSelectedFields.length ? _c("div", {staticClass: "mb-1"}, [_v(_s(translate("LBL_SELECTED_FIELDS")) + " (" + _s(massEditSelectedFields.length) + ")")]) : _e(), _v(" "), massEditSelectedFields ? _c("form", {
            staticClass: "form p-0 m-0",
            on: {
                submit: function (e) {
                    return e.stopPropagation(), e.preventDefault(), validateAndSave()
                }
            }
        }, _l(massEditSelectedFields, (function (e, t) {
            return _c("div", {
                staticClass: "row  p-2",
                class: [editFieldList[e].isFullWidthField ? "align-items-begin" : "align-items-center"]
            }, [_c("label", {staticClass: "massEditLabel col-4"}, [_v(_s(getFieldLabel(editFieldList[e]))), editFieldList[e].mandatory ? _c("span", {staticClass: "text-warning px-1"}, [_v("*")]) : _e()]), _v(" "), massEditSelectedFields.includes(e) ? _c("span", {
                key: e + "_edit",
                staticClass: "massEditField col-7"
            }, [_c("ui-field-edit-type", _b({
                attrs: {
                    field: editFieldList[e],
                    record: record
                }
            }, "ui-field-edit-type", getFieldSepecificProps(editFieldList[e]), !1))], 1) : _e(), _v(" "), _c("span", {
                staticClass: "col-1 c-pointer p-0",
                on: {
                    click: function (t) {
                        return removeField(e)
                    }
                }
            }, [_c("i", {staticClass: "fa far fa-times-circle text-grey-4", attrs: {"aria-hidden": "true"}})])])
        })), 0) : _e()])
    },
    computed: {
        editFieldList() {
            return this.$_currentModuleModel.fields
        }, massEditableFields() {
            let e = [];
            if (0 === Object.keys(this.editFieldList).length) return e;
            for (var t in this.editFieldList) {
                let s = this.editFieldList[t], d = s.isEditable;
                if (!d && s.isCompositeParent) {
                    let e = s.getCompositeChilds();
                    for (let t in e) {
                        let i = e[t];
                        if (i.isEditable) {
                            d = i.isEditable;
                            break
                        }
                    }
                }
                if (this.editFieldList[t].isMassEditable && d && !this.massEditSelectedFields.includes(this.editFieldList[t].fieldname) && !this.isTaxField(this.editFieldList[t])) {
                    var i = {};
                    if (this.editFieldList[t].isCompositeChild) continue;
                    i.value = this.editFieldList[t].fieldname, i.label = this.getFieldLabel(this.editFieldList[t]), (this.isRichTextField(this.editFieldList[t]) || this.isTextAreaField(this.editFieldList[t])) && (i.isFullWidthField = !0), e.push(i)
                }
            }
            return e
        }, masterRecordModel() {
            return this.record
        }, masterModuleModel() {
            return this.$_currentModuleModel
        }, picklistDependency_DataFields() {
            return this.record
        }
    },
    methods: {
        removeField(e) {
            Vue.delete(this.record, e), Vue.set(this, "massEditSelectedFields", _.without(this.massEditSelectedFields, e))
        },
        addField(e) {
            -1 === this.massEditSelectedFields.indexOf(e) && this.massEditSelectedFields.push(e)
        },
        updateFields(e) {
            e && (this.massEditSelectedFields.indexOf(e) >= 0 && alert(this.translate("LBL_ALREADY_EXISTS", "Settings:ModuleManager")), this.addField(e))
        },
        getFieldSepecificProps(e) {
            var t = {};
            if ("owner" === e.type.name) t = {emptyOption: !0}; else if ("reference" == e.type.name && _.size(e.type.relatedModules) > 0) {
                let i = VTHelper.getInventoryModules(), s = e.type.relatedModules[0];
                i.includes(s) && (t = {createAllowed: !1})
            }
            return t
        },
        validateAndSave() {
            this.$validator.validate().then(e => {
                e && this.saveMassEditFields()
            })
        },
        saveMassEditFields() {
            let e = this.selectedRecords, t = {module: this.$module, selected_ids: e},
                i = jQuery.extend(!0, {}, this.record);
            var s = this.convertToDBFormat(i, this.$_currentModuleModel);
            for (var d in this.record) t[d] = s[d];
            this.$_currentModuleModel && this.$_currentModuleModel.isInventoryModule && (t.ajxaction = "DETAILVIEW"), this.appStore.request("api_put", {
                url: "masssave",
                params: t
            }).then(e => {
                this.$root.$emit("bv::hide::modal", "massEditFields"), this.selectedRecords.splice(0), this.massEditSelectedFields.splice(0), this.reloadList({massAction: !0})
            }, e => {
                this.showErrorNotification({message: e})
            })
        },
        intializeReferenceFieldWatchers() {
            let e = this.$_currentModuleModel.getFieldsOfType(["reference", "multireference"]);
            for (let t in e) this.$watch(() => ({fieldName: t, fieldValue: this.record.get(t)}), e => {
                e.fieldValue && "0" != e.fieldValue.id && this.addField(e.fieldName)
            })
        },
        checkClosedRecords() {
            this.appStore.request("api_get", {
                url: "/records",
                params: {module: "ClosedState", checkRecords: this.selectedRecords}
            }).then(e => {
                e.length > 0 && (this.hasClosedRecords = !0)
            })
        },
        isRichTextField: e => "34" === e.uitype,
        isTextAreaField: e => "19" == e.uitype || "21" == e.uitype && e.isCustomField,
        isTaxField: e => "83" == e.uitype,
        getFieldLabel(e) {
            return e.isCompositeParent ? this.translate("LBL_COMPOSITE_" + e.fieldType) : e.label
        }
    },
    created() {
        this.setStoreEnvironmentForReference(), this.$watch("$_currentModuleModel", () => {
            this.intializeReferenceFieldWatchers()
        }, {immediate: !0}), this.checkClosedRecords()
    },
    $_veeValidate: {validator: "new"}
});
var Vtiger_Component_ListModeActions = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel],
    props: {currentListMode: {type: String, default: "List"}},
    data: () => ({
        viewModes: [{name: "Kanban", icon: "fa-kanban", label: "LBL_KANBAN_VIEW"}, {
            name: "List",
            icon: "fa-th-list",
            label: "LBL_LIST_VIEW"
        }, {name: "Calendar", icon: "fa-calendar", label: "LBL_CALENDAR_VIEW"}, {
            name: "Folder",
            icon: "fa-th-large",
            label: "LBL_THUMBNAIL_VIEW"
        }, {name: "Card", icon: "fa-th", label: "LBL_CARD_VIEW"}]
    }),
    computed: {
        listViewModes() {
            let e = this.$_currentModuleModel, t = [];
            for (let n of this.viewModes) ("Kanban" == n.name && e.isKanbanViewSupported || "Calendar" == n.name && e.isCalendarViewSupported || "Folder" == n.name && e.isFolderViewSupported || "Card" == n.name && e.isCardViewSupported || "List" == n.name) && t.push(n);
            return t
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "btn-group d-flex justify-content-center vt-view-switch",
            class: {"mr-3": listViewModes.length > 1}
        }, _l(listViewModes, (function (e) {
            return listViewModes.length > 1 ? _c("button", {
                staticClass: "btn c-pointer py-2",
                class: [currentListMode == e.name ? "active btn-primary text-white shadow-none" : "btn-secondary text-dark"],
                attrs: {title: translate(e.label)},
                on: {
                    click: function (t) {
                        return $emit("vds::list::mode::switch", e.name)
                    }
                }
            }, [_c("i", {staticClass: "py-1", class: [e.icon]})]) : _e()
        })), 0)
    }
});
var Vtiger_Component_ListModuleSpecificMassActions = App.vtComponent.extend({
    props: {
        selectedrecord: {type: [Array, Object, String]},
        currentModule: {type: String},
        getSelectedRecords: {type: Function},
        loadList: {type: Function},
        listParams: {type: Object},
        record: {},
        recordIds: {},
        selectedRecordsCount: {type: [String, Number]}
    }, render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ListRowActions = App.vtComponent.extend({
    props: ["row"], data: function () {
        return {}
    }, methods: {
        markascompleted(t, e) {
            if (e) {
                let e = {module: "Calendar"};
                e.id = t, e.field = "taskstatus", e.value = "Completed", this.appStore.request("api_patch", {
                    url: "records",
                    params: jQuery.extend({}, e)
                }).then(t => {
                    t && (this.row.set("taskstatus", t.taskstatus), this.row.set("isclosed", t.isclosed))
                }, t => {
                    alert(t)
                })
            }
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("label", {}, [1 != row.isClosed && "Tasks" == $module ? _c("input", {
            attrs: {
                type: "checkbox",
                "data-id": row.getId()
            }, domProps: {value: row.getId()}, on: {
                change: function (t) {
                    markascompleted(row.getId(), t.target.checked)
                }
            }
        }) : _e()])])
    }
});
var Vtiger_Component_ListRowSecondaryActions = App.vtComponent.extend({
    functional: !0,
    inject: ["reLoadListRecords", "getListParams"],
    props: {row: {type: Object}, compactMode: {type: Boolean}, currentFilterDetails: {type: Object}},
    render: (e, t) => e("div", {}, [])
});
var Vtiger_Component_ListSearchResults = App.vtComponent.extend({
    props: {getListParams: {}, ismultiselectable: {type: Boolean}}, computed: {
        selectedResults: {
            get() {
                return this.appStore.get("list_searchresult")
            }, set(e) {
                this.appStore.set({key: "list_searchresult", data: e})
            }
        }, hasRecordsSelected() {
            return this.selectAllRecords || this.selectedrecord.length
        }, selectedrecord: {
            get() {
                return this.appStore.get("list_selectedrecords")
            }, set(e) {
                return this.appStore.set({key: "list_selectedrecords", data: e})
            }
        }, selectAllRecords: {
            get() {
                return this.appStore.get("list_info").selectAllRecords
            }, set(e) {
                this.appStore.get("list_info").selectAllRecords = e
            }
        }
    }, methods: {
        displayfilterCondition(e) {
            switch (e) {
                case"equal":
                case"contain":
                    return this.translate("LBL_IN");
                case"lessthan":
                    return this.translate("LBL_LESS_THAN");
                case"greaterthan":
                    return this.translate("LBL_GREATER_THAN");
                default:
                    return ""
            }
        }, clearSearch() {
            this.selectedResults = [], this.getListParams().q.clear()
        }, removeSearch(e, t) {
            let s = this.getListParams();
            s.q.data;
            for (let e = 0; e < this.selectedResults.length; e++) if (this.selectedResults[e].search == t.search && this.selectedResults[e].field.name == t.field.name && this.selectedResults[e].condition == t.condition) {
                this.selectedResults.splice(e, 1);
                break
            }
            let l = s.q.getValueInAll(t.field.name, t.condition), a = "" !== t.value ? t.value : t.search,
                i = t.field && t.field.model ? t.field.model.type.name : "";
            if ("date" != i && "datetime" != i || (a = "", this.$refs.listview_search.clearDateField(t.field.name)), l && _.isArray(l)) if (1 == l.length) s.q.pop(t.field.name, a); else {
                for (let e = 0; e < l.length; e++) l[e] == a && l.splice(e, 1);
                s.q.updateAll(t.field.name, l, t.condition)
            } else s.q.pop(t.field.name);
            e.preventDefault(), e.stopPropagation()
        }
    }, render: function anonymous() {
        with (this) return selectedResults && selectedResults.length && !hasRecordsSelected ? _c("div", {
            staticClass: "mb-2",
            style: {"padding-left": ismultiselectable ? "30px" : "0px"}
        }, [_c("div", {staticClass: "d-flex align-items-center flex-wrap bg-grey-hue-9"}, [_m(0), _v(" "), _l(selectedResults, (function (e, t) {
            return _c("span", {
                staticClass: "m-2 p-2 px-3 d-flex align-items-center justify-content-center flex-nowrap bg-light-blue-2",
                staticStyle: {"border-radius": "15px"}
            }, [_c("span", {staticClass: "text-grey-0"}, [_c("b", [_v(_s(e.search))]), _v(" " + _s(displayfilterCondition(e.condition)) + " " + _s(translate(e.field.label)) + "  \n                        "), _c("i", {
                staticClass: "fa fa-times c-pointer",
                on: {
                    click: function (t) {
                        return removeSearch(t, e)
                    }
                }
            })])])
        })), _v(" "), _c("div", {
            staticClass: "pl-2 c-pointer", on: {
                click: function (e) {
                    return clearSearch()
                }
            }
        }, [_v(_s(translate("LBL_CLEAR")) + " " + _s(translate("LBL_ALL").toLowerCase()))])], 2)]) : _e()
    }, staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "pl-3 pr-2"}, [_c("i", {staticClass: "fa fa-filter h5 text-blue-5"})])
    }]
});
var Vtiger_Component_ListSyncAction = App.vtComponent.extend({
    data: () => ({
        showSyncButton: !1,
        extensionList: {},
        userLevelConnectors: ["Google", "Office365", "PieSync"],
        connectors: {user_level_connectors: {}, system_Level_Connectors: {}},
        availableConnectors: []
    }), mounted() {
        this.getConnectors()
    }, methods: {
        getConnectors() {
            let e = "Events" == this.$module ? "Calendar" : this.$module;
            this.appStore.request("api_get", {
                url: "/extensions/list",
                params: {sourceModule: e},
                key: e + "_ExtensionList",
                cache: !0
            }).then(e => {
                _.size(e) > 0 && (this.extensionList = e, this.sortExtensionList())
            })
        }, sortExtensionList() {
            for (let e in this.extensionList) {
                let s = this.extensionList[e];
                (_.isUndefined(s.installed_status) || "" == s.installed_status && "on" == this.$currentUser.is_admin) && this.availableConnectors.push(e), this.userLevelConnectors.includes(e) ? Vue.set(this.connectors.user_level_connectors, e, s) : "on" == this.$currentUser.is_admin && Vue.set(this.connectors.system_Level_Connectors, e, s)
            }
            (_.size(this.connectors.user_level_connectors) || _.size(this.connectors.system_Level_Connectors)) && (this.showSyncButton = !0)
        }
    }, render: function anonymous() {
        with (this) return showSyncButton ? _c("div", [_c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.SyncModal",
                value: {
                    connectors: connectors,
                    availableConnectors: availableConnectors,
                    userLevelConnectors: userLevelConnectors
                },
                expression: "{connectors: connectors, availableConnectors: availableConnectors, userLevelConnectors: userLevelConnectors}",
                modifiers: {SyncModal: !0}
            }], staticClass: "btn btn-primary mr-3 d-flex align-items-center", attrs: {id: "syncNow", type: "button"}
        }, [_c("i", {staticClass: "fa fa-sync mr-1 py-1"}), _v(_s(translate("LBL_SYNC")))])]) : _e()
    }
});
var Vtiger_Component_ListTableAdditionalRow = App.vtComponent.extend({
    props: {listHeaders: {type: Array}, record: {}},
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ListTableCheckBox = Vtiger_Component_ListTableMainCheckBox.extend({
    props: {row: {type: Object}}, updated() {
        this.row.getId() && this.$nextTick(() => {
            this.isRecordSelected(this.row.getId()) ? jQuery(this.$el).closest("tr").addClass("selectedRow") : jQuery(this.$el).closest("tr").removeClass("selectedRow")
        })
    }, methods: {
        onRecordSelected(e, t, s) {
            1 == this.selectallrecords && (-1 == this.selectedRecords.indexOf(t) ? this.excludedIds.push(t) : this.excludedIds.pop(t)), this.$nextTick(() => {
                this.compactMode && this.selectedRecords && this.selectedRecords.length > 1 ? jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").addClass("c-none").removeClass("c-pointer") : jQuery(this.$el).closest(".floatThead-wrapper").find("#listview-table").find("tr").addClass("c-pointer").removeClass("c-none")
            }), this.$bubble("vt_list_record_selected", e, this.selectedRecords, s)
        }, isRecordSelected(e) {
            return this.allListRecordsSelected || -1 !== this.selectedRecords.indexOf(e)
        }, modifySelectedRecords(e, t = !0) {
            this.constructor.super.options.methods.modifySelectedRecords.call(this, e, t), this.$nextTick(() => {
                t ? jQuery(this.$el).closest("tr").addClass("selectedRow") : jQuery(this.$el).closest("tr").removeClass("selectedRow")
            })
        }
    }, render: function anonymous() {
        with (this) return _c("label", {
            staticClass: "vt-checkbox-container", on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: selectedRecords,
                expression: "selectedRecords"
            }],
            staticClass: "listViewEntriesCheckBox",
            attrs: {type: "checkbox", "data-id": row.getId()},
            domProps: {
                value: row.getId(),
                checked: Array.isArray(selectedRecords) ? _i(selectedRecords, row.getId()) > -1 : selectedRecords
            },
            on: {
                change: [function (e) {
                    var t = selectedRecords, s = e.target, c = !!s.checked;
                    if (Array.isArray(t)) {
                        var d = row.getId(), o = _i(t, d);
                        s.checked ? o < 0 && (selectedRecords = t.concat([d])) : o > -1 && (selectedRecords = t.slice(0, o).concat(t.slice(o + 1)))
                    } else selectedRecords = c
                }, function (e) {
                    modifySelectedRecords(row.getId(), e.target.checked), onRecordSelected(isRecordSelected(row.getId()), row.getId(), row)
                }]
            }
        }), _v(" "), _c("span", {
            staticClass: "checkmark roundedCheckmark mt-1",
            class: [allListRecordsSelected || selectedRecords.length ? "opacity-1" : "opacity-0"]
        })])
    }
});
var Vtiger_Component_ListTableFooter = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("tfoot")
    }, props: {filterFields: {type: [Array, Object]}}
});
var Vtiger_Component_ListViewFooter = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }, props: {filterFields: {type: [Object]}, compactMode: {type: Boolean}}
});
var Vtiger_Component_ListViewInteractiveSearch = App.vtComponent.extend({
    props: {
        isListEmpty: {type: Boolean, default: !1},
        filterHeaders: "",
        masterModuleModel: "",
        isCompact: "",
        parentModuleModel: ""
    },
    inject: ["getCurrentModule", "getListParams"],
    mixins: [Vtiger_Mixin_ModuleModel, App.loadMixin("Field")],
    components: {},
    data: () => ({picklistValueAllowed: 100, searchString: "", selectedDateFields: []}),
    watch: {
        filterHeaders: {
            handler(e, t) {
                e.length != t.length && (this.selectedResults = [], this.init())
            }
        }, selectedResults(e) {
            e.length <= 0 && this.clearSearch()
        }
    },
    computed: {
        selectedResults: {
            get() {
                return this.appStore.get("list_searchresult")
            }, set(e) {
                this.appStore.set({key: "list_searchresult", data: e})
            }
        }
    },
    mounted() {
        this.init(), this.$root.$on("vds::documents::folder::tree::selection", () => {
            this.clearSearch()
        }), this.$root.$on("vds::list::filter::change", () => {
            this.clearSearch()
        }), this.$root.$on("vds::list::reloadHeaderFields", () => {
            this.clearSearch()
        })
    },
    methods: {
        clearSearch() {
        },
        clearDateField(e) {
            let t = _.indexOf(this.selectedDateFields, e);
            t > -1 && this.selectedDateFields.splice(t, 1)
        },
        init() {
            this.selectedResults = [];
            let e = this.getCurrentModule(), t = this.getListParams().q.data[0];
            if (this.selectedResults = [], t) {
                for (let s = 0; s < t.length; s++) {
                    let i = !1;
                    for (let l = 0; l < this.filterHeaders.length; l++) if (this.filterHeaders[l].name == t[s][0]) {
                        if ("filesize" == this.filterHeaders[l].name) {
                            let e = t[s][2] / 1024;
                            t[s][2] = e
                        }
                        let a = this.filterHeaders[l].model.type.name, r = t[s][2], h = t[s][1];
                        if (_.isArray(r)) for (let t = 0; t < r.length; t++) this._selectedResults(a, r[t], h, this.filterHeaders[l], e); else this._selectedResults(a, r, h, this.filterHeaders[l], e);
                        i = !0
                    }
                    if (!i && this.isCompact && this.parentModuleModel && this.parentModuleModel.isInventoryModule) {
                        let l = this.masterModuleModel.getField(t[s][0]);
                        l && (this._selectedResults(l.type.name, t[s][2][0], t[s][1], l, e), this.filterHeaders[this.filterHeaders.length] = {
                            name: l.fieldname,
                            model: l,
                            label: l.fieldlabel
                        }, i = !0)
                    }
                    if (!i && "Potentials" == e && "pipeline" == t[s][0]) {
                        let i = this.masterModuleModel.getField(t[s][0]);
                        i && this._selectedResults(i.type.name, t[s][2], t[s][1], i, e)
                    }
                }
                this.$emit("vds::listview::search::added", this.selectedResults)
            }
        },
        _selectedResults(e, t, s, i, l) {
            if ("picklist" == e || "multipicklist" == e || "metricpicklist" == e || "fileLocationType" == e) {
                let e = this.translate(t, l);
                this._isModuleNamePicklistField(i.name, l) && (e = this.translate(t, t)), this.addToDisplayResults(e, i, s, t)
            } else if ("boolean" == e) "1" == t ? this.addToDisplayResults(this.translate("LBL_YES"), i, s, 1) : this.addToDisplayResults(this.translate("LBL_NO"), i, s, 0); else if ("date" == e || "datetime" == e) {
                var a = BaseFieldModel.getDateCustomComparatorsWithLabels();
                this.addToDisplayResults(this.translate(a[s], l), i, s)
            } else this.addToDisplayResults(t, i, s)
        },
        showSearchFields(e) {
            if (e.length < 1) return this.searchString = "", [];
            let t = this.getCurrentModule(), s = e.includes("@"), i = !isNaN(e), l = e.includes("+") || i;
            this.searchString = e;
            let a = [], r = [], h = [], d = [];
            var n = BaseFieldModel.getDateCustomComparatorsWithLabels();
            for (let o = 0; o < this.filterHeaders.length; o++) {
                let u = "";
                if ("object" == typeof this.filterHeaders[o].model && (u = this.getFieldIcon(this.filterHeaders[o].model, {})), u || (u = "fa-textfield"), !this.filterHeaders[o].model || !this.filterHeaders[o].model.type || -1 != this.filterHeaders[o].name.indexOf(".")) continue;
                if ("MarketingList" == t && "listname" != this.filterHeaders[o].name) continue;
                let f = this.filterHeaders[o].model.type.name, c = this.filterHeaders[o].model.fieldType,
                    p = this.filterHeaders[o].label;
                if ("time" != f && "timestring" != c) if ("date" == f || "datetime" == f) {
                    if (-1 !== _.indexOf(this.selectedDateFields, this.filterHeaders[o].name)) continue;
                    for (let s in n) {
                        let i = this.translate(n[s], t);
                        if (i && -1 != i.toString().toLowerCase().indexOf(e.toLowerCase())) {
                            let e = {};
                            Vue.set(e, "title", i + " " + this.translate("LBL_IN") + " " + p), Vue.set(e, "icon", u), a.push(e)
                        }
                    }
                } else if (s && "email" == f || l && "phone" == f) if (this.filterHeaders[o].model.isCompositeParent) {
                    let e = this.masterModuleModel.getFieldsOfType(f);
                    for (let s in e) if (e[s] && e[s].isViewable) {
                        let i = {};
                        Vue.set(i, "title", this.translate("LBL_IN") + " " + this.translate(e[s].label, t)), Vue.set(i, "icon", u), r.push(i)
                    }
                } else {
                    let e = {};
                    Vue.set(e, "title", this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[o].label, t)), Vue.set(e, "icon", u), a.push(e)
                } else if (i && _.indexOf(["integer", "number", "double", "percentage", "currency", "multicurrency"], f) > -1) {
                    if ("filesize" != this.filterHeaders[o].name) {
                        let e = {};
                        Vue.set(e, "icon", u), Vue.set(e, "title", this.translate("LBL_EQUALS") + " " + p), h.push(e)
                    }
                    fieldObj = {}, Vue.set(fieldObj, "icon", u), Vue.set(fieldObj, "title", this.translate("LBL_LESS_THAN") + " " + p), h.push(fieldObj), fieldObj = {}, Vue.set(fieldObj, "icon", u), Vue.set(fieldObj, "title", this.translate("LBL_GREATER_THAN") + " " + p), h.push(fieldObj)
                } else if (_.indexOf(["picklist", "multipicklist", "metricpicklist", "fileLocationType"], f) > -1) {
                    let s = this.filterHeaders[o].model.picklistValues;
                    if (s.length > this.picklistValueAllowed) {
                        fieldObj = {}, Vue.set(fieldObj, "icon", u), Vue.set(fieldObj, "title", this.translate("LBL_IN") + " " + p), d.push(fieldObj);
                        continue
                    }
                    let i = !1;
                    this._isModuleNamePicklistField(this.filterHeaders[o].name, t) && (i = !0);
                    for (let l = 0; l < s.length; l++) {
                        let r = this.translate(s[l].label, t);
                        if (r && -1 != r.toString().toLowerCase().indexOf(e.toLowerCase())) {
                            let e = this.translate(s[l].label, t);
                            i && (e = this.translate(s[l].value, s[l].value));
                            let r = {};
                            Vue.set(r, "title", e + " " + this.translate("LBL_IN") + " " + p), Vue.set(r, "icon", u), Vue.set(r, "bgColor", "bgLtGrey"), a.push(r)
                        }
                    }
                    fieldObj = {}, Vue.set(fieldObj, "icon", u), Vue.set(fieldObj, "title", this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[o].label, t)), d.push(fieldObj)
                } else if ("boolean" == f) {
                    let s = {};
                    Vue.set(s, "icon", u), -1 != this.translate("LBL_YES").toLowerCase().indexOf(e.toLowerCase()) ? (Vue.set(s, "title", this.translate("LBL_YES") + " " + this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[o].label, t)), a.push(s)) : -1 != this.translate("LBL_NO").toLowerCase().indexOf(e.toLowerCase()) && (Vue.set(s, "title", this.translate("LBL_NO") + " " + this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[o].label, t)), a.push(s))
                } else fieldObj = {}, Vue.set(fieldObj, "icon", u), Vue.set(fieldObj, "title", this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[o].label, t)), d.push(fieldObj)
            }
            return searchFields = _.union(a, r, h, d), searchFields
        },
        submitSearch(e) {
            e = e.title;
            let t = [], s = this.getCurrentModule(), i = this.searchString.includes("@"), l = !isNaN(this.searchString),
                a = this.searchString.includes("+") || l;
            for (let i = 0; i < this.filterHeaders.length; i++) {
                if (!this.filterHeaders[i].model || !this.filterHeaders[i].model.type || -1 != this.filterHeaders[i].name.indexOf(".")) continue;
                if (this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[i].label, s) == e) {
                    this.addToDisplayResults(this.searchString, this.filterHeaders[i], "contain"), this.updateList(this.filterHeaders[i].name, "contain", this.searchString), t = this.filterHeaders[i].name;
                    break
                }
                let l = this.filterHeaders[i].model.type.name, a = this.filterHeaders[i].label;
                if ("date" == l || "datetime" == l) {
                    var r = BaseFieldModel.getDateCustomComparatorsWithLabels();
                    for (let t in r) if (e == this.translate(r[t], s) + " " + this.translate("LBL_IN") + " " + a) {
                        this.addToDisplayResults(this.translate(r[t], s), this.filterHeaders[i]), this.updateList(this.filterHeaders[i].name, t, ""), this.selectedDateFields.push(this.filterHeaders[i].name);
                        break
                    }
                } else if (_.indexOf(["picklist", "multipicklist", "metricpicklist", "fileLocationType"], l) > -1) {
                    let t = this.filterHeaders[i].model.picklistValues;
                    if (t.length > this.picklistValueAllowed) continue;
                    let r = !1;
                    this._isModuleNamePicklistField(this.filterHeaders[i].name, s) && (r = !0);
                    for (let h = 0; h < t.length; h++) {
                        let d = this.translate(t[h].label, s);
                        if (r && (d = this.translate(t[h].value, t[h].value)), d + " " + this.translate("LBL_IN") + " " + a == e) {
                            let e = "multipicklist" == l ? "contain" : "equal";
                            this.addToDisplayResults(d, this.filterHeaders[i], e, t[h].value), this.updateList(this.filterHeaders[i].name, e, t[h].value);
                            break
                        }
                    }
                } else if ("boolean" == l) this.translate("LBL_YES") + " " + this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[i].label, s) == e ? (this.addToDisplayResults(this.translate("LBL_YES"), this.filterHeaders[i], "equal", 1), this.updateList(this.filterHeaders[i].name, "equal", 1)) : this.translate("LBL_NO") + " " + this.translate("LBL_IN") + " " + this.translate(this.filterHeaders[i].label, s) == e && (this.addToDisplayResults(this.translate("LBL_NO"), this.filterHeaders[i], "equal", 0), this.updateList(this.filterHeaders[i].name, "equal", 0)); else if (_.indexOf(["integer", "number", "double", "percentage", "currency", "multicurrency"], l) > -1) {
                    if (this.translate("LBL_EQUALS") + " " + a == e) {
                        this.addToDisplayResults(this.searchString, this.filterHeaders[i], "equal"), this.updateList(this.filterHeaders[i].name, "equal", this.searchString);
                        break
                    }
                    if (this.translate("LBL_LESS_THAN") + " " + a == e) {
                        this.addToDisplayResults(this.searchString, this.filterHeaders[i], "lessthan"), this.updateList(this.filterHeaders[i].name, "lessthan", this.searchString);
                        break
                    }
                    if (this.translate("LBL_GREATER_THAN") + " " + a == e) {
                        this.addToDisplayResults(this.searchString, this.filterHeaders[i], "greaterthan"), this.updateList(this.filterHeaders[i].name, "greaterthan", this.searchString);
                        break
                    }
                }
            }
            if (i || a) {
                let l = i ? "email" : "phone", a = this.masterModuleModel.getFieldsOfType(l);
                for (let i in a) if (this.translate("LBL_IN") + " " + this.translate(a[i].label, s) == e && t != a[i].name) {
                    this.addToDisplayResults(this.searchString, a[i], "contain"), this.updateList(a[i].name, "contain", this.searchString);
                    break
                }
            }
            this.searchString = "", this.$emit("vds::listview::search::added", this.selectedResults)
        },
        addToDisplayResults(e, t, s, i = "") {
            if ("filesize" == t.name) {
                let t = e.toString().match(/\d+/g);
                if (t && t.length) {
                    let s = "KB";
                    e = (e = parseInt(t[0])) + " " + s, i = 1024 * parseInt(t[0])
                }
            }
            this.selectedResults.push({search: e, field: t, condition: s, name: t.name, value: i})
        },
        updateList(e, t, s) {
            let i = this.getListParams();
            if ("filesize" == e) {
                let e = s.toString().match(/\d+/g);
                s = 1024 * parseInt(e[0])
            }
            let l = i.q.getValueInAll(e, t);
            l ? (_.isArray(l) ? l.push(s) : l = [l, s], s = l) : s = [s], i.q.pushAll(e, t, s), i.page = 1
        },
        _isModuleNamePicklistField: (e, t) => "imported_to" == e && "Import" == t || ("primarymodule" == e && "Reports" == t || "related_modulename" == e && "PrintTemplates" == t)
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticStyle: {width: "400px"}}, [_c("autocomplete", {
            attrs: {
                placeholder: translate("LBL_SEARCH"),
                "aria-label": "translate('LBL_SEARCH')",
                search: showSearchFields,
                value: searchString,
                autoSelect: !0
            }, on: {submit: submitSearch}, scopedSlots: _u([{
                key: "result", fn: function ({result: e, props: t}) {
                    return [_c("li", _b({
                        staticClass: "autocomplete-result backgroundImg-none",
                        class: [e.bgColor ? e.bgColor + " border-bottom" : ""]
                    }, "li", t, !1), [_c("div", {staticClass: "d-flex align-items-center"}, [_c("i", {
                        staticClass: "fa ml-3 position-absolute l-0",
                        class: e.icon
                    }), _v(" "), _c("span", [_v(_s(e.title))])])])]
                }
            }])
        })], 1)])
    }
});
var Vtiger_Component_ListViewMassActions = App.vtComponent.extend({
    components: {"vds-list-module-specific-mass-actions": App.loadComponent("ListModuleSpecificMassActions")},
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_ModulePermissions],
    inject: ["postMassDelete", "massEdit"],
    render: function anonymous() {
        with (this) return _c("div", {
            staticClass: "border rounded massActions px-2 w-maxContent",
            staticStyle: {"background-color": "#f7f8f9"}
        }, [isEditSupported && $_currentModuleModel.isEditable ? _c("button", {
            key: "edit",
            staticClass: "btn",
            attrs: {title: translate("LBL_EDIT")},
            on: {click: massEdit}
        }, [_c("i", {staticClass: "massActionIcon fa fa-pencil-alt"})]) : _e(), _v(" "), isCommentsSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ListMassComment",
                value: {
                    recordIds: selectedrecord,
                    modulename: currentModule,
                    relatedModule: currentModule,
                    getSelectedRecords: getSelectedRecords,
                    reloadList: loadList
                },
                expression: "{recordIds:selectedrecord,modulename:currentModule,relatedModule:currentModule,getSelectedRecords:getSelectedRecords,reloadList:loadList}",
                modifiers: {ListMassComment: !0}
            }], key: "comment", staticClass: "btn", attrs: {title: translate("LBL_COMMENT")}
        }, [_c("i", {staticClass: "massActionIcon fa fa-comment"})]) : _e(), _v(" "), isDeleteSupported && $_currentModuleModel.isDeleteable ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.MassDelete",
                value: {
                    recordIds: selectedrecord,
                    modulename: currentModule,
                    getSelectedRecords: getSelectedRecords,
                    reloadList: loadList
                },
                expression: "{recordIds:selectedrecord,modulename:currentModule,getSelectedRecords:getSelectedRecords,reloadList:loadList}",
                modifiers: {MassDelete: !0}
            }],
            key: "delete",
            staticClass: "btn",
            attrs: {title: translate("LBL_DELETE")},
            on: {"vds::list::massdelete": postMassDelete}
        }, [_c("i", {staticClass: "massActionIcon fa fa-trash-alt"})]) : _e(), _v(" "), isExportSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ExportData",
                value: {
                    getSelectedRecords: getSelectedRecords,
                    listParams: listParams,
                    getSelectAllRecordParams: getSelectAllRecordParams
                },
                expression: "{getSelectedRecords:getSelectedRecords, listParams:listParams, getSelectAllRecordParams : getSelectAllRecordParams}",
                modifiers: {ExportData: !0}
            }], key: "export", staticClass: "btn", attrs: {title: translate("LBL_EXPORT")}
        }, [_c("i", {staticClass: "massActionIcon fa fa-upload"})]) : _e(), _v(" "), isPrintSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.PrintData.vds::show::print",
                value: {getSelectedRecords: getSelectedRecords},
                expression: "{getSelectedRecords:getSelectedRecords}",
                modifiers: {PrintData: !0, "vds::show::print": !0}
            }], key: "print", staticClass: "btn", attrs: {title: translate("Print")}, on: {click: validateAndShowPrint}
        }, [_c("i", {staticClass: "massActionIcon fa fa-print"})]) : _e(), _v(" "), $_currentModuleModel.isShareSupported && isShareRecordSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ShareDocument",
                value: {records: selectedrecord, currentModule: currentModule},
                expression: "{records:selectedrecord,currentModule:currentModule}",
                modifiers: {ShareDocument: !0}
            }], key: "sharerecord", staticClass: "btn", attrs: {title: translate("LBL_SHARE_RECORD", "Documents")}
        }, [_c("i", {staticClass: "massActionIcon fa fa-share-alt"})]) : _e(), _v(" "), isTagsSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ListAddTags",
                value: {
                    recordIds: selectedrecord,
                    modulename: currentModule,
                    getSelectedRecords: getSelectedRecords,
                    reloadList: loadList
                },
                expression: "{recordIds:selectedrecord,modulename:currentModule,getSelectedRecords:getSelectedRecords,reloadList:loadList}",
                modifiers: {ListAddTags: !0}
            }], key: "tags", staticClass: "btn", attrs: {title: translate("Tags")}
        }, [_c("i", {staticClass: "massActionIcon fa fa-tags"})]) : _e(), _v(" "), isChangeOwnerSupported && $_currentModuleModel.isEditable && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ChangeOwner",
                value: {
                    recordIds: selectedrecord,
                    modulename: currentModule,
                    getSelectedRecords: getSelectedRecords,
                    reloadList: loadList
                },
                expression: "{recordIds:selectedrecord,modulename:currentModule,getSelectedRecords:getSelectedRecords,reloadList:loadList}",
                modifiers: {ChangeOwner: !0}
            }], key: "changeowner", staticClass: "btn", attrs: {title: translate("LBL_CHANGE_OWNER", "Calendar")}
        }, [_c("i", {
            staticClass: "massActionIcon fa fa-user",
            attrs: {"aria-hidden": "true"}
        })]) : _e(), _v(" "), isTransferOwnerShipSupported && $_currentModuleModel.isEditable && !selectAllRecords && isEditEnabled($module) ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.TransferOwnership",
                value: {
                    recordIds: selectedrecord,
                    modulename: currentModule,
                    getSelectedRecords: getSelectedRecords,
                    reloadList: loadList
                },
                expression: "{recordIds:selectedrecord,modulename:currentModule,getSelectedRecords:getSelectedRecords,reloadList:loadList}",
                modifiers: {TransferOwnership: !0}
            }], staticClass: "btn", attrs: {title: translate("LBL_TRANSFER_OWNERSHIP")}
        }, [_c("i", {staticClass: "massActionIcon fas fa-exchange-alt"})]) : _e(), _v(" "), isSendEmailSupported && !selectAllRecords ? _c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.ComposeEmailModal",
                value: {module: currentModule, getSelectedRecords: getSelectedRecords, emailAction: "massEmailAction"},
                expression: "{'module': currentModule, getSelectedRecords: getSelectedRecords, emailAction: 'massEmailAction'}",
                modifiers: {ComposeEmailModal: !0}
            }], staticClass: "btn", attrs: {title: translate("LBL_SEND_EMAIL")}
        }, [_c("i", {staticClass: "massActionIcon fas fa-envelope"})]) : _e(), _v(" "), _c("vds-list-module-specific-mass-actions", {
            attrs: {
                recordIds: selectedrecord,
                selectedrecord: selectedrecord,
                currentModule: currentModule,
                getSelectedRecords: getSelectedRecords,
                loadList: loadList
            }
        })], 1)
    },
    props: {
        selectedrecord: {type: [Array, Object, String]},
        currentModule: {type: String},
        getSelectedRecords: {type: Function},
        loadList: {type: Function},
        listParams: {type: Object},
        record: {},
        selectedRecordsCount: {type: [String, Number]},
        getSelectAllRecordParams: {type: Function},
        selectAllRecords: {type: [Boolean], default: !1}
    },
    data: () => ({
        isEditSupported: !0,
        isCommentsSupported: !0,
        isDeleteSupported: !0,
        isExportSupported: !0,
        isPrintSupported: !0,
        isShareRecordSupported: !0,
        isTagsSupported: !0,
        isChangeOwnerSupported: !1,
        isTransferOwnerShipSupported: !1,
        isSendEmailSupported: !1
    }),
    methods: {
        validateAndShowPrint() {
            this.selectedRecordsCount > 50 ? this.showErrorNotification(this.translate("JS_MAX_RECORDS_LIMIT", "Vtiger") + " 50") : this.$emit("vds::show::print")
        }
    },
    created() {
        let e = "Tasks" == this.currentModule || "Events" == this.currentModule ? "Calendar" : this.currentModule;
        this._getModuleDescribe(e, !0).then(e => {
            _.isUndefined(e) || (this.isExportSupported = e.isToolPermitted("Export"), this.isPrintSupported = !!this.isModuleEnabled("PrintTemplates") && e.isToolPermitted("PrintTemplates"))
        }), this.isCommentsSupported && (this.isCommentsEnabled(this.currentModule) ? this.isCommentsSupported = this.isCommentsAllowed : this.isCommentsSupported = !1), this.isSendEmailSupported && (this.isSendEmailSupported = this.isSendEmailAllowed)
    }
});
var Vtiger_Component_ListViewSearch = App.vtComponent.extend({
    props: {searchparam: "", defaultSearchParams: "", hideSearch: "", isListEmpty: {type: Boolean, default: !1}},
    inject: ["getCurrentModule", "getListParams"],
    mixins: [Vtiger_Mixin_ModuleModel],
    data() {
        return {searchValue: this.searchparam}
    },
    methods: {
        initSearch() {
            this.getListParams().page = 1, this.$emit("update:searchparam", this.searchValue)
        }
    },
    computed: {
        getSearchPlaceholder() {
            let e = this.translate("LBL_SEARCH_BY"), t = this.$_currentModuleModel.getLabelFields(), a = [];
            for (var r of t) {
                let e = this.$_currentModuleModel.getField(r);
                a.push(e.label)
            }
            return e + " " + a.join(" " + this.translate("LBL_AND") + " ")
        }
    },
    watch: {
        searchValue: function () {
            this.searchValue.length || this.$emit("update:searchparam", "")
        }, searchparam() {
            Vue.set(this, "searchValue", this.searchparam)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "form-inline has-search"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")},
            on: {
                click: function (e) {
                    return initSearch()
                }
            }
        })]), _v(" "), _c("vds-input-clear", {
            attrs: {
                inputvalue: searchValue,
                placeholder: getSearchPlaceholder,
                showWarningText: isListEmpty
            }, on: {
                "update:inputvalue": function (e) {
                    searchValue = e
                }, "vt-onenter": function (e) {
                    return initSearch()
                }
            }
        })], 1)
    }
});
var Vtiger_Component_ListViewSendSMS = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel], render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "listViewSendSms",
                lazy: !0,
                size: "lg",
                title: translate("LBL_SEND_SMS"),
                "header-class": "bgLtGrey"
            }
        }, [_c("form", [_c("div", {staticClass: "form-group row"}, [_c("label", {
            staticClass: "col-md-3 pl-3 col-form-label text-left",
            attrs: {for: "receipentNumber"}
        }, [_v(_s(translate("LBL_SELECT_PHONE_NUMBER", sourceModule)))]), _v(" "), _c("div", {staticClass: "col-sm-8 md-6 lg-4"}, [_c("v-select2", {
            attrs: {
                placeholder: translate("LBL_SELECT_PHONE_NUMBER_T0_SEND_SMS", sourceModule),
                options: phoneFields,
                multiple: !0
            }, on: {change: updateDirectory}, model: {
                value: selectedFields, callback: function (t) {
                    selectedFields = t
                }, expression: "selectedFields"
            }
        }), _v(" "), _c("small", {staticClass: "form-group row my-2"}, [_c("div", {staticClass: "col-sm-10 md-8 lg-6 text-danger"}, [_v("\n                                " + _s(translate("LBL_PHONE_FORMAT_WARNING", sourceModule)) + "\n\t\t\t\t\t\t\t\t"), _c("i", {
            staticClass: "fa fa-info-circle",
            attrs: {
                "data-toggle": "tooltip",
                "data-placement": "bottom",
                title: translate("LBL_PHONEFORMAT_WARNING_CONTENT")
            }
        })])])], 1)]), _v(" "), _c("div", [_c("div", {staticClass: "form-group row container-fluid p-0 m-0"}, [_c("label", [_v("\n\t\t\t\t\t\t\t\t" + _s(translate("LBL_TYPE_THE_MESSAGE", sourceModule)) + "\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t(" + _s(translate("LBL_SMS_MAX_CHARACTERS_ALLOWED")) + ")\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t"), _c("i", {
            staticClass: "fa fa-info-circle",
            attrs: {
                "data-toggle": "tooltip",
                "data-placement": "bottom",
                title: translate("LBL_SMS_AUTO_SPLITTING_TEST")
            }
        })]), _v(" "), _c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: message,
                expression: "message"
            }],
            staticClass: "form-control",
            attrs: {id: "smsBody", rows: "4", placeholder: translate("LBL_WRITE_YOUR_MESSAGE_HERE", sourceModule)},
            domProps: {value: message},
            on: {
                input: function (t) {
                    t.target.composing || (message = t.target.value)
                }
            }
        })]), _v(" "), _c("div", {staticClass: "row container-fluid p-0 m-0 mt-2"}, [_c("div", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: smsCharCount > 0,
                expression: "smsCharCount > 0"
            }], staticClass: "row container-fluid p-0 m-0"
        }, [_v("\n\t\t\t\t\t\t\t\t" + _s(translate("LBL_COUNT")) + " : " + _s(smsCharCount) + " " + _s(translate("LBL_CHARACTERS")) + "\n\t\t\t\t\t\t\t")]), _v(" "), _c("div", {
            directives: [{
                name: "visible",
                rawName: "v-visible",
                value: unicodeMultiSms || splitMsgCount > 1,
                expression: "unicodeMultiSms || splitMsgCount > 1"
            }], staticClass: "text-small mt-2 text-danger"
        }, [unicodeMultiSms ? _c("span", {staticClass: "mr-1"}, [_v(_s(translate("JS_SMS_CONTAIN_UNICODE")) + ".")]) : _e(), _v(" "), splitMsgCount > 1 ? _c("span", [_v(_s(translate("JS_SMS_SPLIT_TEXT", "SMSNotifier", splitMsgCount)) + ".")]) : _e()])])])]), _v(" "), _c("div", {
            staticClass: "d-flex justify-content-center w-100 justify-content-end",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button", disabled: selectedFields.length <= 0},
            on: {
                click: function (t) {
                    return sendSMS()
                }
            }
        }, [_v(_s(translate("LBL_SEND")))])])])
    }, props: ["record", "modulename"], data() {
        return {
            module: this.modulename,
            recordModel: BaseModel.getModuleSpecificModel(this.module, "Record", {}),
            sourceModule: "SMSNotifier",
            selectedFields: [],
            message: "",
            phoneFields: {}
        }
    }, created() {
        this.getPhoneFields()
    }, computed: {
        smsString() {
            let t = this.message.replace(/(\r\n|\n|\r)/g, "  ");
            return String(t)
        }, smsCharCount() {
            if (this.smsString.length) {
                return /\$\S+/i.test(this.smsString) ? 0 : this.smsString.length
            }
            return 0
        }, unicodeMultiSms() {
            let t = this.smsString, e = t.length;
            if (e) {
                let s = 0;
                for (let i = 0; i < e; i++) {
                    let e = t.charCodeAt(i);
                    s += e < 128 ? 1 : e < 2048 ? 2 : e < 65536 ? 3 : e < 1 << 21 ? 4 : e < 1 << 26 ? 5 : e < 1 << 31 ? 6 : Number.NaN
                }
                if (s / e > 1) return !0
            }
            return !1
        }, splitMsgCount() {
            let t = this.smsString.length;
            return t && t > 153 ? Math.ceil(t / 153) : 1
        }
    }, mounted: function () {
        this.getRecord()
    }, updated() {
        jQuery('[data-toggle="tooltip"]').tooltip()
    }, methods: {
        updateDirectory(t) {
        }, getPhoneFields() {
            var t = {module: "Vtiger", source_module: this.module, id: JSON.stringify(this.getId())};
            this.appStore.request("api_get", {url: "/records/phone", params: t, key: "Record_Phone_fields"}).then(t => {
                var e = [];
                let s = {};
                for (var i in t) for (var r in e[i] = [], t[i]) for (var a in s = t[i][r], s) {
                    var l = s[a], o = {};
                    o.value = JSON.stringify({
                        field: a,
                        module: i,
                        id: r
                    }), o.module = i, o.label = l.label + "(" + l.value + ")", e[i].includes(o) || (e[i].push(o), Vue.set(this.phoneFields, this.translate(i, i), e[i]))
                }
            })
        }, getId() {
            var t = [];
            return this.record && t.push(this.record.id), t
        }, getRecord() {
            var t = this.getId(), e = {module: this.module, id: t[0]};
            this.appStore.request("api_get", {url: "/records", params: e, key: "LIST_SMS_RECORD"}).then(t => {
                this.recordModel = BaseModel.getModuleSpecificModel(this.module, "Record", t)
            })
        }, sendSMS() {
            let t = JSON.parse(JSON.stringify(this.selectedFields)), e = [],
                s = {type: "post", api: "records/send", parameters: {module: this.sourceModule, message: this.message}};
            var i = {};
            for (let r of t) i = JSON.parse(r), s.parameters.fields = [i.field], s.parameters.id = [i.id], s.parameters.sourceModule = i.module, e.push(jQuery.extend(!0, {}, s));
            this.appStore.request("api_batch", {requests: e}).then(t => {
                this.selectedFields.splice(0), this.$root.$emit("bv::hide::modal", "listViewSendSms")
            }, t => {
                this.showErrorNotification(t.message)
            })
        }
    }
});
var Vtiger_Component_ListViewTopWidget = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_ManageFilterFields = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_FilterUtils],
    props: {
        filterDetails: {type: Object},
        filterEnabledFields: {type: Object},
        editingFilter: {type: [String, Number]}
    },
    data: () => ({searchKey: "", maxSelectFields: 15, allowedFilterFields: {}}),
    watch: {
        filterEnabledFields: {
            handler() {
                this.setAllowedFilterFields()
            }, immediate: !0
        }
    },
    created: function () {
        this.editingFilter || this.populateDefaultListFields()
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "mb-4"}, [_c("strong", [_v(_s(translate("LBL_CHOOSE_COLUMNS")))]), _v(" "), _c("div", {staticClass: "my-3"}, [_c("span", [_v(_s(translate("LBL_SELECTED_FIELDS")) + "(" + _s(selectedFields && selectedFields.length) + ") ~max " + _s(maxSelectFields))])]), _v(" "), _c("div", [_c("draggable", {
            staticClass: "dragArea",
            attrs: {options: {group: "selectedFields"}},
            model: {
                value: selectedFields, callback: function (e) {
                    selectedFields = e
                }, expression: "selectedFields"
            }
        }, _l(selectedFields, (function (e) {
            return _c("vds-quick-option", {
                key: e.name,
                staticClass: "m-2 c-pointer border border-primary selectedRow",
                attrs: {data: e.name, pill: !0, name: e.name, "select-icon": "fa-times"},
                on: {selected: deSelectField}
            }, [e.name.indexOf(".") > -1 ? [_v(_s(getReferenceFieldLabel(e.name)) + " - ")] : _e(), _v("\n\t\t\t\t\t\t\t\t" + _s(translate(e.label, $module)) + "\n\t\t\t\t\t\t\t\t"), e.isMandatory ? _c("span", {staticClass: "text-danger pl-1"}, [_v("*")]) : _e()], 2)
        })), 1)], 1)]), _v(" "), _.isEmpty(unSelectedFields) ? _e() : _c("div", {staticClass: "mb-4"}, [_c("div", [_c("div", {staticClass: "form-inline d-flex mb-3"}, [_c("div", {staticClass: "form-inline has-search pl-0 mt-3 mb-2 w-50"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")},
            on: {
                click: function (e) {
                    return clearSearchString()
                }
            }
        })]), _v(" "), _c("vds-input-clear", {
            attrs: {
                inputvalue: searchKey,
                placeholder: translate("LBL_SEARCH_FIELDS")
            }, on: {
                "update:inputvalue": function (e) {
                    searchKey = e
                }, "vds::post::input:clear": function (e) {
                    return clearSearchString()
                }, "vds::search::on::keyup": function (e) {
                    return searchFields(searchKey)
                }
            }
        })], 1)]), _v(" "), searchKey ? _c("div", {staticClass: "fieldPills"}, [_l(unSelectedFields, (function (e, t) {
            return [_c("vds-quick-option", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: "" != searchKey && !e.hide,
                    expression: "(searchKey != '' && !field.hide)"
                }],
                key: t,
                staticClass: "m-2 bg-white border border-dark c-pointer",
                class: {show: !e.hide && "" != searchKey},
                attrs: {data: e, pill: !0, name: t, "selected-prop": !0, styles: {display: "inline-block"}},
                on: {
                    deSelected: function (e) {
                        return selectField(t)
                    }
                }
            }, [t.indexOf(".") > -1 ? [_v(_s(getReferenceFieldLabel(t)) + " - ")] : _e(), _v("\n\t\t\t\t\t\t\t\t" + _s(e.translatedLabel)), e.mandatory ? _c("span", {staticClass: "text-danger pl-1"}, [_v("*")]) : _e()], 2)]
        }))], 2) : _e()])])])
    },
    computed: {
        selectedFields: {
            get: function () {
                let e = [], t = this.filterDetails.getFields() || [];
                if ("modifiedtime" == this.filterDetails.sortfield && !t.includes("modifiedtime") && t.length < 15 && t.push("modifiedtime"), t) for (let i of t) if (this.allowedFilterFields[i]) {
                    let t = this.allowedFilterFields[i];
                    e.push({name: i, label: t.label, isMandatory: t.mandatory})
                }
                return e
            }, set: function (e) {
                let t = [];
                for (i in e) {
                    let l = e[i];
                    t.push(l.name)
                }
                this.filterDetails.setFields(t)
            }
        }, unSelectedFields: function () {
            let e = {}, t = this.filterDetails.getFields(), i = this.getFilterSkippedFields();
            for (let l in this.allowedFilterFields) {
                let s = this.allowedFilterFields[l];
                t && t.indexOf(l) >= 0 || i.indexOf(l) >= 0 || (e[l] = s)
            }
            return e
        }
    },
    methods: {
        setAllowedFilterFields() {
            var e = {};
            for (let t in this.filterEnabledFields) {
                let i = this.filterEnabledFields[t];
                "6" != i.displaytype && i.isViewableInList && (i.hide = !1, i.translatedLabel = this.translate(i.label, this.$module), e[t] = i)
            }
            Vue.set(this, "allowedFilterFields", e)
        }, populateDefaultListFields() {
            this._getModuleDescribe(this.$module).then(e => {
                let t = e.getSummaryAndHeaderFields(["modifiedtime"]), i = Object.keys(t);
                if (i.length > this.maxSelectFields) {
                    let e = i.length - this.maxSelectFields;
                    i.splice(i.length - e, e)
                }
                let l = [];
                for (var s in i) {
                    let e = i[s];
                    e in this.allowedFilterFields && l.push(e)
                }
                this.filterDetails.setFields(l)
            })
        }, deSelectField(e) {
            let t = this.filterDetails.fields.indexOf(e);
            -1 != t && this.filterDetails.fields.splice(t, 1)
        }, selectField(e) {
            this.filterDetails.getFields().length < this.maxSelectFields ? this.filterDetails.fields.push(e) : this.showErrorNotification(this.translate("JS_ADD_MAX_15_ITEMS"))
        }, searchFields(e) {
            var t = this.searchKey.toLowerCase();
            for (let e in this.allowedFilterFields) {
                let i = this.allowedFilterFields[e];
                i.translatedLabel.toLowerCase().includes(t) ? Vue.set(i, "hide", !1) : Vue.set(i, "hide", !0)
            }
        }, getFilterSkippedFields: () => [], clearSearchString() {
            this.searchKey = ""
        }
    }
});
var Vtiger_Component_MassDelete = App.vtComponent.extend({
    components: {"vds-delete-confirmation": App.loadComponent("DeleteConfirmation", this.$module, !1)},
    data: () => ({additionalMessage: ""}),
    render: function anonymous() {
        with (this) return _c("vds-delete-confirmation", {
            attrs: {"modal-id": modalId},
            on: {ok: ok, cancel: cancel}
        }, [_c("div", {
            attrs: {slot: "title"},
            slot: "title"
        }, [_v(_s(translate("LBL_DELETE_RECORDS")) + " ?")]), _v(" "), _c("template", {slot: "message"}, [_c("div", {staticClass: "mb-3"}, [_v(_s(translate("LBL_MASS_DELETE_CONFIRMATION")))]), _v(" "), _c("div", [_v(_s(translate("LBL_DELETE_CONFIRMATION_NOTE", "", 30)))])]), _v(" "), additionalMessage ? _c("template", {slot: "message"}, [_v(_s(additionalMessage))]) : _e(), _v(" "), _c("span", {
            attrs: {slot: "cancel-test"},
            slot: "cancel-test"
        }, [_v(_s(translate("LBL_NO_KEEP_RECORDS")))]), _v(" "), _c("span", {
            attrs: {slot: "ok-test"},
            slot: "ok-test"
        }, [_v(_s(translate("LBL_YES_DELETE_RECORDS")))])], 2)
    },
    props: {
        recordIds: {},
        modulename: {},
        getSelectedRecords: {},
        reloadList: {},
        modalId: {default: "deleteConfirmation"}
    },
    methods: {
        async ok() {
            let t = await this.getSelectedRecords(), e = {module: this.$module, selected_ids: t};
            this.appStore.request("api_delete", {url: "massdelete", params: e}).then(e => {
                this.$root.$emit("bv::hide::modal", this.modalId), this.appStore.set({
                    key: this.modulename + "list_noload",
                    data: !1
                }), this.$emit("vds::list::massdelete"), t.splice(0)
            }, t => {
                this.showErrorNotification({message: t})
            })
        }, cancel() {
            this.$root.$emit("bv::hide::modal", this.modalId)
        }
    }
});
Vtiger_Component_NewQuickFilterName = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                size: "md right",
                id: "viewNameModal",
                "header-class": "p-3 bgLtGrey"
            }
        }, [_c("div", {
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_v("\n\t\t\t\t" + _s(translate("LBL_DUPLICATE", "Vtiger")) + " " + _s(translate("LBL_FILTER", "Vtiger")) + "\n\t\t")]), _v(" "), _c("div", [_c("label", [_v(_s(translate("LBL_VIEW_NAME", $module)))]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: listName,
                expression: "listName"
            }, {name: "validate", rawName: "v-validate", value: {required: !0}, expression: "{required:true}"}],
            staticClass: "form-control",
            attrs: {type: "text", name: "listName"},
            domProps: {value: listName},
            on: {
                input: function (t) {
                    t.target.composing || (listName = t.target.value)
                }
            }
        })]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has("listName"),
                expression: "errors.has('listName')"
            }], staticClass: "text-danger"
        }, [_v(_s(translate("JS_REQUIRED_FIELD")))]), _v(" "), _c("div", {
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-primary",
            attrs: {type: "button"},
            on: {click: validateListName}
        }, [_v(_s(translate("LBL_SAVE")))])])])
    }, props: ["filterModel", "duplicateQuickFilter"], data() {
        return {listName: this.filterModel.viewname}
    }, $_veeValidate: {validator: "new"}, methods: {
        validateListName() {
            this.$validator.validate().then(t => {
                t && this.duplicateQuickFilter(this.listName)
            })
        }
    }
});
var Vtiger_Component_PrintData = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_Module, Vtiger_Mixin_ModulePermissions, Vtiger_Mixin_Record],
    components: {"vds-select-templates": App.loadComponent("SelectTemplates")},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "exportPrintData",
                "hide-footer": "",
                lazy: !0,
                size: "lg",
                title: translate("Print")
            }
        }, [_c("div", {staticClass: "mb-4"}, [_v(_s(translate("LBL_TEMPLATES", "PrintTemplates")) + "\n\t\t\t\t"), _c("vds-select-templates", {
            ref: "setTemplateId",
            attrs: {relatedModule: $module},
            on: {"vds::template::select": showOrHideEditAndExport}
        })], 1), _v(" "), _c("div", {staticClass: "d-flex justify-content-center"}, [isSystemTemplateSelected ? _c("button", {
            staticClass: "btn btn-outline-secondary mr-3",
            on: {click: editAndExport}
        }, [_v(_s(translate("LBL_EDIT_AND_EXPORT", "PrintTemplates")))]) : _e(), _v(" "), isSendEmailAllowed ? _c("button", {
            staticClass: "btn btn-outline-secondary mr-3",
            on: {click: emailWithAttachment}
        }, [_v(_s(translate("LBL_EMAIL_WITH_PDF", "PrintTemplates")))]) : _e(), _v(" "), _c("button", {
            staticClass: "btn btn-primary mr-3",
            on: {
                click: function (e) {
                    return print()
                }
            }
        }, [_v(_s(translate("LBL_PRINT")))]), _v(" "), _c("button", {
            staticClass: "btn btn-primary mr-3",
            on: {
                click: function (e) {
                    return savePDF()
                }
            }
        }, [_v(_s(translate("LBL_SAVE_AS_PDF", "PrintTemplates")))])])])
    },
    props: {record: {type: [Object], required: !1}, getSelectedRecords: {type: [Function], required: !1}},
    data: () => ({selectedTemplate: "", isSystemTemplateSelected: !0}),
    provide() {
        return {setPrintTemplate: this.setTemplate}
    },
    methods: {
        async editAndExport() {
            if (this.$refs.setTemplateId.collectData()) {
                this.$root.$emit("bv::hide::modal", "exportPrintData"), this.$refs.setTemplateId.collectData();
                var e = "view/detail?module=PrintTemplates&id=" + this.selectedTemplate + "&viewtype=summary",
                    t = await this.getSelectedRecordIds();
                this.redirectUrl(e + "&source_records=" + JSON.stringify(t) + "&source_module=" + this.$module, {}, !0)
            }
        }, setTemplate(e) {
            this.selectedTemplate = e
        }, async getSelectedRecordIds() {
            var e = [];
            return this.record ? e.push(this.record.id) : e = await this.getSelectedRecords(), e
        }, async savePDF() {
            if (this.$refs.setTemplateId.collectData()) {
                var e = await this.getSelectedRecordIds();
                this.$refs.setTemplateId.collectData(), window.location.href = "ui-api/records/download?module=PrintTemplates&source_records=" + JSON.stringify(e) + "&id=" + this.selectedTemplate + "&source_module=" + this.$module
            }
        }, async print() {
            if (this.$refs.setTemplateId.collectData()) {
                var e = await this.getSelectedRecordIds();
                this.$refs.setTemplateId.collectData();
                var t = {
                    sourceRecords: JSON.stringify(e),
                    id: this.selectedTemplate,
                    sourceModule: this.$module,
                    module: "PrintTemplates"
                };
                this.appStore.request("api_get", {url: "/records/pdfpath", params: t, key: "print_file"}).then(e => {
                    printWindow = window.open(e.path, "_blank"), printWindow.addEventListener("load", (function () {
                        printWindow.print()
                    }), !0)
                })
            }
        }, async emailWithAttachment() {
            if (this.$refs.setTemplateId.collectData()) {
                var e = await this.getSelectedRecordIds(), t = {
                    module: "PrintTemplates",
                    id: this.selectedTemplate,
                    sourceModule: this.$module,
                    sourceRecords: JSON.stringify(e)
                };
                this.appStore.request("api_get", {url: "/records/pdfpath", params: t, key: "email_pdf"}).then(e => {
                    var t = {module: this.$module, getSelectedRecords: this.getSelectedRecords};
                    this.record && (t = {module: this.$module, recordId: this.record.id});
                    var s = new Array;
                    s.push(e), t.attachments = s, this.$root.$emit("bv::hide::modal", "exportPrintData"), this.showModal({
                        componentName: "ComposeEmailModal",
                        componentData: t,
                        modalOnModalMode: !0
                    })
                })
            }
        }, showOrHideEditAndExport(e) {
            e ? this.retrieveRecord(e, "PrintTemplates").then(e => {
                this.isSystemTemplateSelected = "1" === e.is_deletable
            }) : this.isSystemTemplateSelected = !0
        }
    }
});
Vtiger_Component_QuickFilter = App.vtComponent.extend({
    components: {
        "vds-quick-filter-header": App.loadComponent("QuickFilterHeader"),
        "vds-quick-filter-footer": App.loadComponent("QuickFilterFooter"),
        "vds-quick-filter-simple": App.loadComponent("QuickFilterSimple"),
        "vds-quick-filter-advance": App.loadComponent("QuickFilterAdvance"),
        "vds-new-quick-filter-name": App.loadComponent("NewQuickFilterName")
    },
    mixins: [App.loadMixin("Filter"), Vtiger_Mixins_ShowModal, Vtiger_Mixin_FilterUtils, Vtiger_Mixin_DateUtils, Vtiger_Mixin_ModuleModel],
    provide() {
        return {
            reloadList: this.reloadList,
            applyFilterCondition: this.applyFilterCondition,
            clearFilterCondition: this.clearFilterCondition,
            getCustomOwnerFieldValue: this.getCustomOwnerFieldValue
        }
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "quickFilterModel",
            attrs: {
                "hide-backdrop": !0,
                lazy: !0,
                size: isCompact ? "xl d-flex" : "lg fullheight-right",
                "header-class": "bgLtGrey",
                "modal-class": isCompact ? "compact" : "right",
                id: "quickFilterModel",
                "no-enforce-focus": !0
            }
        }, [_c("div", {
            staticClass: "w-100",
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_c("div", {staticClass: "d-flex align-items-center justify-content-between"}, [_c("div", {staticClass: "h5 mb-0"}, [_v(_s(translate("LBL_FILTERS", "Reports")))]), _v(" "), isFilterCreationAllowed && hasFilterConditionChanged ? _c("div", {staticClass: "flex-grow-1 ml-3"}, [_c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.NewQuickFilterName.true",
                value: {"filter-model": filterModel, "duplicate-quick-filter": duplicateQuickFilter},
                expression: "{'filter-model':filterModel,'duplicate-quick-filter':duplicateQuickFilter}",
                modifiers: {NewQuickFilterName: !0, true: !0}
            }], staticClass: "btn btn-outline-primary btn-sm"
        }, [_v("\n\t\t\t\t\t\t\t\t" + _s(translate("LBL_CREATE_NEW_FILTER")) + "\n\t\t\t\t\t\t\t")]), _v(" "), isMyFilter && !filterModel.isAllFilter ? _c("button", {
            staticClass: "btn btn-outline-primary btn-sm textOverflowEllipsis mw-100 ml-1",
            attrs: {type: "button"},
            on: {
                click: function (e) {
                    return updateFilter()
                }
            }
        }, [_v("\n\t\t\t\t\t\t\t\t" + _s(translate("LBL_UPDATE", "Settings:Vtiger")) + " " + _s(filterModel.getName() ? '"' + filterModel.getName() + '"' : "") + "\n\t\t\t\t\t\t\t")]) : _e(), _v(" "), isMyFilter || filterModel.isAllFilter ? _e() : _c("span", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover.bottom",
                value: translate("LBL_SHARED_LIST_OWNER_MESSAGE", "Vtiger", listOwnerName),
                expression: "translate('LBL_SHARED_LIST_OWNER_MESSAGE', 'Vtiger', listOwnerName)",
                modifiers: {hover: !0, bottom: !0}
            }]
        }, [_c("button", {
            staticClass: "btn btn-outline-primary btn-sm textOverflowEllipsis mw-100 ml-1",
            attrs: {id: "filterUpdateButton", type: "button", disabled: ""}
        }, [_v("\n\t\t\t\t\t\t\t\t\t" + _s(translate("LBL_UPDATE", "Settings:Vtiger")) + " " + _s(filterModel.getName() ? '"' + filterModel.getName() + '"' : "") + "\n\t\t\t\t\t\t\t\t")])])]) : _e(), _v(" "), _c("i", {
            staticClass: "fa fa-times c-pointer",
            on: {
                click: function (e) {
                    return $root.$emit("bv::hide::modal", "quickFilterModel")
                }
            }
        })])]), _v(" "), _c("vds-quick-filter-header", {
            attrs: {
                currentListMode: currentListMode,
                "filter-model": filterModel
            }
        }), _v(" "), _c(selectedFilterType, {
            ref: selectedFilterType,
            tag: "component",
            attrs: {
                "filter-enabled-fields": getFilterEnabledFields,
                "filter-model": filterModel,
                "has-filter-condition-changed": hasFilterConditionChanged,
                "changed-filter-conditions": changedFilterConditions,
                "selected-filter-field-values": selectedFilterFieldValues
            }
        }), _v(" "), _c("template", {slot: "modal-footer"}, [_c("vds-quick-filter-footer", {
            attrs: {
                slot: "modal-footer",
                "is-advanced": isAdvanced,
                "only-advance-filter": onlyAdvanceFilter,
                "filter-enabled-fields": getFilterEnabledFields,
                "filter-model": filterModel,
                "has-filter-condition-changed": hasFilterConditionChanged,
                "show-clear-btn": showClearBtn
            }, on: {
                "update:isAdvanced": function (e) {
                    isAdvanced = e
                }, "update:is-advanced": function (e) {
                    isAdvanced = e
                }
            }, slot: "modal-footer"
        })], 1)], 2)
    },
    props: {
        currentFilter: [Number, String],
        currentListMode: String,
        filterModelProp: Object,
        reloadList: Function,
        listParams: Function,
        getCustomOwnerFieldValue: Function,
        isCompact: Boolean
    },
    data() {
        return {
            filterType: "simple",
            isAdvanced: !1,
            quickFilterTypes: ["vds-quick-filter-simple", "vds-quick-filter-advance"],
            onlyAdvanceFilter: !1,
            loadModuleFields: !1,
            hasFilterConditionChanged: !1,
            selectedFilterFieldValues: {},
            changedFilterConditions: {},
            filterModel: this.filterModelProp,
            listOwnerName: "",
            advancedConditionChangedFromHeader: !1,
            advancedConditionChangedFromBody: !1
        }
    },
    computed: {
        selectedFilterType: function () {
            let e = "";
            return this.filterModel.advancedfilter && this.loadModuleFields && (e = "vds-quick-filter-simple"), e
        }, isFilterCreationAllowed() {
            return "RecycleBin" != App.module() && !this.isCompact && this.filterModel.isFilterCreationAllowed()
        }, isMyFilter() {
            return this.filterModel.userid == this.$currentUser.id
        }, showClearBtn() {
            return (this.listParams().q.data[0] && this.listParams().q.data[0].length) > 0
        }
    },
    mounted() {
        this.getListOwnerName().then(e => this.listOwnerName = e), setTimeout(() => {
            this.loadModuleFields = !0, this.setScroll();
            let e = function () {
            };
            e = this.$watch(() => ({loaded: this.$_currentModuleModel._loaded}), t => {
                t && (e(), this.initSelectedFilterFieldValues())
            }, {immediate: !0})
        }, 300), this.$root.$on("vds::filter::condition::changed", this.filterConditionChanged), this.filterAdvancedFilters = jQuery.extend(!0, {}, this.filterModel.advancedfilter)
    },
    watch: {
        changedFilterConditions: {
            handler(e, t) {
                this.isEquivalent(this.changedFilterConditions, this.selectedFilterFieldValues) ? this.hasFilterConditionChanged = !1 : this.hasFilterConditionChanged = !0
            }, deep: !0
        }, isAdvanced(e, t) {
            e || this.initSelectedFilterFieldValues()
        }, "filterModel.advancedfilter": {
            handler(e, t) {
                var i = !1;
                if ("Potentials" == this.$module && !_.isEmpty(e[1])) {
                    var r = e[1].columns;
                    _.isEmpty(r[0]) || "pipeline" != r[0].columnname || (i = !0)
                }
                Object.compare(JSON.parse(JSON.stringify(e)), this.filterAdvancedFilters) || (this.hasFilterConditionChanged = !i, "vds-quick-filter-simple" != this.selectedFilterType || this.advancedConditionChangedFromBody || (this.advancedConditionChangedFromHeader = !0), this.advancedConditionChangedFromBody = !1)
            }, deep: !0
        }
    },
    methods: {
        initSelectedFilterFieldValues: function () {
            let e = this.listParams().q.data[0] || [],
                t = ["picklist", "metricpicklist", "multipicklist", "owner", "coowner", "ownergroup"], i = {};
            for (var r of e) {
                let [e, n, s] = r, a = this.$_currentModuleModel.getField(e);
                if (e.indexOf(".") > 0 && !(e in this.getFilterEnabledFields)) {
                    let i = e.split(".")[0], r = this.getFilterEnabledFields[i].referenceModuleList;
                    for (let i in r) {
                        let l = r[i];
                        "Users" != l && this._getModuleDescribe(l).then(i => {
                            setTimeout(() => {
                                let i = this.getFilterEnabledFields[e];
                                if ("date" == i.type.name || "datetime" == i.type.name || "currency" == i.fieldType || "multicurrency" == i.fieldType) {
                                    let t = _.isString(s) ? s.split(",") : jQuery.extend(!0, [], s);
                                    Vue.set(this.selectedFilterFieldValues, e, {
                                        from: t[0],
                                        to: t[1]
                                    }), Vue.set(this.changedFilterConditions, e, {from: t[0], to: t[1]})
                                } else t.indexOf(i.fieldType) >= 0 || "reference" == i.fieldType && i.referenceModuleList.indexOf("Users") >= 0 ? (s = s ? _.isArray(s) ? s : s.split(",") : [], Vue.set(this.selectedFilterFieldValues, e, s), Vue.set(this.changedFilterConditions, e, s)) : (Vue.set(this.selectedFilterFieldValues, e, s), Vue.set(this.changedFilterConditions, e, s))
                            }, 300)
                        })
                    }
                } else if (!a || "date" != a.fieldType && "datetime" != a.fieldType && "currency" != a.fieldType && "multicurrency" != a.fieldType) a && (t.indexOf(a.fieldType) >= 0 || "reference" == a.fieldType && a.referenceModuleList.indexOf("Users") >= 0) ? (s = s ? _.isArray(s) ? s : s.split(",") : [], i[e] = s) : i[e] = s; else {
                    let t = _.isString(s) ? s.split(",") : jQuery.extend(!0, [], s);
                    if ("multicurrency" == a.fieldType && (e += "_currency_value"), "date" == a.fieldType) for (var l in t.length <= 1 && !_.isUndefined(t[0]) && (t[1] = t[0]), t) {
                        let e = t[l];
                        e && 4 != e.split("-")[0].length && (t[l] = this.convertDateToDBFormat(e)), e || _.isUndefined(t[l - 1]) || (t[l] = t[l - 1])
                    }
                    i[e] = {from: t[0], to: t[1]}
                }
            }
            this.selectedFilterFieldValues = jQuery.extend(!0, {}, i), this.changedFilterConditions = jQuery.extend(!0, {}, i)
        }, filterConditionChanged(e, t, i) {
            i ? this.__updateChangeFilterFieldValues(e, t, i) : t && t.length || _.isBoolean(t) || t && t.hasOwnProperty("from") ? Vue.set(this.changedFilterConditions, e, t) : Vue.delete(this.changedFilterConditions, e)
        }, __updateChangeFilterFieldValues(e, t, i) {
            let r = "to" == i ? "from" : "to";
            this.changedFilterConditions[e] || Vue.set(this.changedFilterConditions, e, {}), Vue.set(this.changedFilterConditions[e], i, t), "" == t && (Vue.delete(this.changedFilterConditions[e], i), (!this.changedFilterConditions[e].hasOwnProperty(r) || this.changedFilterConditions[e].hasOwnProperty(r) && "" == this.changedFilterConditions[e]) && Vue.delete(this.changedFilterConditions, e))
        }, duplicateQuickFilter(e) {
            let t = new Vtiger_Filter_Model(this.filterModel._rawData);
            t.viewname = e, t.id = "";
            let i = this.$currentUser.get("date_format").toUpperCase(), r = this.getFilterEnabledFields;
            if ("vds-quick-filter-simple" == this.selectedFilterType && this.changedFilterConditions) {
                let e = [];
                for (let t in this.changedFilterConditions) {
                    let s = "equal", a = r[t], o = a.name, d = this.changedFilterConditions[t];
                    if ("vds-search-string-component" == a.searchComponent && (s = "contain"), s = "tags" == o ? "contain" : s, a) switch (a.fieldType) {
                        case"date":
                        case"datetime":
                            d = moment(d.from, "YYYY-MM-DD").format(i) + "," + moment(d.to, "YYYY-MM-DD").format(i), s = "between";
                            break;
                        case"currency":
                            d = [d.from, d.to], s = "between";
                            break;
                        case"multicurrency":
                            o = o.replace("_currency_value", ""), d = [d.from, d.to], s = "between";
                            break;
                        case"integer":
                        case"double":
                        case"percentage":
                            s = "equal";
                            break;
                        case"email":
                        case"phone":
                        case"string":
                        case"reference":
                        case"text":
                            s = "contain"
                    }
                    if (r[t] && ["picklist", "metricpicklist", "multipicklist", "owner", "ownergroup", "coowner", "fileLocationType"].includes(r[t].type.name) && (d = d.join(",")), a && a.isReferenceField && "Users" == a.referenceModuleList[0] && (s = "equal", d = d.join(",")), a && ["currency", "multicurrency"].indexOf(a.fieldType) >= 0) {
                        let t = "greaterthanorequal";
                        for (var l in d) {
                            let i = d[l];
                            var n = a.name;
                            n = n.replace("_currency_value", ""), e.push({
                                columnname: n,
                                comparator: t,
                                value: i,
                                column_condition: "and"
                            }), t = "lessthanorequal"
                        }
                    } else e.push({columnname: t, comparator: s, value: d, column_condition: "and"})
                }
                t.advancedfilter = {
                    1: {columns: e, condition: "and"},
                    2: {columns: []}
                }, this.advancedConditionChangedFromBody = !0
            }
            this.saveFilter(t)
        }, updateFilterModel(e = !1) {
            let t = this.getFilterEnabledFields, i = this.$currentUser.get("date_format").toUpperCase(),
                r = e ? this.selectedFilterFieldValues : this.changedFilterConditions;
            if ("vds-quick-filter-simple" == this.selectedFilterType && r) {
                let e = this.filterModel.advancedfilter ? this.filterModel.advancedfilter[1].columns : [];
                this.filterModel.advancedfilter && (e = this.filterModel.advancedfilter[1].columns, e.length && (e[e.length - 1].column_condition = "and"));
                for (let s in r) {
                    let a = "equal", o = t[s], d = o.name, c = r[s];
                    if ("vds-search-string-component" == o.searchComponent && (a = "contain"), a = "tags" == d ? "contain" : a, o) switch (o.fieldType) {
                        case"date":
                        case"datetime":
                            c = moment(c.from, "YYYY-MM-DD").format(i) + "," + moment(c.to, "YYYY-MM-DD").format(i), a = "between";
                            break;
                        case"currency":
                            c = [c.from, c.to], a = "between";
                            break;
                        case"multicurrency":
                            d = d.replace("_currency_value", ""), c = [c.from, c.to], a = "between";
                            break;
                        case"integer":
                        case"double":
                        case"percentage":
                            a = "equal";
                            break;
                        case"email":
                        case"phone":
                        case"string":
                        case"reference":
                        case"text":
                            a = "contain"
                    }
                    if (t[s] && ["picklist", "metricpicklist", "multipicklist", "owner", "ownergroup", "coowner", "fileLocationType"].includes(t[s].type.name) && (c = c.join(",")), o && o.isReferenceField && "Users" == o.referenceModuleList[0] && (a = "equal", c = c.join(",")), o && ["currency", "multicurrency"].indexOf(o.fieldType) >= 0) {
                        let t = "greaterthanorequal";
                        for (var l in c) {
                            let i = c[l];
                            var n = o.name;
                            n = n.replace("_currency_value", ""), e.push({
                                columnname: n,
                                comparator: t,
                                value: i,
                                column_condition: "and"
                            }), t = "lessthanorequal"
                        }
                    } else e.push({columnname: s, comparator: a, value: c, column_condition: "and"})
                }
                this.filterModel.advancedfilter[1] = {
                    columns: e,
                    condition: "and"
                }, this.advancedConditionChangedFromBody = !0
            }
        }, updateFilter() {
            this.updateFilterModel(), this.saveFilter()
        }, postSaveFilter({id: e}) {
            let t = this.listParams();
            e != t.filterid && this.$root.$emit("vds::load::filters"), this.$root.$emit("bv::hide::modal", "viewNameModal"), this.$root.$emit("bv::hide::modal", "quickFilterModel"), this.clearFilterCondition(), t.page = 1
        }, applyFilterCondition() {
            let e = this.listParams();
            if (e.q.clear(), "vds-quick-filter-simple" == this.selectedFilterType) {
                for (let t in this.changedFilterConditions) {
                    let i = this.getFilterEnabledFields[t], r = this.changedFilterConditions[t], l = "equal";
                    if (i && "vds-search-string-component" == i.searchComponent && (l = "contain"), l = "tags" == t ? "contain" : l, i) {
                        switch (i.fieldType) {
                            case"ownergroup":
                            case"owner":
                            case"coowner":
                                r = r.join(",");
                                break;
                            case"date":
                            case"datetime":
                                r = r.from + "," + r.to, l = "between";
                                break;
                            case"currency":
                                r = [r.from, r.to], l = "between";
                                break;
                            case"multicurrency":
                                t = t.replace("_currency_value", ""), r = [r.from, r.to], l = "between";
                                break;
                            case"integer":
                            case"double":
                            case"percentage":
                                l = "equal";
                                break;
                            case"email":
                            case"phone":
                            case"string":
                            case"reference":
                            case"text":
                                l = "contain"
                        }
                        i && i.isReferenceField && "Users" == i.referenceModuleList[0] && (l = "equal", r = r.join(","))
                    }
                    e.q.pushAll(t, l, r)
                }
                e.page = 1, this.isEquivalent(this.changedFilterConditions, this.selectedFilterFieldValues) && (this.hasFilterConditionChanged = !1)
            }
        }, clearFilterCondition() {
            let e = this.listParams();
            this.removeFilterConditions(e)
        }, resetFilterCondition() {
            if ("vds-quick-filter-advance" == this.selectedFilterType) {
                let e = {1: {columns: []}, 2: {columns: []}};
                Vue.set(this.filterModel, "advancedfilter", e)
            } else this.updateFilterModel(!0)
        }, isEquivalent(e, t) {
            var i = Object.getOwnPropertyNames(e), r = Object.getOwnPropertyNames(t);
            if (i.length != r.length) return !1;
            for (var l = 0; l < i.length; l++) {
                var n = i[l];
                if (_.isArray(e[n])) {
                    let i = _.difference(e[n], t[n]), r = _.difference(t[n], e[n]);
                    if (i.length > 0 || r.length > 0) return !1
                } else if (_.isObject(e[n])) {
                    if (_.isObject(e[n])) {
                        var s = e[n], a = t[n];
                        if (!a) return !1;
                        var o = Object.getOwnPropertyNames(s), d = Object.getOwnPropertyNames(a);
                        if (o.length != d.length) return !1;
                        for (var c = 0; c < o.length; c++) {
                            n = o[c];
                            if (_.isArray(s[n])) {
                                let e = _.difference(s[n], a[n]), t = _.difference(a[n], s[n]);
                                if (e.length > 0 || t.length > 0) return !1
                            } else if (!_.isObject(s[n]) && s[n] !== a[n]) return !1
                        }
                    }
                } else if (e[n] !== t[n]) return !1
            }
            return !0
        }, getListOwnerName() {
            return new Promise((e, t) => {
                if (this.filterModel.userid == this.$currentUser.id) {
                    let t = this.$currentUser.first_name + " " + this.$currentUser.last_name;
                    e(t.trim())
                } else this.$store.dispatch("getUserAndGroups", {
                    cb: t => {
                        for (let i in t.Users) i.split(":")[1] == this.filterModel.userid && e(t.Users[i])
                    }
                })
            })
        }
    },
    $_veeValidate: {validator: "new"}
}), Object.compare = function (e, t) {
    for (var i in e) {
        if (e.hasOwnProperty(i) !== t.hasOwnProperty(i)) return !1;
        switch (typeof e[i]) {
            case"object":
                if (!Object.compare(e[i], t[i])) return !1;
                break;
            case"function":
                if (void 0 === t[i] || "compare" != i && e[i].toString() != t[i].toString()) return !1;
                break;
            default:
                if (e[i] != t[i]) return !1
        }
    }
    for (var i in t) if (void 0 === e[i]) return !1;
    return !0
};
Vtiger_Component_QuickFilterAdvance = App.vtComponent.extend({
    inject: ["getCustomOwnerFieldValue"],
    mixins: [Vtiger_Mixin_FilterUtils],
    components: {"vds-filter-conditions": App.loadComponent("FilterConditions")},
    provide() {
        return {goToStep: this.goToStep, saveFilter: this.saveFilter}
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("vds-filter-conditions", {
            attrs: {"filter-details": filterModel, "filter-enabled-fields": filterEnabledFields}, scopedSlots: _u([{
                key: "default", fn: function (e) {
                    return _l(e.conditions, (function (e, i) {
                        return _c("div", {staticClass: "py-1"}, [_c("strong", [_v(_s(translate(e.label)))]), _v(" "), _c("i", {
                            directives: [{
                                name: "show-modal",
                                rawName: "v-show-modal.QuickFilterEditCondition.true",
                                value: {
                                    "filter-enabled-fields": filterEnabledFields,
                                    condition: getNewConditionRow(i),
                                    "changed-filter-conditions": changedFilterConditions
                                },
                                expression: "{'filter-enabled-fields':filterEnabledFields,'condition':getNewConditionRow(type),'changed-filter-conditions':changedFilterConditions}",
                                modifiers: {QuickFilterEditCondition: !0, true: !0}
                            }], staticClass: "fa fa-plus float-right c-pointer py-1", on: {
                                click: function (e) {
                                    return filterEditCondition(i)
                                }
                            }
                        }), _v(" "), _l(e.advancedfilter, (function (e, t) {
                            return _c("div", {key: i + "_" + t}, [_c("div", {
                                directives: [{
                                    name: "show-modal",
                                    rawName: "v-show-modal.QuickFilterEditCondition.true",
                                    value: {"filter-enabled-fields": filterEnabledFields, condition: e},
                                    expression: "{'filter-enabled-fields':filterEnabledFields,'condition':condition}",
                                    modifiers: {QuickFilterEditCondition: !0, true: !0}
                                }],
                                staticClass: "badge badge-pill border d-flex p-3 m-3 text-left c-pointer",
                                on: {
                                    click: function (e) {
                                        return filterEditCondition(i, t)
                                    }
                                }
                            }, [_c("div", {staticClass: "d-inline-block textOverflowEllipsis pr-3 w-100"}, [_c("span", {domProps: {innerHTML: _s(displayFilterCondition(t, i, e))}})]), _v(" "), _c("i", {
                                staticClass: "fa fa-times c-pointer float-right",
                                on: {
                                    click: function (e) {
                                        return e.stopPropagation(), removeCondition(i, t)
                                    }
                                }
                            })])])
                        }))], 2)
                    }))
                }
            }])
        })], 1)
    },
    props: {
        filterEnabledFields: Object,
        filterModel: Object,
        hasFilterConditionChanged: !1,
        changedFilterConditions: Object,
        selectedFilterFieldValues: Object
    },
    data: () => ({filterOptionLabels: BaseFieldModel.getAdvanceFilterOptionLabels()}),
    methods: {
        getNewConditionRow: e => ({
            all: {column_condition: "and", columnname: "", comparator: "", value: ""},
            any: {column_condition: "or", columnname: "", comparator: "", value: ""}
        }[e]), filterEditCondition(e, i) {
            let t = "all" == e ? "1" : "2", l = $.extend({}, this.filterModel.advancedfilter[t].columns[i]);
            this.$root.$once("bv::modal::hide", e => {
                if ("headerclose" == e.trigger && Vue.set(this.filterModel.advancedfilter[t].columns, i, l), "ok" == e.trigger || "event" == e.trigger) {
                    let l = e.vueTarget.$children[0].condition;
                    if (l.columnname && l.comparator) {
                        (BaseFieldModel.getDateCustomComparators().includes(l.comparator) || ["isempty", "isnotempty"].includes(l.comparator)) && (l.value = "");
                        let e = this.filterModel.advancedfilter;
                        void 0 === i ? (i = e[t].columns.length, Vue.set(this.filterModel.advancedfilter[t].columns, i, l)) : Vue.set(this.filterModel.advancedfilter[t].columns[i], "value", l.value)
                    }
                }
            })
        }, removeCondition(e, i) {
            let t = "all" == e ? "1" : "2";
            this.filterModel.advancedfilter[t].columns.splice(i, 1), this.$emit("update:filterConditionChanged", !0)
        }, displayFilterCondition(e, i, t) {
            var l = "";
            if (0 != e && (l = "all" == i ? this.translate("LBL_AND") : this.translate("LBL_OR")), !t.columnname) return;
            let n = this.filterEnabledFields[t.columnname];
            null == n && (n = this.filterEnabledFields[t.columnname + "_currency_value"]);
            let o = this.translate(n.fieldlabel);
            t.columnname.indexOf(".") > -1 && (o = this.getReferenceFieldLabel(t.columnname) + " - " + o);
            let a = this.translate(this.filterOptionLabels[t.comparator]), s = t.value;
            if ("metricpicklist" == n.type.name && null != n.metriccomparator) {
                let e = JSON.parse(t.value);
                a = this.translate(e.picklist) + " " + this.translate(this.filterOptionLabels[e.comparator]), s = e.time
            } else if (n && n.isBooleanField && s) s = 1 == s ? this.translate("LBL_ENABLED") : this.translate("LBL_DISABLED"); else if (n && n.isOwnerField && n.isCustomField && s) {
                let e = s.split(","), i = [];
                for (let t in e) i.push(this.getCustomOwnerFieldValue(e[t]));
                s = i.join(",")
            } else if (n && "fileLocationType" == n.type.name && s) {
                let e = s.split(","), i = [], t = n.type.picklistValues;
                for (let l in t) _.contains(e, t[l].value) && i.push(t[l].label);
                s = i.join(",")
            } else if ("picklist" == n.type.name) {
                let e = s.split(",");
                s = Object.values(n.allPicklistValues).reduce((i, t) => (e.includes(t.value) && i.push(this.translate(t.label, n.moduleName)), i), []).join(", ")
            }
            return l = "<i>" + l + "</i>  " + o + " " + a + " " + s
        }
    }
});
var Vtiger_Component_QuickFilterButton = App.vtComponent.extend({
    inject: ["reLoadListRecords", "getListParams"],
    components: {
        "vds-quick-filter-details": App.loadComponent("QuickFilterDetails"),
        "vds-quick-filter-button-condition": App.loadComponent("QuickFilterButtonCondition")
    },
    mixins: [App.loadMixin("Filter"), Vtiger_Mixin_ModuleModel],
    provide: function () {
        return {getCustomOwnerFieldValue: this.getCustomOwnerFieldValue}
    },
    render: function anonymous() {
        with (this) return _c("div", {attrs: {id: "simpleFilters" + this.$namespaceStore}}, [_c("div", {
            staticClass: "btn-group",
            class: {simpleFilter: filterConditions.length},
            attrs: {role: "group"}
        }, [_c("button", {
            directives: [{
                name: "show-modal",
                rawName: "v-show-modal.QuickFilter",
                value: {
                    currentFilter: selectedFilter,
                    noEnforceFocus: !1,
                    currentListMode: currentListMode,
                    filterModelProp: filterModel,
                    reloadList: reLoadListRecords,
                    listParams: getListParams,
                    getCustomOwnerFieldValue: getCustomOwnerFieldValue,
                    isCompact: isCompact
                },
                expression: "{'currentFilter':selectedFilter,'noEnforceFocus':false,'currentListMode':currentListMode, 'filterModelProp':filterModel, 'reloadList':reLoadListRecords,'listParams':getListParams,'getCustomOwnerFieldValue':getCustomOwnerFieldValue, 'isCompact' : isCompact}",
                modifiers: {QuickFilter: !0}
            }],
            staticClass: "btn px-3 py-2",
            class: [filterConditions.length ? "btn-primary" : "btn-secondary"],
            attrs: {id: "filterDetails" + this.$namespaceStore},
            on: {mouseenter: showFilterPopover, mouseleave: hideFilterPopover}
        }, [_c("div", {staticClass: "d-flex justify-content-around align-items-center"}, [_c("i", {
            staticClass: "fa fa-filter ",
            class: [filterConditions.length ? "text-white" : "text-dark"]
        }), _v(" "), _c("span", {staticClass: "px-2"}, [_v(_s(translate("LBL_FILTERS", "Reports")))]), _v(" "), filterConditions.length ? _c("div", {staticClass: "filterCountBadge d-flex align-items-center justify-content-center text-primary"}, [_v(_s(filterConditions.length))]) : _e()])])]), _v(" "), simpleFilter ? _c("b-popover", {
            ref: "popover",
            staticClass: "w-100",
            attrs: {
                target: "filterDetails" + this.$namespaceStore,
                placement: "bottom",
                offset: "-140",
                show: showPopover,
                container: "simpleFilters" + this.$namespaceStore
            },
            on: {
                "update:show": function (e) {
                    showPopover = e
                }, shown: e => e.target.focus()
            }
        }, [filterConditions.length ? _c("div", {staticClass: "listSimpleFilter"}, _l(filterConditions, (function (e) {
            return _c("div", [_c("vds-quick-filter-button-condition", {
                key: e[0],
                attrs: {
                    getFilterEnabledFields: getFilterEnabledFields,
                    condition: e,
                    extraOwnerFilterValues: extraOwnerFilterValues
                }
            })], 1)
        })), 0) : _e()]) : _e()], 1)
    },
    props: ["selectedFilter", "currentListMode", "isCompact"],
    data() {
        return {
            filterModel: this.getFilterModal(),
            loadModuleFields: !1,
            simpleFilter: !0,
            extraOwnerFilterValues: [{
                label: this.translate("LBL_CURRENT_USER"),
                value: "$current-user$"
            }, {
                label: this.translate("LBL_MY_GROUPS", "Users"),
                value: "$my-groups$"
            }, {label: this.translate("LBL_MY_REPORTEES"), value: "$my-reportees$"}],
            relatedModuleDesc: {},
            showPopover: !1
        }
    },
    created() {
        this.usersAndGroups = this.appStore.get("users_groups_info"), _.isUndefined(this.usersAndGroups) && this.appStore.request("api_get", {
            url: "records",
            params: {module: "Users", shared: "1"},
            key: "users_groups_info"
        }).then(e => {
            this.usersAndGroups = e
        })
    },
    mounted() {
        setTimeout(() => {
            this.loadModuleFields = !0, this.loadFilterDetails()
        }, 500), this.init()
    },
    computed: {
        filterConditions() {
            let e = [];
            return e = this.getListParams().q.data[0] || [], e
        }
    },
    watch: {
        selectedFilter(e, t) {
            "" != e && this.loadFilterDetails()
        }
    },
    methods: {
        showFilterPopover() {
            this.showPopover = !0
        }, hideFilterPopover() {
            setTimeout(() => {
                var e = jQuery(this.$refs.popover._toolpop.getTipElement());
                e && e.length > 0 && !e.is(":hover") && (this.showPopover = !1), e.on("mouseleave", () => {
                    this.showPopover = !1
                })
            }, 100)
        }, init() {
            this.$watch("$store.state.list_filter_updated", (function (e) {
                this.filterModel = BaseModel.getModuleSpecificModel(this.$module, "Filter", e)
            }))
        }, loadUrlQueryConditions: function () {
            let e = this.getListParams();
            for (var t in e.q.data) if (e.q.data[t] && e.q.data[t].length > 0) {
                let l = e.q.data[t];
                var i = 0 == t ? "1" : "2";
                this.filterModel.advancedfilter[i].columns = [];
                var s = 0 == t ? "and" : "or";
                for (let e in l) {
                    var o = l[e][2];
                    Array.isArray(o) && (o = o.join(","));
                    var r = l[e][0];
                    switch (l[e][1]) {
                        case"e":
                        case"equal":
                            condition = {column_condition: s, columnname: r, comparator: "equal", value: o};
                            break;
                        case"c":
                        case"contain":
                            condition = {column_condition: s, columnname: r, comparator: "contain", value: o};
                            break;
                        default:
                            condition = {column_condition: s, columnname: r, comparator: l[e][1], value: o}
                    }
                    condition && this.filterModel.advancedfilter[i].columns.push(condition)
                }
            }
        }, loadFilterDetails() {
            var e = {module: this.$module, id: this.selectedFilter};
            let t = "list_filter_details";
            e.module && e.id && (t = t + "_" + e.module + "_" + e.id);
            let i = this.appStore.get(t), s = e => {
                this.filterModel = BaseModel.getModuleSpecificModel(this.$module, "Filter", e)
            };
            i && Object.keys(i).length && i.id == this.selectedFilter ? s(i) : this.getFilterDetails(e).then(e => {
                "object" == typeof e && s(e)
            })
        }, removeCondition(e) {
            let t = this.filterModel.advancedfilter[1];
            for (let i in t.columns) {
                if (t.columns[i].columnname == e) {
                    this.filterModel.advancedfilter[1].columns.splice(i, 1), this.saveFilter();
                    break
                }
            }
        }, postSaveFilter() {
            this.reLoadListRecords()
        }, getCustomOwnerFieldValue(e) {
            if (!this.usersAndGroups) return;
            let t = "", i = [], s = [];
            for (let e in this.usersAndGroups.Users) i.push(e.split(":")[1]), s.push(this.usersAndGroups.Users[e]);
            for (let e in this.usersAndGroups.Groups) i.push(e.split(":")[1]), s.push(this.usersAndGroups.Groups[e]);
            return 0 === e.indexOf("$") ? t = e : i.indexOf(e) > -1 && (t = s[i.indexOf(e)]), t
        }, getFilterModal: () => new Vtiger_Filter_Model
    }
});
var Vtiger_Component_QuickFilterButtonCondition = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_ModuleModel, Vtiger_Mixin_DateUtils, Vtiger_Mixin_UsersUtils],
    inject: ["getCustomOwnerFieldValue"],
    props: {getFilterEnabledFields: {type: Object}, condition: {type: Array}, extraOwnerFilterValues: {type: Array}},
    data() {
        return {fieldModel: !1, fieldLabel: "", fieldName: this.condition[0]}
    },
    computed: {
        isPickListField() {
            return !(!this.fieldModel || !["picklist", "metricpicklist", "multipicklist", "owner", "ownergroup", "fileLocationType", "coowner"].includes(this.fieldModel.fieldType)) || !!(this.fieldModel && this.fieldModel.isReferenceField && this.fieldModel.referenceModuleList.indexOf("Users") >= 0)
        }, filterConditionDisplayValue() {
            let e = this.condition[2], i = this.fieldName;
            var t = this.$_currentModuleModel.getField(i);
            _.isArray(e) || (e = [e]);
            let l = [];
            for (let i = 0; i < e.length; i++) if (t && t.isBooleanField && e[i]) {
                let t = 1 == e[i] ? this.translate("LBL_ENABLED") : this.translate("LBL_DISABLED");
                l.push(t)
            } else if (!t || "owner" != t.fieldType && "ownergroup" != t.fieldType && "coowner" != t.fieldType) t && "time" == t.fieldType ? l.push(this.convertTimeToUserFormat(e[i])) : l.push(e[i]); else {
                let d = t.allOwners, o = !1;
                for (var s in d) {
                    for (var r in d[s]) {
                        let t = d[s][r];
                        if (t.value == e[i]) {
                            e[i] = t.label, o = !0;
                            break
                        }
                    }
                    if (o) break
                }
                l.push(e[i])
            }
            return l.join(",")
        }
    },
    created() {
        let e = function () {
        };
        e = this.$watch(() => ({loaded: this.$_currentModuleModel._loaded}), i => {
            i && (e(), this.init())
        }, {immediate: !0})
    },
    methods: {
        init() {
            if (this.fieldName.includes(".")) {
                let e = this.fieldName.split("."), i = this.$_currentModuleModel.getField(e[0]),
                    t = 3 === _.size(e) ? e[2] : e[1];
                if (i) {
                    this.fieldLabel = this.translate(i.label, i.moduleName) + " - ";
                    let l = _.size(i.type.relatedModules) > 1 ? e[1] : i.type.relatedModules[0];
                    this._getModuleDescribe(l).then(e => {
                        let i = e.getField(t);
                        if ("multicurrency" == i.fieldType && "1" == i.displaytype) {
                            let t = this.fieldName.replace("_currency_value", ""), l = e.getField(t);
                            l && (i = l)
                        }
                        this.fieldModel = i, this.fieldLabel += this.translate(this.fieldModel.label, this.fieldModel.moduleName)
                    })
                }
            } else {
                let e = this.$_currentModuleModel.getField(this.fieldName);
                if (e && "multicurrency" == e.fieldType && "1" == e.displaytype) {
                    let i = this.fieldName.replace("_currency_value", ""), t = this.$_currentModuleModel.getField(i);
                    t && (e = t)
                }
                this.fieldModel = e, this.fieldModel && (this.fieldLabel = this.translate(this.fieldModel.label, this.fieldModel.moduleName))
            }
        }, getSplitedPicklistValues: e => _.isString(e) ? e.split(",") : e, showPickListValue(e, i) {
            var t = this.getFilterEnabledFields[i];
            if (t && (t.isOwnerField || "coowner" == t.fieldType)) {
                (t.isCustomField && "owner" == t.fieldType || "coowner" == t.fieldType) && (e = this.getCustomOwnerFieldValue(e));
                let i = t.picklistValues, s = !1;
                for (let t in i) {
                    let r = i[t];
                    for (var l in r) {
                        let i = r[l];
                        if (i.value == e) {
                            s = !0, e = i.label;
                            break
                        }
                    }
                    if (s) break
                }
                if (this.extraOwnerFilterValues.forEach(i => {
                    i.value == e && (e = i.label)
                }), !s && "owner" == t.fieldType) {
                    let l = [];
                    !_.isUndefined(i.groups) && i.groups.length ? l = this.getUsersOfGroups(i.groups) : _.isUndefined(t.allOwners.groups) || (l = this.getUsersOfGroups(t.allOwners.groups)), _.isUndefined(l) || (l = _.findWhere(l, {value: e}), e = !_.isUndefined(l) && Object.keys(l).length && l.label ? l.label : e)
                }
            }
            if (t && ["picklist", "metricpicklist", "multipicklist", "fileLocationType"].includes(t.fieldType)) {
                let i = t.picklistValues;
                for (var s of i) if (s.value == e) return this.translate(s.label, this.$module)
            }
            return this.translate(e, this.$module)
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-row conditionContainer flex-wrap align-items-center pt-2 px-3 border-bottom border-grey-2"}, [fieldModel ? _c("div", {
            staticClass: "baseFontColor w-50 h6 mt-0 mb-2 pr-3",
            attrs: {title: fieldLabel}
        }, [_v("\n                            " + _s(fieldLabel) + "\n\t\t\t\t\t\t\t"), isPickListField && getSplitedPicklistValues(condition[2]).length > 1 ? _c("span", [_v("(" + _s(getSplitedPicklistValues(condition[2]).length) + ")")]) : _e()]) : _e(), _v(" "), _c("div", {staticClass: "d-flex flex-wrap w-50"}, [isPickListField ? [_l(getSplitedPicklistValues(condition[2]), (function (e) {
            return [_c("vds-quick-option", {
                key: e,
                staticClass: "px-3 text-truncate bg-secondary text-dark border-0 mb-2 mr-2",
                staticStyle: {"border-radius": "10rem"},
                attrs: {pill: !1}
            }, [_v(_s(showPickListValue(e, condition[0])))])]
        }))] : [_c("vds-quick-option", {
            key: condition[0],
            staticClass: "px-3 text-truncate bg-secondary text-dark border-0 mb-2 mr-2",
            staticStyle: {"border-radius": "10rem"},
            attrs: {pill: !1}
        }, [_v(_s(filterConditionDisplayValue))])]], 2)])
    }
});
Vtiger_Component_QuickFilterEditCondition = App.vtComponent.extend({
    components: {"vds-filter-condition-row": App.loadComponent("FilterConditionRow")},
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "quickFilterEditCondition",
            attrs: {lazy: !0, size: "lg fullheight-right", id: "quickFilterCondition", "ok-only": !0}
        }, [_c("vds-filter-condition-row", {
            attrs: {
                condition: condition,
                "filter-enabled-fields": filterEnabledFields
            }
        }), _v(" "), _c("button", {
            staticClass: "btn btn-primary p-0",
            attrs: {slot: "modal-ok"},
            on: {
                click: function (t) {
                    return t.stopPropagation(), validateConditions(t)
                }
            },
            slot: "modal-ok"
        }, [_v(_s(translate("LBL_SAVE")))])], 1)
    },
    props: {filterEnabledFields: Object, condition: Object},
    $_veeValidate: {validator: "new"},
    methods: {
        validateConditions(t) {
            t.preventDefault(), this.$validator.validate().then(t => {
                t && this.$root.$emit("bv::hide::modal", "quickFilterCondition")
            })
        }
    }
});
Vtiger_Component_QuickFilterFooter = App.vtComponent.extend({
    inject: ["reloadList", "applyFilterCondition", "clearFilterCondition", "$validator"],
    components: {"vds-simple-filter-switch-warning": App.loadComponent("SimpleFilterSwitchWarning")},
    mixins: [Vtiger_Mixin_Filter],
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "row w-100 m-0"}, [_c("div", {staticClass: "w-100 p-0"}, [showClearBtn ? _c("button", {
            staticClass: "btn btn-secondary btn-sm px-3 mr-2",
            attrs: {type: "button"},
            on: {click: clearFilters}
        }, [_v(_s(translate("LBL_CLEAR")))]) : _e(), _v(" "), hasFilterConditionChanged ? _c("button", {
            staticClass: "btn btn-primary btn-sm px-3 mr-2",
            attrs: {type: "button"},
            on: {click: applyFilters}
        }, [_v(_s(translate("LBL_APPLY", "EmailCampaigns")))]) : _e()])])
    },
    props: ["isAdvanced", "onlyAdvanceFilter", "filterModel", "filterEnabledFields", "hasFilterConditionChanged", "showClearBtn"],
    data: () => ({status: !1, loadModuleFields: !1}),
    mounted() {
        setTimeout(() => this.loadModuleFields = !0, 500)
    },
    methods: {
        postSaveFilter() {
            this.$root.$emit("bv::hide::modal", "viewNameModal"), this.$root.$emit("bv::hide::modal", "quickFilterModel"), this.reloadList()
        }, registerToSwitchFilter() {
            this.$root.$once("bv::modal::hide", t => {
                "ok" == t.trigger ? this.$emit("update:isAdvanced", !1) : this.status = !0
            })
        }, applyFilters() {
            this.$validator.validate().then(t => {
                t ? (this.applyFilterCondition(), this.$root.$emit("bv::hide::modal", "quickFilterModel")) : this.showErrorNotification(this.$validator.errors.all()[0])
            })
        }, clearFilters() {
            this.clearFilterCondition(), this.$root.$emit("bv::hide::modal", "quickFilterModel"), this.$root.$emit("vds::simple::filter::clear")
        }
    },
    watch: {
        status(t) {
            0 == t && (this.isSimpleFilter() || (this.$refs.QuickFilterSwitch.click(), this.registerToSwitchFilter())), this.$emit("update:isAdvanced", t)
        }, isAdvanced(t) {
            this.status = t
        }
    }
});
Vtiger_Component_QuickFilterHeader = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
Vtiger_Component_QuickFilterSimple = App.vtComponent.extend({
    render: function anonymous() {
        with (this) return _c("div", [selectableFields.length ? _c("div", {staticClass: "w-100 d-flex align-items-center"}, [_c("div", {staticClass: "form-inline has-search col px-0"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback c-pointer",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("div", {staticClass: "d-flex flex-grow-1"}, [_c("v-select2", {
            staticClass: "w-100",
            attrs: {
                name: selectedField || "selectNow",
                options: selectableFields,
                placeholder: translate("LBL_ADD_MORE_COLUMNS")
            },
            model: {
                value: selectedField, callback: function (e) {
                    selectedField = e
                }, expression: "selectedField"
            }
        })], 1)])]) : _e(), _v(" "), _c("div", [_l(displayedFields, (function (e, l) {
            return [_c("div", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: !e.hide,
                    expression: "!fieldModel.hide"
                }], key: l, staticStyle: {"border-bottom": "0.5px solid #e5e5e5", padding: "5px 0px"}
            }, [_c("div", {
                directives: [{
                    name: "b-toggle",
                    rawName: "v-b-toggle",
                    value: "list_filter_field_" + l,
                    expression: "'list_filter_field_'+fieldName"
                }], staticClass: "my-2 c-pointer d-flex align-items-center"
            }, [l.split(".").length > 1 && filterEnabledFields[l.split(".")[0]] ? _c("span", [_v(_s(translate(filterEnabledFields[l.split(".")[0]].label, $module)) + "-")]) : _e(), _v(" "), _c("span", {staticClass: "mr-2"}, [_v(_s(translate(e.fieldlabel)))]), _v(" "), selectAllOptionEnabledFields.includes(e.type.name) ? _c("span", {
                staticClass: "when-opened simpleFilterCheck",
                on: {
                    click: function (e) {
                        e.stopPropagation()
                    }
                }
            }, [_c("vds-checkbox", {
                attrs: {status: selectAllStatus[l]}, on: {
                    change: function (e) {
                        selectAllStatus[l] = !selectAllStatus[l]
                    }
                }
            })], 1) : _e(), _v(" "), _m(0, !0), _v(" "), _m(1, !0)]), _v(" "), _c("b-collapse", {
                ref: "list_filter_field_" + l,
                refInFor: !0,
                attrs: {id: "list_filter_field_" + l}
            }, [_c("div", [_c(e.searchComponent, {
                tag: "component",
                attrs: {
                    selectAll: selectAllStatus[l],
                    "changed-filter-conditions": changedFilterConditions,
                    "field-model": e,
                    "field-name": l,
                    "selected-filter-field-values": selectedFilterFieldValues
                },
                on: {
                    "update:selectAll": function (e) {
                        return $set(selectAllStatus, l, e)
                    }, "update:select-all": function (e) {
                        return $set(selectAllStatus, l, e)
                    }
                }
            })], 1)])], 1)]
        }))], 2)])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("span", {staticClass: "when-opened position-absolute mr-3 r-0 pr-1"}, [_c("i", {staticClass: "fa fa-chevron-circle-up text-secondary simpleFilterIconOnHover"})])
    }, function anonymous() {
        with (this) return _c("span", {staticClass: "when-closed position-absolute mr-3 r-0 pr-1"}, [_c("i", {staticClass: "fa fa-chevron-circle-down text-secondary simpleFilterIconOnHover"})])
    }],
    props: {
        filterModel: Object,
        hasFilterConditionChanged: !1,
        changedFilterConditions: Object,
        selectedFilterFieldValues: Object,
        filterEnabledFields: Object
    },
    data: () => ({
        collapsedMenus: [],
        searchKey: "",
        quickFilterHeadFields: [],
        selectAllStatus: {},
        selectAllOptionEnabledFields: ["owner", "picklist", "metricpicklist"],
        selectedField: "",
        displayedFields: {},
        defaultFieldsToBeDisplayed: {}
    }),
    computed: {
        selectableFields() {
            let e = this.filterEnabledFields, l = [];
            for (let t in e) if (!(t in this.displayedFields)) {
                let i = e[t];
                if (i && !1 === i.allowedinquickfilter) continue;
                let s = "";
                if (t.indexOf(".") > 0) {
                    let l = e[t.split(".")[0]];
                    l && (s += this.translate(l.label, l.moduleName) + " - ")
                }
                s += this.translate(i.label, i.moduleName), l.push({value: t, label: s})
            }
            return l
        }
    },
    watch: {
        selectedField() {
            if (this.selectedField) {
                let e = this.selectedField;
                if (!(e in this.displayedFields)) {
                    let l = this.filterEnabledFields;
                    if (e in l) {
                        let t = l[e];
                        t.hide = !1, Vue.set(this.displayedFields, e, t), Vue.set(this.selectAllStatus, e, !1)
                    }
                }
            }
        }
    },
    mounted() {
        this.defaultFieldsToBeDisplayed = this.filterEnabledFieldModels(), this.expandSelectedFields(), this.selectAllObject()
    },
    methods: {
        selectAllObject() {
            var e = this.defaultFieldsToBeDisplayed;
            for (let l in e) Vue.set(this.selectAllStatus, l, !1);
            return this.selectAllStatus
        }, filterEnabledFieldModels() {
            loadLimit = "undefined" != typeof loadLimit ? loadLimit : -1;
            let e = {}, l = this.filterEnabledFields;
            for (let t in l) {
                if (this.quickFilterHeadFields.includes(t)) continue;
                let i = l[t];
                i.type.name;
                this.filterModel.fields.indexOf(t) < 0 && !(t in this.selectedFilterFieldValues) || (i && (!1 === i.allowedinquickfilter || i.isSensitiveField) || (i.hide = !1, this.searchKey && !this.translate(i.fieldlabel).toLowerCase().includes(this.searchKey.toLowerCase()) && (i.hide = !0), e[t] = i))
            }
            return this.displayedFields = e, e
        }, save(e, l) {
            let t, s = this.filterModel.advancedfilter[1].columns, a = s.length;
            for (i in s) {
                if (s[i].columnname == e) {
                    a = i;
                    break
                }
            }
            "date" == this.filterEnabledFields[e].type.name ? l.from && l.to && (t = {
                column_condition: "and",
                columnname: e,
                comparator: "between",
                value: l.from + "," + l.to
            }) : t = ["picklist", "metricpicklist", "multipicklist", "owner", "ownergroup", "fileLocationType"].includes(this.filterEnabledFields[e].type.name) ? {
                column_condition: "and",
                columnname: e,
                comparator: "equal",
                value: l.join(",")
            } : {
                column_condition: "and",
                columnname: e,
                comparator: "equal",
                value: l
            }, t && Vue.set(this.filterModel.advancedfilter[1].columns, a, t)
        }, expandSelectedFields() {
            if (Object.keys(this.selectedFilterFieldValues).length) for (let e in this.selectedFilterFieldValues) this.$nextTick(() => {
                this.$root.$emit("bv::toggle::collapse", "list_filter_field_" + e)
            }); else {
                let e = this.defaultFieldsToBeDisplayed;
                this.$nextTick(() => {
                    this.$root.$emit("bv::toggle::collapse", "list_filter_field_" + Object.keys(e)[0])
                })
            }
        }
    }
});
var Vtiger_Component_RecentFiltersList = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter],
    inject: ["changeFilter"],
    props: {selectedFilterId: {type: [String, Number]}},
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "py-2  m-0 defaultFontColor h6"}, [_v(_s(getRecentListHeader))]), _v(" "), _c("hr", {staticClass: "mt-1 mb-1"}), _v(" "), _c("div", {staticClass: "row mx-0"}, [_l(recentFiltersList, (function (e, t) {
            return [_c("b-dropdown-item", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: !e.hide,
                    expression: "!filter.hide"
                }],
                key: e.crmid,
                staticClass: "px-2 d-flex align-items-center",
                class: {active: selectedFilterId == e.id, "col-6 mr-3": t % 2 == 0, col: t % 2 != 0},
                attrs: {value: e.id}
            }, [_c("div", {staticClass: "filterName py-1 d-flex w-100 rounded c-pointer align-items-center"}, [_c("i", {staticClass: "fa fa-clock pr-2 text-grey-4"}), _v(" "), _c("a", {
                staticClass: "w-100 h6 m-0 text-decoration-none text-dark textOverflowEllipsis",
                attrs: {href: getFilterRedirectUrl(e.id)},
                on: {
                    click: function (t) {
                        return t.preventDefault(), changeFilter(e.id)
                    }
                }
            }, [_c("span", {
                directives: [{name: "b-tooltip", rawName: "v-b-tooltip"}],
                attrs: {title: baseFilterModel.getViewName(e.name, $module)}
            }, [_v(_s(baseFilterModel.getViewName(e.name, $module)))])])])])]
        })), _v(" "), Object.keys(recentFiltersList).length % 2 == 1 ? _c("div", {staticClass: "d-flex w-50 justify-content-start"}) : _e()], 2)])
    },
    data: () => ({recentFiltersList: [], baseFilterModel: new Vtiger_Filter_Model}),
    mounted() {
        this.getRecentFiltersList()
    },
    watch: {
        "$store.state.List_Filter_Change"() {
            let e = this.$watch(() => ({
                listRecords: this.$store.state.list_records,
                kanbanRecords: this.$store.state.kanban_records,
                calendarRecords: this.$store.state.calendar_view_task_records
            }), () => {
                this.getRecentFiltersList(), e()
            })
        }
    },
    computed: {
        getRecentListHeader() {
            return this.translate("LBL_RECENT_LISTS")
        }
    },
    methods: {
        getRecentFiltersList() {
            var e = {module: this.$module, limit: 5};
            this.appStore.request("api_get", {url: "filters/recent", params: e, key: "recentFilter_list"}).then(e => {
                this.recentFiltersList = e.records
            })
        }
    }
});
var Vtiger_Component_SearchAndActions = App.vtComponent.extend({
    inject: ["getCount"],
    components: {
        "vds-list-view-search": App.loadComponent("ListViewSearch"),
        "vds-list-view-interactive-search": App.loadComponent("ListViewInteractiveSearch"),
        "vds-list-view-mass-actions": App.loadComponent("ListViewMassActions")
    },
    props: {
        isCompact: {type: Boolean, default: !1},
        formatedFilterHeaders: {type: Array, default: []},
        listParams: {type: Object, default: () => ({})},
        currentModule: {type: String, default: ""},
        defaultSearchParams: {type: Array, default: () => []},
        hideSearch: {type: [Boolean], default: !1},
        list: {type: Array, default: () => []},
        masterModuleModel: {type: Object},
        parentModuleModel: {},
        getSelectedRecords: {type: Function},
        loadList: {type: Function},
        getListParams: {type: Function},
        getSelectAllRecordParams: {type: Function},
        recordsLength: {type: Number},
        nextPageExist: {type: Boolean}
    },
    data: () => ({listRowRecord: {}, selectedrecordModels: {}, onAllPageRecordsSelected: !1}),
    computed: {
        hasRecordsSelected() {
            return this.selectAllRecords || this.selectedrecord.length
        }, selectedrecord: {
            get() {
                return this.appStore.get("list_selectedrecords")
            }, set(e) {
                return this.appStore.set({key: "list_selectedrecords", data: e})
            }
        }, excludedIds: {
            get() {
                return this.appStore.get("list_excludedrecords")
            }, set(e) {
                return this.appStore.set({key: "list_excludedrecords", data: e})
            }
        }, selectedRecordsCount() {
            return this.selectAllRecords ? this.pageparams.totalcount : this.selectedrecord.length
        }, selectAllLinkText() {
            this.pageparams.totalcount || this.getCount();
            let e = this.pageparams.totalcount ? this.pageparams.totalcount : this.translate("JS_LOADING");
            return this.selectAllRecords ? this.translate("LBL_DESELECT_ALL_RECORDS") : this.translate("LBL_SELECT_ALL") + " " + this.currentModule + " (" + e + ")"
        }, selectAllRecords: {
            get() {
                return this.appStore.get("list_info").selectAllRecords
            }, set(e) {
                this.appStore.get("list_info").selectAllRecords = e
            }
        }, pageparams: {
            get() {
                return this.appStore.get("list_pageparams")
            }, set(e) {
                this.appStore.set({key: "list_pageparams", data: e})
            }
        }, numberOfPages() {
            return this.pageparams.totalcount ? Math.ceil(this.pageparams.totalcount / this.pageparams.pagelimit) : this.nextPageExist ? parseInt(this.listParams.page) + 1 : this.listParams.page
        }, recordsCount() {
            return this.pageparams.totalcount ? this.pageparams.totalcount : (parseInt(this.listParams.page) - 1) * parseInt(this.pageparams.pagelimit) + this.recordsLength
        }
    },
    watch: {
        selectedrecord: {
            handler(e, t) {
                if (e && e != t) {
                    for (let t in e) {
                        var s = e[t];
                        if (!Object.keys(this.selectedrecordModels).includes(s.toString())) {
                            let e = _.findWhere(this.list, {id: parseInt(s)}) ? _.findWhere(this.list, {id: parseInt(s)}) : _.findWhere(this.list, {id: s.toString()});
                            e && (this.selectedrecordModels[s] = e)
                        }
                    }
                    if (this.selectedrecordModels && Object.keys(this.selectedrecordModels).length > 0) for (let t in this.selectedrecordModels) e.includes(parseInt(t)) || e.includes(t.toString()) || delete this.selectedrecordModels[t]
                }
                this.listRowRecord = this.selectedrecordModels[this.selectedrecord], this.$bubble("vt_list_selected_record_models", this.selectedrecordModels)
            }, deep: !0
        }, selectAllRecords(e) {
            e || (Vue.set(this, "selectedrecord", []), Vue.set(this, "excludedIds", []))
        }
    },
    methods: {
        selectAllRecordsLink() {
            this.selectAllRecords = !this.selectAllRecords, this.selectAllRecords || (this.onAllPageRecordsSelected = !1)
        }, isSearchViewFieldVisible() {
            return this.recordsCount > 0 || this.listParams && this.listParams.text && this.listParams.text.length
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "flex-grow-1 d-flex align-items-center justify-content-between"}, [!hasRecordsSelected || isCompact ? _c("div", {staticClass: "flex-grow-1"}, ["EmailTemplates" == currentModule ? _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: isSearchViewFieldVisible(),
                expression: "isSearchViewFieldVisible()"
            }], staticClass: "w-50"
        }, [_c("vds-list-view-search", {
            ref: "listview_search",
            attrs: {
                searchparam: listParams.text,
                defaultSearchParams: defaultSearchParams,
                "hide-search": hideSearch,
                isListEmpty: !list.length,
                "filter-headers": formatedFilterHeaders
            },
            on: {
                "update:searchparam": function (e) {
                    return $set(listParams, "text", e)
                }
            }
        })], 1) : _c("div", {}, [_c("vds-list-view-interactive-search", {
            ref: "listview_search",
            attrs: {
                "filter-headers": formatedFilterHeaders,
                "master-module-model": masterModuleModel,
                isCompact: isCompact,
                parentModuleModel: parentModuleModel
            }
        })], 1)]) : [isCompact ? _e() : [_c("div", {staticClass: "col-7 pl-0"}, [_c("vds-list-view-mass-actions", {
            attrs: {
                record: listRowRecord,
                selectedrecord: selectedrecord,
                currentModule: currentModule,
                getSelectedRecords: getSelectedRecords,
                loadList: loadList,
                listParams: getListParams(),
                selectedRecordsCount: selectedRecordsCount,
                getSelectAllRecordParams: getSelectAllRecordParams,
                selectAllRecords: selectAllRecords
            }
        })], 1), _v(" "), _c("div", {staticClass: "flex-grow-1 text-center"}, [onAllPageRecordsSelected && numberOfPages > 1 ? _c("a", {
            attrs: {href: "javascript:void(0)"},
            on: {click: selectAllRecordsLink}
        }, [_v(_s(selectAllLinkText))]) : _e()])]]], 2)
    }
});
var Vtiger_Component_SelectTemplates = App.vtComponent.extend({
    inject: ["setPrintTemplate"], render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex justify-content-center pl-0 mt-3 mb-2"}, [_c("div", {staticClass: "form-inline has-search w-75"}, [_c("div", {staticClass: "form-control-feedback"}, [_c("span", {
            staticClass: "fa fa-search form-control-feedback",
            attrs: {title: translate("LBL_SEARCH")}
        })]), _v(" "), _c("input", {
            staticClass: "form-control w-100",
            attrs: {type: "text", placeholder: translate("LBL_SEARCH_FOR_TEMPLATE_NAME", "EmailCampaigns")},
            on: {input: searchForTemplate}
        })])]), _v(" "), _c("div", {staticClass: "my-4"}, [_c("div", {staticClass: "row"}, [_l(templates, (function (e) {
            return [_c("div", {
                directives: [{
                    name: "show",
                    rawName: "v-show",
                    value: !e.hide,
                    expression: "!template.hide"
                }], staticClass: "col-6 px-3"
            }, [_c("vds-quick-option", {
                staticClass: "d-inline-block w-100",
                attrs: {data: e.id, "selected-prop": selectedTemplate == e.id},
                on: {selected: selectTemplate, deSelected: deSelectTemplate}
            }, [_v(_s(translate(e.label, "PrintTemplates")))])], 1)]
        }))], 2)])])
    }, props: ["relatedModule"], data: () => ({templates: {}, selectedTemplate: ""}), mounted() {
        this.loadTemplates()
    }, methods: {
        loadTemplates() {
            let e = new SearchParams;
            e.pushAll("related_modulename", "e", this.relatedModule), e.pushAll("is_active", "e", 1), this.appStore.request("api_get", {
                url: "/records",
                params: {module: "PrintTemplates", q: JSON.stringify(e.data)},
                key: "print_templates"
            }).then(e => {
                this.templates = e;
                for (let e in this.templates) "1" == this.templates[e].is_default && this.selectTemplate(this.templates[e].id)
            })
        }, selectTemplate(e) {
            this.selectedTemplate = e, this.$emit("vds::template::select", e)
        }, deSelectTemplate(e) {
            this.selectedTemplate == e && (this.selectedTemplate = "", this.$emit("vds::template::select", ""))
        }, collectData() {
            if (!this.selectedTemplate) {
                let e = this.translate("JS_PLEASE_SELECT_ONE_TEMPLATE", "EmailCampaigns");
                return this.showErrorNotification(e), !1
            }
            return this.setPrintTemplate(this.selectedTemplate), !0
        }, searchForTemplate(e) {
            let t = e.target.value;
            for (let e in this.templates) this.templates[e].label.toLowerCase().includes(t.toLowerCase()) ? Vue.set(this.templates[e], "hide", !1) : Vue.set(this.templates[e], "hide", !0)
        }
    }
});
var Vtiger_Component_ShareDocument = App.vtComponent.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    components: {
        "vds-select-templates": App.loadComponent("SelectTemplates"),
        "vds-share-document-with": App.loadComponent("ShareDocumentWith")
    },
    render: function anonymous() {
        with (this) return _c("b-modal", {
            attrs: {
                id: "shareDocument",
                "hide-footer": "",
                "header-class": "p-3 bgLtGrey",
                lazy: !0,
                size: "lg"
            }
        }, [_c("template", {slot: "modal-header"}, [_c("div", {
            attrs: {slot: "modal-title"},
            slot: "modal-title"
        }, [_c("span", {staticClass: "d-flex justify-content-between align-items-center h5 mb-0"}, [_c("i", {
            staticClass: "fa-arrow-left mr-3 c-pointer",
            on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "shareDocument")
                }
            }
        }), _v(_s(getTitle))])]), _v(" "), _c("div", {staticClass: "bd-highlight"}, [_c("span", {
            staticClass: "c-pointer",
            on: {
                click: function (t) {
                    return showDiscardDonfirmation()
                }
            }
        }, [_c("i", {staticClass: "fa fa-times mr-1"})])])]), _v(" "), _c("keep-alive", _l(shareDocumentSteps, (function (t, e) {
            return e == currentStep ? _c("vds-" + e, {
                key: e,
                ref: e,
                refInFor: !0,
                tag: "component",
                attrs: {"record-title": recordTitle, "related-module": currentModule, record: records},
                on: {
                    "update:recordTitle": function (t) {
                        recordTitle = t
                    }, "update:record-title": function (t) {
                        recordTitle = t
                    }
                }
            }) : _e()
        })), 1), _v(" "), _c("div", {staticClass: "d-flex justify-content-end my-1 mt-2"}, [isFirstStep() || "Documents" == currentModule ? _e() : _c("button", {
            staticClass: "btn btn-outline-secondary mr-3",
            on: {click: goToPrevStep}
        }, [_c("i", {staticClass: "fa fa-arrow-left mr-2"}), _v(_s(translate("LBL_BACK")))]), _v(" "), isLastStep() ? _c("button", {
            staticClass: "btn btn-success",
            on: {click: shareDocument}
        }, [_v(_s(translate("LBL_SHARE")))]) : _e(), _v(" "), isLastStep() || "Documents" == currentModule ? _e() : _c("button", {
            staticClass: "btn btn-outline-secondary ml-3",
            on: {click: goToNextStep}
        }, [_v(_s(translate("LBL_NEXT"))), _c("i", {staticClass: "fa fa-arrow-right ml-2"})])])], 2)
    },
    props: {records: {type: Array}, currentModule: ""},
    data() {
        return {
            shareDocumentSteps: {
                "select-templates": "LBL_SELECT_PRINT_TEMPLATE",
                "share-document-with": "LBL_SELECT_RECIEPIENTS"
            },
            templates: {},
            currentStep: "Documents" == this.currentModule ? "share-document-with" : "select-templates",
            selectedTemplate: "",
            selectedIds: [],
            toEmailInfo: {},
            to: [],
            toEmail: "",
            description: "",
            subject: "",
            viewType: "List",
            recordTitle: ""
        }
    },
    provide() {
        return {
            setPrintTemplate: this.setTemplate,
            setRecipientInfo: this.setRecipientInfo,
            setEmailInfo: this.setEmailInfo
        }
    },
    computed: {
        getTitle() {
            return this.translate("JS_DOCUMENT_SHARING") + '  -"' + this.recordTitle + '"'
        }
    },
    methods: {
        isFirstStep() {
            return Object.keys(this.shareDocumentSteps)[0] == this.currentStep
        }, isLastStep() {
            return Object.keys(this.shareDocumentSteps).slice(-1)[0] == this.currentStep
        }, goToNextStep() {
            if (!this.$refs[this.currentStep][0].collectData()) return;
            let t = !1;
            for (let e in this.shareDocumentSteps) {
                if (t) {
                    this.currentStep = e;
                    break
                }
                e == this.currentStep && (t = !0)
            }
        }, goToPrevStep() {
            let t = this.currentStep;
            for (let e in this.shareDocumentSteps) {
                if (e == this.currentStep) {
                    this.currentStep = t;
                    break
                }
                t = e
            }
        }, setTemplate(t) {
            this.selectedTemplate = t
        }, setRecipientInfo(t, e) {
            this.toEmailInfo = t, this.to = e, this.selectedIds = Object.keys(this.toEmailInfo), this.toEmail = this.to.join()
        }, setEmailInfo(t, e) {
            this.description = t, this.subject = e
        }, shareDocument() {
            if (!this.$refs[this.currentStep][0].collectData()) return !1;
            let t = {
                module: "Documents",
                id: this.records[0],
                selected_ids: this.selectedIds,
                sourceModule: this.$module,
                toemailinfo: this.toEmailInfo,
                to: this.to,
                viewType: this.viewType,
                toEmail: this.toEmail,
                subject: this.subject,
                template: this.selectedTemplate,
                description: this.description
            }, e = this.translate("LBL_RECORD_SHARED_SUCCESSFULLY", "Documents");
            if (this.records.length > 1) {
                let s = [], i = {type: "post", api: "records/share", parameters: t};
                for (let t in this.records) i.parameters.record = this.records[t], s.push(jQuery.extend(!0, {}, i));
                this.appStore.request("api_batch", {requests: s}).then(t => {
                    this.showSuccessNotification(e), this.$root.$emit("vds::document::shared"), this.$root.$emit("bv::hide::modal", "shareDocument")
                }, t => {
                    this.showErrorNotification(t.message)
                })
            } else t.record = this.records[0], this.appStore.request("api_post", {
                url: "/records/share",
                params: t
            }).then(t => {
                1 == t.success && (this.showSuccessNotification(e), this.$root.$emit("vds::document::shared"), this.$root.$emit("bv::hide::modal", "shareDocument"))
            }, t => {
                this.showErrorNotification(t)
            })
        }, closeShareModal() {
            this.$root.$emit("bv::hide::modal", "shareDocument")
        }, showDiscardDonfirmation() {
            if (this.$refs[this.currentStep][0].description) {
                let t = '<div class="my-3 text-warning">' + this.translate("JS_CHANGES_WILL_BE_LOST") + '</div> <div class="my-3">' + this.translate("JS_WISH_TO_PROCEED") + "</div>";
                this.showModal({
                    componentName: "ConfirmationBox",
                    componentData: {
                        onConfirm: this.closeShareModal,
                        confirmEntity: {},
                        message: t,
                        okTitle: this.translate("LBL_YES"),
                        cancelTitle: this.translate("LBL_NO")
                    },
                    modalOnModalMode: !1
                })
            }
        }
    }
});
var Vtiger_Component_ShareDocumentWith = App.vtComponent.extend({
    model: {prop: "recordTitle", event: "update:recordTitle"},
    inject: ["setRecipientInfo", "setEmailInfo"],
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_DetailRecord, Vtiger_Mixins_ShowModal],
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "d-flex mt-2"}, [_c("label", {
            staticClass: "mb-0 pl-0 align-items-center d-flex",
            attrs: {for: "recipients"}
        }, [_v(_s(translate("LBL_RECIPIENTS"))), _c("span", {staticClass: "text-danger mx-1"}, [_v("*")])]), _v(" "), _c("vds-email-search", {
            ref: "vt_emailsearch_ref",
            attrs: {
                sourceModule: sourceModule,
                recordId: sourceRecordId,
                placeholder: translate("LBL_RECEPIENTS", "Settings:Approvals") + "..."
            },
            on: {vt_email_selected: updateSelectedRecepients, vt_email_unselected: modifyRecepients}
        })], 1), _v(" "), _c("div", {staticClass: "d-flex mt-4"}, [_c("label", {
            staticClass: "mb-0 pr-3 pl-0 align-items-center d-flex",
            attrs: {for: "subject"}
        }, [_v(_s(translate("LBL_SUBJECT"))), _c("span", {staticClass: "text-danger mx-1"}, [_v("*")])]), _v(" "), _c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: subject,
                expression: "subject"
            }],
            staticClass: "form-control",
            attrs: {type: "text", placeholder: translate("LBL_SUBJECT")},
            domProps: {value: subject},
            on: {
                input: function (e) {
                    e.target.composing || (subject = e.target.value)
                }
            }
        })]), _v(" "), _c("div", {staticClass: "mt-4"}, [_c("vds-rte", {
            ref: "shareDoc",
            on: {
                "vds::sharelink::clicked": function (e) {
                    return showDocumentShareLink()
                }
            },
            model: {
                value: description, callback: function (e) {
                    description = e
                }, expression: "description"
            }
        })], 1)])
    },
    props: {relatedModule: {type: String}, record: {type: Array}, recordTitle: {type: String}},
    data() {
        return {
            module: this.relatedModule,
            toEmailInfo: {},
            toEmails: [],
            description: "",
            subject: "",
            linkName: "",
            modalShown: !1,
            ckEditorInstance: ""
        }
    },
    created() {
        this.setRecordLinkInRTE()
    },
    mounted() {
        this.$root.$on("vds::share::link::closed", () => {
            Vue.set(this, "modalShown", !1)
        })
    },
    computed: {
        sourceModule() {
            return "Documents" == this.module ? "Contacts" : this.module
        }, sourceRecordId() {
            return this.record.id
        }, getLinkName() {
            return this.linkName
        }
    },
    methods: {
        setRecordLinkInRTE() {
            this.retrieveRecord(this.record[0], this.module).then(e => {
                this.$emit("update:recordTitle", e.label), this.linkName = e.label, this.description = '<a href="$document_share_url$" data-linktype="shareUrl">' + this.getLinkName + "</a>", this.getShareSubject(e)
            })
        }, updateSelectedRecepients(e) {
            if (e.recordId) {
                let t = e.recordId;
                this.toEmailInfo[t] || (this.toEmailInfo[t] = []), this.toEmailInfo[t].push(e.id), this.toEmails.push(e.id)
            } else this.toEmails.push(e.id)
        }, modifyRecepients(e) {
            if (!e.selected) {
                let t = e.id, i = e.recordId;
                this.toEmails.splice(t, 1), i && this.toEmailInfo[i] && (this.toEmailInfo[i].splice(t, 1), 0 == this.toEmailInfo[i].length && delete this.toEmailInfo[i])
            }
        }, collectData() {
            if (0 == this.toEmails.length) {
                let e = this.translate("JSLBL_Recepient_Cannot_Be_Empty", "MailManager");
                return this.showErrorNotification(e), !1
            }
            if ("" == this.subject) {
                let e = this.translate("JSLBL_Subject_Cannot_Be_Empty", "MailManager");
                return this.showErrorNotification(e), !1
            }
            return this.setRecipientInfo(this.toEmailInfo, this.toEmails), this.setEmailInfo(this.description, this.subject), !0
        }, getShareSubject(e) {
            this.subject = this.translate("LBL_SHARE_SUBJECT", "Documents", this.$currentUser.last_name, e.label)
        }, showDocumentShareLink() {
            if (!this.modalShown) {
                let e = this.sourceRecordId ? this.sourceRecordId : this.record[0];
                this.showModal({
                    componentName: "DocumentShareLinkEdit",
                    componentData: {name: this.getLinkName, parentRecordId: e},
                    modalOnModalMode: !1
                }), Vue.set(this, "modalShown", !0), this.$on("vds::documents::sharelink", e => {
                    if (this.$root.$emit("bv::hide::modal", "documentShareLinkEditModel"), this.ckEditorInstance = this.$refs.shareDoc ? this.$refs.shareDoc.editorInstance : "", this.ckEditorInstance) {
                        let t = this.ckEditorInstance.editable(), i = jQuery(t.$);
                        i.find('a[data-linktype="shareUrl"]').length && (i.find('a[data-linktype="shareUrl"]').html(e), this.description = this.ckEditorInstance.getData())
                    }
                    Vue.set(this, "linkName", e), Vue.set(this, "modalShown", !1)
                })
            }
        }
    }
});
Vtiger_Component_SimpleFilterSwitchWarning = App.vtComponent.extend({
    mixins: [Vtiger_Mixin_Filter],
    render: function anonymous() {
        with (this) return _c("b-modal", {
            ref: "simpleFilterSwitch",
            attrs: {size: "md right", id: "simpleFilterSwitchWarning"}
        }, [_c("div", {
            attrs: {slot: "modal-header"},
            slot: "modal-header"
        }, [_v("\n\t\t\t\t" + _s(translate("LBL_SWITCH_BACK_TO_SIMPLE_FILTER")) + "\n\t\t    ")]), _v(" "), _c("div", [_c("span", {domProps: {innerHTML: _s(translate("LBL_CONVERT_TO_SIMPLE_FILTER_MESSAGE"))}})]), _v(" "), _c("div", {
            staticClass: "w-100 text-center",
            attrs: {slot: "modal-footer"},
            slot: "modal-footer"
        }, [_c("button", {
            staticClass: "btn btn-outline-secondary mr-2", on: {
                click: function (t) {
                    return $root.$emit("bv::hide::modal", "simpleFilterSwitchWarning")
                }
            }
        }, [_c("i", {staticClass: "fa fa-times mr-2"}), _v(_s(translate("LBL_CANCEL")) + "\n\t\t\t\t")]), _v(" "), _c("button", {
            staticClass: "btn btn-outline-secondary",
            on: {click: convertToSimpleFilter}
        }, [_c("i", {staticClass: "fa fa-thumbs-up mr-2"}), _v(_s(translate("LBL_OK")) + "\n\t\t\t\t")])])])
    },
    props: {filterModel: Object, isAdvanceFilter: Boolean, filterEnabledFields: Object},
    methods: {
        convertToSimpleFilter() {
            Vue.set(this.filterModel.advancedfilter[2], "columns", []);
            let t = this.filterModel.advancedfilter[1], e = t.columns, i = [];
            for (let l in e) {
                let s = e[l], n = s.columnname;
                if (i.includes(n) ? t.columns.splice(l, 1) : i.push(n), this.filterEnabledFields[n]) {
                    let e = this.filterEnabledFields[n].type.name;
                    this.filterModel.isFieldAllowedInSimpleFilter(e) || t.columns.splice(l, 1);
                    let i = this.filterModel.getSimpleComparator(this.filterEnabledFields[n]);
                    s.comparator != i && t.columns.splice(l, 1)
                }
            }
            this.$refs.simpleFilterSwitch.hide("ok")
        }
    }
});
var Vtiger_Component_BooleanDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    render(e, {props: a, parent: t}) {
        let n = !(r = a.record.getDisplayValue(a.fieldname)) || !0 !== r && 1 !== r && "1" !== r && "yes" !== r.toLowerCase() && "on" !== r.toLowerCase() ? t.translate("LBL_NO") : t.translate("LBL_YES");
        var r;
        return e("span", {class: ["fieldDisplayValue"], attrs: {"data-name": a.fieldname, title: n}}, [n])
    }
});
var Vtiger_Component_BooleanEdit = Vtiger_Component_StringEdit.extend({
    computed: {
        recordValue: {
            get() {
                let e = this.record[this.getFieldName];
                return !(!e || !0 !== e && 1 !== e && "1" !== e && "yes" !== e.toLowerCase() && "on" !== e.toLowerCase())
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e ? 1 : 0)
            }
        }
    }, props: {displayType: {type: String, default: "custom"}}, render: function anonymous() {
        with (this) return _c("div", ["custom" == displayType ? _c("div", [_c("vds-checkbox", {
            attrs: {
                name: field.name,
                disabled: readonly
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        })], 1) : _c("div", [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            staticClass: "form-control",
            staticStyle: {height: "16px", width: "16px"},
            attrs: {name: field.name, disabled: isFieldLocked || readonly, type: "checkbox"},
            domProps: {checked: Array.isArray(recordValue) ? _i(recordValue, null) > -1 : recordValue},
            on: {
                change: function (e) {
                    var r = recordValue, a = e.target, t = !!a.checked;
                    if (Array.isArray(r)) {
                        var o = _i(r, null);
                        a.checked ? o < 0 && (recordValue = r.concat([null])) : o > -1 && (recordValue = r.slice(0, o).concat(r.slice(o + 1)))
                    } else recordValue = t
                }
            }
        })]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate", attrs: {title: errors.first(field.name)}
        }, [_v(_s(errors.first(field.name)))])])
    }
});
var Vtiger_Component_ComboFieldEdit = Vtiger_Component_PicklistEdit.extend({
    render: function anonymous() {
        with (this) return _c("div")
    }
});
var Vtiger_Component_CompositeDisplay = Vtiger_Component_BaseDisplay.extend({
    props: {view: {type: String, default: ""}}, data: () => ({selectedField: !1}), computed: {
        selectedFieldModel() {
            return this.selectedField || (() => {
                let e = this.fieldModel, t = this.record.getParentFieldForCompositeType(this.fieldModel.fieldType);
                var i = [];
                let l = this.fieldModel.getCompositeChilds();
                for (let e in l) {
                    let t = l[e];
                    t.isViewable && i.push(t.name)
                }
                if (i.length > 0 && !_.contains(i, t) && (t = i[0]), t) {
                    let i = this.fieldModel.getCompositeChilds()[t];
                    i && i.isViewable && (e = i)
                }
                if (!this.record.get(e.name)) if (this.record.get(this.fieldModel.name)) e = this.fieldModel; else for (var d in this.fieldModel.getCompositeChilds()) {
                    let t = this.fieldModel.getCompositeChilds()[d];
                    if (this.record.get(t.name)) {
                        e = t;
                        break
                    }
                }
                return e
            })()
        }, childCompositeFields() {
            let e = this.fieldModel.getCompositeChilds(), t = [];
            for (var i in e) {
                let l = e[i];
                l && !l.isViewable || this.record.get(l.name) && l.fieldname !== this.selectedFieldModel.fieldname && t.push(l)
            }
            return this.record.get(this.fieldModel.name) && this.fieldModel.fieldname !== this.selectedFieldModel.fieldname && t.push(this.fieldModel), t
        }
    }, methods: {
        getComponent(e) {
            if (e) return e.getViewComponent()
        }, updateSelectedField(e) {
            if (this.record.isClosed) return this.showErrorNotification(this.translate("LBL_RECORD_CLOSED", this.$module, this.translate(this.$module, this.$module))), "";
            this.selectedField = e, this.savePrimaryField(e)
        }, savePrimaryField(e) {
            let t = {
                primary_phone_field: this.record.get("primary_phone_field"),
                primary_email_field: this.record.get("primary_email_field")
            };
            switch (e.fieldType) {
                case"email":
                    t.primary_email_field = e.name;
                    break;
                case"phone":
                    t.primary_phone_field = e.name
            }
            this.appStore.request("api_put", {
                url: "records/primaryfield",
                params: Object.assign({module: e.moduleName, id: this.record.getId()}, t)
            }).then(t => {
                if (t) switch (e.fieldType) {
                    case"email":
                        Vue.set(this.record, "primary_email_field", e.name);
                        break;
                    case"phone":
                        Vue.set(this.record, "primary_phone_field", e.name)
                }
            })
        }, isSelectedField(e) {
            return e.id === this.selectedFieldModel.id
        }, isDropDownNeeded() {
            return this.childCompositeFields.length > 0
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex align-items-center"}, [_c(getComponent(selectedFieldModel), {
            tag: "component",
            staticClass: "text-truncate",
            attrs: {view: view, fieldModel: selectedFieldModel, fieldname: selectedFieldModel.name, record: record}
        }), _v(" "), isDropDownNeeded() ? [_c("b-dropdown", {
            attrs: {
                variant: "link",
                right: "",
                "no-caret": "",
                "menu-class": "shadow-sm p-0",
                "toggle-class": "pr-0",
                boundary: "viewport"
            }
        }, [_c("template", {slot: "button-content"}, [_c("i", {staticClass: "fa fa-caret-down text-dark compositeDropDownCaret"})]), _v(" "), _c("div", {staticClass: "detailCompositeDropDown"}, [_c("b-dropdown-item", {
            staticClass: "py-2 px-3",
            on: {
                click: function (e) {
                    return e.stopPropagation(), updateSelectedField(fieldModel)
                }
            }
        }, [_c(getComponent(selectedFieldModel), {
            tag: "component",
            staticClass: "text-truncate",
            attrs: {fieldModel: selectedFieldModel, fieldname: selectedFieldModel.name, record: record}
        }), _v(" "), _c("span", {staticClass: "badge badge-pill badge-light mr-3 border"}, [_v(_s(selectedFieldModel.label))]), _v(" "), isSelectedField(selectedFieldModel) ? _c("i", {staticClass: "fas fa-check text-primary"}) : _e()], 1), _v(" "), _l(childCompositeFields, (function (e) {
            return [_c("b-dropdown-item", {
                staticClass: "py-2 px-3", on: {
                    click: function (t) {
                        return t.stopPropagation(), updateSelectedField(e)
                    }
                }
            }, [_c(getComponent(e), {
                tag: "component",
                staticClass: "mw-col-8 text-truncate",
                attrs: {view: view, fieldModel: e, fieldname: e.name, record: record}
            }), _v(" "), _c("span", {staticClass: "badge badge-pill badge-light mr-3 border"}, [_v(_s(e.label))]), _v(" "), isSelectedField(e) ? _c("i", {staticClass: "fas fa-check text-primary"}) : _e()], 1)]
        }))], 2)], 2)] : _e()], 2)
    }
});
var Vtiger_Component_CurrencyListDisplay = Vtiger_Component_BaseDisplay.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    data: () => ({allCurrencies: {}}),
    computed: {
        currencyLabel() {
            var e = this.record.get(this.fieldname), r = this.allCurrencies[e];
            return e && r ? r.currency_name : ""
        }
    },
    mounted() {
        this.getCurrencies().then(e => {
            Vue.set(this, "allCurrencies", e)
        })
    },
    template: '<span class="fieldDisplayValue" :data-name="fieldname" :title="currencyLabel"> {{ currencyLabel }} </span>'
});
var Vtiger_Component_CurrencyListEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    data: () => ({currencyDetails: []}),
    created() {
        this.getCurrencies().then(e => {
            this.currencyDetails = Object.values(e).map(e => ({value: e.id, label: e.currency_name}))
        })
    },
    render: function anonymous() {
        with (this) return _c("v-select2", {
            attrs: {
                disabled: readonly || isFieldLocked,
                options: currencyDetails,
                emptyOption: !1
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        })
    }
});
var Vtiger_Component_DashboardOwnerDisplay = App.vtComponent.extend({
    props: {
        label: {type: [String]},
        id: {type: [String, Number]},
        module: {type: [String]}
    }, render: function anonymous() {
        with (this) return _c("span", {
            staticClass: "d-flex align-items-center",
            attrs: {title: label}
        }, [_c("i", {staticClass: "fas fa-user-circle mr-3 text-secondary mb-0 h4"}), _v(" "), _c("span", {staticClass: "textOverflowEllipsis"}, [_v(_s(label))])])
    }
});
var Vtiger_Component_DateDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    mixins: [Vtiger_Mixin_DateUtils],
    methods: {
        getDisplayValue(e) {
            let {props: t, parent: a} = e,
                o = t.component ? t.component.options.methods : Vtiger_Component_DateDisplay.options.methods;
            a = Object.assign(a, o);
            var n = App.view();
            let i = t.record[t.fieldname];
            return n && ("List" == n || "Import" == a.parentModule && "List" == a.viewtype) && i && !i.isUserFormat() ? o.convertDateToUserFormat.call(a, t.record[t.fieldname]) : (i && i.isUserFormat() && (i = i.toString()), i)
        }
    },
    render(e, t) {
        let {props: a, parent: o} = t, n = Vtiger_Component_DateDisplay.options.methods.getDisplayValue(t);
        return e("span", {class: ["fieldDisplayValue"], attrs: {"data-name": a.fieldname}}, [n])
    }
});
Vtiger_Component_DateEdit = Vtiger_Component_StringEdit.extend({
    computed: {
        recordValue: {
            get() {
                return this.record[this.field.name]
            }, set(e) {
                Vue.set(this.record, this.field.name, e)
            }
        }
    }, render: function anonymous() {
        with (this) return _c("vds-datepicker", {
            attrs: {"data-format": "yyyy/mm/dd", field: field},
            model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        })
    }
});
var Vtiger_Component_DateTimeEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_DateUtils],
    data: () => ({enabledDates: [], widgetPosition: {horizontal: "auto", vertical: "auto"}}),
    props: {
        keepDatePickerOpen: {type: [Boolean], default: !1},
        showErrorMsgAbove: {type: [Boolean], default: !1},
        widgetPositioning: {type: [Object]}
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: showErrorMsgAbove && errors.has(field.name),
                expression: "showErrorMsgAbove && errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))]), _v(" "), _c("div", {staticClass: "input-group dateTime"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model.lazy",
                value: recordValue,
                expression: "recordValue",
                modifiers: {lazy: !0}
            }],
            staticClass: "dateTimeField form-control",
            attrs: {
                name: field.name,
                disabled: isFieldLocked || readonly,
                placeholder: placeHolder,
                autocomplete: "off",
                type: "text"
            },
            domProps: {value: recordValue},
            on: {
                change: function (e) {
                    recordValue = e.target.value
                }
            }
        }), _v(" "), _m(0)]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !showErrorMsgAbove && errors.has(field.name),
                expression: "!showErrorMsgAbove && errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "input-group-append input-group-addon"}, [_c("span", {staticClass: "input-group-text"}, [_c("i", {staticClass: "fa fa-calendar"})])])
    }],
    mounted() {
        this.init()
    },
    methods: {
        init() {
            if (this.$currentUser) this.registerDateTimePicker(); else {
                let e = this.$watch("$currentUser", (t, i) => {
                    t && (this.registerDateTimePicker(), e())
                })
            }
        }, triggerDateTimeFieldChangedEvent() {
        }, registerDateTimePicker() {
            let e = {
                format: this.getUserDateTimeFormat(),
                icons: {time: "fa fa-clock"},
                allowInputToggle: !0,
                keepInvalid: !0,
                useStrict: !0,
                enabledDates: this.enabledDates,
                debug: this.keepDatePickerOpen
            };
            jQuery(this.$el).find(".dateTime").datetimepicker(e).on("dp.change", e => {
                var t = e.date;
                if (t && t.isValid()) {
                    let e = this.recordValue;
                    this.recordValue = t.format(this.getUserDateTimeFormat()), this.triggerDateTimeFieldChangedEvent(this.recordValue, e)
                }
            })
        }
    }
});
var Vtiger_Component_DatetimeDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    mixins: [Vtiger_Mixin_DateUtils],
    methods: {
        displayValue(e) {
            let {props: t, parent: n} = e,
                a = t.component ? t.component.options.methods : Vtiger_Component_DatetimeDisplay.options.methods;
            n = Object.assign(n, a);
            let o = null, i = t.record.getRawValue(t.fieldname);
            if (i && "0000-00-00 00:00:00" != i) {
                App.view();
                i.isUserFormat() ? (o = t.record.getDisplayValue(t.fieldname), i.isUserFormat() && (o = o.toString())) : o = a.getDisplayDateTime.call(n, i)
            }
            return o
        }
    },
    render(e, t) {
        let n, {props: a, parent: o} = t;
        if (a.component) n = a.component; else {
            if (!a.componentName) return e("span", {}, []);
            n = App.getDynamicComponentInstance(a.componentName, a.componentModule)
        }
        let i = n.options.methods.displayValue.call(o, t), l = e(!1), s = e(!1);
        return a.showIcon && i && (l = e("i", {
            class: ["text-grey-2 mr-1 fa fa-calendar"],
            attrs: {title: a.fieldModel.label}
        }, [])), s = e("span", {
            class: ["fieldDisplayValue"],
            attrs: {"data-name": a.fieldname}
        }, [i]), e("span", {}, [l, s])
    }
});
var Vtiger_Component_DocumentFolderEdit = Vtiger_Component_StringEdit.extend({
    props: {
        emptyOption: {
            type: Boolean,
            default: !1
        }
    }, data: () => ({folderList: []}), created() {
        this.getDocumentModuleFolders()
    }, methods: {
        getDocumentModuleFolders() {
            this.appStore.request("api_get", {
                url: "folders",
                params: {module: "Documents"},
                key: "document_module_folders"
            }).then(e => {
                for (let o in e) {
                    var t = {};
                    t.value = e[o].folderid, t.label = e[o].foldername, this.folderList.push(t)
                }
            })
        }
    }, render: function anonymous() {
        with (this) return _c("span", [_c("v-select2", {
            attrs: {
                name: field.name,
                options: folderList,
                emptyOption: emptyOption
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first(field.name)))])], 1)
    }
});
var Vtiger_Component_DocumentFileNameEdit = Vtiger_Component_ImageEdit.extend({
    data() {
        return {
            maxUploadSize: "",
            currentRecordModel: this.record,
            showExternal: !1,
            oldFileName: this.record.filename,
            oldFileLocationType: this.record.filelocationtype
        }
    }, computed: {
        recordValue: {
            get() {
                return this.showExternal && !this.record[this.field.name] ? "" : this.constructor.super.options.computed.recordValue.get.call(this)
            }, set(e) {
                this.constructor.super.options.computed.recordValue.set.call(this, e)
            }
        }
    }, created() {
        var e = new Configuration;
        this.maxUploadSize = e.get("DOCUMENT_MAX_UPLOAD_SIZE"), this.showExternal = !(!this.currentRecordModel || "E" != this.currentRecordModel.filelocationtype)
    }, watch: {
        "currentRecordModel.filelocationtype": {
            handler(e) {
                "E" == e ? (this.showExternal = !0, this.field.dynamicMandatory = !0) : (this.showExternal = !1, this.field.dynamicMandatory = !1), this.recordValue = e == this.oldFileLocationType ? this.oldFileName : ""
            }
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "d-flex flex-column"}, [showExternal ? [_c("input", {
            directives: [{
                name: "validate",
                rawName: "v-validate",
                value: "required|url",
                expression: "'required|url'"
            }, {name: "model", rawName: "v-model", value: recordValue, expression: "recordValue"}],
            staticClass: "form-control",
            attrs: {name: field.name, disabled: !field.isEditable || readonly, type: "text || isFieldLocked"},
            domProps: {value: recordValue},
            on: {
                input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        })] : _e(), _v(" "), showExternal ? _e() : _c("div", {staticClass: "d-flex flex-row overflow-hidden"}, [_c("b-file", {
            model: {
                value: recordValue,
                callback: function (e) {
                    recordValue = e
                },
                expression: "recordValue"
            }
        }), _v(" "), _c("i", {
            directives: [{name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: {hover: !0}}],
            staticClass: "fa fa-info-circle align-self-center ml-2",
            attrs: {title: translate("LBL_MAX_UPLOAD_SIZE") + " " + maxUploadSize + " " + translate("LBL_MB")}
        })], 1), _v(" "), !recordValue || errors.has(field.name) || showExternal ? _e() : _c("div", {staticClass: "text-break"}, [_v(_s(_.isObject(recordValue) ? recordValue.name : recordValue))]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger"
        }, [_v(_s(errors.first(field.name.toLowerCase())))])], 2)
    }
});
var Vtiger_Component_DocumentsFileUploadDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(a, e) {
        let {props: t} = e, l = t.record, s = t.fieldname, n = a(!1);
        if (t.isCompact) n = a("span", {class: ["fieldDisplayValue"]}, [l.getDisplayValue(s)]); else {
            n = a("a", {
                attrs: {target: l.getRawValue("fileid") ? "" : "_blank", href: l.getDownloadUrl()},
                on: {
                    click: function (a) {
                        a.stopPropagation()
                    }
                }
            }, [a("span", {class: "fieldDisplayValue"}, [l.getDisplayValue(s)])])
        }
        return a("span", {attrs: {"data-name": s, class: "text-truncate"}}, [n])
    }
});
var Vtiger_Component_DoubleEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    computed: {
        recordValue: {
            get() {
                return this.record[this.getFieldName]
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("span", {attrs: {id: "fieldContainer"}}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model.lazy",
                value: recordValue,
                expression: "recordValue",
                modifiers: {lazy: !0}
            }],
            staticClass: "form-control",
            attrs: {name: field.name, disabled: isFieldLocked || readonly, type: "text"},
            domProps: {value: recordValue},
            on: {
                change: function (e) {
                    recordValue = e.target.value
                }
            }
        })]), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name.toLowerCase())))])])
    }
});
var Vtiger_Component_DurationEdit = Vtiger_Component_StringEdit.extend({
    data: function () {
        return {
            activeAction: "",
            currentDurationValue: "",
            durationOptions: [{
                value: "duration_minutes",
                label: this.translate("LBL_MINUTES")
            }, {value: "duration_hours", label: this.translate("LBL_HOURS")}, {
                value: "duration_days",
                label: this.translate("LBL_DAYS")
            }]
        }
    }, mounted() {
        this.setDuration()
    }, computed: {
        recordValue: {
            get() {
                let e = this.currentDurationValue;
                switch (this.activeAction) {
                    case"duration_days":
                        Vue.delete(this.record, "duration_hours"), Vue.delete(this.record, "duration_minutes"), e = this.record.duration_days;
                        break;
                    case"duration_hours":
                        Vue.delete(this.record, "duration_minutes"), Vue.delete(this.record, "duration_days"), e = this.record.duration_hours;
                        break;
                    case"duration_minutes":
                        Vue.delete(this.record, "duration_hours"), Vue.delete(this.record, "duration_days"), e = this.record.duration_minutes;
                        break;
                    default:
                        e = this.record.duration_days
                }
                return e
            }, set(e) {
                switch (this.currentDurationValue = e, this.activeAction) {
                    case"duration_days":
                        Vue.set(this.record, "duration_days", e), Vue.delete(this.record, "duration_hours"), Vue.delete(this.record, "duration_minutes");
                        break;
                    case"duration_hours":
                        Vue.set(this.record, "duration_hours", e), Vue.delete(this.record, "duration_minutes"), Vue.delete(this.record, "duration_days");
                        break;
                    case"duration_minutes":
                        Vue.set(this.record, "duration_minutes", e), Vue.delete(this.record, "duration_hours"), Vue.delete(this.record, "duration_days");
                        break;
                    default:
                        Vue.set(this.record, "duration_days", e)
                }
            }
        }
    }, methods: {
        setDuration() {
            let e = () => {
                if (!this.record || this.record.hasOwnProperty("duration_days") || this.record.hasOwnProperty("duration_minutes") || this.record.hasOwnProperty("duration_hours") || this.record.id || !this.$currentUser) {
                    if (this.record && !this.record.selectedDurationType) {
                        let e = this.$watch("record.selectedDurationType", (t, r) => {
                            t && (this.activeAction = this.record.selectedDurationType, e())
                        })
                    }
                } else {
                    let e = this.$currentUser.get("taskduration");
                    if (e) {
                        let t = e.split("::");
                        this.activeAction = t[1], Vue.set(this.record, t[1], t[0])
                    }
                }
            };
            if (this.record && !this.record.isLoaded) {
                let t = this.$watch("record.isLoaded", (r, i) => {
                    r && (e(), t())
                })
            } else this.record && this.record.isLoaded && e()
        }
    }, watch: {
        activeAction: function (e, t) {
            this.record.selectedDurationType = e
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "input-group durationEdit align-items-center"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            staticClass: "form-control height-35px",
            attrs: {disabled: readonly || isFieldLocked, type: "text"},
            domProps: {value: recordValue},
            on: {
                input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        }), _v(" "), _c("div", {staticClass: "input-group-append border-left"}, [_c("v-select2", {
            attrs: {
                disabled: readonly,
                options: durationOptions,
                emptyOption: !1
            }, model: {
                value: activeAction, callback: function (e) {
                    activeAction = e
                }, expression: "activeAction"
            }
        })], 1), _v(" "), _c("i", {
            directives: [{
                name: "b-tooltip",
                rawName: "v-b-tooltip.hover",
                modifiers: {hover: !0}
            }],
            staticClass: "fa fa-info-circle text-muted px-2",
            attrs: {title: translate("LBL_DEFAULT_DAY_DURATION", "Vtiger")}
        })]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    }
});
var Vtiger_Component_EmailEdit = Vtiger_Component_StringEdit.extend({});
var Vtiger_Component_EstimateEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_DateUtils], data: function () {
        return {activeAction: "", currentDurationValue: "", timer: ""}
    }, computed: {
        recordValue: {
            get() {
                let e = "";
                return this.record && this.record.estimate && (e = this.record.estimate), e
            }, set(e) {
                this.timer && (clearTimeout(this.timer), this.timer = null), this.timer = setTimeout(() => {
                    let t = e.matchAll(/(\d+)\s*(day|days|d)/gi), r = Array.from(t),
                        i = e.matchAll(/(\d+)\s*(hrs|hour|hours|h)/gi), a = Array.from(i),
                        s = e.matchAll(/(\d+)\s*(min|mins|minute|minutes|m)/gi), n = Array.from(s), o = 0;
                    r && r.length > 0 && r.forEach((e, t) => {
                        o = parseInt(o) + parseInt(e[1])
                    });
                    let l = 0;
                    a && a.length > 0 && a.forEach((e, t) => {
                        l = parseInt(l) + parseInt(e[1])
                    });
                    let m = 0;
                    n && n.length > 0 && n.forEach((e, t) => {
                        m = parseInt(m) + parseInt(e[1])
                    });
                    let d = "";
                    if (o && o > 0 && (d = d + o + " days "), l && l > 0 && (d = d + " " + l + " hours "), m && m > 0 && (d = d + " " + m + " mins"), d) {
                        let e = new String(d);
                        e.markAsUserFormat(!0), Vue.set(this.record, "estimate", e)
                    } else Vue.set(this.record, "estimate", "")
                }, 750)
            }
        }
    }, render: function anonymous() {
        with (this) return _c("div", [_c("div", {staticClass: "input-group estimateEdit align-items-center"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            staticClass: "estimateInput form-control height-35px rounded",
            attrs: {name: field.name, placeholder: "50 mins", disabled: readonly || isFieldLocked, type: "text"},
            domProps: {value: recordValue},
            on: {
                input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        }), _v(" "), _c("i", {
            directives: [{name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: {hover: !0}}],
            staticClass: "fa fa-info-circle text-muted px-2",
            attrs: {title: translate("LBL_ESTIMATE_INFO", "Calendar")}
        })]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    }
});
var Vtiger_Component_FieldDisplay = App.vtComponent.extend({
    mixins: [App.loadMixin("Field")],
    functional: !0,
    name: "FieldDisplay",
    props: {
        field: {type: [Object, String]},
        record: {type: Object},
        modulemodel: {type: Object},
        view: {type: String, default: ""},
        isCompact: {type: [Boolean, String], default: !1},
        checkViewable: {type: Boolean, default: !0},
        className: {type: String, default: ""},
        showIcon: {type: Boolean, default: !1},
        showConvertedCurrencyValue: {type: Boolean, default: !0},
        allowFieldActions: {type: Boolean, default: !0},
        previewNoListReload: {type: [Boolean], default: !1}
    },
    methods: {
        getFieldModel(e) {
            let {props: o} = e;
            var t = o.field;
            if ("label" === t || "reason" === t && _.isUndefined(o.modulemodel.getField(t))) {
                return t = new Vtiger_Field_Model({name: t, fieldname: t, type: {name: "string"}, viewable: !0})
            }
            if ("string" == typeof t) {
                var l = o.modulemodel.getMetricFieldFilterableFields();
                t = Object.keys(l).includes(t) ? l[t] : o.modulemodel.getField(t)
            }
            return t
        }, getComponent(e, o) {
            let {props: t, parent: l} = o;
            if (l.fieldComponents || (l.fieldComponents = {}), e && l.fieldComponents[e.name]) return l.fieldComponents[e.name];
            var n = !1;
            if (e && e.isCompositeParent) {
                let o = App.getDynamicComponentInstance(t.view + "_CompositeDisplay", e.moduleName);
                n = o || App.getDynamicComponentInstance("CompositeDisplay", e.moduleName)
            }
            return e && !n && (n = e.getViewComponent({view: t.view})), e && (l.fieldComponents[e.name] = n), n
        }
    },
    render(e, o) {
        let {props: t, parent: l} = o,
            n = (t.component ? t.component : App.getDynamicComponentInstance("FieldDisplay", l.$module)).options.methods;
        var i = e(!1);
        if (l.$isLoading) i = e("span", {}, [e("vds-value-progress")]); else {
            let p = n.getFieldModel.call(l, o, n), s = n.getComponent.call(l, p, o);
            var a = e(!1);
            if (t.showIcon && p) {
                var d = "";
                ["owner", "reference", "coowner"].includes(p.fieldType) ? d = "text-primary " + n.getFieldIcon.call(l, p, t.record) : ["datetime"].includes(p.fieldType) || (d = n.getFieldIcon.call(l, p, t.record)), a = e("i", {
                    class: "text-grey-2 mr-1 " + d,
                    attrs: {title: p.label}
                }, [])
            }
            var r = e(!1);
            r = e(s, {
                props: {
                    isCompact: t.isCompact,
                    fieldname: p && p.name,
                    fieldModel: p,
                    record: t.record,
                    view: t.view,
                    showIcon: t.showIcon,
                    showConvertedCurrencyValue: t.showConvertedCurrencyValue,
                    allowFieldActions: t.allowFieldActions,
                    previewNoListReload: t.previewNoListReload
                }
            }), i = e("div", {class: t.className}, [a, r])
        }
        return e("span", o.data, [i])
    }
});
var Vtiger_Component_FileDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(e, l) {
        let {props: n, parent: a} = l,
            t = (n.component ? n.component : App.getDynamicComponentInstance("FileDisplay", a.$module)).options.methods,
            i = t.fileLabel.call(a, l, t);
        return e("span", {class: "fieldDisplayValue"}, [e("a", {
            attrs: {
                href: t.fileURL.call(a, l, t),
                target: "_blank"
            }, on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [i])])
    }, methods: {
        fieldValue(e) {
            let {props: l} = e, n = {};
            return l.record.isLoaded && (n = l.record.get(l.fieldname)[0]), n
        }, fileLabel(e, l) {
            let {parent: n} = e, a = l.fieldValue.call(n, e);
            return _.isUndefined(a.name) ? "" : a.name
        }, fileURL(e, l) {
            let {parent: n} = e;
            return l.fieldValue.call(n, e).publicurl
        }
    }
});
var Vtiger_Component_GridDisplay = Vtiger_Component_BaseDisplay.extend({
    components: {"hot-table": Handsontable.vue.HotTable},
    render(e, l) {
        let {props: o, parent: n} = l, r = App.getDynamicComponentInstance("GridDisplay", n.$module).options.methods,
            a = r.rows.call(n, l), t = r.columns.call(n, l), s = e("hot-table", {
                class: ["overflow-hidden", "w-100"],
                props: {
                    data: r.displayValue.call(n, l),
                    "col-headers": t,
                    "row-headers": a,
                    "min-rows": a.length,
                    "min-cols": t.length,
                    "manual-column-resize": !0,
                    "fill-handler": !1,
                    "column-sorting": !0,
                    "read-only": !0
                }
            });
        return e("div", {class: "inputHandsonTableElement"}, [s])
    },
    methods: {
        displayValue(e) {
            let {props: l} = e;
            try {
                return JSON.parse(l.record[l.fieldname])
            } catch (e) {
                return [[]]
            }
        }, columns(e) {
            let {props: l} = e, o = l.fieldModel.data;
            return !o || o.columns
        }, rows(e) {
            let {props: l} = e, o = l.fieldModel.data;
            return !(o && o.rows && o.rows.length) || o.rows
        }
    }
});
var Vtiger_Component_GridEdit = Vtiger_Component_StringEdit.extend({
    components: {"hot-table": Handsontable.vue.HotTable}, computed: {
        recordValue: {
            get() {
                try {
                    return JSON.parse(this.record[this.getFieldName])
                } catch (e) {
                    return [[]]
                }
            }, set(e) {
                Vue.set(this.record, this.getFieldName, JSON.stringify(e))
            }
        }, columns() {
            let e = this.field.data;
            return !e || e.columns
        }, rows() {
            let e = this.field.data;
            return !(e && e.rows && e.rows.length) || e.rows
        }, contextMenuOptions() {
            return !0 === this.rows && !this.readonly && (options = {
                items: {
                    row_above: {disabled: !1},
                    row_below: {disabled: !1},
                    remove_row: {
                        disabled: () => {
                            let e = this.$refs.hotTableComponent.hotInstance.getSelected();
                            return this.$refs.hotTableComponent.hotInstance.countRows() <= 1 || 0 === e[0]
                        }
                    }
                }
            }, options)
        }
    }, methods: {
        afterChange(e) {
            if (e) {
                let e = this.$refs.hotTableComponent.hotInstance.getSourceData();
                1 == e.length && e[0].every(e => "" == e) && (e = ""), this.recordValue = e
            }
        }
    }, render: function anonymous() {
        with (this) return _c("div", {staticClass: "inputHandsonTableElement"}, [_c("hot-table", {
            ref: "hotTableComponent",
            staticClass: "overflow-hidden w-100",
            attrs: {
                data: recordValue,
                "col-headers": columns,
                "row-headers": rows,
                "min-rows": rows.length || 1,
                "min-cols": columns.length,
                "manual-column-resize": !0,
                "fill-handle": !0 === rows && !readonly,
                "column-sorting": !0,
                "context-menu": contextMenuOptions,
                "after-change": afterChange,
                "read-only": readonly
            }
        })], 1)
    }
});
var Vtiger_Component_ImageDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(e, i) {
        let {props: a, parent: l} = i, t = a.record, r = a.fieldname, s = !1, n = "";
        t[r] && t[r][0] && (s = t[r][0].url, n = t[r][0].name), "list" == a.view.toLowerCase() && t[r] && t.imageDetails && t.imageDetails[0] && (s = t.imageDetails[0].url, n = t.imageDetails[0].name);
        let m = ["mx-2", "img-fluid"];
        return "list" == a.view.toLowerCase() && s && (m = [...m, ["circle-icon", "circle-icon-lg", "p-0", "mr-2", "listOwnerImgDisplay"]]), e("img", {
            class: m,
            attrs: {src: s, alt: n}
        })
    }
});
var Vtiger_Component_List_CompositeDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    mixins: [Vtiger_Mixins_ShowModal, Vtiger_Mixin_ModulePermissions],
    props: {allowFieldActions: {type: Boolean, default: !0}},
    methods: {
        displayModal(e, t, l, o) {
            let {props: a, parent: i} = l;
            if (e.stopPropagation(), "RecycleBin" != App.module()) if ("email" === t.type.name) {
                if (l.isInternalMailerEnabled && l.isSendEmailAllowed) {
                    let e = {modulename: i.$module, record: a.record, emailfieldname: t.fieldname};
                    o.showModal.call(i, {componentName: "ListViewComposeEmail", componentData: e, modalOnModalMode: !1})
                }
            } else {
                let e = VTHelper.getCallingAllowedModules();
                if (!_.contains(e, i.$module) || AppStorage.get("phonecalls_deprecated")) return;
                let l = {name: t.label, id: a.record.id, module: a.record._moduleName};
                l.field = t.name, o.showModal.call(i, {
                    componentName: App.loadComponent("VtigerBuiltinPhoneCallsController", "PhoneCalls"),
                    componentData: {record: l, modulename: i.$module},
                    modalOnModalMode: !1
                })
            } else i.showErrorNotification(this.translate("LBL_RECORD_DELETE"))
        }, getTitle(e) {
            return "email" === e.type.name ? '<i class="fas fa-envelope"></i> ' + this.translate(e.fieldlabel) : '<i class="fa fa-phone-alt"></i> ' + this.translate(e.fieldlabel)
        }, getDefaultLink(e) {
            return "mailto:" + this.record.get(e.name)
        }
    },
    render(e, t) {
        let {props: l, parent: o} = t, a = l.fieldModel, i = l.record,
            n = (l.component ? l.component : App.getDynamicComponentInstance("List_CompositeDisplay", o.$module)).options.methods,
            s = (() => {
                let e = a, t = i.getParentFieldForCompositeType(a.fieldType);
                if (t) {
                    let l = a.getCompositeChilds()[t];
                    l && l.isViewable && (e = l)
                }
                if (!i.get(e.name)) if (i.get(a.name)) e = a; else for (var l in a.getCompositeChilds()) {
                    let t = a.getCompositeChilds()[l];
                    if (i.get(t.name)) {
                        e = t;
                        break
                    }
                }
                return e
            })(), p = (() => {
                let e = [], t = a.getCompositeChilds();
                for (var l in e.push(s), a.name != s.name && e.push(a), t) {
                    let o = t[l];
                    l != s.name && e.push(o)
                }
                return e = e.filter(e => i.fieldHasValue(e.name)), l = a.name, e
            })(), r = t.isInternalMailerEnabled = !(!o.$currentUser || "0" === o.$currentUser.internal_mailer),
            d = t.isSendEmailAllowed = (() => {
                let e = AppStorage.get("app_module_permissions");
                return !e || !e.Emails || e.Emails.creatable
            })(), m = !((c = p[0]) && l.allowFieldActions && "Email" === c.type && r && !d) && l.allowFieldActions;
        var c;
        o.displayComponents || (o.displayComponents = {});
        let f = !!o.displayComponents[a.name] && o.displayComponents[a.name], u = [], g = [];
        for (var h in p) {
            let s = p[h];
            if (0 == i.get("_" + s.name + "_viewable")) {
                let t = e("span", {class: "badge badge-pill badge-light position-relative listCompositeFieldDropdown m-1 mt-2 bg-white"}, [e("i", {
                    class: "fas fa-ban",
                    attrs: {title: o.translate("LBL_HIDDEN_BECAUSE_OF_DEPENDENCY")}
                }, [])]);
                h < 3 ? u.push(t) : g.push(e("b-dropdown-item"), {class: "p-0 w-auto"}, [t])
            } else {
                let p = e(!1);
                r || "email" !== s.type.name ? (f || (f = s.getViewComponent(), o.displayComponents[a.name] = f), p = e(f, {
                    props: {
                        view: l.view,
                        fieldModel: s,
                        fieldname: s.name,
                        record: i
                    }
                }, [])) : p = e("a", {
                    attrs: {href: (C = s, "mailto:" + i.get(C.name))},
                    style: {"text-decoration": "none", color: "inherit"},
                    on: {
                        click: function (e) {
                            e.stopPropagation()
                        }
                    }
                }, [i.get(s.name)]);
                let d = e("h6", {class: "mb-0"}, [p]), c = e(!1), w = {};
                m && (w = {
                    click: function (e) {
                        e.stopPropagation(), e.preventDefault(), n.displayModal.call(o, e, s, t, n)
                    }
                });
                let b = "badge badge-pill badge-light position-relative t-0 r-0 listCompositeField m-1";
                l.allowFieldActions || (b += " noactions "), c = e("span", {
                    class: b,
                    attrs: {title: n.getTitle.call(o, s)},
                    directives: [{name: "b-tooltip", modifiers: {html: !0}}],
                    on: w
                }, [e("span", {class: "d-flex justify-content-between h6"}, [d])]), h < 3 ? u.push(c) : g.push(e("b-dropdown-item", {class: "p-0 w-auto"}, [c]))
            }
        }
        var C;
        if (g.length > 1) {
            let t = [];
            t.push(e("span", {slot: "button-content"}, [e("i", {class: "fa fa-compress showIcon "}, []), e("i", {class: "fa fa-expand hideIcon"}, [])])), t.push(e("div", {class: "d-flex flex-wrap compositeItems"}, g));
            let l = e("b-dropdown", {
                class: "compositeDropdown",
                props: {variant: "link", boundary: "listview-table", "no-caret": !0, offset: "200"},
                attrs: {offset: "200", boundary: "listview-table"}
            }, t);
            u.push(l)
        }
        return e("span", {}, [u])
    }
});
var Vtiger_Component_List_DocumentsFolderDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(e, a) {
        let {props: l, parent: s} = a, n = e("i", {class: "fa fa-folder foldericon mr-2"}),
            t = e("span", {class: "textOverflowEllipsis"}, [l.record.getDisplayValue(l.fieldname)]);
        return e("span", {
            class: "fieldDisplayValue d-flex align-items-center",
            attrs: {"data-name": l.fieldname}
        }, [n, t])
    }
});
var Vtiger_Component_List_FileDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    render: (e, n) => e("span", {}, [])
});
var Vtiger_Component_List_GridDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    render: (e, n) => e("span", {}, [])
});
var Vtiger_Component_IntegerDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(e, a) {
        let {props: r, parent: l} = a;
        if ("progress" == r.fieldname) {
            let a = e("h5", {class: "d-flex w-100 align-items-centeralign-items-center"}, [e("div", {class: "progress w-100"}, [e("div", {
                class: "progress-bar",
                style: {width: r.record.getDisplayValue(r.fieldname) + "%"},
                attrs: {
                    role: "progressbar",
                    "aria-valuenow": r.record.getDisplayValue(r.fieldname),
                    "aria-valuemin": 0,
                    "aria-valuemax": 100
                }
            })])]);
            return e("span", {}, [a])
        }
        return e("span", {
            class: "fieldDisplayValue text-break",
            attrs: {"data-name": r.fieldname}
        }, [r.record.getDisplayValue(r.fieldname)])
    }
});
var Vtiger_Component_List_OwnerDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    inject: ["getUserImageInfo"],
    render(e, t) {
        let {props: i, parent: r} = t,
            l = (i.component ? i.component : App.getDynamicComponentInstance("List_OwnerDisplay", r.$module)).options.methods,
            n = t.injections.getUserImageInfo(), s = i.record.getRawValue(i.fieldname), a = s && s.id || "",
            o = s && s.module || "", c = r.$currentUser && "on" == r.$currentUser.is_admin || !1,
            p = i.record.getDisplayValue(i.fieldname), d = e(!1);
        if (n && n[a] && n[a].image) d = e("img", {
            class: "circle-icon circle-icon-lg p-0 mr-2 listOwnerImgDisplay",
            style: "width:30px;height:30px;border:solid 1px #cccccc;",
            attrs: {src: n[a].image.url}
        }); else if (i.record.getDisplayValue(i.fieldname)) {
            let t = {width: "30px", height: "30px", "min-width": "30px"};
            t.background = l.getColor.call(r, p), d = e("div", {
                class: "mr-2 text-white border-grey-6 circle-icon d-flex align-items-center justify-content-center text-capitalize listOwnerImgDisplay",
                style: t
            }, [p.substring(0, 2)])
        }
        let m = e(!1);
        if (c) {
            let i = e("a", {
                attrs: {href: l.detailViewURL(t, a, o), target: "_blank"}, on: {
                    click(e) {
                        e.stopPropagation()
                    }
                }
            }, [p]);
            m = e("span", {class: "textOverflowEllipsis mr-2"}, [i])
        } else m = e("span", {class: "textOverflowEllipsis mr-2"}, [p]);
        return e("span", {
            class: "fieldDisplayValue d-flex align-items-center listOwnerDisplay text-truncate",
            attrs: {"data-name": i.fieldname}
        }, [d, m])
    },
    methods: {
        detailViewURL: (e, t, i) => i && "Users" == i ? "index.php?module=Users&parent=Settings&view=Detail&record=" + t : i && "Groups" == i ? "index.php?record=" + t + "&module=" + i + "&parent=Settings&view=Detail" : void 0,
        getColor: e => VTHelper.getColorCode(e)
    }
});
var Vtiger_Component_List_SensitiveDisplay = Vtiger_Component_SensitiveDisplay.extend({
    computed: {
        getValue() {
            let e = this.record.getDisplayValue(this.fieldname);
            if (e && this.isEncrypted) {
                let t = this.fieldModel.data;
                e = VTHelper.getEncryptedDisplayValue(e, t.sensitivedatainfo.first_n_data, t.sensitivedatainfo.last_n_data)
            }
            return e
        }
    }, render: function anonymous() {
        with (this) return _c("span", [_c("span", {
            staticClass: "fieldDisplayValue text-break mr-1",
            attrs: {"data-name": fieldname}
        }, [_v(" " + _s(getValue) + " ")])])
    }
});
var Vtiger_Component_List_TimeDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, mixins: [Vtiger_Mixin_DateUtils], render(e, t) {
        let a, {props: l, parent: i} = t;
        a = l.component ? l.component : l.componentName ? App.getDynamicComponentInstance(l.componentName, l.componentModule) : App.getDynamicComponentInstance("List_TimeDisplay", l.componentModule);
        let n = a.options.methods, r = n.getDisplayValue.call(i, t, n);
        return e("span", {class: "fieldDisplayValue", attrs: {"data-name": l.fieldname}}, [r])
    }, methods: {
        getDisplayValue(e, t) {
            let {props: a, parent: l} = e;
            var i, n = a.record.getDisplayValue(a.fieldname);
            if (n) if (i = n, "time_start" === a.fieldname) {
                var r = a.record.getDisplayValue("date_start");
                if (r = r || moment().tz("UTC").format("YYYY-MM-DD")) {
                    let e = a.record.getDisplayValue(a.fieldname);
                    var o = r + " " + e;
                    if (n && n.isUserFormat()) return e;
                    let m = t.getDisplayDateTime.call(l, o);
                    i = t.getUserFormattedTime.call(l, m)
                }
            } else if ("time_end" === a.fieldname) {
                var m = a.record.getDisplayValue("due_date");
                if (m = m || moment().tz("UTC").format("YYYY-MM-DD")) {
                    let e = a.record.getDisplayValue(a.fieldname);
                    var s = m + " " + e;
                    if (n && n.isUserFormat()) return e;
                    let r = t.getDisplayDateTime.call(l, s);
                    i = t.getUserFormattedTime.call(l, r)
                }
            } else {
                let e = a.record.getDisplayValue(a.fieldname);
                e && (i = t.convertTimeToUserFormat.call(l, e))
            }
            return i
        }
    }
});
var Vtiger_Component_MulticurrencyDisplay = Vtiger_Component_CurrencyDisplay.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    data: () => ({currencies: []}),
    props: {showConvertedCurrencyValue: {type: Boolean, default: !0}},
    computed: {
        multiCurrencyDisplayValue() {
            let e = this.record.getDisplayValue(this.fieldname), r = "", t = this.record.record_currency_id;
            if (null == e) return "";
            if (!_.isUndefined(this.$currentUser) && t && null != e) {
                var i = _.findWhere(this.currencies, {id: t});
                i && (r = i.currency_symbol), e = e ? this.getFormattedValue(e) : ""
            }
            return this.appendCurrencySymbol(e, r)
        }, isPreferredCurrencyValueDisplay() {
            if (!_.isUndefined(this.$currentUser)) {
                var e = this.$currentUser.display_preference_currency, r = this.$currentUser.currency_id;
                if (e && 0 != e && this.record.record_currency_id && r != this.record.record_currency_id) return !0
            }
            return !1
        }, getMultiCurrencyValueTitle() {
            return this.isPreferredCurrencyValueDisplay ? this.translate("LBL_CONVERTED_CURRENCY") + " : " + this.getMyPreferredCurrencyValue() : ""
        }, showRecordCurrency: () => !0
    },
    created() {
        this.appStore.get("currency_records") ? this.currencies = this.appStore.get("currency_records") : this.getCurrencies().then(e => {
            this.currencies = e
        })
    },
    methods: {
        getMyPreferredCurrencyValue(e = !1) {
            if (e) return this.translate("LBL_CONVERTED_CURRENCY");
            var r = this.getBaseCurrencyFieldName(this.fieldname);
            if (!_.isUndefined(this.$currentUser) && r) {
                var t = this.$currentUser.conv_rate, i = VTHelper.getDecodedValue(this.$currentUser.currency_symbol),
                    s = this.record[r], n = this.convertToUserCurrency(s, t);
                return n = this.getFormattedValue(n), this.appendCurrencySymbol(n, i)
            }
        }
    },
    render(e) {
        let r = e("span", {
            class: ["recordCurrencyValue mr-1 float-left"],
            attrs: {title: this.multiCurrencyDisplayValue}
        }, [this.multiCurrencyDisplayValue]), t = e(!1);
        this.isPreferredCurrencyValueDisplay && this.multiCurrencyDisplayValue && this.showConvertedCurrencyValue && (t = e("span", {}, ["|"]));
        let i = e(!1);
        return this.isPreferredCurrencyValueDisplay && this.multiCurrencyDisplayValue && this.showConvertedCurrencyValue && (i = e("span", {
            class: ["preferredCurrencyValue border px-1 rounded"],
            attrs: {title: this.getMyPreferredCurrencyValue(!0)}
        }, [this.getMyPreferredCurrencyValue()])), e("span", {
            class: ["fieldDisplayValue"],
            attrs: {"data-name": this.fieldname}
        }, [r, t, i])
    }
});
var Vtiger_Component_MulticurrencyEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    data: () => ({currencies: [], currencyDetails: []}),
    props: {
        isFieldLocked: {type: Boolean, Default: !1},
        record_currency_id: {type: String, Default: ""},
        currencyChange: {type: Boolean, default: !0},
        value: {type: [String, Array]}
    },
    computed: {
        recordValue: {
            get() {
                if (this.record) {
                    let e = this.record[this.getFieldName];
                    return isNaN(e) ? e : this.getFormattedValue(e)
                }
                return this.value && this.value.length ? this.value : ""
            }, set(e) {
                this.$emit("input", e), this.record && Vue.set(this.record, this.getFieldName, e)
            }
        }, recordCurrency: {
            get() {
                return this.record ? this.record.record_currency_id : this.record_currency_id
            }, set(e) {
                if (this.record) {
                    Vue.set(this.record, "record_currency_id", e);
                    var r = _.findWhere(this.currencies, {id: e});
                    r && Vue.set(this.record, "record_conversion_rate", r.conversion_rate)
                }
            }
        }, isCurrencyChangeDisabled() {
            return this.readonly ? this.readonly : !this.currencyChange
        }
    },
    watch: {
        "record.record_conversion_rate": {
            handler(e, r) {
                if (!_.isUndefined(e) && !_.isUndefined(r)) {
                    var t = this.recordValue ? this.recordValue : 0, i = this.$currentUser.currency_grouping_separator;
                    i = "\\" + i, groupRegEx = new RegExp(i, "g");
                    var c = this.$currentUser.currency_decimal_separator;
                    c = "\\" + c, decimalRegEx = new RegExp(c, "g"), t && (t = (t = t.replace(groupRegEx, "")).replace(decimalRegEx, "."));
                    let s = t / (r = r || 1) * e;
                    s && (s = this.getFormattedValue(s)), Vue.set(this, "recordValue", s)
                }
            }
        }
    },
    created() {
        this.getCurrencies().then(e => {
            this.currencies = e, this.currencyDetails = Object.values(e).map(e => ({
                value: e.id,
                label: `${e.currency_code}-${e.currency_symbol}`
            }))
        })
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "multicurrencyEdit"}, [_c("span", {
            staticClass: "d-flex align-items-center",
            attrs: {id: "fieldContainer"}
        }, [_c("span", {staticClass: "w-75"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model.lazy",
                value: recordValue,
                expression: "recordValue",
                modifiers: {lazy: !0}
            }],
            staticClass: "form-control height-35px",
            attrs: {name: field.name, disabled: !!isFieldLocked || readonly, type: "text"},
            domProps: {value: recordValue},
            on: {
                change: function (e) {
                    recordValue = e.target.value
                }
            }
        })]), _v(" "), _c("span", {staticClass: "w-25"}, [_c("v-select2", {
            key: recordCurrency,
            attrs: {disabled: isCurrencyChangeDisabled, options: currencyDetails, emptyOption: !1},
            model: {
                value: recordCurrency, callback: function (e) {
                    recordCurrency = e
                }, expression: "recordCurrency"
            }
        })], 1)]), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name.toLowerCase())))])])
    }
});
var Vtiger_Component_MultipicklistDisplay = Vtiger_Component_PicklistDisplay.extend({
    functional: !0, render(e, l) {
        let t, {props: n, parent: o} = l;
        t = n.component ? n.component : n.componentName ? App.getDynamicComponentInstance(n.componentName, n.componentModule) : App.getDynamicComponentInstance("MultipicklistDisplay", n.componentModule);
        let a = t.options.methods;
        o = Object.assign(o, a);
        let i = a.fieldValue.call(o, l), p = a.fieldTitle.call(o, i), r = [];
        for (var s in i) {
            let l = i[s];
            var c = a.getTextColor.call(o, l.color);
            let t = "";
            l.color && (t = "badge badge-pill ml-1 mb-1 " + c);
            let n = e("span", {
                class: t,
                style: {backgroundColor: l.color, fontSize: l.color ? ".8125rem" : ""}
            }, [l.label]);
            r.push(n), s < i.length - 1 && r.push(e("span", {class: "separator"}, [","]))
        }
        return e("div", {class: "fieldDisplayValue", attrs: {"data-name": n.fieldname, title: p}}, [r])
    }, methods: {
        fieldValue(e) {
            let {props: l} = e, t = l.record.getRawValue(l.fieldname), n = l.fieldModel.allPicklistValues;
            t = "string" == typeof t ? t.replace(",", " |##| ") : t;
            let o = "string" == typeof t ? t.split(" |##| ") : t, a = [];
            return jQuery.each(o, (function (e, l) {
                let t = _.find(n, (function (e) {
                    return e.value == l
                }));
                t && a.push(t)
            })), a
        }, fieldTitle(e) {
            let l = "";
            return e && (l = e.map(e => e.label).join(", ")), l
        }
    }
});
var Vtiger_Component_MultipicklistEdit = Vtiger_Component_StringEdit.extend({
    name: "vds-multipicklist-edit", render: function anonymous() {
        with (this) return _c("span", [_c("v-select2", {
            attrs: {
                name: field.name,
                emptyOption: !1,
                disabled: isFieldLocked || readonly,
                multiple: "",
                selected: recordValue,
                options: options
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])], 1)
    }, computed: {
        options() {
            return this.field.picklistValues
        }, recordValue: {
            get() {
                let e = this.record[this.getFieldName];
                return _.isString(e) && (e = e.indexOf("|##|") ? e.split(" |##| ") : e.split(",")), e
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }
    }, created() {
        this.$watch(() => this.field.picklistValues, () => {
            let e = _.map(this.field.picklistValues, (function (e) {
                return e.value
            })), t = this.recordValue, i = t || [];
            _.isString(t) && (i = t.indexOf("|##|") ? t.split(" |##| ") : t.split(",")), i = i.length ? i.map(String) : i, e = e.length ? e.map(String) : e, i = _.intersection(i, e), this.$validator.pause(), this.record.set(this.field.name, i), this.$nextTick(() => {
                this.$validator.resume()
            })
        }, {immediate: !0})
    }
});
var Vtiger_Component_MultireferenceDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, methods: {
        referenceRecords(e) {
            let {props: t} = e, l = [], i = t.record.get(t.fieldname);
            if (!_.isArray(i)) return _.isUndefined(i) ? [] : [i];
            let r = i.filter(({deleted: e}) => 0 == e), o = i.filter(({deleted: e}) => 1 == e);
            return (_.size(r) || _.size(o)) && (l = r.concat(o)), _.isUndefined(i) ? [] : l
        }, multireferenceTitle(e, t) {
            let {parent: l} = e, i = "";
            return t && (i = t.map(e => {
                let t = e.label;
                return "0" != e.deleted && (t += " (" + l.translate("LBL_DELETED") + ")"), t
            }).join(", ")), i
        }, getDetailViewUrl: e => _.isUndefined(e) ? "" : "view/detail?id=" + e.id + "&module=" + e.module
    }, render(e, t) {
        let l, {props: i, parent: r} = t;
        if (i.component) l = i.component; else {
            if (!i.componentName) return e("span", {}, []);
            l = App.getDynamicComponentInstance(i.componentName, i.componentModule)
        }
        let o = l.options.methods, n = o.referenceRecords.call(r, t), a = _.size(n), s = [];
        if (i.showIcon) {
            let t = e(!1);
            if (n[0]) {
                let l = e(!1);
                l = n && n[0] && 0 == n[0].deleted ? e("span", {
                    directives: [{
                        name: "showModal",
                        value: {module: n[0].module, id: n[0].id},
                        expression: "{module : referenceRecords[0]['module'], id : referenceRecords[0]['id']}",
                        modifiers: {DetailPreview: !0}
                    }]
                }, [n[0].label]) : e("span", {
                    class: "text-grey-4 strikeThrough font-italic",
                    attrs: {title: r.translate("LBL_REFERENCE_RECORD_DELETED")},
                    on: {
                        click: function (e) {
                            e.stopPropagation()
                        }
                    },
                    directives: [{name: "b-tooltip"}]
                }, [n[0].label]), t = e("span", {class: "c-pointer mr-2"}, [l])
            }
            let l = e(!1);
            a - 1 > 0 && (l = e("b-badge", {attrs: {pill: "", variant: "secondary"}}, ["+ " + a - 1]));
            let i = e("span", {class: "h6 m-0 text-dark", slot: "button-content"}, [t, l]), o = [];
            for (var d in n) {
                var c = n[d];
                if (d > 0) {
                    let t;
                    t = c && 0 == c.deleted ? e("div", {
                        class: "text-truncate",
                        on: {
                            click: function (e) {
                                e.preventDefault()
                            }
                        },
                        directives: [{
                            name: "showModal",
                            value: {module: c.module, id: c.id},
                            expression: "{module : referenceRecord['module'], id : referenceRecord['id']}",
                            modifiers: {DetailPreview: !0}
                        }]
                    }) : e("div", {
                        class: "text-grey-4 strikeThrough font-italic",
                        attrs: {title: r.translate("LBL_REFERENCE_RECORD_DELETED")},
                        on: {
                            click: function (e) {
                                e.stopPropagation()
                            }
                        },
                        directives: [{name: "b-tooltip"}]
                    }, [c.label]);
                    let l = ["py-2"];
                    d < a - 1 && l.push("border-bottom");
                    let i = e("b-dropdown-item", {class: l}, [t]);
                    o.push(i)
                }
            }
            s = [e("b-dropdown", {
                class: "multipleReference",
                props: {boundary: "viewport", offset: "-12", variant: "link", size: "sm", "no-caret": !0}
            }, [i, o])]
        } else {
            s = [];
            let l = o.multireferenceTitle.call(r, t, n);
            for (var d in n) {
                if ((c = n[d]) && 0 == c.deleted) {
                    let t = e("a", {
                        attrs: {href: o.getDetailViewUrl(c), title: l},
                        on: {
                            click: function (e) {
                                e.stopPropagation(), e.preventDefault()
                            }
                        },
                        directives: [{
                            name: "showModal",
                            value: {module: c.module, id: c.id},
                            expression: "{module : referenceRecord['module'], id : referenceRecord['id']}",
                            modifiers: {DetailPreview: !0}
                        }]
                    }, [c.label]);
                    s.push(t)
                } else labelEle = e("span", {
                    class: "text-grey-4 strikeThrough font-italic",
                    attrs: {title: r.translate("LBL_REFERENCE_RECORD_DELETED")},
                    on: {
                        click: function (e) {
                            e.stopPropagation()
                        }
                    },
                    directives: [{name: "b-tooltip"}]
                }, [c.label]), s.push(labelEle);
                if (d < a - 1) {
                    let t = ["pr-1"];
                    c && 1 == c.deleted && t.push("text-grey-4");
                    let l = e("span", {class: t}, [","]);
                    s.push(l)
                }
            }
        }
        let p = "fieldDisplayValue ";
        return i.showIcon || "moreHeaderDropDown" != i.view || (p += " d-flex flex-wrap "), e("span", {
            class: p,
            attrs: {"data-name": i.fieldname}
        }, s)
    }
});
Vtiger_Component_MultireferenceEdit = Vtiger_Component_ReferenceEdit.extend({
    name: "vds-multireference-edit",
    data: () => ({isMultiReference: !0}),
    watch: {
        "record.isLoaded": {
            handler(e, t) {
                e && setTimeout(() => {
                    this.referenceRecord && this.$refs.reference.$refs.select2.markSelected(this.referenceRecord)
                }, 300)
            }, immediate: !0
        }
    },
    methods: {
        unselectRecord(e) {
            let t = this.record[this.field.name].findIndex(t => t.id == e.id);
            -1 != t && this.record[this.field.name].splice(t, 1)
        }
    }
});
var Vtiger_Component_NumberEdit = Vtiger_Component_StringEdit.extend({});
var Vtiger_Component_OwnerDisplay = Vtiger_Component_BaseDisplay.extend({
    mixins: [Vtiger_Mixin_Record, Vtiger_Mixin_UsersUtils],
    functional: !0,
    render(e, t) {
        let {props: n, parent: a} = t,
            r = (n.component ? n.component : App.getDynamicComponentInstance("OwnerDisplay", a.$module)).options.methods,
            i = n.record.getRawValue(n.fieldname), l = i && i.id || "", o = i && i.module || "",
            s = r.detailViewURL.call(a, t, r, l, o);
        var p = e(!1);
        return p = a.$currentUser.id == l || "on" == a.$currentUser.is_admin ? e("a", {
            attrs: {
                target: "_blank",
                href: s
            }, on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [n.record.getDisplayValue(n.fieldname)]) : e("span", {}, [n.record.getDisplayValue(n.fieldname)]), e("span", {
            class: "fieldDisplayValue",
            attrs: {"data-name": n.fieldname}
        }, [p])
    },
    methods: {
        detailViewURL(e, t, n, a) {
            let {parent: r} = e;
            return a && "Users" == a ? t.getUserDetailUrl.call(r, n) : a && "Groups" == a ? "index.php?record=" + n + "&module=" + a + "&parent=Settings&view=Detail" : void 0
        }
    }
}), Vtiger_Component_CoownerDisplay = Vtiger_Component_OwnerDisplay.extend({
    methods: {
        getDetailViewUrl(e, t, n, a) {
            let {props: r, parent: i} = e;
            return "Users" == a ? t.getUserDetailUrl.call(i, n) : "Groups" == a ? "index.php?record=" + n + "&module=" + a + "&parent=Settings&view=Detail" : void 0
        }
    }, render(e, t) {
        let {props: n, parent: a} = t,
            r = (n.component ? n.component : App.getDynamicComponentInstance("CoownerDisplay", a.$module)).options.methods,
            i = n.record.getRawValue(n.fieldname) || [], l = i.map(e => e.label).join(", "), o = [];
        for (var s in i) {
            let n = i[s];
            var p = e(!1);
            p = a.$currentUser.id == n.id || "on" == a.$currentUser.is_admin ? e("a", {
                attrs: {
                    target: "_blank",
                    title: l,
                    href: r.getDetailViewUrl.call(a, t, r, n.id, n.module)
                }, on: {
                    click: function (e) {
                        e.stopPropagation()
                    }
                }
            }, [n.label]) : e("span", {attrs: {title: l}}, [n.label]), o.push(p), s < i.length - 1 && o.push(e("span", {class: "separator"}, [","]))
        }
        return e("span", {class: "fieldDisplayValue", attrs: {"data-name": n.fieldname}}, o)
    }
});
var Vtiger_Component_OwnergroupEdit = Vtiger_Component_OwnerEdit.extend({
    props: {
        emptyOption: {
            type: Boolean,
            default: !0
        }
    }, methods: {
        filterUsersAndGroups(t) {
            let e = this.translate("LBL_GROUPS"), r = {};
            r[e] = [];
            for (let o in t.Groups) {
                let p = {};
                p.value = o.split(":")[1], p.label = t.Groups[o], r[e].push(p)
            }
            if (this.extraOptions) {
                let t = this.extraOptions.Groups;
                t.length && t.forEach(t => {
                    r[e].push(t)
                })
            }
            return r
        }
    }
});
var Vtiger_Component_PercentageDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    mixins: [Vtiger_Mixin_CurrencyUtils],
    methods: {
        getDisplayValue(e) {
            let {props: t, parent: n} = e, a = Vtiger_Component_PercentageDisplay.options.methods,
                o = t.record[t.fieldname];
            return null == o ? "" : a.getFormattedValue.call(n, o)
        }
    },
    render(e, t) {
        let {props: n, parent: a} = t,
            o = (n.component ? n.component.options.methods : Vtiger_Component_PercentageDisplay.options.methods).getDisplayValue.call(a, t);
        return e("span", {class: ["fieldDisplayValue"], attrs: {"data-name": this.fieldname}}, [o])
    }
}), Vtiger_Component_DoubleDisplay = Vtiger_Component_PercentageDisplay.extend({});
var Vtiger_Component_PercentageEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixin_CurrencyUtils],
    computed: {
        recordValue: {
            get() {
                return this.record[this.getFieldName]
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }
    },
    render: function anonymous() {
        with (this) return _c("div", [_c("span", {
            staticClass: "input-group",
            attrs: {id: "fieldContainer"}
        }, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model.lazy",
                value: recordValue,
                expression: "recordValue",
                modifiers: {lazy: !0}
            }],
            staticClass: "form-control",
            attrs: {name: field.name, disabled: isFieldLocked || readonly, type: "text"},
            domProps: {value: recordValue},
            on: {
                change: function (e) {
                    recordValue = e.target.value
                }
            }
        }), _v(" "), _m(0)]), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name.toLowerCase())))])])
    },
    staticRenderFns: [function anonymous() {
        with (this) return _c("div", {staticClass: "input-group-append input-group-addon"}, [_c("span", {staticClass: "input-group-text"}, [_v("%")])])
    }]
});
var Vtiger_Component_PhoneDisplay = Vtiger_Component_StringDisplay.extend({
    render(e, t) {
        let {props: a, parent: l} = t, i = ["fieldDisplayValue", "text-break", "d-inline-flex ", "align-items-center"];
        "header" != a.view && "moreHeaderDropDown" != a.view || (i.push("text-truncate"), i.push("d-block"));
        let n = jQuery('<input type="text"/>'), r = a.record.getDisplayValue(a.fieldname);
        n.val(r);
        var p = {};
        "list" == a.view && (p.allowDropdown = !1);
        let s = window.intlTelInput(n.get(0), p);
        s.handleUtils();
        let o = s.selectedCountryData;
        r = r.replace("+" + o.dialCode, "");
        let d = e(!1);
        return r && (d = e("span", {class: ["iti__flag", "iti__" + o.iso2, "mr-1"]})), e("span", {
            class: i,
            attrs: {"data-name": a.fieldname}
        }, [d, r])
    }
});
var Vtiger_Component_PhoneEdit = Vtiger_Component_StringEdit.extend({
    props: {value: {type: [String, Array]}}, computed: {
        recordValue: {
            get() {
                let e = this.record ? this.record[this.getFieldName] : this.value;
                if (this.instance && e) {
                    let t = this.instance.selectedCountryData.dialCode;
                    e = e.replace(t, ""), e = e.replace("+", "")
                }
                return e
            }, set(e) {
                if (this.instance && e && "+" != e.charAt(0)) {
                    let t = this.instance.selectedCountryData.dialCode;
                    e && (e = "+" + t + e)
                }
                this.$emit("input", e), this.record && Vue.set(this.record, this.getFieldName, e)
            }
        }
    }, methods: {
        listenCountryChange() {
            jQuery(this.$el).find("input").get(0).addEventListener("countrychange", e => {
                let t = this.instance.selectedCountryData.dialCode;
                this.recordValue && (this.recordValue = "+" + t + this.recordValue)
            })
        }
    }, mounted() {
        setTimeout(() => {
            let e = {};
            (!this.record || !this.record.isNew && this.recordValue || "duplicate" == this.$attrs.mode) && _.isUndefined(this.value) || (e.initialCountry = "auto", e.autoPlaceholder = !1, e.geoIpLookup = e => {
                App.isDevelopment() && "localhost" == url("hostname") ? setTimeout(() => {
                    e("IN")
                }, 100) : this.appStore.request("api_get", {
                    url: "/usergeoinfo",
                    params: {module: "Ondemand"},
                    key: "usergeoinfo"
                }).then(t => {
                    e(t.address_country)
                })
            });
            var t = jQuery(this.$el).find("input").get(0);
            if (this.instance = window.intlTelInput(t, e), this.instance.handleUtils(), this.recordValue && jQuery(this.$el).is(":visible")) {
                let e = this.recordValue;
                this.instance.setNumber(" "), this.recordValue = " ", setTimeout(() => {
                    this.instance.setNumber(e), this.recordValue = e
                }, 100)
            }
            this.listenCountryChange()
        }, 100)
    }, watch: {
        value() {
            this.recordValue = this.value
        }, immediate: !0
    }
});
var Vtiger_Component_ProfileRatingDisplay = Vtiger_Component_StringDisplay.extend({
    render(e, a) {
        let {props: n, parent: t} = a,
            i = (App.getDynamicComponentInstance("ProfileRatingDisplay", t.$module).options.methods, [1, 2, 3, 4, 5]),
            s = n.record.getDisplayValue(n.fieldname) || "", p = [];
        for (var r in i) {
            let a = ["fa"];
            r < s ? (a.push("fa-star"), a.push("text-warning")) : a.push("fa-staroutline"), p.push(e("i", {class: a}))
        }
        return e("span", {class: "fieldDisplayValue"}, p)
    }
});
var Vtiger_Component_RadioEdit = Vtiger_Component_StringEdit.extend({
    render: function anonymous() {
        with (this) return _c("div", [_l(options, (function (e) {
            return _c("label", {staticClass: "radio"}, [_c("input", {
                directives: [{
                    name: "validate",
                    rawName: "v-validate",
                    value: validateString,
                    expression: "validateString"
                }, {name: "model", rawName: "v-model", value: value, expression: "value"}],
                attrs: {name: field.name, type: "radio"},
                domProps: {value: e.value, checked: _q(value, e.value)},
                on: {
                    change: function (t) {
                        value = e.value
                    }
                }
            }), _v("\n                        " + _s(e.text) + "\n                    ")])
        })), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])], 2)
    }, computed: {
        value: {
            get() {
                return this.recordValue
            }, set(e) {
                this.recordValue = e
            }
        }, options() {
            return this.field.type.options
        }, validateString() {
            if (this.field.isMandatory) {
                var e = [];
                for (var t in this.options) {
                    var a = this.options[t];
                    e.push(a.value)
                }
                return "required|included:" + e.join(",")
            }
        }
    }
});
var Vtiger_Component_ReferenceDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, mixins: [App.loadMixin("Record"), Vtiger_Mixins_ShowModal], render(e, t) {
        let {props: a, parent: i} = t;
        var o = e(!1);
        let l = a.component ? a.component.options.methods : Vtiger_Component_ReferenceDisplay.options.methods,
            r = a.fieldname, n = a.record;
        if (o = "journey_template_id" == r ? e("a", {
            attrs: {target: "_blank", href: l.getDetailViewURL(t)},
            on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [n.getDisplayValue(r)]) : "slaid" == r ? e("span", {}, [n.getDisplayValue(r)]) : n[r] && "Users" != n[r].module && 0 == n[r].deleted ? e("a", {
            attrs: {href: l.getDetailViewURL(t)},
            on: {
                click: function (e) {
                    e.preventDefault(), e.stopPropagation(), l.showPreviewModel(t)
                }
            }
        }, [n.getDisplayValue(r)]) : n[r] && "Users" == n[r].module ? e("span", {}, [n.getDisplayValue(r)]) : e("span", {
            class: ["fieldDisplayValue c-pointer text-truncate text-grey-4 strikeThrough font-italic"],
            attrs: {title: i.translate("LBL_REFERENCE_RECORD_DELETED")},
            directives: [{name: "b-tooltip"}]
        }, [n.getDisplayValue(r)]), 0 != n.getDisplayValue(r) || _.isUndefined(n.getDisplayValue(r))) return e("span", {
            class: ["fieldDisplayValue", n[r].deleted >= 1 && !a.isCompact ? " d-flex align-items-center justify-content-between " : ""],
            attrs: {"data-name": r}
        }, [o])
    }, props: {previewNoListReload: {type: [Boolean], default: !1}}, data: () => ({rawValue: ""}), methods: {
        getDetailViewURL(e) {
            let {props: t, parent: a} = e, i = t.record[t.fieldname];
            return _.isUndefined(i) || null === i ? "" : _.isUndefined(i.deleted) || 0 == parseInt(i.deleted) ? "JourneyTemplates" == i.module ? a.$currentUser.isAdmin ? "view/list?templateid=" + i.id + "&module=" + i.module + "&viewtype=Kanban" : "" : "Calendar" == i.module ? "view/detail?id=" + i.id + "&module=Tasks" : "view/detail?id=" + i.id + "&module=" + i.module : ""
        }, showPreviewModel(e) {
            let {props: t, parent: a} = e, i = Vtiger_Component_ReferenceDisplay.options.methods;
            i.retrieveRecord.call(a, t.record[t.fieldname].id, t.record[t.fieldname].module).then(e => {
                let o = t.record[t.fieldname].module;
                "Calendar" == o && (o = "Task" == e.activitytype ? "Tasks" : "Events"), i.showModal.call(a, {
                    componentName: "DetailPreview",
                    componentData: {
                        module: o,
                        id: t.record[t.fieldname].id,
                        previewRecord: e,
                        previewNoListReload: t.previewNoListReload
                    }
                }), a.$root.$once("bv::modal::shown", e => {
                    e.vueTarget.$parent.$on("vds::clear::preview::record::cache", e => {
                        e && e.id && a.appStore.delete(`Record_${e.id}_recordDetails`)
                    })
                })
            }, e => {
                e && "The record you are trying to view has been deleted." == e.message ? a.showErrorNotification(a.translate("LBL_RECORD_DELETE", "Vtiger")) : a.showErrorNotification(a.translate("LBL_PERMISSION_DENIED", "Vtiger"))
            })
        }
    }
});
Vtiger_Component_RichTextEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    props: {value: {type: String}, focusOnField: {type: Boolean, default: !1}},
    data() {
        return {focusOnRichTextField: this.focusOnField}
    },
    computed: {
        recordValue: {
            get() {
                return this.record ? this.record[this.getFieldName] : this.value && this.value.length ? this.value : ""
            }, set(e) {
                this.$emit("input", e), this.record && Vue.set(this.record, this.getFieldName, e)
            }
        }
    },
    methods: {
        expandRteModal() {
            this.showModal({
                componentName: "ExpandedRteModal",
                componentData: {fieldName: this.field.name, recordValue: this.recordValue, focusOnField: !0}
            }), this.$root.$off("vds::rte::edited"), this.$root.$on("vds::rte::edited", e => {
                this.recordValue = e, this.focusOnRichTextField = !0
            })
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "position-relative"}, [isFieldLocked || readonly ? _e() : _c("div", [_c("i", {
            staticClass: "c-pointer position-absolute fa fa-expand rteExpand r-16 t-16",
            on: {
                click: function (e) {
                    return expandRteModal()
                }
            }
        })]), _v(" "), _c("vds-rte", {
            attrs: {
                name: field.name,
                focus: focusOnRichTextField,
                disabled: isFieldLocked || readonly,
                "cursor-position": "end"
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        }), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger position-absolute"
        }, [_v(_s(errors.first(field.name)))])], 1)
    }
});
var Vtiger_Component_RichtextDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0,
    mixins: [Vtiger_Mixins_ShowModal],
    render(e, {props: a, parent: t}) {
        let i = e => VTHelper.strip_tags(e), l = e(!1);
        return l = "list" == a.view ? e("span", {
            class: ["fieldDisplayValue text-break"],
            attrs: {"data-name": a.fieldname, title: i(a.record.getDisplayValue(a.fieldname))}
        }, [i(a.record.getDisplayValue(a.fieldname))]) : e("span", {
            class: ["fieldDisplayValue text-break image-no-overflow"],
            attrs: {"data-name": a.fieldname},
            domProps: {innerHTML: t.linkify(t.purifyContent(a.record.getDisplayValue(a.fieldname)))}
        }, []), e("span", {}, [l])
    },
    methods: {
        test() {
        }
    }
});
Vtiger_Component_SensitiveEdit = Vtiger_Component_StringEdit.extend({
    mixins: [Vtiger_Mixins_ShowModal],
    props: {mode: [String]},
    data: () => ({valueCleared: !1}),
    computed: {
        recordValue: {
            get() {
                return this.getValue()
            }, set(e) {
                Vue.set(this.record, this.getFieldName, e)
            }
        }, isEncrypted() {
            return !this.record[this.getFieldName] || VTHelper.isEncryptedValue(this.record[this.getFieldName])
        }
    },
    watch: {
        isEncrypted() {
            this.recordValue = this.getValue()
        }
    },
    created() {
        this.record.id || "duplicate" == this.mode || (this.valueCleared = !0)
    },
    methods: {
        getValue() {
            let e = this.record[this.getFieldName];
            if ((e && 0 == e.length || !e || _.isUndefined(e)) && (this.valueCleared = !0), this.isEncrypted && e && (this.record.id || "duplicate" == this.mode) && !this.valueCleared) {
                let t = this.field.data;
                e = VTHelper.getEncryptedDisplayValue(e, t.sensitivedatainfo.first_n_data, t.sensitivedatainfo.last_n_data)
            }
            return e
        }, clearValue(e) {
            this.showConfirmationBox({
                message: this.translate("JS_SURE_TO_CLEAR_SENSITIVE_VALUE"),
                okTitle: this.translate("JS_YES"),
                cancelTitle: this.translate("LBL_NO")
            }).then(() => {
                this.recordValue = "", this.valueCleared = !0, this.$root.$emit("bv::hide::modal", "dismissConfirmationPopup")
            }, () => {
                this.$root.$emit("bv::hide::modal", "dismissConfirmationPopup")
            }), e.stopPropagation()
        }
    },
    render: function anonymous() {
        with (this) return _c("div", {staticClass: "position-relative"}, [_c("input", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            class: classAttrs,
            attrs: {
                maxlength: parseInt(this.field.maximumlength),
                readonly: !valueCleared,
                name: field.name,
                placeholder: placeHolder,
                disabled: !field.isEditable || readonly || isFieldLocked,
                type: "text"
            },
            domProps: {value: recordValue},
            on: {
                focus: function (e) {
                    stopWatching = !recordValue
                }, focusout: function (e) {
                    return validateFields()
                }, input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        }), _v(" "), valueCleared ? _e() : _c("span", {
            staticClass: "c-pointer font-16 text-secondary",
            staticStyle: {float: "right", position: "absolute", top: "7px", right: "14px"},
            on: {click: clearValue}
        }, [_c("i", {staticClass: "fa fa-times text-grey-4"})]), _v(" "), _c("div", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: !field.isCompositeChild && !field.isCompositeParent && errors.has(field.name),
                expression: "(!field.isCompositeChild && !field.isCompositeParent) && errors.has(field.name)"
            }], staticClass: "text-danger position-absolute text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    }
});
Vtiger_Component_TextareaEdit = Vtiger_Component_StringEdit.extend({
    render: function anonymous() {
        with (this) return _c("span", [_c("textarea", {
            directives: [{
                name: "model",
                rawName: "v-model",
                value: recordValue,
                expression: "recordValue"
            }],
            staticClass: "form-control",
            attrs: {name: field.name},
            domProps: {value: recordValue},
            on: {
                input: function (e) {
                    e.target.composing || (recordValue = e.target.value)
                }
            }
        }), _v(" "), _c("span", {
            directives: [{
                name: "show",
                rawName: "v-show",
                value: errors.has(field.name),
                expression: "errors.has(field.name)"
            }], staticClass: "text-danger text-truncate"
        }, [_v(_s(errors.first(field.name)))])])
    }
});
Vtiger_Component_TimeEdit = Vtiger_Component_StringEdit.extend({
    render: function anonymous() {
        with (this) return _c("vds-timepicker", {
            attrs: {
                value: record.getEditViewValue(field.name),
                field: field,
                disabled: readonly || isFieldLocked
            }, model: {
                value: recordValue, callback: function (e) {
                    recordValue = e
                }, expression: "recordValue"
            }
        })
    }
});
var Vtiger_Component_TimeSpentDisplay = Vtiger_Component_StringDisplay.extend({
    methods: {
        fieldValue(e) {
            let {props: n, parent: t} = e, a = n.record.getRawValue(n.fieldname);
            if (a && !a.isUserFormat()) {
                let e = parseInt(a) / 60;
                return VTHelper.humanizeEstimate(e)
            }
            return a
        }
    }, render(e, n) {
        let t, {props: a, parent: r} = n;
        if (!a.componentName) return e("span", {}, []);
        t = App.getDynamicComponentInstance(a.componentName, a.componentModule);
        let p = t.options.methods, l = "";
        return p.fieldValue && (l = p.fieldValue.call(r, n)), e("span", {class: ["fieldDisplayValue"]}, [l])
    }
});
var Vtiger_Component_List_TimestringDisplay = Vtiger_Component_StringDisplay.extend({
    render(e, {props: t, parent: a}) {
        let n = a.convertMinutesToDHM(t.record.getDisplayValue(t.fieldname) / 60);
        return e("span", {class: ["fieldDisplayValue"], attrs: {"data-name": t.fieldname, title: n}}, [n])
    }
});
var Vtiger_Component_UrlDisplay = Vtiger_Component_BaseDisplay.extend({
    functional: !0, render(e, t) {
        let n, {props: a, parent: o} = t;
        if (a.component) n = a.component; else {
            if (!a.componentName) return e("span", {}, []);
            n = App.getDynamicComponentInstance(a.componentName, a.componentModule)
        }
        n.options.methods;
        let p = e("a", {
            attrs: {
                target: "_blank", href: (() => {
                    let e = a.record.getRawValue(a.fieldname), t = new RegExp("^((http|https|ftp)://)");
                    return e && !t.test(e) && (e = "http://" + e), e
                })()
            }, on: {
                click: function (e) {
                    e.stopPropagation()
                }
            }
        }, [a.record.getDisplayValue(a.fieldname)]);
        return e("span", {
            class: ["fieldDisplayValue", "text-break", "text-truncate"],
            attrs: {"data-name": a.fieldname}
        }, [p])
    }
});
Vtiger_Component_UserReferenceEdit = Vtiger_Component_ReferenceEdit.extend({
    render: function anonymous() {
        with (this) return _c("vds-user-reference", {
            attrs: {module: referenceModule, "field-name": getFieldName},
            model: {
                value: referenceRecord, callback: function (e) {
                    referenceRecord = e
                }, expression: "referenceRecord"
            }
        })
    }
});
